//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Tick
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Tick {
    pub initialized: bool,
    #[cfg_attr(feature = "serde", serde(rename = "liquidityNet"))]
    pub liquidity_net: i128,
    #[cfg_attr(feature = "serde", serde(rename = "liquidityGross"))]
    pub liquidity_gross: u128,
    #[cfg_attr(feature = "serde", serde(rename = "feeGrowthOutsideA"))]
    pub fee_growth_outside_a: u128,
    #[cfg_attr(feature = "serde", serde(rename = "feeGrowthOutsideB"))]
    pub fee_growth_outside_b: u128,
    #[cfg_attr(feature = "serde", serde(rename = "rewardGrowthsOutside"))]
    pub reward_growths_outside: [u128; 3],
}
impl Default for Tick {
    fn default() -> Self {
        Self {
            initialized: Default::default(),
            liquidity_net: Default::default(),
            liquidity_gross: Default::default(),
            fee_growth_outside_a: Default::default(),
            fee_growth_outside_b: Default::default(),
            reward_growths_outside: Default::default(),
        }
    }
}
impl Tick {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
