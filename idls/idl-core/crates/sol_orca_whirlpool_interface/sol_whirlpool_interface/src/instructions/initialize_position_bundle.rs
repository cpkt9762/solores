//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initializePositionBundle
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_POSITION_BUNDLE_IX_DISCM: [u8; 8] =
    [243u8, 68u8, 26u8, 179u8, 143u8, 138u8, 249u8, 98u8];
pub const INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN: usize = 9;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePositionBundleIxData {
    pub discriminator: [u8; 8],
}
impl Default for InitializePositionBundleIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_POSITION_BUNDLE_IX_DISCM,
        }
    }
}
impl InitializePositionBundleIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_POSITION_BUNDLE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializePositionBundleKeys {
    pub position_bundle: Pubkey,
    pub position_bundle_mint: Pubkey,
    pub position_bundle_token_account: Pubkey,
    pub position_bundle_owner: Pubkey,
    pub funder: Pubkey,
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<&[Pubkey]> for InitializePositionBundleKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            position_bundle: pubkeys[0],
            position_bundle_mint: pubkeys[1],
            position_bundle_token_account: pubkeys[2],
            position_bundle_owner: pubkeys[3],
            funder: pubkeys[4],
            token_program: pubkeys[5],
            system_program: pubkeys[6],
            rent: pubkeys[7],
            associated_token_program: pubkeys[8],
        }
    }
}
impl InitializePositionBundleKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.position_bundle,
            self.position_bundle_mint,
            self.position_bundle_token_account,
            self.position_bundle_owner,
            self.funder,
            self.token_program,
            self.system_program,
            self.rent,
            self.associated_token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "positionBundle", self.position_bundle),
                format!(
                    "\"{}\":\"{}\"",
                    "positionBundleMint", self.position_bundle_mint
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "positionBundleTokenAccount", self.position_bundle_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "positionBundleOwner", self.position_bundle_owner
                ),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent),
                format!(
                    "\"{}\":\"{}\"",
                    "associatedTokenProgram", self.associated_token_program
                )
            ]
            .join(",")
        )
    }
}
impl From<InitializePositionBundleKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializePositionBundleKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.position_bundle, false),
            solana_instruction::AccountMeta::new(keys.position_bundle_mint, false),
            solana_instruction::AccountMeta::new(keys.position_bundle_token_account, false),
            solana_instruction::AccountMeta::new(keys.position_bundle_owner, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
        ]
    }
}
pub fn initialize_position_bundle_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializePositionBundleKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN] =
        keys.into();
    let args = InitializePositionBundleIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_position_bundle_ix(
    keys: InitializePositionBundleKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_position_bundle_ix_with_program_id(crate::ID, keys)
}
