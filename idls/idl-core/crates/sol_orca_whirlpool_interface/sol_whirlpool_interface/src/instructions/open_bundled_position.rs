//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: openBundledPosition
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const OPEN_BUNDLED_POSITION_IX_DISCM: [u8; 8] =
    [6u8, 235u8, 188u8, 230u8, 66u8, 215u8, 209u8, 189u8];
pub const OPEN_BUNDLED_POSITION_IX_ACCOUNTS_LEN: usize = 8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OpenBundledPositionIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "bundleIndex"))]
    pub bundle_index: u16,
    #[cfg_attr(feature = "serde", serde(rename = "tickLowerIndex"))]
    pub tick_lower_index: i32,
    #[cfg_attr(feature = "serde", serde(rename = "tickUpperIndex"))]
    pub tick_upper_index: i32,
}
impl Default for OpenBundledPositionIxData {
    fn default() -> Self {
        Self {
            discriminator: OPEN_BUNDLED_POSITION_IX_DISCM,
            bundle_index: Default::default(),
            tick_lower_index: Default::default(),
            tick_upper_index: Default::default(),
        }
    }
}
impl OpenBundledPositionIxData {
    pub fn new(bundle_index: u16, tick_lower_index: i32, tick_upper_index: i32) -> Self {
        Self {
            discriminator: Self::discriminator(),
            bundle_index,
            tick_lower_index,
            tick_upper_index,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        OPEN_BUNDLED_POSITION_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "bundle_index", self.bundle_index),
                format!("\"{}\":{}", "tick_lower_index", self.tick_lower_index),
                format!("\"{}\":{}", "tick_upper_index", self.tick_upper_index)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct OpenBundledPositionKeys {
    pub bundled_position: Pubkey,
    pub position_bundle: Pubkey,
    pub position_bundle_token_account: Pubkey,
    pub position_bundle_authority: Pubkey,
    pub whirlpool: Pubkey,
    pub funder: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
}
impl From<&[Pubkey]> for OpenBundledPositionKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            bundled_position: pubkeys[0],
            position_bundle: pubkeys[1],
            position_bundle_token_account: pubkeys[2],
            position_bundle_authority: pubkeys[3],
            whirlpool: pubkeys[4],
            funder: pubkeys[5],
            system_program: pubkeys[6],
            rent: pubkeys[7],
        }
    }
}
impl OpenBundledPositionKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.bundled_position,
            self.position_bundle,
            self.position_bundle_token_account,
            self.position_bundle_authority,
            self.whirlpool,
            self.funder,
            self.system_program,
            self.rent,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "bundledPosition", self.bundled_position),
                format!("\"{}\":\"{}\"", "positionBundle", self.position_bundle),
                format!(
                    "\"{}\":\"{}\"",
                    "positionBundleTokenAccount", self.position_bundle_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "positionBundleAuthority", self.position_bundle_authority
                ),
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent)
            ]
            .join(",")
        )
    }
}
impl From<OpenBundledPositionKeys>
    for [solana_instruction::AccountMeta; OPEN_BUNDLED_POSITION_IX_ACCOUNTS_LEN]
{
    fn from(keys: OpenBundledPositionKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.bundled_position, false),
            solana_instruction::AccountMeta::new(keys.position_bundle, false),
            solana_instruction::AccountMeta::new(keys.position_bundle_token_account, false),
            solana_instruction::AccountMeta::new(keys.position_bundle_authority, false),
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
        ]
    }
}
pub fn open_bundled_position_ix_with_program_id(
    program_id: Pubkey,
    keys: OpenBundledPositionKeys,
    args: OpenBundledPositionIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; OPEN_BUNDLED_POSITION_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn open_bundled_position_ix(
    keys: OpenBundledPositionKeys,
    args: OpenBundledPositionIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    open_bundled_position_ix_with_program_id(crate::ID, keys, args)
}
