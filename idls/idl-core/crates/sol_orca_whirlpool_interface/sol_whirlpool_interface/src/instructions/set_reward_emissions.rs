//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: setRewardEmissions
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_REWARD_EMISSIONS_IX_DISCM: [u8; 8] =
    [31u8, 218u8, 226u8, 123u8, 177u8, 61u8, 159u8, 176u8];
pub const SET_REWARD_EMISSIONS_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetRewardEmissionsIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "rewardIndex"))]
    pub reward_index: u8,
    #[cfg_attr(feature = "serde", serde(rename = "emissionsPerSecondX64"))]
    pub emissions_per_second_x_64: u128,
}
impl Default for SetRewardEmissionsIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_REWARD_EMISSIONS_IX_DISCM,
            reward_index: Default::default(),
            emissions_per_second_x_64: Default::default(),
        }
    }
}
impl SetRewardEmissionsIxData {
    pub fn new(reward_index: u8, emissions_per_second_x_64: u128) -> Self {
        Self {
            discriminator: Self::discriminator(),
            reward_index,
            emissions_per_second_x_64,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SET_REWARD_EMISSIONS_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "reward_index", self.reward_index),
                format!(
                    "\"{}\":{}",
                    "emissions_per_second_x_64", self.emissions_per_second_x_64
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SetRewardEmissionsKeys {
    pub whirlpool: Pubkey,
    pub reward_authority: Pubkey,
    pub reward_vault: Pubkey,
}
impl From<&[Pubkey]> for SetRewardEmissionsKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpool: pubkeys[0],
            reward_authority: pubkeys[1],
            reward_vault: pubkeys[2],
        }
    }
}
impl SetRewardEmissionsKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.whirlpool, self.reward_authority, self.reward_vault]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!("\"{}\":\"{}\"", "rewardAuthority", self.reward_authority),
                format!("\"{}\":\"{}\"", "rewardVault", self.reward_vault)
            ]
            .join(",")
        )
    }
}
impl From<SetRewardEmissionsKeys>
    for [solana_instruction::AccountMeta; SET_REWARD_EMISSIONS_IX_ACCOUNTS_LEN]
{
    fn from(keys: SetRewardEmissionsKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.reward_authority, false),
            solana_instruction::AccountMeta::new(keys.reward_vault, false),
        ]
    }
}
pub fn set_reward_emissions_ix_with_program_id(
    program_id: Pubkey,
    keys: SetRewardEmissionsKeys,
    args: SetRewardEmissionsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SET_REWARD_EMISSIONS_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_reward_emissions_ix(
    keys: SetRewardEmissionsKeys,
    args: SetRewardEmissionsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_reward_emissions_ix_with_program_id(crate::ID, keys, args)
}
