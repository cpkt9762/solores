//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: twoHopSwap
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const TWO_HOP_SWAP_IX_DISCM: [u8; 8] = [147u8, 44u8, 53u8, 153u8, 51u8, 79u8, 60u8, 26u8];
pub const TWO_HOP_SWAP_IX_ACCOUNTS_LEN: usize = 20;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TwoHopSwapIxData {
    pub discriminator: [u8; 8],
    pub amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "otherAmountThreshold"))]
    pub other_amount_threshold: u64,
    #[cfg_attr(feature = "serde", serde(rename = "amountSpecifiedIsInput"))]
    pub amount_specified_is_input: bool,
    #[cfg_attr(feature = "serde", serde(rename = "aToBOne"))]
    pub a_to_b_one: bool,
    #[cfg_attr(feature = "serde", serde(rename = "aToBTwo"))]
    pub a_to_b_two: bool,
    #[cfg_attr(feature = "serde", serde(rename = "sqrtPriceLimitOne"))]
    pub sqrt_price_limit_one: u128,
    #[cfg_attr(feature = "serde", serde(rename = "sqrtPriceLimitTwo"))]
    pub sqrt_price_limit_two: u128,
}
impl Default for TwoHopSwapIxData {
    fn default() -> Self {
        Self {
            discriminator: TWO_HOP_SWAP_IX_DISCM,
            amount: Default::default(),
            other_amount_threshold: Default::default(),
            amount_specified_is_input: Default::default(),
            a_to_b_one: Default::default(),
            a_to_b_two: Default::default(),
            sqrt_price_limit_one: Default::default(),
            sqrt_price_limit_two: Default::default(),
        }
    }
}
impl TwoHopSwapIxData {
    pub fn new(
        amount: u64,
        other_amount_threshold: u64,
        amount_specified_is_input: bool,
        a_to_b_one: bool,
        a_to_b_two: bool,
        sqrt_price_limit_one: u128,
        sqrt_price_limit_two: u128,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount,
            other_amount_threshold,
            amount_specified_is_input,
            a_to_b_one,
            a_to_b_two,
            sqrt_price_limit_one,
            sqrt_price_limit_two,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        TWO_HOP_SWAP_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "amount", self.amount),
                format!(
                    "\"{}\":{}",
                    "other_amount_threshold", self.other_amount_threshold
                ),
                format!(
                    "\"{}\":{}",
                    "amount_specified_is_input", self.amount_specified_is_input
                ),
                format!("\"{}\":{}", "a_to_b_one", self.a_to_b_one),
                format!("\"{}\":{}", "a_to_b_two", self.a_to_b_two),
                format!(
                    "\"{}\":{}",
                    "sqrt_price_limit_one", self.sqrt_price_limit_one
                ),
                format!(
                    "\"{}\":{}",
                    "sqrt_price_limit_two", self.sqrt_price_limit_two
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct TwoHopSwapKeys {
    pub token_program: Pubkey,
    pub token_authority: Pubkey,
    pub whirlpool_one: Pubkey,
    pub whirlpool_two: Pubkey,
    pub token_owner_account_one_a: Pubkey,
    pub token_vault_one_a: Pubkey,
    pub token_owner_account_one_b: Pubkey,
    pub token_vault_one_b: Pubkey,
    pub token_owner_account_two_a: Pubkey,
    pub token_vault_two_a: Pubkey,
    pub token_owner_account_two_b: Pubkey,
    pub token_vault_two_b: Pubkey,
    pub tick_array_one_0: Pubkey,
    pub tick_array_one_1: Pubkey,
    pub tick_array_one_2: Pubkey,
    pub tick_array_two_0: Pubkey,
    pub tick_array_two_1: Pubkey,
    pub tick_array_two_2: Pubkey,
    pub oracle_one: Pubkey,
    pub oracle_two: Pubkey,
}
impl From<&[Pubkey]> for TwoHopSwapKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            token_program: pubkeys[0],
            token_authority: pubkeys[1],
            whirlpool_one: pubkeys[2],
            whirlpool_two: pubkeys[3],
            token_owner_account_one_a: pubkeys[4],
            token_vault_one_a: pubkeys[5],
            token_owner_account_one_b: pubkeys[6],
            token_vault_one_b: pubkeys[7],
            token_owner_account_two_a: pubkeys[8],
            token_vault_two_a: pubkeys[9],
            token_owner_account_two_b: pubkeys[10],
            token_vault_two_b: pubkeys[11],
            tick_array_one_0: pubkeys[12],
            tick_array_one_1: pubkeys[13],
            tick_array_one_2: pubkeys[14],
            tick_array_two_0: pubkeys[15],
            tick_array_two_1: pubkeys[16],
            tick_array_two_2: pubkeys[17],
            oracle_one: pubkeys[18],
            oracle_two: pubkeys[19],
        }
    }
}
impl TwoHopSwapKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.token_program,
            self.token_authority,
            self.whirlpool_one,
            self.whirlpool_two,
            self.token_owner_account_one_a,
            self.token_vault_one_a,
            self.token_owner_account_one_b,
            self.token_vault_one_b,
            self.token_owner_account_two_a,
            self.token_vault_two_a,
            self.token_owner_account_two_b,
            self.token_vault_two_b,
            self.tick_array_one_0,
            self.tick_array_one_1,
            self.tick_array_one_2,
            self.tick_array_two_0,
            self.tick_array_two_1,
            self.tick_array_two_2,
            self.oracle_one,
            self.oracle_two,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program),
                format!("\"{}\":\"{}\"", "tokenAuthority", self.token_authority),
                format!("\"{}\":\"{}\"", "whirlpoolOne", self.whirlpool_one),
                format!("\"{}\":\"{}\"", "whirlpoolTwo", self.whirlpool_two),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountOneA", self.token_owner_account_one_a
                ),
                format!("\"{}\":\"{}\"", "tokenVaultOneA", self.token_vault_one_a),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountOneB", self.token_owner_account_one_b
                ),
                format!("\"{}\":\"{}\"", "tokenVaultOneB", self.token_vault_one_b),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountTwoA", self.token_owner_account_two_a
                ),
                format!("\"{}\":\"{}\"", "tokenVaultTwoA", self.token_vault_two_a),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountTwoB", self.token_owner_account_two_b
                ),
                format!("\"{}\":\"{}\"", "tokenVaultTwoB", self.token_vault_two_b),
                format!("\"{}\":\"{}\"", "tickArrayOne0", self.tick_array_one_0),
                format!("\"{}\":\"{}\"", "tickArrayOne1", self.tick_array_one_1),
                format!("\"{}\":\"{}\"", "tickArrayOne2", self.tick_array_one_2),
                format!("\"{}\":\"{}\"", "tickArrayTwo0", self.tick_array_two_0),
                format!("\"{}\":\"{}\"", "tickArrayTwo1", self.tick_array_two_1),
                format!("\"{}\":\"{}\"", "tickArrayTwo2", self.tick_array_two_2),
                format!("\"{}\":\"{}\"", "oracleOne", self.oracle_one),
                format!("\"{}\":\"{}\"", "oracleTwo", self.oracle_two)
            ]
            .join(",")
        )
    }
}
impl From<TwoHopSwapKeys> for [solana_instruction::AccountMeta; TWO_HOP_SWAP_IX_ACCOUNTS_LEN] {
    fn from(keys: TwoHopSwapKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_authority, false),
            solana_instruction::AccountMeta::new(keys.whirlpool_one, false),
            solana_instruction::AccountMeta::new(keys.whirlpool_two, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_one_a, false),
            solana_instruction::AccountMeta::new(keys.token_vault_one_a, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_one_b, false),
            solana_instruction::AccountMeta::new(keys.token_vault_one_b, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_two_a, false),
            solana_instruction::AccountMeta::new(keys.token_vault_two_a, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_two_b, false),
            solana_instruction::AccountMeta::new(keys.token_vault_two_b, false),
            solana_instruction::AccountMeta::new(keys.tick_array_one_0, false),
            solana_instruction::AccountMeta::new(keys.tick_array_one_1, false),
            solana_instruction::AccountMeta::new(keys.tick_array_one_2, false),
            solana_instruction::AccountMeta::new(keys.tick_array_two_0, false),
            solana_instruction::AccountMeta::new(keys.tick_array_two_1, false),
            solana_instruction::AccountMeta::new(keys.tick_array_two_2, false),
            solana_instruction::AccountMeta::new(keys.oracle_one, false),
            solana_instruction::AccountMeta::new(keys.oracle_two, false),
        ]
    }
}
pub fn two_hop_swap_ix_with_program_id(
    program_id: Pubkey,
    keys: TwoHopSwapKeys,
    args: TwoHopSwapIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; TWO_HOP_SWAP_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn two_hop_swap_ix(
    keys: TwoHopSwapKeys,
    args: TwoHopSwapIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    two_hop_swap_ix_with_program_id(crate::ID, keys, args)
}
