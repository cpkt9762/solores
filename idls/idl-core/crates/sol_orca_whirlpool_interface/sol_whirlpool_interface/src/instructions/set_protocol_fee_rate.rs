//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: setProtocolFeeRate
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_PROTOCOL_FEE_RATE_IX_DISCM: [u8; 8] =
    [153u8, 34u8, 118u8, 110u8, 55u8, 225u8, 91u8, 152u8];
pub const SET_PROTOCOL_FEE_RATE_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetProtocolFeeRateIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "protocolFeeRate"))]
    pub protocol_fee_rate: u16,
}
impl Default for SetProtocolFeeRateIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_PROTOCOL_FEE_RATE_IX_DISCM,
            protocol_fee_rate: Default::default(),
        }
    }
}
impl SetProtocolFeeRateIxData {
    pub fn new(protocol_fee_rate: u16) -> Self {
        Self {
            discriminator: Self::discriminator(),
            protocol_fee_rate,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SET_PROTOCOL_FEE_RATE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "protocol_fee_rate", self.protocol_fee_rate)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SetProtocolFeeRateKeys {
    pub whirlpools_config: Pubkey,
    pub whirlpool: Pubkey,
    pub fee_authority: Pubkey,
}
impl From<&[Pubkey]> for SetProtocolFeeRateKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpools_config: pubkeys[0],
            whirlpool: pubkeys[1],
            fee_authority: pubkeys[2],
        }
    }
}
impl SetProtocolFeeRateKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.whirlpools_config, self.whirlpool, self.fee_authority]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpoolsConfig", self.whirlpools_config),
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!("\"{}\":\"{}\"", "feeAuthority", self.fee_authority)
            ]
            .join(",")
        )
    }
}
impl From<SetProtocolFeeRateKeys>
    for [solana_instruction::AccountMeta; SET_PROTOCOL_FEE_RATE_IX_ACCOUNTS_LEN]
{
    fn from(keys: SetProtocolFeeRateKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpools_config, false),
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.fee_authority, false),
        ]
    }
}
pub fn set_protocol_fee_rate_ix_with_program_id(
    program_id: Pubkey,
    keys: SetProtocolFeeRateKeys,
    args: SetProtocolFeeRateIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SET_PROTOCOL_FEE_RATE_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_protocol_fee_rate_ix(
    keys: SetProtocolFeeRateKeys,
    args: SetProtocolFeeRateIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_protocol_fee_rate_ix_with_program_id(crate::ID, keys, args)
}
