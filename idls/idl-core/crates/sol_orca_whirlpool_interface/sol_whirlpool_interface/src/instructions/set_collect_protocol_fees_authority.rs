//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: setCollectProtocolFeesAuthority
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_DISCM: [u8; 8] =
    [190u8, 28u8, 0u8, 66u8, 247u8, 141u8, 108u8, 82u8];
pub const SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetCollectProtocolFeesAuthorityIxData {
    pub discriminator: [u8; 8],
}
impl Default for SetCollectProtocolFeesAuthorityIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_DISCM,
        }
    }
}
impl SetCollectProtocolFeesAuthorityIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SetCollectProtocolFeesAuthorityKeys {
    pub whirlpools_config: Pubkey,
    pub collect_protocol_fees_authority: Pubkey,
    pub new_collect_protocol_fees_authority: Pubkey,
}
impl From<&[Pubkey]> for SetCollectProtocolFeesAuthorityKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpools_config: pubkeys[0],
            collect_protocol_fees_authority: pubkeys[1],
            new_collect_protocol_fees_authority: pubkeys[2],
        }
    }
}
impl SetCollectProtocolFeesAuthorityKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.whirlpools_config,
            self.collect_protocol_fees_authority,
            self.new_collect_protocol_fees_authority,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpoolsConfig", self.whirlpools_config),
                format!(
                    "\"{}\":\"{}\"",
                    "collectProtocolFeesAuthority", self.collect_protocol_fees_authority
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "newCollectProtocolFeesAuthority", self.new_collect_protocol_fees_authority
                )
            ]
            .join(",")
        )
    }
}
impl From<SetCollectProtocolFeesAuthorityKeys>
    for [solana_instruction::AccountMeta; SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_ACCOUNTS_LEN]
{
    fn from(keys: SetCollectProtocolFeesAuthorityKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpools_config, false),
            solana_instruction::AccountMeta::new(keys.collect_protocol_fees_authority, false),
            solana_instruction::AccountMeta::new(keys.new_collect_protocol_fees_authority, false),
        ]
    }
}
pub fn set_collect_protocol_fees_authority_ix_with_program_id(
    program_id: Pubkey,
    keys: SetCollectProtocolFeesAuthorityKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta;
        SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_ACCOUNTS_LEN] = keys.into();
    let args = SetCollectProtocolFeesAuthorityIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_collect_protocol_fees_authority_ix(
    keys: SetCollectProtocolFeesAuthorityKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_collect_protocol_fees_authority_ix_with_program_id(crate::ID, keys)
}
