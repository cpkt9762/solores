//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initializeFeeTier
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_FEE_TIER_IX_DISCM: [u8; 8] =
    [124u8, 53u8, 59u8, 210u8, 212u8, 6u8, 136u8, 3u8];
pub const INITIALIZE_FEE_TIER_IX_ACCOUNTS_LEN: usize = 5;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeFeeTierIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "tickSpacing"))]
    pub tick_spacing: u16,
    #[cfg_attr(feature = "serde", serde(rename = "defaultFeeRate"))]
    pub default_fee_rate: u16,
}
impl Default for InitializeFeeTierIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_FEE_TIER_IX_DISCM,
            tick_spacing: Default::default(),
            default_fee_rate: Default::default(),
        }
    }
}
impl InitializeFeeTierIxData {
    pub fn new(tick_spacing: u16, default_fee_rate: u16) -> Self {
        Self {
            discriminator: Self::discriminator(),
            tick_spacing,
            default_fee_rate,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_FEE_TIER_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "tick_spacing", self.tick_spacing),
                format!("\"{}\":{}", "default_fee_rate", self.default_fee_rate)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializeFeeTierKeys {
    pub config: Pubkey,
    pub fee_tier: Pubkey,
    pub funder: Pubkey,
    pub fee_authority: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for InitializeFeeTierKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            fee_tier: pubkeys[1],
            funder: pubkeys[2],
            fee_authority: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl InitializeFeeTierKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.config,
            self.fee_tier,
            self.funder,
            self.fee_authority,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "feeTier", self.fee_tier),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "feeAuthority", self.fee_authority),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<InitializeFeeTierKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_FEE_TIER_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializeFeeTierKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.fee_tier, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.fee_authority, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn initialize_fee_tier_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeFeeTierKeys,
    args: InitializeFeeTierIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_FEE_TIER_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_fee_tier_ix(
    keys: InitializeFeeTierKeys,
    args: InitializeFeeTierIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_fee_tier_ix_with_program_id(crate::ID, keys, args)
}
