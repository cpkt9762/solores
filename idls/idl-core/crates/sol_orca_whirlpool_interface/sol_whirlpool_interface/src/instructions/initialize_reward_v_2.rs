//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initializeRewardV2
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_REWARD_V_2_IX_DISCM: [u8; 8] =
    [22u8, 135u8, 193u8, 98u8, 131u8, 64u8, 153u8, 80u8];
pub const INITIALIZE_REWARD_V_2_IX_ACCOUNTS_LEN: usize = 9;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeRewardV2IxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "rewardIndex"))]
    pub reward_index: u8,
}
impl Default for InitializeRewardV2IxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_REWARD_V_2_IX_DISCM,
            reward_index: Default::default(),
        }
    }
}
impl InitializeRewardV2IxData {
    pub fn new(reward_index: u8) -> Self {
        Self {
            discriminator: Self::discriminator(),
            reward_index,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_REWARD_V_2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "reward_index", self.reward_index)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializeRewardV2Keys {
    pub reward_authority: Pubkey,
    pub funder: Pubkey,
    pub whirlpool: Pubkey,
    pub reward_mint: Pubkey,
    pub reward_token_badge: Pubkey,
    pub reward_vault: Pubkey,
    pub reward_token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
}
impl From<&[Pubkey]> for InitializeRewardV2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            reward_authority: pubkeys[0],
            funder: pubkeys[1],
            whirlpool: pubkeys[2],
            reward_mint: pubkeys[3],
            reward_token_badge: pubkeys[4],
            reward_vault: pubkeys[5],
            reward_token_program: pubkeys[6],
            system_program: pubkeys[7],
            rent: pubkeys[8],
        }
    }
}
impl InitializeRewardV2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.reward_authority,
            self.funder,
            self.whirlpool,
            self.reward_mint,
            self.reward_token_badge,
            self.reward_vault,
            self.reward_token_program,
            self.system_program,
            self.rent,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "rewardAuthority", self.reward_authority),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!("\"{}\":\"{}\"", "rewardMint", self.reward_mint),
                format!("\"{}\":\"{}\"", "rewardTokenBadge", self.reward_token_badge),
                format!("\"{}\":\"{}\"", "rewardVault", self.reward_vault),
                format!(
                    "\"{}\":\"{}\"",
                    "rewardTokenProgram", self.reward_token_program
                ),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent)
            ]
            .join(",")
        )
    }
}
impl From<InitializeRewardV2Keys>
    for [solana_instruction::AccountMeta; INITIALIZE_REWARD_V_2_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializeRewardV2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.reward_authority, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.reward_mint, false),
            solana_instruction::AccountMeta::new(keys.reward_token_badge, false),
            solana_instruction::AccountMeta::new(keys.reward_vault, false),
            solana_instruction::AccountMeta::new(keys.reward_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
        ]
    }
}
pub fn initialize_reward_v_2_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeRewardV2Keys,
    args: InitializeRewardV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_REWARD_V_2_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_reward_v_2_ix(
    keys: InitializeRewardV2Keys,
    args: InitializeRewardV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_reward_v_2_ix_with_program_id(crate::ID, keys, args)
}
