//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: collectFees
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const COLLECT_FEES_IX_DISCM: [u8; 8] = [85u8, 147u8, 189u8, 150u8, 124u8, 131u8, 255u8, 243u8];
pub const COLLECT_FEES_IX_ACCOUNTS_LEN: usize = 9;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectFeesIxData {
    pub discriminator: [u8; 8],
}
impl Default for CollectFeesIxData {
    fn default() -> Self {
        Self {
            discriminator: COLLECT_FEES_IX_DISCM,
        }
    }
}
impl CollectFeesIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        COLLECT_FEES_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CollectFeesKeys {
    pub whirlpool: Pubkey,
    pub position_authority: Pubkey,
    pub position: Pubkey,
    pub position_token_account: Pubkey,
    pub token_owner_account_a: Pubkey,
    pub token_vault_a: Pubkey,
    pub token_owner_account_b: Pubkey,
    pub token_vault_b: Pubkey,
    pub token_program: Pubkey,
}
impl From<&[Pubkey]> for CollectFeesKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpool: pubkeys[0],
            position_authority: pubkeys[1],
            position: pubkeys[2],
            position_token_account: pubkeys[3],
            token_owner_account_a: pubkeys[4],
            token_vault_a: pubkeys[5],
            token_owner_account_b: pubkeys[6],
            token_vault_b: pubkeys[7],
            token_program: pubkeys[8],
        }
    }
}
impl CollectFeesKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.whirlpool,
            self.position_authority,
            self.position,
            self.position_token_account,
            self.token_owner_account_a,
            self.token_vault_a,
            self.token_owner_account_b,
            self.token_vault_b,
            self.token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!(
                    "\"{}\":\"{}\"",
                    "positionAuthority", self.position_authority
                ),
                format!("\"{}\":\"{}\"", "position", self.position),
                format!(
                    "\"{}\":\"{}\"",
                    "positionTokenAccount", self.position_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountA", self.token_owner_account_a
                ),
                format!("\"{}\":\"{}\"", "tokenVaultA", self.token_vault_a),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountB", self.token_owner_account_b
                ),
                format!("\"{}\":\"{}\"", "tokenVaultB", self.token_vault_b),
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program)
            ]
            .join(",")
        )
    }
}
impl From<CollectFeesKeys> for [solana_instruction::AccountMeta; COLLECT_FEES_IX_ACCOUNTS_LEN] {
    fn from(keys: CollectFeesKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.position_authority, false),
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.position_token_account, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_a, false),
            solana_instruction::AccountMeta::new(keys.token_vault_a, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_b, false),
            solana_instruction::AccountMeta::new(keys.token_vault_b, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
        ]
    }
}
pub fn collect_fees_ix_with_program_id(
    program_id: Pubkey,
    keys: CollectFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; COLLECT_FEES_IX_ACCOUNTS_LEN] = keys.into();
    let args = CollectFeesIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn collect_fees_ix(
    keys: CollectFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    collect_fees_ix_with_program_id(crate::ID, keys)
}
