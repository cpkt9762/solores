//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: setRewardAuthorityBySuperAuthority
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_DISCM: [u8; 8] =
    [9u8, 64u8, 113u8, 173u8, 188u8, 254u8, 71u8, 246u8];
pub const SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_ACCOUNTS_LEN: usize = 4;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetRewardAuthorityBySuperAuthorityIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "rewardIndex"))]
    pub reward_index: u8,
}
impl Default for SetRewardAuthorityBySuperAuthorityIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_DISCM,
            reward_index: Default::default(),
        }
    }
}
impl SetRewardAuthorityBySuperAuthorityIxData {
    pub fn new(reward_index: u8) -> Self {
        Self {
            discriminator: Self::discriminator(),
            reward_index,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "reward_index", self.reward_index)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SetRewardAuthorityBySuperAuthorityKeys {
    pub whirlpools_config: Pubkey,
    pub whirlpool: Pubkey,
    pub reward_emissions_super_authority: Pubkey,
    pub new_reward_authority: Pubkey,
}
impl From<&[Pubkey]> for SetRewardAuthorityBySuperAuthorityKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpools_config: pubkeys[0],
            whirlpool: pubkeys[1],
            reward_emissions_super_authority: pubkeys[2],
            new_reward_authority: pubkeys[3],
        }
    }
}
impl SetRewardAuthorityBySuperAuthorityKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.whirlpools_config,
            self.whirlpool,
            self.reward_emissions_super_authority,
            self.new_reward_authority,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpoolsConfig", self.whirlpools_config),
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!(
                    "\"{}\":\"{}\"",
                    "rewardEmissionsSuperAuthority", self.reward_emissions_super_authority
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "newRewardAuthority", self.new_reward_authority
                )
            ]
            .join(",")
        )
    }
}
impl From<SetRewardAuthorityBySuperAuthorityKeys>
    for [solana_instruction::AccountMeta; SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_ACCOUNTS_LEN]
{
    fn from(keys: SetRewardAuthorityBySuperAuthorityKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpools_config, false),
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.reward_emissions_super_authority, false),
            solana_instruction::AccountMeta::new(keys.new_reward_authority, false),
        ]
    }
}
pub fn set_reward_authority_by_super_authority_ix_with_program_id(
    program_id: Pubkey,
    keys: SetRewardAuthorityBySuperAuthorityKeys,
    args: SetRewardAuthorityBySuperAuthorityIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta;
        SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_reward_authority_by_super_authority_ix(
    keys: SetRewardAuthorityBySuperAuthorityKeys,
    args: SetRewardAuthorityBySuperAuthorityIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_reward_authority_by_super_authority_ix_with_program_id(crate::ID, keys, args)
}
