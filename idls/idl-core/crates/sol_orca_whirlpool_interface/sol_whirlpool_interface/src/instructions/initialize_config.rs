//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initializeConfig
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_CONFIG_IX_DISCM: [u8; 8] =
    [105u8, 201u8, 82u8, 58u8, 216u8, 21u8, 92u8, 163u8];
pub const INITIALIZE_CONFIG_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeConfigIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "feeAuthority"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fee_authority: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "collectProtocolFeesAuthority"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub collect_protocol_fees_authority: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "rewardEmissionsSuperAuthority"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub reward_emissions_super_authority: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "defaultProtocolFeeRate"))]
    pub default_protocol_fee_rate: u16,
}
impl Default for InitializeConfigIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_CONFIG_IX_DISCM,
            fee_authority: Default::default(),
            collect_protocol_fees_authority: Default::default(),
            reward_emissions_super_authority: Default::default(),
            default_protocol_fee_rate: Default::default(),
        }
    }
}
impl InitializeConfigIxData {
    pub fn new(
        fee_authority: Pubkey,
        collect_protocol_fees_authority: Pubkey,
        reward_emissions_super_authority: Pubkey,
        default_protocol_fee_rate: u16,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            fee_authority,
            collect_protocol_fees_authority,
            reward_emissions_super_authority,
            default_protocol_fee_rate,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_CONFIG_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "fee_authority", self.fee_authority),
                format!(
                    "\"{}\":{}",
                    "collect_protocol_fees_authority", self.collect_protocol_fees_authority
                ),
                format!(
                    "\"{}\":{}",
                    "reward_emissions_super_authority", self.reward_emissions_super_authority
                ),
                format!(
                    "\"{}\":{}",
                    "default_protocol_fee_rate", self.default_protocol_fee_rate
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializeConfigKeys {
    pub config: Pubkey,
    pub funder: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for InitializeConfigKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            funder: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl InitializeConfigKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.config, self.funder, self.system_program]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<InitializeConfigKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_CONFIG_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializeConfigKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn initialize_config_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeConfigKeys,
    args: InitializeConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_config_ix(
    keys: InitializeConfigKeys,
    args: InitializeConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_config_ix_with_program_id(crate::ID, keys, args)
}
