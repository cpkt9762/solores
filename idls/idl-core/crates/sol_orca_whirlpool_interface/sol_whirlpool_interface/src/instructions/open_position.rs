//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: openPosition
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const OPEN_POSITION_IX_DISCM: [u8; 8] = [48u8, 10u8, 100u8, 106u8, 48u8, 102u8, 162u8, 84u8];
pub const OPEN_POSITION_IX_ACCOUNTS_LEN: usize = 10;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OpenPositionIxData {
    pub discriminator: [u8; 8],
    pub bumps: crate::types::OpenPositionBumps,
    #[cfg_attr(feature = "serde", serde(rename = "tickLowerIndex"))]
    pub tick_lower_index: i32,
    #[cfg_attr(feature = "serde", serde(rename = "tickUpperIndex"))]
    pub tick_upper_index: i32,
}
impl Default for OpenPositionIxData {
    fn default() -> Self {
        Self {
            discriminator: OPEN_POSITION_IX_DISCM,
            bumps: Default::default(),
            tick_lower_index: Default::default(),
            tick_upper_index: Default::default(),
        }
    }
}
impl OpenPositionIxData {
    pub fn new(
        bumps: crate::types::OpenPositionBumps,
        tick_lower_index: i32,
        tick_upper_index: i32,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            bumps,
            tick_lower_index,
            tick_upper_index,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        OPEN_POSITION_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "bumps",
                    serde_json::to_string(&self.bumps).unwrap_or_else(|_| "null".to_string())
                ),
                format!("\"{}\":{}", "tick_lower_index", self.tick_lower_index),
                format!("\"{}\":{}", "tick_upper_index", self.tick_upper_index)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct OpenPositionKeys {
    pub funder: Pubkey,
    pub owner: Pubkey,
    pub position: Pubkey,
    pub position_mint: Pubkey,
    pub position_token_account: Pubkey,
    pub whirlpool: Pubkey,
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<&[Pubkey]> for OpenPositionKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            funder: pubkeys[0],
            owner: pubkeys[1],
            position: pubkeys[2],
            position_mint: pubkeys[3],
            position_token_account: pubkeys[4],
            whirlpool: pubkeys[5],
            token_program: pubkeys[6],
            system_program: pubkeys[7],
            rent: pubkeys[8],
            associated_token_program: pubkeys[9],
        }
    }
}
impl OpenPositionKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.funder,
            self.owner,
            self.position,
            self.position_mint,
            self.position_token_account,
            self.whirlpool,
            self.token_program,
            self.system_program,
            self.rent,
            self.associated_token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "owner", self.owner),
                format!("\"{}\":\"{}\"", "position", self.position),
                format!("\"{}\":\"{}\"", "positionMint", self.position_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "positionTokenAccount", self.position_token_account
                ),
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent),
                format!(
                    "\"{}\":\"{}\"",
                    "associatedTokenProgram", self.associated_token_program
                )
            ]
            .join(",")
        )
    }
}
impl From<OpenPositionKeys> for [solana_instruction::AccountMeta; OPEN_POSITION_IX_ACCOUNTS_LEN] {
    fn from(keys: OpenPositionKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.position_mint, false),
            solana_instruction::AccountMeta::new(keys.position_token_account, false),
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
        ]
    }
}
pub fn open_position_ix_with_program_id(
    program_id: Pubkey,
    keys: OpenPositionKeys,
    args: OpenPositionIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; OPEN_POSITION_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn open_position_ix(
    keys: OpenPositionKeys,
    args: OpenPositionIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    open_position_ix_with_program_id(crate::ID, keys, args)
}
