//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initializePool
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_POOL_IX_DISCM: [u8; 8] = [95u8, 77u8, 23u8, 154u8, 22u8, 41u8, 81u8, 44u8];
pub const INITIALIZE_POOL_IX_ACCOUNTS_LEN: usize = 11;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePoolIxData {
    pub discriminator: [u8; 8],
    pub bumps: crate::types::WhirlpoolBumps,
    #[cfg_attr(feature = "serde", serde(rename = "tickSpacing"))]
    pub tick_spacing: u16,
    #[cfg_attr(feature = "serde", serde(rename = "initialSqrtPrice"))]
    pub initial_sqrt_price: u128,
}
impl Default for InitializePoolIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_POOL_IX_DISCM,
            bumps: Default::default(),
            tick_spacing: Default::default(),
            initial_sqrt_price: Default::default(),
        }
    }
}
impl InitializePoolIxData {
    pub fn new(
        bumps: crate::types::WhirlpoolBumps,
        tick_spacing: u16,
        initial_sqrt_price: u128,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            bumps,
            tick_spacing,
            initial_sqrt_price,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_POOL_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "bumps",
                    serde_json::to_string(&self.bumps).unwrap_or_else(|_| "null".to_string())
                ),
                format!("\"{}\":{}", "tick_spacing", self.tick_spacing),
                format!("\"{}\":{}", "initial_sqrt_price", self.initial_sqrt_price)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializePoolKeys {
    pub whirlpools_config: Pubkey,
    pub token_mint_a: Pubkey,
    pub token_mint_b: Pubkey,
    pub funder: Pubkey,
    pub whirlpool: Pubkey,
    pub token_vault_a: Pubkey,
    pub token_vault_b: Pubkey,
    pub fee_tier: Pubkey,
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
}
impl From<&[Pubkey]> for InitializePoolKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpools_config: pubkeys[0],
            token_mint_a: pubkeys[1],
            token_mint_b: pubkeys[2],
            funder: pubkeys[3],
            whirlpool: pubkeys[4],
            token_vault_a: pubkeys[5],
            token_vault_b: pubkeys[6],
            fee_tier: pubkeys[7],
            token_program: pubkeys[8],
            system_program: pubkeys[9],
            rent: pubkeys[10],
        }
    }
}
impl InitializePoolKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.whirlpools_config,
            self.token_mint_a,
            self.token_mint_b,
            self.funder,
            self.whirlpool,
            self.token_vault_a,
            self.token_vault_b,
            self.fee_tier,
            self.token_program,
            self.system_program,
            self.rent,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpoolsConfig", self.whirlpools_config),
                format!("\"{}\":\"{}\"", "tokenMintA", self.token_mint_a),
                format!("\"{}\":\"{}\"", "tokenMintB", self.token_mint_b),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!("\"{}\":\"{}\"", "tokenVaultA", self.token_vault_a),
                format!("\"{}\":\"{}\"", "tokenVaultB", self.token_vault_b),
                format!("\"{}\":\"{}\"", "feeTier", self.fee_tier),
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent)
            ]
            .join(",")
        )
    }
}
impl From<InitializePoolKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_POOL_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializePoolKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpools_config, false),
            solana_instruction::AccountMeta::new(keys.token_mint_a, false),
            solana_instruction::AccountMeta::new(keys.token_mint_b, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.token_vault_a, false),
            solana_instruction::AccountMeta::new(keys.token_vault_b, false),
            solana_instruction::AccountMeta::new(keys.fee_tier, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
        ]
    }
}
pub fn initialize_pool_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializePoolKeys,
    args: InitializePoolIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_POOL_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_pool_ix(
    keys: InitializePoolKeys,
    args: InitializePoolIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_pool_ix_with_program_id(crate::ID, keys, args)
}
