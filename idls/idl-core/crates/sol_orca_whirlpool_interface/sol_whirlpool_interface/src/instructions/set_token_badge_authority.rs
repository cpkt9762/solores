//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: setTokenBadgeAuthority
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_TOKEN_BADGE_AUTHORITY_IX_DISCM: [u8; 8] =
    [187u8, 56u8, 220u8, 228u8, 56u8, 57u8, 175u8, 84u8];
pub const SET_TOKEN_BADGE_AUTHORITY_IX_ACCOUNTS_LEN: usize = 4;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetTokenBadgeAuthorityIxData {
    pub discriminator: [u8; 8],
}
impl Default for SetTokenBadgeAuthorityIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_TOKEN_BADGE_AUTHORITY_IX_DISCM,
        }
    }
}
impl SetTokenBadgeAuthorityIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SET_TOKEN_BADGE_AUTHORITY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SetTokenBadgeAuthorityKeys {
    pub whirlpools_config: Pubkey,
    pub whirlpools_config_extension: Pubkey,
    pub config_extension_authority: Pubkey,
    pub new_token_badge_authority: Pubkey,
}
impl From<&[Pubkey]> for SetTokenBadgeAuthorityKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpools_config: pubkeys[0],
            whirlpools_config_extension: pubkeys[1],
            config_extension_authority: pubkeys[2],
            new_token_badge_authority: pubkeys[3],
        }
    }
}
impl SetTokenBadgeAuthorityKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.whirlpools_config,
            self.whirlpools_config_extension,
            self.config_extension_authority,
            self.new_token_badge_authority,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpoolsConfig", self.whirlpools_config),
                format!(
                    "\"{}\":\"{}\"",
                    "whirlpoolsConfigExtension", self.whirlpools_config_extension
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "configExtensionAuthority", self.config_extension_authority
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "newTokenBadgeAuthority", self.new_token_badge_authority
                )
            ]
            .join(",")
        )
    }
}
impl From<SetTokenBadgeAuthorityKeys>
    for [solana_instruction::AccountMeta; SET_TOKEN_BADGE_AUTHORITY_IX_ACCOUNTS_LEN]
{
    fn from(keys: SetTokenBadgeAuthorityKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpools_config, false),
            solana_instruction::AccountMeta::new(keys.whirlpools_config_extension, false),
            solana_instruction::AccountMeta::new(keys.config_extension_authority, false),
            solana_instruction::AccountMeta::new(keys.new_token_badge_authority, false),
        ]
    }
}
pub fn set_token_badge_authority_ix_with_program_id(
    program_id: Pubkey,
    keys: SetTokenBadgeAuthorityKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SET_TOKEN_BADGE_AUTHORITY_IX_ACCOUNTS_LEN] =
        keys.into();
    let args = SetTokenBadgeAuthorityIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_token_badge_authority_ix(
    keys: SetTokenBadgeAuthorityKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_token_badge_authority_ix_with_program_id(crate::ID, keys)
}
