//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: swap
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWAP_IX_DISCM: [u8; 8] = [248u8, 198u8, 158u8, 145u8, 225u8, 117u8, 135u8, 200u8];
pub const SWAP_IX_ACCOUNTS_LEN: usize = 11;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapIxData {
    pub discriminator: [u8; 8],
    pub amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "otherAmountThreshold"))]
    pub other_amount_threshold: u64,
    #[cfg_attr(feature = "serde", serde(rename = "sqrtPriceLimit"))]
    pub sqrt_price_limit: u128,
    #[cfg_attr(feature = "serde", serde(rename = "amountSpecifiedIsInput"))]
    pub amount_specified_is_input: bool,
    #[cfg_attr(feature = "serde", serde(rename = "aToB"))]
    pub a_to_b: bool,
}
impl Default for SwapIxData {
    fn default() -> Self {
        Self {
            discriminator: SWAP_IX_DISCM,
            amount: Default::default(),
            other_amount_threshold: Default::default(),
            sqrt_price_limit: Default::default(),
            amount_specified_is_input: Default::default(),
            a_to_b: Default::default(),
        }
    }
}
impl SwapIxData {
    pub fn new(
        amount: u64,
        other_amount_threshold: u64,
        sqrt_price_limit: u128,
        amount_specified_is_input: bool,
        a_to_b: bool,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount,
            other_amount_threshold,
            sqrt_price_limit,
            amount_specified_is_input,
            a_to_b,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SWAP_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "amount", self.amount),
                format!(
                    "\"{}\":{}",
                    "other_amount_threshold", self.other_amount_threshold
                ),
                format!("\"{}\":{}", "sqrt_price_limit", self.sqrt_price_limit),
                format!(
                    "\"{}\":{}",
                    "amount_specified_is_input", self.amount_specified_is_input
                ),
                format!("\"{}\":{}", "a_to_b", self.a_to_b)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SwapKeys {
    pub token_program: Pubkey,
    pub token_authority: Pubkey,
    pub whirlpool: Pubkey,
    pub token_owner_account_a: Pubkey,
    pub token_vault_a: Pubkey,
    pub token_owner_account_b: Pubkey,
    pub token_vault_b: Pubkey,
    pub tick_array_0: Pubkey,
    pub tick_array_1: Pubkey,
    pub tick_array_2: Pubkey,
    pub oracle: Pubkey,
}
impl From<&[Pubkey]> for SwapKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            token_program: pubkeys[0],
            token_authority: pubkeys[1],
            whirlpool: pubkeys[2],
            token_owner_account_a: pubkeys[3],
            token_vault_a: pubkeys[4],
            token_owner_account_b: pubkeys[5],
            token_vault_b: pubkeys[6],
            tick_array_0: pubkeys[7],
            tick_array_1: pubkeys[8],
            tick_array_2: pubkeys[9],
            oracle: pubkeys[10],
        }
    }
}
impl SwapKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.token_program,
            self.token_authority,
            self.whirlpool,
            self.token_owner_account_a,
            self.token_vault_a,
            self.token_owner_account_b,
            self.token_vault_b,
            self.tick_array_0,
            self.tick_array_1,
            self.tick_array_2,
            self.oracle,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program),
                format!("\"{}\":\"{}\"", "tokenAuthority", self.token_authority),
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountA", self.token_owner_account_a
                ),
                format!("\"{}\":\"{}\"", "tokenVaultA", self.token_vault_a),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountB", self.token_owner_account_b
                ),
                format!("\"{}\":\"{}\"", "tokenVaultB", self.token_vault_b),
                format!("\"{}\":\"{}\"", "tickArray0", self.tick_array_0),
                format!("\"{}\":\"{}\"", "tickArray1", self.tick_array_1),
                format!("\"{}\":\"{}\"", "tickArray2", self.tick_array_2),
                format!("\"{}\":\"{}\"", "oracle", self.oracle)
            ]
            .join(",")
        )
    }
}
impl From<SwapKeys> for [solana_instruction::AccountMeta; SWAP_IX_ACCOUNTS_LEN] {
    fn from(keys: SwapKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_authority, false),
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_a, false),
            solana_instruction::AccountMeta::new(keys.token_vault_a, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_b, false),
            solana_instruction::AccountMeta::new(keys.token_vault_b, false),
            solana_instruction::AccountMeta::new(keys.tick_array_0, false),
            solana_instruction::AccountMeta::new(keys.tick_array_1, false),
            solana_instruction::AccountMeta::new(keys.tick_array_2, false),
            solana_instruction::AccountMeta::new(keys.oracle, false),
        ]
    }
}
pub fn swap_ix_with_program_id(
    program_id: Pubkey,
    keys: SwapKeys,
    args: SwapIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SWAP_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn swap_ix(
    keys: SwapKeys,
    args: SwapIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    swap_ix_with_program_id(crate::ID, keys, args)
}
