//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: increaseLiquidityV2
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INCREASE_LIQUIDITY_V_2_IX_DISCM: [u8; 8] =
    [67u8, 78u8, 196u8, 105u8, 211u8, 25u8, 62u8, 252u8];
pub const INCREASE_LIQUIDITY_V_2_IX_ACCOUNTS_LEN: usize = 15;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct IncreaseLiquidityV2IxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "liquidityAmount"))]
    pub liquidity_amount: u128,
    #[cfg_attr(feature = "serde", serde(rename = "tokenMaxA"))]
    pub token_max_a: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tokenMaxB"))]
    pub token_max_b: u64,
    #[cfg_attr(feature = "serde", serde(rename = "remainingAccountsInfo"))]
    pub remaining_accounts_info: Option<crate::types::RemainingAccountsInfo>,
}
impl Default for IncreaseLiquidityV2IxData {
    fn default() -> Self {
        Self {
            discriminator: INCREASE_LIQUIDITY_V_2_IX_DISCM,
            liquidity_amount: Default::default(),
            token_max_a: Default::default(),
            token_max_b: Default::default(),
            remaining_accounts_info: Default::default(),
        }
    }
}
impl IncreaseLiquidityV2IxData {
    pub fn new(
        liquidity_amount: u128,
        token_max_a: u64,
        token_max_b: u64,
        remaining_accounts_info: Option<crate::types::RemainingAccountsInfo>,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            liquidity_amount,
            token_max_a,
            token_max_b,
            remaining_accounts_info,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INCREASE_LIQUIDITY_V_2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "liquidity_amount", self.liquidity_amount),
                format!("\"{}\":{}", "token_max_a", self.token_max_a),
                format!("\"{}\":{}", "token_max_b", self.token_max_b),
                format!(
                    "\"{}\":{}",
                    "remaining_accounts_info",
                    serde_json::to_string(&self.remaining_accounts_info)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct IncreaseLiquidityV2Keys {
    pub whirlpool: Pubkey,
    pub token_program_a: Pubkey,
    pub token_program_b: Pubkey,
    pub memo_program: Pubkey,
    pub position_authority: Pubkey,
    pub position: Pubkey,
    pub position_token_account: Pubkey,
    pub token_mint_a: Pubkey,
    pub token_mint_b: Pubkey,
    pub token_owner_account_a: Pubkey,
    pub token_owner_account_b: Pubkey,
    pub token_vault_a: Pubkey,
    pub token_vault_b: Pubkey,
    pub tick_array_lower: Pubkey,
    pub tick_array_upper: Pubkey,
}
impl From<&[Pubkey]> for IncreaseLiquidityV2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            whirlpool: pubkeys[0],
            token_program_a: pubkeys[1],
            token_program_b: pubkeys[2],
            memo_program: pubkeys[3],
            position_authority: pubkeys[4],
            position: pubkeys[5],
            position_token_account: pubkeys[6],
            token_mint_a: pubkeys[7],
            token_mint_b: pubkeys[8],
            token_owner_account_a: pubkeys[9],
            token_owner_account_b: pubkeys[10],
            token_vault_a: pubkeys[11],
            token_vault_b: pubkeys[12],
            tick_array_lower: pubkeys[13],
            tick_array_upper: pubkeys[14],
        }
    }
}
impl IncreaseLiquidityV2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.whirlpool,
            self.token_program_a,
            self.token_program_b,
            self.memo_program,
            self.position_authority,
            self.position,
            self.position_token_account,
            self.token_mint_a,
            self.token_mint_b,
            self.token_owner_account_a,
            self.token_owner_account_b,
            self.token_vault_a,
            self.token_vault_b,
            self.tick_array_lower,
            self.tick_array_upper,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "whirlpool", self.whirlpool),
                format!("\"{}\":\"{}\"", "tokenProgramA", self.token_program_a),
                format!("\"{}\":\"{}\"", "tokenProgramB", self.token_program_b),
                format!("\"{}\":\"{}\"", "memoProgram", self.memo_program),
                format!(
                    "\"{}\":\"{}\"",
                    "positionAuthority", self.position_authority
                ),
                format!("\"{}\":\"{}\"", "position", self.position),
                format!(
                    "\"{}\":\"{}\"",
                    "positionTokenAccount", self.position_token_account
                ),
                format!("\"{}\":\"{}\"", "tokenMintA", self.token_mint_a),
                format!("\"{}\":\"{}\"", "tokenMintB", self.token_mint_b),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountA", self.token_owner_account_a
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "tokenOwnerAccountB", self.token_owner_account_b
                ),
                format!("\"{}\":\"{}\"", "tokenVaultA", self.token_vault_a),
                format!("\"{}\":\"{}\"", "tokenVaultB", self.token_vault_b),
                format!("\"{}\":\"{}\"", "tickArrayLower", self.tick_array_lower),
                format!("\"{}\":\"{}\"", "tickArrayUpper", self.tick_array_upper)
            ]
            .join(",")
        )
    }
}
impl From<IncreaseLiquidityV2Keys>
    for [solana_instruction::AccountMeta; INCREASE_LIQUIDITY_V_2_IX_ACCOUNTS_LEN]
{
    fn from(keys: IncreaseLiquidityV2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.whirlpool, false),
            solana_instruction::AccountMeta::new(keys.token_program_a, false),
            solana_instruction::AccountMeta::new(keys.token_program_b, false),
            solana_instruction::AccountMeta::new(keys.memo_program, false),
            solana_instruction::AccountMeta::new(keys.position_authority, false),
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.position_token_account, false),
            solana_instruction::AccountMeta::new(keys.token_mint_a, false),
            solana_instruction::AccountMeta::new(keys.token_mint_b, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_a, false),
            solana_instruction::AccountMeta::new(keys.token_owner_account_b, false),
            solana_instruction::AccountMeta::new(keys.token_vault_a, false),
            solana_instruction::AccountMeta::new(keys.token_vault_b, false),
            solana_instruction::AccountMeta::new(keys.tick_array_lower, false),
            solana_instruction::AccountMeta::new(keys.tick_array_upper, false),
        ]
    }
}
pub fn increase_liquidity_v_2_ix_with_program_id(
    program_id: Pubkey,
    keys: IncreaseLiquidityV2Keys,
    args: IncreaseLiquidityV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INCREASE_LIQUIDITY_V_2_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn increase_liquidity_v_2_ix(
    keys: IncreaseLiquidityV2Keys,
    args: IncreaseLiquidityV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    increase_liquidity_v_2_ix_with_program_id(crate::ID, keys, args)
}
