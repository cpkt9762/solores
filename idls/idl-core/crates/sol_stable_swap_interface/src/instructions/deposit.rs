//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: deposit
///add liquidity
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const DEPOSIT_IX_DISCM: [u8; 8] = [242u8, 35u8, 198u8, 137u8, 82u8, 225u8, 242u8, 182u8];
pub const DEPOSIT_IX_ACCOUNTS_LEN: usize = 9;
///add liquidity
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositIxData {
    pub discriminator: [u8; 8],
    pub amounts: Vec<u64>,
    pub minimum_amount_out: u64,
}
impl Default for DepositIxData {
    fn default() -> Self {
        Self {
            discriminator: DEPOSIT_IX_DISCM,
            amounts: Default::default(),
            minimum_amount_out: Default::default(),
        }
    }
}
impl DepositIxData {
    pub fn new(amounts: Vec<u64>, minimum_amount_out: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amounts,
            minimum_amount_out,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        DEPOSIT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "amounts", self.amounts),
                format!("\"{}\":{}", "minimum_amount_out", self.minimum_amount_out)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct DepositKeys {
    pub user: Pubkey,
    pub user_pool_token: Pubkey,
    pub mint: Pubkey,
    pub pool: Pubkey,
    pub pool_authority: Pubkey,
    pub vault: Pubkey,
    pub vault_authority: Pubkey,
    pub token_program: Pubkey,
    pub token_program_2022: Pubkey,
}
impl From<&[Pubkey]> for DepositKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            user: pubkeys[0],
            user_pool_token: pubkeys[1],
            mint: pubkeys[2],
            pool: pubkeys[3],
            pool_authority: pubkeys[4],
            vault: pubkeys[5],
            vault_authority: pubkeys[6],
            token_program: pubkeys[7],
            token_program_2022: pubkeys[8],
        }
    }
}
impl DepositKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.user,
            self.user_pool_token,
            self.mint,
            self.pool,
            self.pool_authority,
            self.vault,
            self.vault_authority,
            self.token_program,
            self.token_program_2022,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "user_pool_token", self.user_pool_token),
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "vault", self.vault),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_program_2022", self.token_program_2022
                )
            ]
            .join(",")
        )
    }
}
impl From<DepositKeys> for [solana_instruction::AccountMeta; DEPOSIT_IX_ACCOUNTS_LEN] {
    fn from(keys: DepositKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.user_pool_token, false),
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.vault, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_program_2022, false),
        ]
    }
}
pub fn deposit_ix_with_program_id(
    program_id: Pubkey,
    keys: DepositKeys,
    args: DepositIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; DEPOSIT_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn deposit_ix(
    keys: DepositKeys,
    args: DepositIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    deposit_ix_with_program_id(crate::ID, keys, args)
}
