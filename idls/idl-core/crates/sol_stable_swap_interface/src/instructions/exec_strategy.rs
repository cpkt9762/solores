//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: exec_strategy
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const EXEC_STRATEGY_IX_DISCM: [u8; 8] = [249u8, 46u8, 55u8, 57u8, 31u8, 38u8, 61u8, 27u8];
pub const EXEC_STRATEGY_IX_ACCOUNTS_LEN: usize = 2;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ExecStrategyIxData {
    pub discriminator: [u8; 8],
    pub ramp_step: u16,
    pub ramp_duration: u32,
}
impl Default for ExecStrategyIxData {
    fn default() -> Self {
        Self {
            discriminator: EXEC_STRATEGY_IX_DISCM,
            ramp_step: Default::default(),
            ramp_duration: Default::default(),
        }
    }
}
impl ExecStrategyIxData {
    pub fn new(ramp_step: u16, ramp_duration: u32) -> Self {
        Self {
            discriminator: Self::discriminator(),
            ramp_step,
            ramp_duration,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        EXEC_STRATEGY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "ramp_step", self.ramp_step),
                format!("\"{}\":{}", "ramp_duration", self.ramp_duration)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ExecStrategyKeys {
    pub strategy: Pubkey,
    pub pool: Pubkey,
}
impl From<&[Pubkey]> for ExecStrategyKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            strategy: pubkeys[0],
            pool: pubkeys[1],
        }
    }
}
impl ExecStrategyKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.strategy, self.pool]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "strategy", self.strategy),
                format!("\"{}\":\"{}\"", "pool", self.pool)
            ]
            .join(",")
        )
    }
}
impl From<ExecStrategyKeys> for [solana_instruction::AccountMeta; EXEC_STRATEGY_IX_ACCOUNTS_LEN] {
    fn from(keys: ExecStrategyKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.strategy, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
        ]
    }
}
pub fn exec_strategy_ix_with_program_id(
    program_id: Pubkey,
    keys: ExecStrategyKeys,
    args: ExecStrategyIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; EXEC_STRATEGY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn exec_strategy_ix(
    keys: ExecStrategyKeys,
    args: ExecStrategyIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    exec_strategy_ix_with_program_id(crate::ID, keys, args)
}
