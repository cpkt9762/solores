//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: close_strategy
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CLOSE_STRATEGY_IX_DISCM: [u8; 8] = [56u8, 247u8, 170u8, 246u8, 89u8, 221u8, 134u8, 200u8];
pub const CLOSE_STRATEGY_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseStrategyIxData {
    pub discriminator: [u8; 8],
}
impl Default for CloseStrategyIxData {
    fn default() -> Self {
        Self {
            discriminator: CLOSE_STRATEGY_IX_DISCM,
        }
    }
}
impl CloseStrategyIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CLOSE_STRATEGY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CloseStrategyKeys {
    pub owner_only: Pubkey,
    pub strategy: Pubkey,
    pub rent_collector: Pubkey,
}
impl From<&[Pubkey]> for CloseStrategyKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            owner_only: pubkeys[0],
            strategy: pubkeys[1],
            rent_collector: pubkeys[2],
        }
    }
}
impl CloseStrategyKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.owner_only, self.strategy, self.rent_collector]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "owner_only", self.owner_only),
                format!("\"{}\":\"{}\"", "strategy", self.strategy),
                format!("\"{}\":\"{}\"", "rent_collector", self.rent_collector)
            ]
            .join(",")
        )
    }
}
impl From<CloseStrategyKeys> for [solana_instruction::AccountMeta; CLOSE_STRATEGY_IX_ACCOUNTS_LEN] {
    fn from(keys: CloseStrategyKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.owner_only, false),
            solana_instruction::AccountMeta::new(keys.strategy, false),
            solana_instruction::AccountMeta::new(keys.rent_collector, false),
        ]
    }
}
pub fn close_strategy_ix_with_program_id(
    program_id: Pubkey,
    keys: CloseStrategyKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CLOSE_STRATEGY_IX_ACCOUNTS_LEN] = keys.into();
    let args = CloseStrategyIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn close_strategy_ix(
    keys: CloseStrategyKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    close_strategy_ix_with_program_id(crate::ID, keys)
}
