//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: withdraw
///remove liquidity
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const WITHDRAW_IX_DISCM: [u8; 8] = [183u8, 18u8, 70u8, 156u8, 148u8, 109u8, 161u8, 34u8];
pub const WITHDRAW_IX_ACCOUNTS_LEN: usize = 10;
///remove liquidity
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawIxData {
    pub discriminator: [u8; 8],
    pub amount: u64,
    pub minimum_amounts_out: Vec<u64>,
}
impl Default for WithdrawIxData {
    fn default() -> Self {
        Self {
            discriminator: WITHDRAW_IX_DISCM,
            amount: Default::default(),
            minimum_amounts_out: Default::default(),
        }
    }
}
impl WithdrawIxData {
    pub fn new(amount: u64, minimum_amounts_out: Vec<u64>) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount,
            minimum_amounts_out,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        WITHDRAW_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "amount", self.amount),
                format!("\"{}\":{}", "minimum_amounts_out", self.minimum_amounts_out)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct WithdrawKeys {
    pub user: Pubkey,
    pub user_pool_token: Pubkey,
    pub mint: Pubkey,
    pub pool: Pubkey,
    pub withdraw_authority: Pubkey,
    pub vault: Pubkey,
    pub vault_authority: Pubkey,
    pub vault_program: Pubkey,
    pub token_program: Pubkey,
    pub token_program_2022: Pubkey,
}
impl From<&[Pubkey]> for WithdrawKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            user: pubkeys[0],
            user_pool_token: pubkeys[1],
            mint: pubkeys[2],
            pool: pubkeys[3],
            withdraw_authority: pubkeys[4],
            vault: pubkeys[5],
            vault_authority: pubkeys[6],
            vault_program: pubkeys[7],
            token_program: pubkeys[8],
            token_program_2022: pubkeys[9],
        }
    }
}
impl WithdrawKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.user,
            self.user_pool_token,
            self.mint,
            self.pool,
            self.withdraw_authority,
            self.vault,
            self.vault_authority,
            self.vault_program,
            self.token_program,
            self.token_program_2022,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "user_pool_token", self.user_pool_token),
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!(
                    "\"{}\":\"{}\"",
                    "withdraw_authority", self.withdraw_authority
                ),
                format!("\"{}\":\"{}\"", "vault", self.vault),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "vault_program", self.vault_program),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_program_2022", self.token_program_2022
                )
            ]
            .join(",")
        )
    }
}
impl From<WithdrawKeys> for [solana_instruction::AccountMeta; WITHDRAW_IX_ACCOUNTS_LEN] {
    fn from(keys: WithdrawKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.user_pool_token, false),
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.withdraw_authority, false),
            solana_instruction::AccountMeta::new(keys.vault, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.vault_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_program_2022, false),
        ]
    }
}
pub fn withdraw_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawKeys,
    args: WithdrawIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; WITHDRAW_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn withdraw_ix(
    keys: WithdrawKeys,
    args: WithdrawIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    withdraw_ix_with_program_id(crate::ID, keys, args)
}
