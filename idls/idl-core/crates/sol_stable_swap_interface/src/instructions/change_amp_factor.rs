//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: change_amp_factor
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CHANGE_AMP_FACTOR_IX_DISCM: [u8; 8] =
    [56u8, 238u8, 189u8, 35u8, 200u8, 157u8, 42u8, 66u8];
pub const CHANGE_AMP_FACTOR_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChangeAmpFactorIxData {
    pub discriminator: [u8; 8],
    pub new_amp_factor: u16,
    pub ramp_duration: u32,
}
impl Default for ChangeAmpFactorIxData {
    fn default() -> Self {
        Self {
            discriminator: CHANGE_AMP_FACTOR_IX_DISCM,
            new_amp_factor: Default::default(),
            ramp_duration: Default::default(),
        }
    }
}
impl ChangeAmpFactorIxData {
    pub fn new(new_amp_factor: u16, ramp_duration: u32) -> Self {
        Self {
            discriminator: Self::discriminator(),
            new_amp_factor,
            ramp_duration,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CHANGE_AMP_FACTOR_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "new_amp_factor", self.new_amp_factor),
                format!("\"{}\":{}", "ramp_duration", self.ramp_duration)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ChangeAmpFactorKeys {
    pub pool: Pubkey,
    pub vault: Pubkey,
    pub admin: Pubkey,
}
impl From<&[Pubkey]> for ChangeAmpFactorKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            pool: pubkeys[0],
            vault: pubkeys[1],
            admin: pubkeys[2],
        }
    }
}
impl ChangeAmpFactorKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.pool, self.vault, self.admin]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "vault", self.vault),
                format!("\"{}\":\"{}\"", "admin", self.admin)
            ]
            .join(",")
        )
    }
}
impl From<ChangeAmpFactorKeys>
    for [solana_instruction::AccountMeta; CHANGE_AMP_FACTOR_IX_ACCOUNTS_LEN]
{
    fn from(keys: ChangeAmpFactorKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.vault, false),
            solana_instruction::AccountMeta::new(keys.admin, false),
        ]
    }
}
pub fn change_amp_factor_ix_with_program_id(
    program_id: Pubkey,
    keys: ChangeAmpFactorKeys,
    args: ChangeAmpFactorIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CHANGE_AMP_FACTOR_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn change_amp_factor_ix(
    keys: ChangeAmpFactorKeys,
    args: ChangeAmpFactorIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    change_amp_factor_ix_with_program_id(crate::ID, keys, args)
}
