//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: swap_v2
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWAP_V_2_IX_DISCM: [u8; 8] = [43u8, 4u8, 237u8, 11u8, 26u8, 201u8, 30u8, 98u8];
pub const SWAP_V_2_IX_ACCOUNTS_LEN: usize = 15;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapV2IxData {
    pub discriminator: [u8; 8],
    pub amount_in: Option<u64>,
    pub minimum_amount_out: u64,
}
impl Default for SwapV2IxData {
    fn default() -> Self {
        Self {
            discriminator: SWAP_V_2_IX_DISCM,
            amount_in: Default::default(),
            minimum_amount_out: Default::default(),
        }
    }
}
impl SwapV2IxData {
    pub fn new(amount_in: Option<u64>, minimum_amount_out: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount_in,
            minimum_amount_out,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SWAP_V_2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "amount_in",
                    serde_json::to_string(&self.amount_in).unwrap_or_else(|_| "null".to_string())
                ),
                format!("\"{}\":{}", "minimum_amount_out", self.minimum_amount_out)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SwapV2Keys {
    pub user: Pubkey,
    pub mint_in: Pubkey,
    pub mint_out: Pubkey,
    pub user_token_in: Pubkey,
    pub user_token_out: Pubkey,
    pub vault_token_in: Pubkey,
    pub vault_token_out: Pubkey,
    pub beneficiary_token_out: Pubkey,
    pub pool: Pubkey,
    pub withdraw_authority: Pubkey,
    pub vault: Pubkey,
    pub vault_authority: Pubkey,
    pub vault_program: Pubkey,
    pub token_program: Pubkey,
    pub token_2022_program: Pubkey,
}
impl From<&[Pubkey]> for SwapV2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            user: pubkeys[0],
            mint_in: pubkeys[1],
            mint_out: pubkeys[2],
            user_token_in: pubkeys[3],
            user_token_out: pubkeys[4],
            vault_token_in: pubkeys[5],
            vault_token_out: pubkeys[6],
            beneficiary_token_out: pubkeys[7],
            pool: pubkeys[8],
            withdraw_authority: pubkeys[9],
            vault: pubkeys[10],
            vault_authority: pubkeys[11],
            vault_program: pubkeys[12],
            token_program: pubkeys[13],
            token_2022_program: pubkeys[14],
        }
    }
}
impl SwapV2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.user,
            self.mint_in,
            self.mint_out,
            self.user_token_in,
            self.user_token_out,
            self.vault_token_in,
            self.vault_token_out,
            self.beneficiary_token_out,
            self.pool,
            self.withdraw_authority,
            self.vault,
            self.vault_authority,
            self.vault_program,
            self.token_program,
            self.token_2022_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "mint_in", self.mint_in),
                format!("\"{}\":\"{}\"", "mint_out", self.mint_out),
                format!("\"{}\":\"{}\"", "user_token_in", self.user_token_in),
                format!("\"{}\":\"{}\"", "user_token_out", self.user_token_out),
                format!("\"{}\":\"{}\"", "vault_token_in", self.vault_token_in),
                format!("\"{}\":\"{}\"", "vault_token_out", self.vault_token_out),
                format!(
                    "\"{}\":\"{}\"",
                    "beneficiary_token_out", self.beneficiary_token_out
                ),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!(
                    "\"{}\":\"{}\"",
                    "withdraw_authority", self.withdraw_authority
                ),
                format!("\"{}\":\"{}\"", "vault", self.vault),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "vault_program", self.vault_program),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_2022_program", self.token_2022_program
                )
            ]
            .join(",")
        )
    }
}
impl From<SwapV2Keys> for [solana_instruction::AccountMeta; SWAP_V_2_IX_ACCOUNTS_LEN] {
    fn from(keys: SwapV2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.mint_in, false),
            solana_instruction::AccountMeta::new(keys.mint_out, false),
            solana_instruction::AccountMeta::new(keys.user_token_in, false),
            solana_instruction::AccountMeta::new(keys.user_token_out, false),
            solana_instruction::AccountMeta::new(keys.vault_token_in, false),
            solana_instruction::AccountMeta::new(keys.vault_token_out, false),
            solana_instruction::AccountMeta::new(keys.beneficiary_token_out, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.withdraw_authority, false),
            solana_instruction::AccountMeta::new(keys.vault, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.vault_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_2022_program, false),
        ]
    }
}
pub fn swap_v_2_ix_with_program_id(
    program_id: Pubkey,
    keys: SwapV2Keys,
    args: SwapV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SWAP_V_2_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn swap_v_2_ix(
    keys: SwapV2Keys,
    args: SwapV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    swap_v_2_ix_with_program_id(crate::ID, keys, args)
}
