//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: proposalCreate
///Create a new multisig proposal.
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const PROPOSAL_CREATE_IX_DISCM: [u8; 8] = [213u8, 116u8, 66u8, 19u8, 231u8, 72u8, 40u8, 123u8];
pub const PROPOSAL_CREATE_IX_ACCOUNTS_LEN: usize = 5;
///Create a new multisig proposal.
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ProposalCreateIxData {
    pub discriminator: [u8; 8],
    pub args: crate::types::ProposalCreateArgs,
}
impl Default for ProposalCreateIxData {
    fn default() -> Self {
        Self {
            discriminator: PROPOSAL_CREATE_IX_DISCM,
            args: Default::default(),
        }
    }
}
impl ProposalCreateIxData {
    pub fn new(args: crate::types::ProposalCreateArgs) -> Self {
        Self {
            discriminator: Self::discriminator(),
            args,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        PROPOSAL_CREATE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "args",
                    serde_json::to_string(&self.args).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ProposalCreateKeys {
    pub multisig: Pubkey,
    pub proposal: Pubkey,
    pub creator: Pubkey,
    pub rent_payer: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for ProposalCreateKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            multisig: pubkeys[0],
            proposal: pubkeys[1],
            creator: pubkeys[2],
            rent_payer: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl ProposalCreateKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.multisig,
            self.proposal,
            self.creator,
            self.rent_payer,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "multisig", self.multisig),
                format!("\"{}\":\"{}\"", "proposal", self.proposal),
                format!("\"{}\":\"{}\"", "creator", self.creator),
                format!("\"{}\":\"{}\"", "rentPayer", self.rent_payer),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<ProposalCreateKeys>
    for [solana_instruction::AccountMeta; PROPOSAL_CREATE_IX_ACCOUNTS_LEN]
{
    fn from(keys: ProposalCreateKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.multisig, false),
            solana_instruction::AccountMeta::new(keys.proposal, false),
            solana_instruction::AccountMeta::new(keys.creator, false),
            solana_instruction::AccountMeta::new(keys.rent_payer, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn proposal_create_ix_with_program_id(
    program_id: Pubkey,
    keys: ProposalCreateKeys,
    args: ProposalCreateIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; PROPOSAL_CREATE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn proposal_create_ix(
    keys: ProposalCreateKeys,
    args: ProposalCreateIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    proposal_create_ix_with_program_id(crate::ID, keys, args)
}
