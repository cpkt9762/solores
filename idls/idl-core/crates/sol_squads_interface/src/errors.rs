//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#![doc = concat!("Anchor", " error definitions module")]
//!Generated error enums and conversion implementations
///Custom errors for the squads program
#[derive(Clone, Copy, Debug, Eq, thiserror::Error, num_derive::FromPrimitive, PartialEq)]
pub enum SquadsError {
    ///6000 - Found multiple members with the same pubkey
    #[error("Found multiple members with the same pubkey")]
    DuplicateMember = 6000isize,
    ///6001 - Members array is empty
    #[error("Members array is empty")]
    EmptyMembers = 6001isize,
    ///6002 - Too many members, can be up to 65535
    #[error("Too many members, can be up to 65535")]
    TooManyMembers = 6002isize,
    ///6003 - Invalid threshold, must be between 1 and number of members with Vote permission
    #[error("Invalid threshold, must be between 1 and number of members with Vote permission")]
    InvalidThreshold = 6003isize,
    ///6004 - Attempted to perform an unauthorized action
    #[error("Attempted to perform an unauthorized action")]
    Unauthorized = 6004isize,
    ///6005 - Provided pubkey is not a member of multisig
    #[error("Provided pubkey is not a member of multisig")]
    NotAMember = 6005isize,
    ///6006 - TransactionMessage is malformed.
    #[error("TransactionMessage is malformed.")]
    InvalidTransactionMessage = 6006isize,
    ///6007 - Proposal is stale
    #[error("Proposal is stale")]
    StaleProposal = 6007isize,
    ///6008 - Invalid proposal status
    #[error("Invalid proposal status")]
    InvalidProposalStatus = 6008isize,
    ///6009 - Invalid transaction index
    #[error("Invalid transaction index")]
    InvalidTransactionIndex = 6009isize,
    ///6010 - Member already approved the transaction
    #[error("Member already approved the transaction")]
    AlreadyApproved = 6010isize,
    ///6011 - Member already rejected the transaction
    #[error("Member already rejected the transaction")]
    AlreadyRejected = 6011isize,
    ///6012 - Member already cancelled the transaction
    #[error("Member already cancelled the transaction")]
    AlreadyCancelled = 6012isize,
    ///6013 - Wrong number of accounts provided
    #[error("Wrong number of accounts provided")]
    InvalidNumberOfAccounts = 6013isize,
    ///6014 - Invalid account provided
    #[error("Invalid account provided")]
    InvalidAccount = 6014isize,
    ///6015 - Cannot remove last member
    #[error("Cannot remove last member")]
    RemoveLastMember = 6015isize,
    ///6016 - Members don't include any voters
    #[error("Members don't include any voters")]
    NoVoters = 6016isize,
    ///6017 - Members don't include any proposers
    #[error("Members don't include any proposers")]
    NoProposers = 6017isize,
    ///6018 - Members don't include any executors
    #[error("Members don't include any executors")]
    NoExecutors = 6018isize,
    ///6019 - `stale_transaction_index` must be <= `transaction_index`
    #[error("`stale_transaction_index` must be <= `transaction_index`")]
    InvalidStaleTransactionIndex = 6019isize,
    ///6020 - Instruction not supported for controlled multisig
    #[error("Instruction not supported for controlled multisig")]
    NotSupportedForControlled = 6020isize,
    ///6021 - Proposal time lock has not been released
    #[error("Proposal time lock has not been released")]
    TimeLockNotReleased = 6021isize,
    ///6022 - Config transaction must have at least one action
    #[error("Config transaction must have at least one action")]
    NoActions = 6022isize,
    ///6023 - Missing account
    #[error("Missing account")]
    MissingAccount = 6023isize,
    ///6024 - Invalid mint
    #[error("Invalid mint")]
    InvalidMint = 6024isize,
    ///6025 - Invalid destination
    #[error("Invalid destination")]
    InvalidDestination = 6025isize,
    ///6026 - Spending limit exceeded
    #[error("Spending limit exceeded")]
    SpendingLimitExceeded = 6026isize,
    ///6027 - Decimals don't match the mint
    #[error("Decimals don't match the mint")]
    DecimalsMismatch = 6027isize,
    ///6028 - Member has unknown permission
    #[error("Member has unknown permission")]
    UnknownPermission = 6028isize,
    ///6029 - Account is protected, it cannot be passed into a CPI as writable
    #[error("Account is protected, it cannot be passed into a CPI as writable")]
    ProtectedAccount = 6029isize,
    ///6030 - Time lock exceeds the maximum allowed (90 days)
    #[error("Time lock exceeds the maximum allowed (90 days)")]
    TimeLockExceedsMaxAllowed = 6030isize,
    ///6031 - Account is not owned by Multisig program
    #[error("Account is not owned by Multisig program")]
    IllegalAccountOwner = 6031isize,
    ///6032 - Rent reclamation is disabled for this multisig
    #[error("Rent reclamation is disabled for this multisig")]
    RentReclamationDisabled = 6032isize,
    ///6033 - Invalid rent collector address
    #[error("Invalid rent collector address")]
    InvalidRentCollector = 6033isize,
    ///6034 - Proposal is for another multisig
    #[error("Proposal is for another multisig")]
    ProposalForAnotherMultisig = 6034isize,
    ///6035 - Transaction is for another multisig
    #[error("Transaction is for another multisig")]
    TransactionForAnotherMultisig = 6035isize,
    ///6036 - Transaction doesn't match proposal
    #[error("Transaction doesn't match proposal")]
    TransactionNotMatchingProposal = 6036isize,
    ///6037 - Transaction is not last in batch
    #[error("Transaction is not last in batch")]
    TransactionNotLastInBatch = 6037isize,
    ///6038 - Batch is not empty
    #[error("Batch is not empty")]
    BatchNotEmpty = 6038isize,
    ///6039 - Invalid SpendingLimit amount
    #[error("Invalid SpendingLimit amount")]
    SpendingLimitInvalidAmount = 6039isize,
}
impl From<SquadsError> for solana_program_error::ProgramError {
    fn from(e: SquadsError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
