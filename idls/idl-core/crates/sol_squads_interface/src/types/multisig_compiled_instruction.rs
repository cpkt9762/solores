//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!MultisigCompiledInstruction
///Concise serialization schema for instructions that make up a transaction.
///Closely mimics the Solana transaction wire format.
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Concise serialization schema for instructions that make up a transaction.
///Closely mimics the Solana transaction wire format.
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MultisigCompiledInstruction {
    #[cfg_attr(feature = "serde", serde(rename = "programIdIndex"))]
    pub program_id_index: u8,
    ///Indices into the tx's `account_keys` list indicating which accounts to pass to the instruction.
    #[cfg_attr(feature = "serde", serde(rename = "accountIndexes"))]
    pub account_indexes: bytes,
    ///Instruction data.
    pub data: bytes,
}
impl Default for MultisigCompiledInstruction {
    fn default() -> Self {
        Self {
            program_id_index: Default::default(),
            account_indexes: Default::default(),
            data: Default::default(),
        }
    }
}
impl MultisigCompiledInstruction {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
