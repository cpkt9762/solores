//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!VaultTransactionCreateArgs
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct VaultTransactionCreateArgs {
    ///Index of the vault this transaction belongs to.
    #[cfg_attr(feature = "serde", serde(rename = "vaultIndex"))]
    pub vault_index: u8,
    ///Number of ephemeral signing PDAs required by the transaction.
    #[cfg_attr(feature = "serde", serde(rename = "ephemeralSigners"))]
    pub ephemeral_signers: u8,
    #[cfg_attr(feature = "serde", serde(rename = "transactionMessage"))]
    pub transaction_message: bytes,
    pub memo: Option<String>,
}
impl Default for VaultTransactionCreateArgs {
    fn default() -> Self {
        Self {
            vault_index: Default::default(),
            ephemeral_signers: Default::default(),
            transaction_message: Default::default(),
            memo: Default::default(),
        }
    }
}
impl VaultTransactionCreateArgs {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
