//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!TransactionMessage
///Unvalidated instruction data, must be treated as untrusted.
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Unvalidated instruction data, must be treated as untrusted.
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TransactionMessage {
    ///The number of signer pubkeys in the account_keys vec.
    #[cfg_attr(feature = "serde", serde(rename = "numSigners"))]
    pub num_signers: u8,
    ///The number of writable signer pubkeys in the account_keys vec.
    #[cfg_attr(feature = "serde", serde(rename = "numWritableSigners"))]
    pub num_writable_signers: u8,
    ///The number of writable non-signer pubkeys in the account_keys vec.
    #[cfg_attr(feature = "serde", serde(rename = "numWritableNonSigners"))]
    pub num_writable_non_signers: u8,
    ///The list of unique account public keys (including program IDs) that will be used in the provided instructions.
    #[cfg_attr(feature = "serde", serde(rename = "accountKeys"))]
    pub account_keys: crate::types::SmallVec<u8, Pubkey>,
    ///The list of instructions to execute.
    pub instructions: crate::types::SmallVec<u8, CompiledInstruction>,
    ///List of address table lookups used to load additional accounts
    ///for this transaction.
    #[cfg_attr(feature = "serde", serde(rename = "addressTableLookups"))]
    pub address_table_lookups: crate::types::SmallVec<u8, MessageAddressTableLookup>,
}
impl Default for TransactionMessage {
    fn default() -> Self {
        Self {
            num_signers: Default::default(),
            num_writable_signers: Default::default(),
            num_writable_non_signers: Default::default(),
            account_keys: Default::default(),
            instructions: Default::default(),
            address_table_lookups: Default::default(),
        }
    }
}
impl TransactionMessage {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
