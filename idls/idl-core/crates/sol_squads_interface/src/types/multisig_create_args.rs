//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!MultisigCreateArgs
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MultisigCreateArgs {
    ///The authority that can configure the multisig: add/remove members, change the threshold, etc.
    ///Should be set to `None` for autonomous multisigs.
    #[cfg_attr(feature = "serde", serde(rename = "configAuthority"))]
    pub config_authority: Option<Pubkey>,
    ///The number of signatures required to execute a transaction.
    pub threshold: u16,
    ///The members of the multisig.
    pub members: Vec<crate::types::Member>,
    ///How many seconds must pass between transaction voting, settlement, and execution.
    #[cfg_attr(feature = "serde", serde(rename = "timeLock"))]
    pub time_lock: u32,
    ///Memo is used for indexing only.
    pub memo: Option<String>,
}
impl Default for MultisigCreateArgs {
    fn default() -> Self {
        Self {
            config_authority: Default::default(),
            threshold: Default::default(),
            members: Default::default(),
            time_lock: Default::default(),
            memo: Default::default(),
        }
    }
}
impl MultisigCreateArgs {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
