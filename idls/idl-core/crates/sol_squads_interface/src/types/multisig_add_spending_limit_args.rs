//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!MultisigAddSpendingLimitArgs
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MultisigAddSpendingLimitArgs {
    ///Key that is used to seed the SpendingLimit PDA.
    #[cfg_attr(feature = "serde", serde(rename = "createKey"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub create_key: Pubkey,
    ///The index of the vault that the spending limit is for.
    #[cfg_attr(feature = "serde", serde(rename = "vaultIndex"))]
    pub vault_index: u8,
    ///The token mint the spending limit is for.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub mint: Pubkey,
    ///The amount of tokens that can be spent in a period.
    ///This amount is in decimals of the mint,
    ///so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
    pub amount: u64,
    ///The reset period of the spending limit.
    ///When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
    pub period: crate::types::Period,
    ///Members of the multisig that can use the spending limit.
    ///In case a member is removed from the multisig, the spending limit will remain existent
    ///(until explicitly deleted), but the removed member will not be able to use it anymore.
    pub members: Vec<Pubkey>,
    ///The destination addresses the spending limit is allowed to sent funds to.
    ///If empty, funds can be sent to any address.
    pub destinations: Vec<Pubkey>,
    ///Memo is used for indexing only.
    pub memo: Option<String>,
}
impl Default for MultisigAddSpendingLimitArgs {
    fn default() -> Self {
        Self {
            create_key: Default::default(),
            vault_index: Default::default(),
            mint: Default::default(),
            amount: Default::default(),
            period: Default::default(),
            members: Default::default(),
            destinations: Default::default(),
            memo: Default::default(),
        }
    }
}
impl MultisigAddSpendingLimitArgs {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
