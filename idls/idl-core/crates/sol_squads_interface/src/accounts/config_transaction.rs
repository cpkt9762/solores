//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

///Stores data required for execution of a multisig configuration transaction.
///Config transaction can perform a predefined set of actions on the Multisig PDA, such as adding/removing members,
///changing the threshold, etc.
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CONFIG_TRANSACTION_ACCOUNT_DISCM: [u8; 8] =
    [94u8, 8u8, 4u8, 35u8, 113u8, 139u8, 139u8, 112u8];
///Stores data required for execution of a multisig configuration transaction.
///Config transaction can perform a predefined set of actions on the Multisig PDA, such as adding/removing members,
///changing the threshold, etc.
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigTransaction {
    pub discriminator: [u8; 8],
}
impl Default for ConfigTransaction {
    fn default() -> Self {
        Self {
            discriminator: CONFIG_TRANSACTION_ACCOUNT_DISCM,
        }
    }
}
impl ConfigTransaction {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 8usize;
    pub fn discriminator() -> [u8; 8] {
        CONFIG_TRANSACTION_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
