//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: buy
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const BUY_IX_DISCM: [u8; 8] = [102u8, 6u8, 61u8, 18u8, 1u8, 218u8, 235u8, 234u8];
pub const BUY_IX_ACCOUNTS_LEN: usize = 19;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyIxData {
    pub discriminator: [u8; 8],
    pub base_amount_out: u64,
    pub max_quote_amount_in: u64,
}
impl Default for BuyIxData {
    fn default() -> Self {
        Self {
            discriminator: BUY_IX_DISCM,
            base_amount_out: Default::default(),
            max_quote_amount_in: Default::default(),
        }
    }
}
impl BuyIxData {
    pub fn new(base_amount_out: u64, max_quote_amount_in: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            base_amount_out,
            max_quote_amount_in,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        BUY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "base_amount_out", self.base_amount_out),
                format!("\"{}\":{}", "max_quote_amount_in", self.max_quote_amount_in)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct BuyKeys {
    pub pool: Pubkey,
    pub user: Pubkey,
    pub global_config: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub user_base_token_account: Pubkey,
    pub user_quote_token_account: Pubkey,
    pub pool_base_token_account: Pubkey,
    pub pool_quote_token_account: Pubkey,
    pub protocol_fee_recipient: Pubkey,
    pub protocol_fee_recipient_token_account: Pubkey,
    pub base_token_program: Pubkey,
    pub quote_token_program: Pubkey,
    pub system_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
    pub coin_creator_vault_ata: Pubkey,
    pub coin_creator_vault_authority: Pubkey,
}
impl From<&[Pubkey]> for BuyKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            pool: pubkeys[0],
            user: pubkeys[1],
            global_config: pubkeys[2],
            base_mint: pubkeys[3],
            quote_mint: pubkeys[4],
            user_base_token_account: pubkeys[5],
            user_quote_token_account: pubkeys[6],
            pool_base_token_account: pubkeys[7],
            pool_quote_token_account: pubkeys[8],
            protocol_fee_recipient: pubkeys[9],
            protocol_fee_recipient_token_account: pubkeys[10],
            base_token_program: pubkeys[11],
            quote_token_program: pubkeys[12],
            system_program: pubkeys[13],
            associated_token_program: pubkeys[14],
            event_authority: pubkeys[15],
            program: pubkeys[16],
            coin_creator_vault_ata: pubkeys[17],
            coin_creator_vault_authority: pubkeys[18],
        }
    }
}
impl BuyKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.pool,
            self.user,
            self.global_config,
            self.base_mint,
            self.quote_mint,
            self.user_base_token_account,
            self.user_quote_token_account,
            self.pool_base_token_account,
            self.pool_quote_token_account,
            self.protocol_fee_recipient,
            self.protocol_fee_recipient_token_account,
            self.base_token_program,
            self.quote_token_program,
            self.system_program,
            self.associated_token_program,
            self.event_authority,
            self.program,
            self.coin_creator_vault_ata,
            self.coin_creator_vault_authority,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "user_base_token_account", self.user_base_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "user_quote_token_account", self.user_quote_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "pool_base_token_account", self.pool_base_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "pool_quote_token_account", self.pool_quote_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "protocol_fee_recipient", self.protocol_fee_recipient
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "protocol_fee_recipient_token_account",
                    self.protocol_fee_recipient_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "base_token_program", self.base_token_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "quote_token_program", self.quote_token_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program),
                format!(
                    "\"{}\":\"{}\"",
                    "coin_creator_vault_ata", self.coin_creator_vault_ata
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "coin_creator_vault_authority", self.coin_creator_vault_authority
                )
            ]
            .join(",")
        )
    }
}
impl From<BuyKeys> for [solana_instruction::AccountMeta; BUY_IX_ACCOUNTS_LEN] {
    fn from(keys: BuyKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.user_base_token_account, false),
            solana_instruction::AccountMeta::new(keys.user_quote_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_base_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_quote_token_account, false),
            solana_instruction::AccountMeta::new(keys.protocol_fee_recipient, false),
            solana_instruction::AccountMeta::new(keys.protocol_fee_recipient_token_account, false),
            solana_instruction::AccountMeta::new(keys.base_token_program, false),
            solana_instruction::AccountMeta::new(keys.quote_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
            solana_instruction::AccountMeta::new(keys.coin_creator_vault_ata, false),
            solana_instruction::AccountMeta::new(keys.coin_creator_vault_authority, false),
        ]
    }
}
pub fn buy_ix_with_program_id(
    program_id: Pubkey,
    keys: BuyKeys,
    args: BuyIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; BUY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn buy_ix(
    keys: BuyKeys,
    args: BuyIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    buy_ix_with_program_id(crate::ID, keys, args)
}
