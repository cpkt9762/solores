//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_pool
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_POOL_IX_DISCM: [u8; 8] = [233u8, 146u8, 209u8, 142u8, 207u8, 104u8, 64u8, 188u8];
pub const CREATE_POOL_IX_ACCOUNTS_LEN: usize = 18;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePoolIxData {
    pub discriminator: [u8; 8],
    pub index: u16,
    pub base_amount_in: u64,
    pub quote_amount_in: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub coin_creator: Pubkey,
}
impl Default for CreatePoolIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_POOL_IX_DISCM,
            index: Default::default(),
            base_amount_in: Default::default(),
            quote_amount_in: Default::default(),
            coin_creator: Default::default(),
        }
    }
}
impl CreatePoolIxData {
    pub fn new(
        index: u16,
        base_amount_in: u64,
        quote_amount_in: u64,
        coin_creator: Pubkey,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            index,
            base_amount_in,
            quote_amount_in,
            coin_creator,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_POOL_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "index", self.index),
                format!("\"{}\":{}", "base_amount_in", self.base_amount_in),
                format!("\"{}\":{}", "quote_amount_in", self.quote_amount_in),
                format!("\"{}\":{}", "coin_creator", self.coin_creator)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreatePoolKeys {
    pub pool: Pubkey,
    pub global_config: Pubkey,
    pub creator: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub lp_mint: Pubkey,
    pub user_base_token_account: Pubkey,
    pub user_quote_token_account: Pubkey,
    pub user_pool_token_account: Pubkey,
    pub pool_base_token_account: Pubkey,
    pub pool_quote_token_account: Pubkey,
    pub system_program: Pubkey,
    pub token_2022_program: Pubkey,
    pub base_token_program: Pubkey,
    pub quote_token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for CreatePoolKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            pool: pubkeys[0],
            global_config: pubkeys[1],
            creator: pubkeys[2],
            base_mint: pubkeys[3],
            quote_mint: pubkeys[4],
            lp_mint: pubkeys[5],
            user_base_token_account: pubkeys[6],
            user_quote_token_account: pubkeys[7],
            user_pool_token_account: pubkeys[8],
            pool_base_token_account: pubkeys[9],
            pool_quote_token_account: pubkeys[10],
            system_program: pubkeys[11],
            token_2022_program: pubkeys[12],
            base_token_program: pubkeys[13],
            quote_token_program: pubkeys[14],
            associated_token_program: pubkeys[15],
            event_authority: pubkeys[16],
            program: pubkeys[17],
        }
    }
}
impl CreatePoolKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.pool,
            self.global_config,
            self.creator,
            self.base_mint,
            self.quote_mint,
            self.lp_mint,
            self.user_base_token_account,
            self.user_quote_token_account,
            self.user_pool_token_account,
            self.pool_base_token_account,
            self.pool_quote_token_account,
            self.system_program,
            self.token_2022_program,
            self.base_token_program,
            self.quote_token_program,
            self.associated_token_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "creator", self.creator),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "lp_mint", self.lp_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "user_base_token_account", self.user_base_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "user_quote_token_account", self.user_quote_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "user_pool_token_account", self.user_pool_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "pool_base_token_account", self.pool_base_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "pool_quote_token_account", self.pool_quote_token_account
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_2022_program", self.token_2022_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "base_token_program", self.base_token_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "quote_token_program", self.quote_token_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<CreatePoolKeys> for [solana_instruction::AccountMeta; CREATE_POOL_IX_ACCOUNTS_LEN] {
    fn from(keys: CreatePoolKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.creator, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.lp_mint, false),
            solana_instruction::AccountMeta::new(keys.user_base_token_account, false),
            solana_instruction::AccountMeta::new(keys.user_quote_token_account, false),
            solana_instruction::AccountMeta::new(keys.user_pool_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_base_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_quote_token_account, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.token_2022_program, false),
            solana_instruction::AccountMeta::new(keys.base_token_program, false),
            solana_instruction::AccountMeta::new(keys.quote_token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn create_pool_ix_with_program_id(
    program_id: Pubkey,
    keys: CreatePoolKeys,
    args: CreatePoolIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_POOL_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_pool_ix(
    keys: CreatePoolKeys,
    args: CreatePoolIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_pool_ix_with_program_id(crate::ID, keys, args)
}
