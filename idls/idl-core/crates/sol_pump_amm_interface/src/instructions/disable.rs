//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: disable
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const DISABLE_IX_DISCM: [u8; 8] = [185u8, 173u8, 187u8, 90u8, 216u8, 15u8, 238u8, 233u8];
pub const DISABLE_IX_ACCOUNTS_LEN: usize = 4;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DisableIxData {
    pub discriminator: [u8; 8],
    pub disable_create_pool: bool,
    pub disable_deposit: bool,
    pub disable_withdraw: bool,
    pub disable_buy: bool,
    pub disable_sell: bool,
}
impl Default for DisableIxData {
    fn default() -> Self {
        Self {
            discriminator: DISABLE_IX_DISCM,
            disable_create_pool: Default::default(),
            disable_deposit: Default::default(),
            disable_withdraw: Default::default(),
            disable_buy: Default::default(),
            disable_sell: Default::default(),
        }
    }
}
impl DisableIxData {
    pub fn new(
        disable_create_pool: bool,
        disable_deposit: bool,
        disable_withdraw: bool,
        disable_buy: bool,
        disable_sell: bool,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            disable_create_pool,
            disable_deposit,
            disable_withdraw,
            disable_buy,
            disable_sell,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        DISABLE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "disable_create_pool", self.disable_create_pool),
                format!("\"{}\":{}", "disable_deposit", self.disable_deposit),
                format!("\"{}\":{}", "disable_withdraw", self.disable_withdraw),
                format!("\"{}\":{}", "disable_buy", self.disable_buy),
                format!("\"{}\":{}", "disable_sell", self.disable_sell)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct DisableKeys {
    pub admin: Pubkey,
    pub global_config: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for DisableKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            admin: pubkeys[0],
            global_config: pubkeys[1],
            event_authority: pubkeys[2],
            program: pubkeys[3],
        }
    }
}
impl DisableKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.admin,
            self.global_config,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "admin", self.admin),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<DisableKeys> for [solana_instruction::AccountMeta; DISABLE_IX_ACCOUNTS_LEN] {
    fn from(keys: DisableKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.admin, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn disable_ix_with_program_id(
    program_id: Pubkey,
    keys: DisableKeys,
    args: DisableIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; DISABLE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn disable_ix(
    keys: DisableKeys,
    args: DisableIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    disable_ix_with_program_id(crate::ID, keys, args)
}
