//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_config
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[cfg(feature = "serde")]
mod pubkey_array_serde {
    use super::*;
    use serde::{
        de::{SeqAccess, Visitor},
        ser::SerializeSeq,
        Deserialize, Deserializer, Serialize, Serializer,
    };
    use std::fmt;
    pub fn serialize_pubkey_array_as_strings<S, const N: usize>(
        array: &[Pubkey; N],
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let strings: Vec<String> = array.iter().map(|pk| pk.to_string()).collect();
        strings.serialize(serializer)
    }
    pub fn deserialize_pubkey_array_from_strings<'de, D, const N: usize>(
        deserializer: D,
    ) -> Result<[Pubkey; N], D::Error>
    where
        D: Deserializer<'de>,
    {
        let strings = Vec::<String>::deserialize(deserializer)?;
        if strings.len() != N {
            return Err(serde::de::Error::invalid_length(
                strings.len(),
                &format!("exactly {} elements", N).as_str(),
            ));
        }
        let mut pubkeys = Vec::with_capacity(N);
        for s in strings {
            let pubkey = s
                .parse::<Pubkey>()
                .map_err(|e| serde::de::Error::custom(format!("Invalid Pubkey: {}", e)))?;
            pubkeys.push(pubkey);
        }
        pubkeys
            .try_into()
            .map_err(|_| serde::de::Error::custom("Failed to convert Vec to array"))
    }
}
#[cfg(feature = "serde")]
use pubkey_array_serde::{
    deserialize_pubkey_array_from_strings, serialize_pubkey_array_as_strings,
};
pub const CREATE_CONFIG_IX_DISCM: [u8; 8] = [201u8, 207u8, 243u8, 114u8, 75u8, 111u8, 47u8, 189u8];
pub const CREATE_CONFIG_IX_ACCOUNTS_LEN: usize = 5;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigIxData {
    pub discriminator: [u8; 8],
    pub lp_fee_basis_points: u64,
    pub protocol_fee_basis_points: u64,
    #[cfg_attr(
        feature = "serde",
        serde(
            serialize_with = "serialize_pubkey_array_as_strings",
            deserialize_with = "deserialize_pubkey_array_from_strings"
        )
    )]
    pub protocol_fee_recipients: [Pubkey; 8],
    pub coin_creator_fee_basis_points: u64,
}
impl Default for CreateConfigIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_CONFIG_IX_DISCM,
            lp_fee_basis_points: Default::default(),
            protocol_fee_basis_points: Default::default(),
            protocol_fee_recipients: Default::default(),
            coin_creator_fee_basis_points: Default::default(),
        }
    }
}
impl CreateConfigIxData {
    pub fn new(
        lp_fee_basis_points: u64,
        protocol_fee_basis_points: u64,
        protocol_fee_recipients: [Pubkey; 8],
        coin_creator_fee_basis_points: u64,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            lp_fee_basis_points,
            protocol_fee_basis_points,
            protocol_fee_recipients,
            coin_creator_fee_basis_points,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_CONFIG_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "lp_fee_basis_points", self.lp_fee_basis_points),
                format!(
                    "\"{}\":{}",
                    "protocol_fee_basis_points", self.protocol_fee_basis_points
                ),
                format!(
                    "\"{}\":[{}]",
                    "protocol_fee_recipients",
                    self.protocol_fee_recipients
                        .iter()
                        .map(|p| format!("\"{}\"", p))
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "coin_creator_fee_basis_points", self.coin_creator_fee_basis_points
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreateConfigKeys {
    pub admin: Pubkey,
    pub global_config: Pubkey,
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for CreateConfigKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            admin: pubkeys[0],
            global_config: pubkeys[1],
            system_program: pubkeys[2],
            event_authority: pubkeys[3],
            program: pubkeys[4],
        }
    }
}
impl CreateConfigKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.admin,
            self.global_config,
            self.system_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "admin", self.admin),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<CreateConfigKeys> for [solana_instruction::AccountMeta; CREATE_CONFIG_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateConfigKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.admin, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn create_config_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateConfigKeys,
    args: CreateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_config_ix(
    keys: CreateConfigKeys,
    args: CreateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_config_ix_with_program_id(crate::ID, keys, args)
}
