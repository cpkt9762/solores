//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: withdraw
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const WITHDRAW_IX_DISCM: [u8; 8] = [183u8, 18u8, 70u8, 156u8, 148u8, 109u8, 161u8, 34u8];
pub const WITHDRAW_IX_ACCOUNTS_LEN: usize = 15;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawIxData {
    pub discriminator: [u8; 8],
    pub lp_token_amount_in: u64,
    pub min_base_amount_out: u64,
    pub min_quote_amount_out: u64,
}
impl Default for WithdrawIxData {
    fn default() -> Self {
        Self {
            discriminator: WITHDRAW_IX_DISCM,
            lp_token_amount_in: Default::default(),
            min_base_amount_out: Default::default(),
            min_quote_amount_out: Default::default(),
        }
    }
}
impl WithdrawIxData {
    pub fn new(
        lp_token_amount_in: u64,
        min_base_amount_out: u64,
        min_quote_amount_out: u64,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            lp_token_amount_in,
            min_base_amount_out,
            min_quote_amount_out,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        WITHDRAW_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "lp_token_amount_in", self.lp_token_amount_in),
                format!("\"{}\":{}", "min_base_amount_out", self.min_base_amount_out),
                format!(
                    "\"{}\":{}",
                    "min_quote_amount_out", self.min_quote_amount_out
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct WithdrawKeys {
    pub pool: Pubkey,
    pub global_config: Pubkey,
    pub user: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub lp_mint: Pubkey,
    pub user_base_token_account: Pubkey,
    pub user_quote_token_account: Pubkey,
    pub user_pool_token_account: Pubkey,
    pub pool_base_token_account: Pubkey,
    pub pool_quote_token_account: Pubkey,
    pub token_program: Pubkey,
    pub token_2022_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for WithdrawKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            pool: pubkeys[0],
            global_config: pubkeys[1],
            user: pubkeys[2],
            base_mint: pubkeys[3],
            quote_mint: pubkeys[4],
            lp_mint: pubkeys[5],
            user_base_token_account: pubkeys[6],
            user_quote_token_account: pubkeys[7],
            user_pool_token_account: pubkeys[8],
            pool_base_token_account: pubkeys[9],
            pool_quote_token_account: pubkeys[10],
            token_program: pubkeys[11],
            token_2022_program: pubkeys[12],
            event_authority: pubkeys[13],
            program: pubkeys[14],
        }
    }
}
impl WithdrawKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.pool,
            self.global_config,
            self.user,
            self.base_mint,
            self.quote_mint,
            self.lp_mint,
            self.user_base_token_account,
            self.user_quote_token_account,
            self.user_pool_token_account,
            self.pool_base_token_account,
            self.pool_quote_token_account,
            self.token_program,
            self.token_2022_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "lp_mint", self.lp_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "user_base_token_account", self.user_base_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "user_quote_token_account", self.user_quote_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "user_pool_token_account", self.user_pool_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "pool_base_token_account", self.pool_base_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "pool_quote_token_account", self.pool_quote_token_account
                ),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_2022_program", self.token_2022_program
                ),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<WithdrawKeys> for [solana_instruction::AccountMeta; WITHDRAW_IX_ACCOUNTS_LEN] {
    fn from(keys: WithdrawKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.lp_mint, false),
            solana_instruction::AccountMeta::new(keys.user_base_token_account, false),
            solana_instruction::AccountMeta::new(keys.user_quote_token_account, false),
            solana_instruction::AccountMeta::new(keys.user_pool_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_base_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_quote_token_account, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_2022_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn withdraw_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawKeys,
    args: WithdrawIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; WITHDRAW_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn withdraw_ix(
    keys: WithdrawKeys,
    args: WithdrawIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    withdraw_ix_with_program_id(crate::ID, keys, args)
}
