//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: SetBondingCurveCoinCreatorEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_BONDING_CURVE_COIN_CREATOR_EVENT_EVENT_DISCM: [u8; 8] =
    [242u8, 231u8, 235u8, 102u8, 65u8, 99u8, 189u8, 211u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetBondingCurveCoinCreatorEvent {
    pub discriminator: [u8; 8],
    pub timestamp: i64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_mint: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub bonding_curve: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub coin_creator: Pubkey,
}
impl Default for SetBondingCurveCoinCreatorEvent {
    fn default() -> Self {
        Self {
            discriminator: SET_BONDING_CURVE_COIN_CREATOR_EVENT_EVENT_DISCM,
            timestamp: Default::default(),
            base_mint: Default::default(),
            pool: Default::default(),
            bonding_curve: Default::default(),
            coin_creator: Default::default(),
        }
    }
}
impl SetBondingCurveCoinCreatorEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
