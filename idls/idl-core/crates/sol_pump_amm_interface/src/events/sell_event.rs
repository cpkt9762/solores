//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: SellEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SELL_EVENT_EVENT_DISCM: [u8; 8] = [62u8, 47u8, 55u8, 10u8, 165u8, 3u8, 220u8, 42u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellEvent {
    pub discriminator: [u8; 8],
    pub timestamp: i64,
    pub base_amount_in: u64,
    pub min_quote_amount_out: u64,
    pub user_base_token_reserves: u64,
    pub user_quote_token_reserves: u64,
    pub pool_base_token_reserves: u64,
    pub pool_quote_token_reserves: u64,
    pub quote_amount_out: u64,
    pub lp_fee_basis_points: u64,
    pub lp_fee: u64,
    pub protocol_fee_basis_points: u64,
    pub protocol_fee: u64,
    pub quote_amount_out_without_lp_fee: u64,
    pub user_quote_amount_out: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub user: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub user_base_token_account: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub user_quote_token_account: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub protocol_fee_recipient: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub protocol_fee_recipient_token_account: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub coin_creator: Pubkey,
    pub coin_creator_fee_basis_points: u64,
    pub coin_creator_fee: u64,
}
impl Default for SellEvent {
    fn default() -> Self {
        Self {
            discriminator: SELL_EVENT_EVENT_DISCM,
            timestamp: Default::default(),
            base_amount_in: Default::default(),
            min_quote_amount_out: Default::default(),
            user_base_token_reserves: Default::default(),
            user_quote_token_reserves: Default::default(),
            pool_base_token_reserves: Default::default(),
            pool_quote_token_reserves: Default::default(),
            quote_amount_out: Default::default(),
            lp_fee_basis_points: Default::default(),
            lp_fee: Default::default(),
            protocol_fee_basis_points: Default::default(),
            protocol_fee: Default::default(),
            quote_amount_out_without_lp_fee: Default::default(),
            user_quote_amount_out: Default::default(),
            pool: Default::default(),
            user: Default::default(),
            user_base_token_account: Default::default(),
            user_quote_token_account: Default::default(),
            protocol_fee_recipient: Default::default(),
            protocol_fee_recipient_token_account: Default::default(),
            coin_creator: Default::default(),
            coin_creator_fee_basis_points: Default::default(),
            coin_creator_fee: Default::default(),
        }
    }
}
impl SellEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
