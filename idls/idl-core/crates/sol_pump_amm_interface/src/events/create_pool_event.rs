//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: CreatePoolEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_POOL_EVENT_EVENT_DISCM: [u8; 8] =
    [177u8, 49u8, 12u8, 210u8, 160u8, 118u8, 167u8, 116u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePoolEvent {
    pub discriminator: [u8; 8],
    pub timestamp: i64,
    pub index: u16,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub creator: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_mint: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_mint: Pubkey,
    pub base_mint_decimals: u8,
    pub quote_mint_decimals: u8,
    pub base_amount_in: u64,
    pub quote_amount_in: u64,
    pub pool_base_amount: u64,
    pub pool_quote_amount: u64,
    pub minimum_liquidity: u64,
    pub initial_liquidity: u64,
    pub lp_token_amount_out: u64,
    pub pool_bump: u8,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub lp_mint: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub user_base_token_account: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub user_quote_token_account: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub coin_creator: Pubkey,
}
impl Default for CreatePoolEvent {
    fn default() -> Self {
        Self {
            discriminator: CREATE_POOL_EVENT_EVENT_DISCM,
            timestamp: Default::default(),
            index: Default::default(),
            creator: Default::default(),
            base_mint: Default::default(),
            quote_mint: Default::default(),
            base_mint_decimals: Default::default(),
            quote_mint_decimals: Default::default(),
            base_amount_in: Default::default(),
            quote_amount_in: Default::default(),
            pool_base_amount: Default::default(),
            pool_quote_amount: Default::default(),
            minimum_liquidity: Default::default(),
            initial_liquidity: Default::default(),
            lp_token_amount_out: Default::default(),
            pool_bump: Default::default(),
            pool: Default::default(),
            lp_mint: Default::default(),
            user_base_token_account: Default::default(),
            user_quote_token_account: Default::default(),
            coin_creator: Default::default(),
        }
    }
}
impl CreatePoolEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
