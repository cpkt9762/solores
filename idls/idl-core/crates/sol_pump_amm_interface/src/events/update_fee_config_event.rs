//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: UpdateFeeConfigEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const UPDATE_FEE_CONFIG_EVENT_EVENT_DISCM: [u8; 8] =
    [90u8, 23u8, 65u8, 35u8, 62u8, 244u8, 188u8, 208u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateFeeConfigEvent {
    pub discriminator: [u8; 8],
    pub timestamp: i64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub admin: Pubkey,
    pub lp_fee_basis_points: u64,
    pub protocol_fee_basis_points: u64,
    #[cfg_attr(
        feature = "serde",
        serde(
            serialize_with = "serialize_pubkey_array_as_strings",
            deserialize_with = "deserialize_pubkey_array_from_strings"
        )
    )]
    pub protocol_fee_recipients: [Pubkey; 8],
    pub coin_creator_fee_basis_points: u64,
}
impl Default for UpdateFeeConfigEvent {
    fn default() -> Self {
        Self {
            discriminator: UPDATE_FEE_CONFIG_EVENT_EVENT_DISCM,
            timestamp: Default::default(),
            admin: Default::default(),
            lp_fee_basis_points: Default::default(),
            protocol_fee_basis_points: Default::default(),
            protocol_fee_recipients: Default::default(),
            coin_creator_fee_basis_points: Default::default(),
        }
    }
}
impl UpdateFeeConfigEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
#[cfg(feature = "serde")]
mod pubkey_array_serde {
    use super::*;
    use serde::{
        de::{SeqAccess, Visitor},
        ser::SerializeSeq,
        Deserialize, Deserializer, Serialize, Serializer,
    };
    use std::fmt;
    pub fn serialize_pubkey_array_as_strings<S, const N: usize>(
        array: &[Pubkey; N],
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let strings: Vec<String> = array.iter().map(|pk| pk.to_string()).collect();
        strings.serialize(serializer)
    }
    pub fn deserialize_pubkey_array_from_strings<'de, D, const N: usize>(
        deserializer: D,
    ) -> Result<[Pubkey; N], D::Error>
    where
        D: Deserializer<'de>,
    {
        let strings = Vec::<String>::deserialize(deserializer)?;
        if strings.len() != N {
            return Err(serde::de::Error::invalid_length(
                strings.len(),
                &format!("exactly {} elements", N).as_str(),
            ));
        }
        let mut pubkeys = Vec::with_capacity(N);
        for s in strings {
            let pubkey = s
                .parse::<Pubkey>()
                .map_err(|e| serde::de::Error::custom(format!("Invalid Pubkey: {}", e)))?;
            pubkeys.push(pubkey);
        }
        pubkeys
            .try_into()
            .map_err(|_| serde::de::Error::custom("Failed to convert Vec to array"))
    }
}
#[cfg(feature = "serde")]
use pubkey_array_serde::{
    deserialize_pubkey_array_from_strings, serialize_pubkey_array_as_strings,
};
