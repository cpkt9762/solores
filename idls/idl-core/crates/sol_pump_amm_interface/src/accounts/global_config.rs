//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[cfg(feature = "serde")]
mod pubkey_array_serde {
    use super::*;
    use serde::{
        de::{SeqAccess, Visitor},
        ser::SerializeSeq,
        Deserialize, Deserializer, Serialize, Serializer,
    };
    use std::fmt;
    pub fn serialize_pubkey_array_as_strings<S, const N: usize>(
        array: &[Pubkey; N],
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let strings: Vec<String> = array.iter().map(|pk| pk.to_string()).collect();
        strings.serialize(serializer)
    }
    pub fn deserialize_pubkey_array_from_strings<'de, D, const N: usize>(
        deserializer: D,
    ) -> Result<[Pubkey; N], D::Error>
    where
        D: Deserializer<'de>,
    {
        let strings = Vec::<String>::deserialize(deserializer)?;
        if strings.len() != N {
            return Err(serde::de::Error::invalid_length(
                strings.len(),
                &format!("exactly {} elements", N).as_str(),
            ));
        }
        let mut pubkeys = Vec::with_capacity(N);
        for s in strings {
            let pubkey = s
                .parse::<Pubkey>()
                .map_err(|e| serde::de::Error::custom(format!("Invalid Pubkey: {}", e)))?;
            pubkeys.push(pubkey);
        }
        pubkeys
            .try_into()
            .map_err(|_| serde::de::Error::custom("Failed to convert Vec to array"))
    }
}
#[cfg(feature = "serde")]
use pubkey_array_serde::{
    deserialize_pubkey_array_from_strings, serialize_pubkey_array_as_strings,
};
pub const GLOBAL_CONFIG_ACCOUNT_DISCM: [u8; 8] =
    [149u8, 8u8, 156u8, 202u8, 160u8, 252u8, 176u8, 217u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GlobalConfig {
    pub discriminator: [u8; 8],
    ///The admin pubkey
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub admin: Pubkey,
    ///The lp fee in basis points (0.01%)
    pub lp_fee_basis_points: u64,
    ///The protocol fee in basis points (0.01%)
    pub protocol_fee_basis_points: u64,
    ///Flags to disable certain functionality
    ///bit 0 - Disable create pool
    ///bit 1 - Disable deposit
    ///bit 2 - Disable withdraw
    ///bit 3 - Disable buy
    ///bit 4 - Disable sell
    pub disable_flags: u8,
    ///Addresses of the protocol fee recipients
    #[cfg_attr(
        feature = "serde",
        serde(
            serialize_with = "serialize_pubkey_array_as_strings",
            deserialize_with = "deserialize_pubkey_array_from_strings"
        )
    )]
    pub protocol_fee_recipients: [Pubkey; 8],
    ///The coin creator fee in basis points (0.01%)
    pub coin_creator_fee_basis_points: u64,
}
impl Default for GlobalConfig {
    fn default() -> Self {
        Self {
            discriminator: GLOBAL_CONFIG_ACCOUNT_DISCM,
            admin: Default::default(),
            lp_fee_basis_points: Default::default(),
            protocol_fee_basis_points: Default::default(),
            disable_flags: Default::default(),
            protocol_fee_recipients: Default::default(),
            coin_creator_fee_basis_points: Default::default(),
        }
    }
}
impl GlobalConfig {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 321usize;
    pub fn discriminator() -> [u8; 8] {
        GLOBAL_CONFIG_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
