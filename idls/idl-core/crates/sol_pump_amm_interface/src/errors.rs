//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#![doc = concat!("Anchor", " error definitions module")]
//!Generated error enums and conversion implementations
///Custom errors for the pump_amm program
#[derive(Clone, Copy, Debug, Eq, thiserror::Error, num_derive::FromPrimitive, PartialEq)]
pub enum PumpAmmError {
    ///6000 - Error code 6000
    #[error("Error code 6000")]
    FeeBasisPointsExceedsMaximum = 6000isize,
    ///6001 - Error code 6001
    #[error("Error code 6001")]
    ZeroBaseAmount = 6001isize,
    ///6002 - Error code 6002
    #[error("Error code 6002")]
    ZeroQuoteAmount = 6002isize,
    ///6003 - Error code 6003
    #[error("Error code 6003")]
    TooLittlePoolTokenLiquidity = 6003isize,
    ///6004 - Error code 6004
    #[error("Error code 6004")]
    ExceededSlippage = 6004isize,
    ///6005 - Error code 6005
    #[error("Error code 6005")]
    InvalidAdmin = 6005isize,
    ///6006 - Error code 6006
    #[error("Error code 6006")]
    UnsupportedBaseMint = 6006isize,
    ///6007 - Error code 6007
    #[error("Error code 6007")]
    UnsupportedQuoteMint = 6007isize,
    ///6008 - Error code 6008
    #[error("Error code 6008")]
    InvalidBaseMint = 6008isize,
    ///6009 - Error code 6009
    #[error("Error code 6009")]
    InvalidQuoteMint = 6009isize,
    ///6010 - Error code 6010
    #[error("Error code 6010")]
    InvalidLpMint = 6010isize,
    ///6011 - Error code 6011
    #[error("Error code 6011")]
    AllProtocolFeeRecipientsShouldBeNonZero = 6011isize,
    ///6012 - Error code 6012
    #[error("Error code 6012")]
    UnsortedNotUniqueProtocolFeeRecipients = 6012isize,
    ///6013 - Error code 6013
    #[error("Error code 6013")]
    InvalidProtocolFeeRecipient = 6013isize,
    ///6014 - Error code 6014
    #[error("Error code 6014")]
    InvalidPoolBaseTokenAccount = 6014isize,
    ///6015 - Error code 6015
    #[error("Error code 6015")]
    InvalidPoolQuoteTokenAccount = 6015isize,
    ///6016 - Error code 6016
    #[error("Error code 6016")]
    BuyMoreBaseAmountThanPoolReserves = 6016isize,
    ///6017 - Error code 6017
    #[error("Error code 6017")]
    DisabledCreatePool = 6017isize,
    ///6018 - Error code 6018
    #[error("Error code 6018")]
    DisabledDeposit = 6018isize,
    ///6019 - Error code 6019
    #[error("Error code 6019")]
    DisabledWithdraw = 6019isize,
    ///6020 - Error code 6020
    #[error("Error code 6020")]
    DisabledBuy = 6020isize,
    ///6021 - Error code 6021
    #[error("Error code 6021")]
    DisabledSell = 6021isize,
    ///6022 - Error code 6022
    #[error("Error code 6022")]
    SameMint = 6022isize,
    ///6023 - Error code 6023
    #[error("Error code 6023")]
    Overflow = 6023isize,
    ///6024 - Error code 6024
    #[error("Error code 6024")]
    Truncation = 6024isize,
    ///6025 - Error code 6025
    #[error("Error code 6025")]
    DivisionByZero = 6025isize,
    ///6026 - Error code 6026
    #[error("Error code 6026")]
    NewSizeLessThanCurrentSize = 6026isize,
    ///6027 - Error code 6027
    #[error("Error code 6027")]
    AccountTypeNotSupported = 6027isize,
    ///6028 - Error code 6028
    #[error("Error code 6028")]
    OnlyCanonicalPumpPoolsCanHaveCoinCreator = 6028isize,
}
impl From<PumpAmmError> for solana_program_error::ProgramError {
    fn from(e: PumpAmmError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
