//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: ConfigUpdatedEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CONFIG_UPDATED_EVENT_EVENT_DISCM: [u8; 8] =
    [245u8, 158u8, 129u8, 99u8, 60u8, 100u8, 214u8, 220u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigUpdatedEvent {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub protocol_fee_recipient: Pubkey,
    pub virtual_sol_reserves: u64,
    pub virtual_token_reserves: u64,
    pub graduation_target: u64,
    pub graduation_fee: u64,
    pub damping_term: u8,
    pub swap_fee_basis_points: u8,
    pub token_for_stakers_basis_points: u16,
    pub token_amount_for_raydium_liquidity: u64,
    pub max_graduation_price_deviation_basis_points: u16,
    pub max_swap_amount_for_pool_price_correction_basis_points: u16,
}
impl Default for ConfigUpdatedEvent {
    fn default() -> Self {
        Self {
            discriminator: CONFIG_UPDATED_EVENT_EVENT_DISCM,
            protocol_fee_recipient: Default::default(),
            virtual_sol_reserves: Default::default(),
            virtual_token_reserves: Default::default(),
            graduation_target: Default::default(),
            graduation_fee: Default::default(),
            damping_term: Default::default(),
            swap_fee_basis_points: Default::default(),
            token_for_stakers_basis_points: Default::default(),
            token_amount_for_raydium_liquidity: Default::default(),
            max_graduation_price_deviation_basis_points: Default::default(),
            max_swap_amount_for_pool_price_correction_basis_points: Default::default(),
        }
    }
}
impl ConfigUpdatedEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
