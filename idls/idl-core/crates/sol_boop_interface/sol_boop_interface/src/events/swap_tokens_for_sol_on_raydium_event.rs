//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: SwapTokensForSolOnRaydiumEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_EVENT_EVENT_DISCM: [u8; 8] =
    [76u8, 249u8, 221u8, 162u8, 65u8, 70u8, 118u8, 32u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapTokensForSolOnRaydiumEvent {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub mint: Pubkey,
    pub amount_in: u64,
    pub amount_out: u64,
}
impl Default for SwapTokensForSolOnRaydiumEvent {
    fn default() -> Self {
        Self {
            discriminator: SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_EVENT_EVENT_DISCM,
            mint: Default::default(),
            amount_in: Default::default(),
            amount_out: Default::default(),
        }
    }
}
impl SwapTokensForSolOnRaydiumEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
