//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const AMM_CONFIG_ACCOUNT_DISCM: [u8; 8] =
    [218u8, 244u8, 33u8, 104u8, 203u8, 203u8, 43u8, 111u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AmmConfig {
    pub discriminator: [u8; 8],
    ///Bump to identify PDA
    pub bump: u8,
    ///Status to control if new pool can be create
    pub disable_create_pool: bool,
    ///Config index
    pub index: u16,
    ///The trade fee, denominated in hundredths of a bip (10^-6)
    pub trade_fee_rate: u64,
    ///The protocol fee
    pub protocol_fee_rate: u64,
    ///The fund fee, denominated in hundredths of a bip (10^-6)
    pub fund_fee_rate: u64,
    ///Fee for create a new pool
    pub create_pool_fee: u64,
    ///Address of the protocol fee owner
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub protocol_owner: Pubkey,
    ///Address of the fund fee owner
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fund_owner: Pubkey,
    ///padding
    pub padding: [u64; 16],
}
impl Default for AmmConfig {
    fn default() -> Self {
        Self {
            discriminator: AMM_CONFIG_ACCOUNT_DISCM,
            bump: Default::default(),
            disable_create_pool: Default::default(),
            index: Default::default(),
            trade_fee_rate: Default::default(),
            protocol_fee_rate: Default::default(),
            fund_fee_rate: Default::default(),
            create_pool_fee: Default::default(),
            protocol_owner: Default::default(),
            fund_owner: Default::default(),
            padding: Default::default(),
        }
    }
}
impl AmmConfig {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 236usize;
    pub fn discriminator() -> [u8; 8] {
        AMM_CONFIG_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
