//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: swap_tokens_for_sol_on_raydium
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_IX_DISCM: [u8; 8] =
    [216u8, 172u8, 130u8, 148u8, 34u8, 98u8, 215u8, 163u8];
pub const SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_IX_ACCOUNTS_LEN: usize = 16;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapTokensForSolOnRaydiumIxData {
    pub discriminator: [u8; 8],
    pub amount_in: u64,
    pub minimum_amount_out: u64,
}
impl Default for SwapTokensForSolOnRaydiumIxData {
    fn default() -> Self {
        Self {
            discriminator: SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_IX_DISCM,
            amount_in: Default::default(),
            minimum_amount_out: Default::default(),
        }
    }
}
impl SwapTokensForSolOnRaydiumIxData {
    pub fn new(amount_in: u64, minimum_amount_out: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount_in,
            minimum_amount_out,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "amount_in", self.amount_in),
                format!("\"{}\":{}", "minimum_amount_out", self.minimum_amount_out)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SwapTokensForSolOnRaydiumKeys {
    pub config: Pubkey,
    pub bonding_curve: Pubkey,
    pub amm_config: Pubkey,
    pub operator: Pubkey,
    pub vault_authority: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub input_vault: Pubkey,
    pub output_vault: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_vault: Pubkey,
    pub input_token_mint: Pubkey,
    pub output_token_mint: Pubkey,
    pub token_program: Pubkey,
    pub cp_swap_program: Pubkey,
    pub observation_state: Pubkey,
}
impl From<&[Pubkey]> for SwapTokensForSolOnRaydiumKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            bonding_curve: pubkeys[1],
            amm_config: pubkeys[2],
            operator: pubkeys[3],
            vault_authority: pubkeys[4],
            authority: pubkeys[5],
            pool_state: pubkeys[6],
            input_vault: pubkeys[7],
            output_vault: pubkeys[8],
            bonding_curve_vault: pubkeys[9],
            bonding_curve_wsol_vault: pubkeys[10],
            input_token_mint: pubkeys[11],
            output_token_mint: pubkeys[12],
            token_program: pubkeys[13],
            cp_swap_program: pubkeys[14],
            observation_state: pubkeys[15],
        }
    }
}
impl SwapTokensForSolOnRaydiumKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.config,
            self.bonding_curve,
            self.amm_config,
            self.operator,
            self.vault_authority,
            self.authority,
            self.pool_state,
            self.input_vault,
            self.output_vault,
            self.bonding_curve_vault,
            self.bonding_curve_wsol_vault,
            self.input_token_mint,
            self.output_token_mint,
            self.token_program,
            self.cp_swap_program,
            self.observation_state,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!("\"{}\":\"{}\"", "amm_config", self.amm_config),
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "input_vault", self.input_vault),
                format!("\"{}\":\"{}\"", "output_vault", self.output_vault),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_vault", self.bonding_curve_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_wsol_vault", self.bonding_curve_wsol_vault
                ),
                format!("\"{}\":\"{}\"", "input_token_mint", self.input_token_mint),
                format!("\"{}\":\"{}\"", "output_token_mint", self.output_token_mint),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "cp_swap_program", self.cp_swap_program),
                format!("\"{}\":\"{}\"", "observation_state", self.observation_state)
            ]
            .join(",")
        )
    }
}
impl From<SwapTokensForSolOnRaydiumKeys>
    for [solana_instruction::AccountMeta; SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_IX_ACCOUNTS_LEN]
{
    fn from(keys: SwapTokensForSolOnRaydiumKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.amm_config, false),
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.input_vault, false),
            solana_instruction::AccountMeta::new(keys.output_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_wsol_vault, false),
            solana_instruction::AccountMeta::new(keys.input_token_mint, false),
            solana_instruction::AccountMeta::new(keys.output_token_mint, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.cp_swap_program, false),
            solana_instruction::AccountMeta::new(keys.observation_state, false),
        ]
    }
}
pub fn swap_tokens_for_sol_on_raydium_ix_with_program_id(
    program_id: Pubkey,
    keys: SwapTokensForSolOnRaydiumKeys,
    args: SwapTokensForSolOnRaydiumIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SWAP_TOKENS_FOR_SOL_ON_RAYDIUM_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn swap_tokens_for_sol_on_raydium_ix(
    keys: SwapTokensForSolOnRaydiumKeys,
    args: SwapTokensForSolOnRaydiumIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    swap_tokens_for_sol_on_raydium_ix_with_program_id(crate::ID, keys, args)
}
