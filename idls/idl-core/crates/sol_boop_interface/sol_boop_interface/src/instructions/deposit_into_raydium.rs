//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: deposit_into_raydium
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const DEPOSIT_INTO_RAYDIUM_IX_DISCM: [u8; 8] =
    [168u8, 89u8, 99u8, 30u8, 117u8, 49u8, 88u8, 224u8];
pub const DEPOSIT_INTO_RAYDIUM_IX_ACCOUNTS_LEN: usize = 21;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositIntoRaydiumIxData {
    pub discriminator: [u8; 8],
    pub lp_token_amount: u64,
    pub maximum_token_0_amount: u64,
    pub maximum_token_1_amount: u64,
}
impl Default for DepositIntoRaydiumIxData {
    fn default() -> Self {
        Self {
            discriminator: DEPOSIT_INTO_RAYDIUM_IX_DISCM,
            lp_token_amount: Default::default(),
            maximum_token_0_amount: Default::default(),
            maximum_token_1_amount: Default::default(),
        }
    }
}
impl DepositIntoRaydiumIxData {
    pub fn new(
        lp_token_amount: u64,
        maximum_token_0_amount: u64,
        maximum_token_1_amount: u64,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            lp_token_amount,
            maximum_token_0_amount,
            maximum_token_1_amount,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        DEPOSIT_INTO_RAYDIUM_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "lp_token_amount", self.lp_token_amount),
                format!(
                    "\"{}\":{}",
                    "maximum_token_0_amount", self.maximum_token_0_amount
                ),
                format!(
                    "\"{}\":{}",
                    "maximum_token_1_amount", self.maximum_token_1_amount
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct DepositIntoRaydiumKeys {
    pub config: Pubkey,
    pub amm_config: Pubkey,
    pub operator: Pubkey,
    pub operator_wsol_account: Pubkey,
    pub vault_authority: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub token_0_vault: Pubkey,
    pub token_1_vault: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_vault: Pubkey,
    pub token_program: Pubkey,
    pub token_program_2022: Pubkey,
    pub system_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub lp_mint: Pubkey,
    pub cpmm_program: Pubkey,
    pub owner_lp_token: Pubkey,
    pub bonding_curve: Pubkey,
    pub token_0_mint: Pubkey,
    pub token_1_mint: Pubkey,
}
impl From<&[Pubkey]> for DepositIntoRaydiumKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            amm_config: pubkeys[1],
            operator: pubkeys[2],
            operator_wsol_account: pubkeys[3],
            vault_authority: pubkeys[4],
            authority: pubkeys[5],
            pool_state: pubkeys[6],
            token_0_vault: pubkeys[7],
            token_1_vault: pubkeys[8],
            bonding_curve_vault: pubkeys[9],
            bonding_curve_wsol_vault: pubkeys[10],
            token_program: pubkeys[11],
            token_program_2022: pubkeys[12],
            system_program: pubkeys[13],
            associated_token_program: pubkeys[14],
            lp_mint: pubkeys[15],
            cpmm_program: pubkeys[16],
            owner_lp_token: pubkeys[17],
            bonding_curve: pubkeys[18],
            token_0_mint: pubkeys[19],
            token_1_mint: pubkeys[20],
        }
    }
}
impl DepositIntoRaydiumKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.config,
            self.amm_config,
            self.operator,
            self.operator_wsol_account,
            self.vault_authority,
            self.authority,
            self.pool_state,
            self.token_0_vault,
            self.token_1_vault,
            self.bonding_curve_vault,
            self.bonding_curve_wsol_vault,
            self.token_program,
            self.token_program_2022,
            self.system_program,
            self.associated_token_program,
            self.lp_mint,
            self.cpmm_program,
            self.owner_lp_token,
            self.bonding_curve,
            self.token_0_mint,
            self.token_1_mint,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "amm_config", self.amm_config),
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!(
                    "\"{}\":\"{}\"",
                    "operator_wsol_account", self.operator_wsol_account
                ),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "token_0_vault", self.token_0_vault),
                format!("\"{}\":\"{}\"", "token_1_vault", self.token_1_vault),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_vault", self.bonding_curve_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_wsol_vault", self.bonding_curve_wsol_vault
                ),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_program_2022", self.token_program_2022
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "lp_mint", self.lp_mint),
                format!("\"{}\":\"{}\"", "cpmm_program", self.cpmm_program),
                format!("\"{}\":\"{}\"", "owner_lp_token", self.owner_lp_token),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!("\"{}\":\"{}\"", "token_0_mint", self.token_0_mint),
                format!("\"{}\":\"{}\"", "token_1_mint", self.token_1_mint)
            ]
            .join(",")
        )
    }
}
impl From<DepositIntoRaydiumKeys>
    for [solana_instruction::AccountMeta; DEPOSIT_INTO_RAYDIUM_IX_ACCOUNTS_LEN]
{
    fn from(keys: DepositIntoRaydiumKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.amm_config, false),
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.operator_wsol_account, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.token_0_vault, false),
            solana_instruction::AccountMeta::new(keys.token_1_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_wsol_vault, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_program_2022, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.lp_mint, false),
            solana_instruction::AccountMeta::new(keys.cpmm_program, false),
            solana_instruction::AccountMeta::new(keys.owner_lp_token, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.token_0_mint, false),
            solana_instruction::AccountMeta::new(keys.token_1_mint, false),
        ]
    }
}
pub fn deposit_into_raydium_ix_with_program_id(
    program_id: Pubkey,
    keys: DepositIntoRaydiumKeys,
    args: DepositIntoRaydiumIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; DEPOSIT_INTO_RAYDIUM_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn deposit_into_raydium_ix(
    keys: DepositIntoRaydiumKeys,
    args: DepositIntoRaydiumIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    deposit_into_raydium_ix_with_program_id(crate::ID, keys, args)
}
