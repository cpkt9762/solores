//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_token_fallback
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_TOKEN_FALLBACK_IX_DISCM: [u8; 8] =
    [253u8, 184u8, 126u8, 199u8, 235u8, 232u8, 172u8, 162u8];
pub const CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN: usize = 8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateTokenFallbackIxData {
    pub discriminator: [u8; 8],
    pub salt: u64,
    pub name: String,
    pub symbol: String,
    pub uri: String,
}
impl Default for CreateTokenFallbackIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_TOKEN_FALLBACK_IX_DISCM,
            salt: Default::default(),
            name: Default::default(),
            symbol: Default::default(),
            uri: Default::default(),
        }
    }
}
impl CreateTokenFallbackIxData {
    pub fn new(salt: u64, name: String, symbol: String, uri: String) -> Self {
        Self {
            discriminator: Self::discriminator(),
            salt,
            name,
            symbol,
            uri,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_TOKEN_FALLBACK_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "salt", self.salt),
                format!("\"{}\":{}", "name", self.name),
                format!("\"{}\":{}", "symbol", self.symbol),
                format!("\"{}\":{}", "uri", self.uri)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreateTokenFallbackKeys {
    pub config: Pubkey,
    pub metadata: Pubkey,
    pub mint: Pubkey,
    pub payer: Pubkey,
    pub rent: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub token_metadata_program: Pubkey,
}
impl From<&[Pubkey]> for CreateTokenFallbackKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            metadata: pubkeys[1],
            mint: pubkeys[2],
            payer: pubkeys[3],
            rent: pubkeys[4],
            system_program: pubkeys[5],
            token_program: pubkeys[6],
            token_metadata_program: pubkeys[7],
        }
    }
}
impl CreateTokenFallbackKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.config,
            self.metadata,
            self.mint,
            self.payer,
            self.rent,
            self.system_program,
            self.token_program,
            self.token_metadata_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "metadata", self.metadata),
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!("\"{}\":\"{}\"", "rent", self.rent),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_metadata_program", self.token_metadata_program
                )
            ]
            .join(",")
        )
    }
}
impl From<CreateTokenFallbackKeys>
    for [solana_instruction::AccountMeta; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN]
{
    fn from(keys: CreateTokenFallbackKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.metadata, false),
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_metadata_program, false),
        ]
    }
}
pub fn create_token_fallback_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateTokenFallbackKeys,
    args: CreateTokenFallbackIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_token_fallback_ix(
    keys: CreateTokenFallbackKeys,
    args: CreateTokenFallbackIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_token_fallback_ix_with_program_id(crate::ID, keys, args)
}
