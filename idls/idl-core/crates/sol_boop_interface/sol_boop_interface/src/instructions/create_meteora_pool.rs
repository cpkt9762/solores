//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_meteora_pool
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_METEORA_POOL_IX_DISCM: [u8; 8] =
    [246u8, 254u8, 33u8, 37u8, 225u8, 176u8, 41u8, 232u8];
pub const CREATE_METEORA_POOL_IX_ACCOUNTS_LEN: usize = 21;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateMeteoraPoolIxData {
    pub discriminator: [u8; 8],
}
impl Default for CreateMeteoraPoolIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_METEORA_POOL_IX_DISCM,
        }
    }
}
impl CreateMeteoraPoolIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_METEORA_POOL_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreateMeteoraPoolKeys {
    pub operator: Pubkey,
    pub config: Pubkey,
    pub vault_authority: Pubkey,
    pub cp_amm_config: Pubkey,
    pub pool_authority: Pubkey,
    pub pool: Pubkey,
    pub position: Pubkey,
    pub position_nft_mint: Pubkey,
    pub position_nft_account: Pubkey,
    pub token_a_mint: Pubkey,
    pub token_b_mint: Pubkey,
    pub token_a_vault: Pubkey,
    pub token_b_vault: Pubkey,
    pub bonding_curve: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_vault: Pubkey,
    pub token_program: Pubkey,
    pub token_2022_program: Pubkey,
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub cp_amm_program: Pubkey,
}
impl From<&[Pubkey]> for CreateMeteoraPoolKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            operator: pubkeys[0],
            config: pubkeys[1],
            vault_authority: pubkeys[2],
            cp_amm_config: pubkeys[3],
            pool_authority: pubkeys[4],
            pool: pubkeys[5],
            position: pubkeys[6],
            position_nft_mint: pubkeys[7],
            position_nft_account: pubkeys[8],
            token_a_mint: pubkeys[9],
            token_b_mint: pubkeys[10],
            token_a_vault: pubkeys[11],
            token_b_vault: pubkeys[12],
            bonding_curve: pubkeys[13],
            bonding_curve_vault: pubkeys[14],
            bonding_curve_wsol_vault: pubkeys[15],
            token_program: pubkeys[16],
            token_2022_program: pubkeys[17],
            system_program: pubkeys[18],
            event_authority: pubkeys[19],
            cp_amm_program: pubkeys[20],
        }
    }
}
impl CreateMeteoraPoolKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.operator,
            self.config,
            self.vault_authority,
            self.cp_amm_config,
            self.pool_authority,
            self.pool,
            self.position,
            self.position_nft_mint,
            self.position_nft_account,
            self.token_a_mint,
            self.token_b_mint,
            self.token_a_vault,
            self.token_b_vault,
            self.bonding_curve,
            self.bonding_curve_vault,
            self.bonding_curve_wsol_vault,
            self.token_program,
            self.token_2022_program,
            self.system_program,
            self.event_authority,
            self.cp_amm_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "cp_amm_config", self.cp_amm_config),
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "position", self.position),
                format!("\"{}\":\"{}\"", "position_nft_mint", self.position_nft_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "position_nft_account", self.position_nft_account
                ),
                format!("\"{}\":\"{}\"", "token_a_mint", self.token_a_mint),
                format!("\"{}\":\"{}\"", "token_b_mint", self.token_b_mint),
                format!("\"{}\":\"{}\"", "token_a_vault", self.token_a_vault),
                format!("\"{}\":\"{}\"", "token_b_vault", self.token_b_vault),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_vault", self.bonding_curve_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_wsol_vault", self.bonding_curve_wsol_vault
                ),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_2022_program", self.token_2022_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "cp_amm_program", self.cp_amm_program)
            ]
            .join(",")
        )
    }
}
impl From<CreateMeteoraPoolKeys>
    for [solana_instruction::AccountMeta; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN]
{
    fn from(keys: CreateMeteoraPoolKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.cp_amm_config, false),
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.position_nft_mint, false),
            solana_instruction::AccountMeta::new(keys.position_nft_account, false),
            solana_instruction::AccountMeta::new(keys.token_a_mint, false),
            solana_instruction::AccountMeta::new(keys.token_b_mint, false),
            solana_instruction::AccountMeta::new(keys.token_a_vault, false),
            solana_instruction::AccountMeta::new(keys.token_b_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_wsol_vault, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_2022_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.cp_amm_program, false),
        ]
    }
}
pub fn create_meteora_pool_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateMeteoraPoolKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN] = keys.into();
    let args = CreateMeteoraPoolIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_meteora_pool_ix(
    keys: CreateMeteoraPoolKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_meteora_pool_ix_with_program_id(crate::ID, keys)
}
