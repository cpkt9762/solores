//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: add_operators
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const ADD_OPERATORS_IX_DISCM: [u8; 8] = [165u8, 199u8, 62u8, 214u8, 81u8, 54u8, 4u8, 150u8];
pub const ADD_OPERATORS_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddOperatorsIxData {
    pub discriminator: [u8; 8],
    pub operators: Vec<Pubkey>,
}
impl Default for AddOperatorsIxData {
    fn default() -> Self {
        Self {
            discriminator: ADD_OPERATORS_IX_DISCM,
            operators: Default::default(),
        }
    }
}
impl AddOperatorsIxData {
    pub fn new(operators: Vec<Pubkey>) -> Self {
        Self {
            discriminator: Self::discriminator(),
            operators,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        ADD_OPERATORS_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "operators", self.operators)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct AddOperatorsKeys {
    pub config: Pubkey,
    pub authority: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for AddOperatorsKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            authority: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl AddOperatorsKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.config, self.authority, self.system_program]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<AddOperatorsKeys> for [solana_instruction::AccountMeta; ADD_OPERATORS_IX_ACCOUNTS_LEN] {
    fn from(keys: AddOperatorsKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn add_operators_ix_with_program_id(
    program_id: Pubkey,
    keys: AddOperatorsKeys,
    args: AddOperatorsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; ADD_OPERATORS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn add_operators_ix(
    keys: AddOperatorsKeys,
    args: AddOperatorsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    add_operators_ix_with_program_id(crate::ID, keys, args)
}
