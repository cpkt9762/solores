//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: collect_trading_fees
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const COLLECT_TRADING_FEES_IX_DISCM: [u8; 8] =
    [189u8, 38u8, 205u8, 234u8, 81u8, 77u8, 25u8, 1u8];
pub const COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN: usize = 24;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectTradingFeesIxData {
    pub discriminator: [u8; 8],
}
impl Default for CollectTradingFeesIxData {
    fn default() -> Self {
        Self {
            discriminator: COLLECT_TRADING_FEES_IX_DISCM,
        }
    }
}
impl CollectTradingFeesIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        COLLECT_TRADING_FEES_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CollectTradingFeesKeys {
    pub operator: Pubkey,
    pub protocol_fee_recipient: Pubkey,
    pub config: Pubkey,
    pub lock_program: Pubkey,
    pub vault_authority: Pubkey,
    pub authority: Pubkey,
    pub fee_nft_account: Pubkey,
    pub locked_liquidity: Pubkey,
    pub cpmm_program: Pubkey,
    pub cp_authority: Pubkey,
    pub pool_state: Pubkey,
    pub lp_mint: Pubkey,
    pub recipient_token_0_account: Pubkey,
    pub recipient_token_1_account: Pubkey,
    pub token_0_vault: Pubkey,
    pub token_1_vault: Pubkey,
    pub vault_0_mint: Pubkey,
    pub vault_1_mint: Pubkey,
    pub locked_lp_vault: Pubkey,
    pub system_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub token_program: Pubkey,
    pub token_program_2022: Pubkey,
    pub memo_program: Pubkey,
}
impl From<&[Pubkey]> for CollectTradingFeesKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            operator: pubkeys[0],
            protocol_fee_recipient: pubkeys[1],
            config: pubkeys[2],
            lock_program: pubkeys[3],
            vault_authority: pubkeys[4],
            authority: pubkeys[5],
            fee_nft_account: pubkeys[6],
            locked_liquidity: pubkeys[7],
            cpmm_program: pubkeys[8],
            cp_authority: pubkeys[9],
            pool_state: pubkeys[10],
            lp_mint: pubkeys[11],
            recipient_token_0_account: pubkeys[12],
            recipient_token_1_account: pubkeys[13],
            token_0_vault: pubkeys[14],
            token_1_vault: pubkeys[15],
            vault_0_mint: pubkeys[16],
            vault_1_mint: pubkeys[17],
            locked_lp_vault: pubkeys[18],
            system_program: pubkeys[19],
            associated_token_program: pubkeys[20],
            token_program: pubkeys[21],
            token_program_2022: pubkeys[22],
            memo_program: pubkeys[23],
        }
    }
}
impl CollectTradingFeesKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.operator,
            self.protocol_fee_recipient,
            self.config,
            self.lock_program,
            self.vault_authority,
            self.authority,
            self.fee_nft_account,
            self.locked_liquidity,
            self.cpmm_program,
            self.cp_authority,
            self.pool_state,
            self.lp_mint,
            self.recipient_token_0_account,
            self.recipient_token_1_account,
            self.token_0_vault,
            self.token_1_vault,
            self.vault_0_mint,
            self.vault_1_mint,
            self.locked_lp_vault,
            self.system_program,
            self.associated_token_program,
            self.token_program,
            self.token_program_2022,
            self.memo_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!(
                    "\"{}\":\"{}\"",
                    "protocol_fee_recipient", self.protocol_fee_recipient
                ),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "lock_program", self.lock_program),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "fee_nft_account", self.fee_nft_account),
                format!("\"{}\":\"{}\"", "locked_liquidity", self.locked_liquidity),
                format!("\"{}\":\"{}\"", "cpmm_program", self.cpmm_program),
                format!("\"{}\":\"{}\"", "cp_authority", self.cp_authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "lp_mint", self.lp_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "recipient_token_0_account", self.recipient_token_0_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "recipient_token_1_account", self.recipient_token_1_account
                ),
                format!("\"{}\":\"{}\"", "token_0_vault", self.token_0_vault),
                format!("\"{}\":\"{}\"", "token_1_vault", self.token_1_vault),
                format!("\"{}\":\"{}\"", "vault_0_mint", self.vault_0_mint),
                format!("\"{}\":\"{}\"", "vault_1_mint", self.vault_1_mint),
                format!("\"{}\":\"{}\"", "locked_lp_vault", self.locked_lp_vault),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "token_program_2022", self.token_program_2022
                ),
                format!("\"{}\":\"{}\"", "memo_program", self.memo_program)
            ]
            .join(",")
        )
    }
}
impl From<CollectTradingFeesKeys>
    for [solana_instruction::AccountMeta; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN]
{
    fn from(keys: CollectTradingFeesKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.protocol_fee_recipient, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.lock_program, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.fee_nft_account, false),
            solana_instruction::AccountMeta::new(keys.locked_liquidity, false),
            solana_instruction::AccountMeta::new(keys.cpmm_program, false),
            solana_instruction::AccountMeta::new(keys.cp_authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.lp_mint, false),
            solana_instruction::AccountMeta::new(keys.recipient_token_0_account, false),
            solana_instruction::AccountMeta::new(keys.recipient_token_1_account, false),
            solana_instruction::AccountMeta::new(keys.token_0_vault, false),
            solana_instruction::AccountMeta::new(keys.token_1_vault, false),
            solana_instruction::AccountMeta::new(keys.vault_0_mint, false),
            solana_instruction::AccountMeta::new(keys.vault_1_mint, false),
            solana_instruction::AccountMeta::new(keys.locked_lp_vault, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.token_program_2022, false),
            solana_instruction::AccountMeta::new(keys.memo_program, false),
        ]
    }
}
pub fn collect_trading_fees_ix_with_program_id(
    program_id: Pubkey,
    keys: CollectTradingFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN] =
        keys.into();
    let args = CollectTradingFeesIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn collect_trading_fees_ix(
    keys: CollectTradingFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    collect_trading_fees_ix_with_program_id(crate::ID, keys)
}
