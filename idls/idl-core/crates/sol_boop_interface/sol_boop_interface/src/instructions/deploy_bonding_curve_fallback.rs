//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: deploy_bonding_curve_fallback
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const DEPLOY_BONDING_CURVE_FALLBACK_IX_DISCM: [u8; 8] =
    [53u8, 230u8, 172u8, 84u8, 77u8, 174u8, 22u8, 61u8];
pub const DEPLOY_BONDING_CURVE_FALLBACK_IX_ACCOUNTS_LEN: usize = 10;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DeployBondingCurveFallbackIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub creator: Pubkey,
    pub salt: u64,
}
impl Default for DeployBondingCurveFallbackIxData {
    fn default() -> Self {
        Self {
            discriminator: DEPLOY_BONDING_CURVE_FALLBACK_IX_DISCM,
            creator: Default::default(),
            salt: Default::default(),
        }
    }
}
impl DeployBondingCurveFallbackIxData {
    pub fn new(creator: Pubkey, salt: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            creator,
            salt,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        DEPLOY_BONDING_CURVE_FALLBACK_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "creator", self.creator),
                format!("\"{}\":{}", "salt", self.salt)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct DeployBondingCurveFallbackKeys {
    pub mint: Pubkey,
    pub vault_authority: Pubkey,
    pub bonding_curve: Pubkey,
    pub bonding_curve_sol_vault: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub config: Pubkey,
    pub payer: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<&[Pubkey]> for DeployBondingCurveFallbackKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            mint: pubkeys[0],
            vault_authority: pubkeys[1],
            bonding_curve: pubkeys[2],
            bonding_curve_sol_vault: pubkeys[3],
            bonding_curve_vault: pubkeys[4],
            config: pubkeys[5],
            payer: pubkeys[6],
            system_program: pubkeys[7],
            token_program: pubkeys[8],
            associated_token_program: pubkeys[9],
        }
    }
}
impl DeployBondingCurveFallbackKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.mint,
            self.vault_authority,
            self.bonding_curve,
            self.bonding_curve_sol_vault,
            self.bonding_curve_vault,
            self.config,
            self.payer,
            self.system_program,
            self.token_program,
            self.associated_token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_sol_vault", self.bonding_curve_sol_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_vault", self.bonding_curve_vault
                ),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                )
            ]
            .join(",")
        )
    }
}
impl From<DeployBondingCurveFallbackKeys>
    for [solana_instruction::AccountMeta; DEPLOY_BONDING_CURVE_FALLBACK_IX_ACCOUNTS_LEN]
{
    fn from(keys: DeployBondingCurveFallbackKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_sol_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_vault, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
        ]
    }
}
pub fn deploy_bonding_curve_fallback_ix_with_program_id(
    program_id: Pubkey,
    keys: DeployBondingCurveFallbackKeys,
    args: DeployBondingCurveFallbackIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; DEPLOY_BONDING_CURVE_FALLBACK_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn deploy_bonding_curve_fallback_ix(
    keys: DeployBondingCurveFallbackKeys,
    args: DeployBondingCurveFallbackIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    deploy_bonding_curve_fallback_ix_with_program_id(crate::ID, keys, args)
}
