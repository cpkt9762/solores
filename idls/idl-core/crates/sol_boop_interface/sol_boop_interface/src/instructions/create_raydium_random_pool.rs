//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_raydium_random_pool
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_RAYDIUM_RANDOM_POOL_IX_DISCM: [u8; 8] =
    [78u8, 44u8, 173u8, 29u8, 132u8, 180u8, 4u8, 172u8];
pub const CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN: usize = 22;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateRaydiumRandomPoolIxData {
    pub discriminator: [u8; 8],
}
impl Default for CreateRaydiumRandomPoolIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_RAYDIUM_RANDOM_POOL_IX_DISCM,
        }
    }
}
impl CreateRaydiumRandomPoolIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_RAYDIUM_RANDOM_POOL_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreateRaydiumRandomPoolKeys {
    pub cpmm_program: Pubkey,
    pub amm_config: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub token_0_mint: Pubkey,
    pub token_1_mint: Pubkey,
    pub lp_mint: Pubkey,
    pub vault_authority: Pubkey,
    pub bonding_curve: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_vault: Pubkey,
    pub creator_lp_token: Pubkey,
    pub token_0_vault: Pubkey,
    pub token_1_vault: Pubkey,
    pub create_pool_fee: Pubkey,
    pub observation_state: Pubkey,
    pub operator: Pubkey,
    pub config: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
}
impl From<&[Pubkey]> for CreateRaydiumRandomPoolKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            cpmm_program: pubkeys[0],
            amm_config: pubkeys[1],
            authority: pubkeys[2],
            pool_state: pubkeys[3],
            token_0_mint: pubkeys[4],
            token_1_mint: pubkeys[5],
            lp_mint: pubkeys[6],
            vault_authority: pubkeys[7],
            bonding_curve: pubkeys[8],
            bonding_curve_vault: pubkeys[9],
            bonding_curve_wsol_vault: pubkeys[10],
            creator_lp_token: pubkeys[11],
            token_0_vault: pubkeys[12],
            token_1_vault: pubkeys[13],
            create_pool_fee: pubkeys[14],
            observation_state: pubkeys[15],
            operator: pubkeys[16],
            config: pubkeys[17],
            token_program: pubkeys[18],
            associated_token_program: pubkeys[19],
            system_program: pubkeys[20],
            rent: pubkeys[21],
        }
    }
}
impl CreateRaydiumRandomPoolKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.cpmm_program,
            self.amm_config,
            self.authority,
            self.pool_state,
            self.token_0_mint,
            self.token_1_mint,
            self.lp_mint,
            self.vault_authority,
            self.bonding_curve,
            self.bonding_curve_vault,
            self.bonding_curve_wsol_vault,
            self.creator_lp_token,
            self.token_0_vault,
            self.token_1_vault,
            self.create_pool_fee,
            self.observation_state,
            self.operator,
            self.config,
            self.token_program,
            self.associated_token_program,
            self.system_program,
            self.rent,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "cpmm_program", self.cpmm_program),
                format!("\"{}\":\"{}\"", "amm_config", self.amm_config),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "token_0_mint", self.token_0_mint),
                format!("\"{}\":\"{}\"", "token_1_mint", self.token_1_mint),
                format!("\"{}\":\"{}\"", "lp_mint", self.lp_mint),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_vault", self.bonding_curve_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_wsol_vault", self.bonding_curve_wsol_vault
                ),
                format!("\"{}\":\"{}\"", "creator_lp_token", self.creator_lp_token),
                format!("\"{}\":\"{}\"", "token_0_vault", self.token_0_vault),
                format!("\"{}\":\"{}\"", "token_1_vault", self.token_1_vault),
                format!("\"{}\":\"{}\"", "create_pool_fee", self.create_pool_fee),
                format!("\"{}\":\"{}\"", "observation_state", self.observation_state),
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent)
            ]
            .join(",")
        )
    }
}
impl From<CreateRaydiumRandomPoolKeys>
    for [solana_instruction::AccountMeta; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN]
{
    fn from(keys: CreateRaydiumRandomPoolKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.cpmm_program, false),
            solana_instruction::AccountMeta::new(keys.amm_config, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.token_0_mint, false),
            solana_instruction::AccountMeta::new(keys.token_1_mint, false),
            solana_instruction::AccountMeta::new(keys.lp_mint, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_wsol_vault, false),
            solana_instruction::AccountMeta::new(keys.creator_lp_token, false),
            solana_instruction::AccountMeta::new(keys.token_0_vault, false),
            solana_instruction::AccountMeta::new(keys.token_1_vault, false),
            solana_instruction::AccountMeta::new(keys.create_pool_fee, false),
            solana_instruction::AccountMeta::new(keys.observation_state, false),
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
        ]
    }
}
pub fn create_raydium_random_pool_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateRaydiumRandomPoolKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN] =
        keys.into();
    let args = CreateRaydiumRandomPoolIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_raydium_random_pool_ix(
    keys: CreateRaydiumRandomPoolKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_raydium_random_pool_ix_with_program_id(crate::ID, keys)
}
