//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: split_trading_fees
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SPLIT_TRADING_FEES_IX_DISCM: [u8; 8] =
    [96u8, 126u8, 225u8, 47u8, 185u8, 213u8, 50u8, 58u8];
pub const SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN: usize = 24;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SplitTradingFeesIxData {
    pub discriminator: [u8; 8],
}
impl Default for SplitTradingFeesIxData {
    fn default() -> Self {
        Self {
            discriminator: SPLIT_TRADING_FEES_IX_DISCM,
        }
    }
}
impl SplitTradingFeesIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SPLIT_TRADING_FEES_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SplitTradingFeesKeys {
    pub operator: Pubkey,
    pub mint: Pubkey,
    pub wsol: Pubkey,
    pub config: Pubkey,
    pub vault_authority: Pubkey,
    pub bonding_curve: Pubkey,
    pub trading_fees_vault: Pubkey,
    pub fee_splitter_program: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub fee_splitter_config: Pubkey,
    pub fee_splitter_creator_vault: Pubkey,
    pub fee_splitter_vault_authority: Pubkey,
    pub fee_splitter_creator_vault_authority: Pubkey,
    pub fee_splitter_staking_mint: Pubkey,
    pub fee_splitter_wsol_vault: Pubkey,
    pub fee_splitter_creator_vault_authority_wsol_vault: Pubkey,
    pub fee_splitter_treasury_wsol_vault: Pubkey,
    pub fee_splitter_team_wsol_vault: Pubkey,
    pub fee_splitter_reward_pool: Pubkey,
    pub fee_splitter_reward_pool_staking_vault: Pubkey,
    pub fee_splitter_reward_pool_reward_vault: Pubkey,
    pub fee_splitter_reward_pool_program: Pubkey,
}
impl From<&[Pubkey]> for SplitTradingFeesKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            operator: pubkeys[0],
            mint: pubkeys[1],
            wsol: pubkeys[2],
            config: pubkeys[3],
            vault_authority: pubkeys[4],
            bonding_curve: pubkeys[5],
            trading_fees_vault: pubkeys[6],
            fee_splitter_program: pubkeys[7],
            system_program: pubkeys[8],
            token_program: pubkeys[9],
            associated_token_program: pubkeys[10],
            fee_splitter_config: pubkeys[11],
            fee_splitter_creator_vault: pubkeys[12],
            fee_splitter_vault_authority: pubkeys[13],
            fee_splitter_creator_vault_authority: pubkeys[14],
            fee_splitter_staking_mint: pubkeys[15],
            fee_splitter_wsol_vault: pubkeys[16],
            fee_splitter_creator_vault_authority_wsol_vault: pubkeys[17],
            fee_splitter_treasury_wsol_vault: pubkeys[18],
            fee_splitter_team_wsol_vault: pubkeys[19],
            fee_splitter_reward_pool: pubkeys[20],
            fee_splitter_reward_pool_staking_vault: pubkeys[21],
            fee_splitter_reward_pool_reward_vault: pubkeys[22],
            fee_splitter_reward_pool_program: pubkeys[23],
        }
    }
}
impl SplitTradingFeesKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.operator,
            self.mint,
            self.wsol,
            self.config,
            self.vault_authority,
            self.bonding_curve,
            self.trading_fees_vault,
            self.fee_splitter_program,
            self.system_program,
            self.token_program,
            self.associated_token_program,
            self.fee_splitter_config,
            self.fee_splitter_creator_vault,
            self.fee_splitter_vault_authority,
            self.fee_splitter_creator_vault_authority,
            self.fee_splitter_staking_mint,
            self.fee_splitter_wsol_vault,
            self.fee_splitter_creator_vault_authority_wsol_vault,
            self.fee_splitter_treasury_wsol_vault,
            self.fee_splitter_team_wsol_vault,
            self.fee_splitter_reward_pool,
            self.fee_splitter_reward_pool_staking_vault,
            self.fee_splitter_reward_pool_reward_vault,
            self.fee_splitter_reward_pool_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "wsol", self.wsol),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!(
                    "\"{}\":\"{}\"",
                    "trading_fees_vault", self.trading_fees_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_program", self.fee_splitter_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_config", self.fee_splitter_config
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_creator_vault", self.fee_splitter_creator_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_vault_authority", self.fee_splitter_vault_authority
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_creator_vault_authority",
                    self.fee_splitter_creator_vault_authority
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_staking_mint", self.fee_splitter_staking_mint
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_wsol_vault", self.fee_splitter_wsol_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_creator_vault_authority_wsol_vault",
                    self.fee_splitter_creator_vault_authority_wsol_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_treasury_wsol_vault", self.fee_splitter_treasury_wsol_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_team_wsol_vault", self.fee_splitter_team_wsol_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_reward_pool", self.fee_splitter_reward_pool
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_reward_pool_staking_vault",
                    self.fee_splitter_reward_pool_staking_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_reward_pool_reward_vault",
                    self.fee_splitter_reward_pool_reward_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "fee_splitter_reward_pool_program", self.fee_splitter_reward_pool_program
                )
            ]
            .join(",")
        )
    }
}
impl From<SplitTradingFeesKeys>
    for [solana_instruction::AccountMeta; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN]
{
    fn from(keys: SplitTradingFeesKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.wsol, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.trading_fees_vault, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_config, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_creator_vault, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_vault_authority, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_creator_vault_authority, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_staking_mint, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_wsol_vault, false),
            solana_instruction::AccountMeta::new(
                keys.fee_splitter_creator_vault_authority_wsol_vault,
                false,
            ),
            solana_instruction::AccountMeta::new(keys.fee_splitter_treasury_wsol_vault, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_team_wsol_vault, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_reward_pool, false),
            solana_instruction::AccountMeta::new(
                keys.fee_splitter_reward_pool_staking_vault,
                false,
            ),
            solana_instruction::AccountMeta::new(keys.fee_splitter_reward_pool_reward_vault, false),
            solana_instruction::AccountMeta::new(keys.fee_splitter_reward_pool_program, false),
        ]
    }
}
pub fn split_trading_fees_ix_with_program_id(
    program_id: Pubkey,
    keys: SplitTradingFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN] = keys.into();
    let args = SplitTradingFeesIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn split_trading_fees_ix(
    keys: SplitTradingFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    split_trading_fees_ix_with_program_id(crate::ID, keys)
}
