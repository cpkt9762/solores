//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: graduate
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const GRADUATE_IX_DISCM: [u8; 8] = [45u8, 235u8, 225u8, 181u8, 17u8, 218u8, 64u8, 130u8];
pub const GRADUATE_IX_ACCOUNTS_LEN: usize = 15;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GraduateIxData {
    pub discriminator: [u8; 8],
}
impl Default for GraduateIxData {
    fn default() -> Self {
        Self {
            discriminator: GRADUATE_IX_DISCM,
        }
    }
}
impl GraduateIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        GRADUATE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct GraduateKeys {
    pub mint: Pubkey,
    pub wsol: Pubkey,
    pub protocol_fee_recipient: Pubkey,
    pub token_distributor: Pubkey,
    pub token_distributor_token_account: Pubkey,
    pub vault_authority: Pubkey,
    pub bonding_curve_sol_vault: Pubkey,
    pub bonding_curve: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_account: Pubkey,
    pub operator: Pubkey,
    pub config: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<&[Pubkey]> for GraduateKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            mint: pubkeys[0],
            wsol: pubkeys[1],
            protocol_fee_recipient: pubkeys[2],
            token_distributor: pubkeys[3],
            token_distributor_token_account: pubkeys[4],
            vault_authority: pubkeys[5],
            bonding_curve_sol_vault: pubkeys[6],
            bonding_curve: pubkeys[7],
            bonding_curve_vault: pubkeys[8],
            bonding_curve_wsol_account: pubkeys[9],
            operator: pubkeys[10],
            config: pubkeys[11],
            system_program: pubkeys[12],
            token_program: pubkeys[13],
            associated_token_program: pubkeys[14],
        }
    }
}
impl GraduateKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.mint,
            self.wsol,
            self.protocol_fee_recipient,
            self.token_distributor,
            self.token_distributor_token_account,
            self.vault_authority,
            self.bonding_curve_sol_vault,
            self.bonding_curve,
            self.bonding_curve_vault,
            self.bonding_curve_wsol_account,
            self.operator,
            self.config,
            self.system_program,
            self.token_program,
            self.associated_token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "wsol", self.wsol),
                format!(
                    "\"{}\":\"{}\"",
                    "protocol_fee_recipient", self.protocol_fee_recipient
                ),
                format!("\"{}\":\"{}\"", "token_distributor", self.token_distributor),
                format!(
                    "\"{}\":\"{}\"",
                    "token_distributor_token_account", self.token_distributor_token_account
                ),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_sol_vault", self.bonding_curve_sol_vault
                ),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_vault", self.bonding_curve_vault
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_wsol_account", self.bonding_curve_wsol_account
                ),
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                )
            ]
            .join(",")
        )
    }
}
impl From<GraduateKeys> for [solana_instruction::AccountMeta; GRADUATE_IX_ACCOUNTS_LEN] {
    fn from(keys: GraduateKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.wsol, false),
            solana_instruction::AccountMeta::new(keys.protocol_fee_recipient, false),
            solana_instruction::AccountMeta::new(keys.token_distributor, false),
            solana_instruction::AccountMeta::new(keys.token_distributor_token_account, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_sol_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_vault, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_wsol_account, false),
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
        ]
    }
}
pub fn graduate_ix_with_program_id(
    program_id: Pubkey,
    keys: GraduateKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; GRADUATE_IX_ACCOUNTS_LEN] = keys.into();
    let args = GraduateIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn graduate_ix(keys: GraduateKeys) -> Result<solana_instruction::Instruction, std::io::Error> {
    graduate_ix_with_program_id(crate::ID, keys)
}
