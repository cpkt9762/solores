//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: close_bonding_curve_vault
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CLOSE_BONDING_CURVE_VAULT_IX_DISCM: [u8; 8] =
    [189u8, 71u8, 189u8, 239u8, 113u8, 66u8, 59u8, 189u8];
pub const CLOSE_BONDING_CURVE_VAULT_IX_ACCOUNTS_LEN: usize = 12;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseBondingCurveVaultIxData {
    pub discriminator: [u8; 8],
}
impl Default for CloseBondingCurveVaultIxData {
    fn default() -> Self {
        Self {
            discriminator: CLOSE_BONDING_CURVE_VAULT_IX_DISCM,
        }
    }
}
impl CloseBondingCurveVaultIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CLOSE_BONDING_CURVE_VAULT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CloseBondingCurveVaultKeys {
    pub config: Pubkey,
    pub operator: Pubkey,
    pub vault_authority: Pubkey,
    pub bonding_curve: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub mint: Pubkey,
    pub recipient_token_account: Pubkey,
    pub recipient: Pubkey,
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub rent: Pubkey,
}
impl From<&[Pubkey]> for CloseBondingCurveVaultKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            operator: pubkeys[1],
            vault_authority: pubkeys[2],
            bonding_curve: pubkeys[3],
            bonding_curve_vault: pubkeys[4],
            mint: pubkeys[5],
            recipient_token_account: pubkeys[6],
            recipient: pubkeys[7],
            token_program: pubkeys[8],
            system_program: pubkeys[9],
            associated_token_program: pubkeys[10],
            rent: pubkeys[11],
        }
    }
}
impl CloseBondingCurveVaultKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.config,
            self.operator,
            self.vault_authority,
            self.bonding_curve,
            self.bonding_curve_vault,
            self.mint,
            self.recipient_token_account,
            self.recipient,
            self.token_program,
            self.system_program,
            self.associated_token_program,
            self.rent,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!("\"{}\":\"{}\"", "vault_authority", self.vault_authority),
                format!("\"{}\":\"{}\"", "bonding_curve", self.bonding_curve),
                format!(
                    "\"{}\":\"{}\"",
                    "bonding_curve_vault", self.bonding_curve_vault
                ),
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!(
                    "\"{}\":\"{}\"",
                    "recipient_token_account", self.recipient_token_account
                ),
                format!("\"{}\":\"{}\"", "recipient", self.recipient),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "rent", self.rent)
            ]
            .join(",")
        )
    }
}
impl From<CloseBondingCurveVaultKeys>
    for [solana_instruction::AccountMeta; CLOSE_BONDING_CURVE_VAULT_IX_ACCOUNTS_LEN]
{
    fn from(keys: CloseBondingCurveVaultKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.vault_authority, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve_vault, false),
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.recipient_token_account, false),
            solana_instruction::AccountMeta::new(keys.recipient, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
        ]
    }
}
pub fn close_bonding_curve_vault_ix_with_program_id(
    program_id: Pubkey,
    keys: CloseBondingCurveVaultKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CLOSE_BONDING_CURVE_VAULT_IX_ACCOUNTS_LEN] =
        keys.into();
    let args = CloseBondingCurveVaultIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn close_bonding_curve_vault_ix(
    keys: CloseBondingCurveVaultKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    close_bonding_curve_vault_ix_with_program_id(crate::ID, keys)
}
