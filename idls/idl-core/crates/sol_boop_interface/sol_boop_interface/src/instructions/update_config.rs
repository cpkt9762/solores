//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: update_config
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const UPDATE_CONFIG_IX_DISCM: [u8; 8] = [29u8, 158u8, 252u8, 191u8, 10u8, 83u8, 219u8, 99u8];
pub const UPDATE_CONFIG_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub new_protocol_fee_recipient: Pubkey,
    pub new_virtual_sol_reserves: u64,
    pub new_virtual_token_reserves: u64,
    pub new_graduation_target: u64,
    pub new_graduation_fee: u64,
    pub new_damping_term: u8,
    pub new_swap_fee_basis_points: u8,
    pub new_token_for_stakers_basis_points: u16,
    pub new_token_amount_for_raydium_liquidity: u64,
    pub new_max_graduation_price_deviation_basis_points: u16,
    pub new_max_swap_amount_for_pool_price_correction_basis_points: u16,
}
impl Default for UpdateConfigIxData {
    fn default() -> Self {
        Self {
            discriminator: UPDATE_CONFIG_IX_DISCM,
            new_protocol_fee_recipient: Default::default(),
            new_virtual_sol_reserves: Default::default(),
            new_virtual_token_reserves: Default::default(),
            new_graduation_target: Default::default(),
            new_graduation_fee: Default::default(),
            new_damping_term: Default::default(),
            new_swap_fee_basis_points: Default::default(),
            new_token_for_stakers_basis_points: Default::default(),
            new_token_amount_for_raydium_liquidity: Default::default(),
            new_max_graduation_price_deviation_basis_points: Default::default(),
            new_max_swap_amount_for_pool_price_correction_basis_points: Default::default(),
        }
    }
}
impl UpdateConfigIxData {
    pub fn new(
        new_protocol_fee_recipient: Pubkey,
        new_virtual_sol_reserves: u64,
        new_virtual_token_reserves: u64,
        new_graduation_target: u64,
        new_graduation_fee: u64,
        new_damping_term: u8,
        new_swap_fee_basis_points: u8,
        new_token_for_stakers_basis_points: u16,
        new_token_amount_for_raydium_liquidity: u64,
        new_max_graduation_price_deviation_basis_points: u16,
        new_max_swap_amount_for_pool_price_correction_basis_points: u16,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            new_protocol_fee_recipient,
            new_virtual_sol_reserves,
            new_virtual_token_reserves,
            new_graduation_target,
            new_graduation_fee,
            new_damping_term,
            new_swap_fee_basis_points,
            new_token_for_stakers_basis_points,
            new_token_amount_for_raydium_liquidity,
            new_max_graduation_price_deviation_basis_points,
            new_max_swap_amount_for_pool_price_correction_basis_points,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        UPDATE_CONFIG_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "new_protocol_fee_recipient", self.new_protocol_fee_recipient
                ),
                format!(
                    "\"{}\":{}",
                    "new_virtual_sol_reserves", self.new_virtual_sol_reserves
                ),
                format!(
                    "\"{}\":{}",
                    "new_virtual_token_reserves", self.new_virtual_token_reserves
                ),
                format!(
                    "\"{}\":{}",
                    "new_graduation_target", self.new_graduation_target
                ),
                format!("\"{}\":{}", "new_graduation_fee", self.new_graduation_fee),
                format!("\"{}\":{}", "new_damping_term", self.new_damping_term),
                format!(
                    "\"{}\":{}",
                    "new_swap_fee_basis_points", self.new_swap_fee_basis_points
                ),
                format!(
                    "\"{}\":{}",
                    "new_token_for_stakers_basis_points", self.new_token_for_stakers_basis_points
                ),
                format!(
                    "\"{}\":{}",
                    "new_token_amount_for_raydium_liquidity",
                    self.new_token_amount_for_raydium_liquidity
                ),
                format!(
                    "\"{}\":{}",
                    "new_max_graduation_price_deviation_basis_points",
                    self.new_max_graduation_price_deviation_basis_points
                ),
                format!(
                    "\"{}\":{}",
                    "new_max_swap_amount_for_pool_price_correction_basis_points",
                    self.new_max_swap_amount_for_pool_price_correction_basis_points
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct UpdateConfigKeys {
    pub config: Pubkey,
    pub authority: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for UpdateConfigKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            config: pubkeys[0],
            authority: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl UpdateConfigKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.config, self.authority, self.system_program]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<UpdateConfigKeys> for [solana_instruction::AccountMeta; UPDATE_CONFIG_IX_ACCOUNTS_LEN] {
    fn from(keys: UpdateConfigKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn update_config_ix_with_program_id(
    program_id: Pubkey,
    keys: UpdateConfigKeys,
    args: UpdateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; UPDATE_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn update_config_ix(
    keys: UpdateConfigKeys,
    args: UpdateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    update_config_ix_with_program_id(crate::ID, keys, args)
}
