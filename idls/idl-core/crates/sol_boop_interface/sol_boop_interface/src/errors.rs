//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#![doc = concat!("Anchor", " error definitions module")]
//!Generated error enums and conversion implementations
///Custom errors for the boop program
#[derive(Clone, Copy, Debug, Eq, thiserror::Error, num_derive::FromPrimitive, PartialEq)]
pub enum BoopError {
    ///6000 - Amount in too low
    #[error("Amount in too low")]
    AmountInTooLow = 6000isize,
    ///6001 - Amount out too low
    #[error("Amount out too low")]
    AmountOutTooLow = 6001isize,
    ///6002 - Amount zero
    #[error("Amount zero")]
    AmountZero = 6002isize,
    ///6003 - Config not initialized
    #[error("Config not initialized")]
    ConfigNotInitialized = 6003isize,
    ///6004 - Creator is not provided
    #[error("Creator is not provided")]
    CreatorIsNotProvided = 6004isize,
    ///6005 - Damping term too low
    #[error("Damping term too low")]
    DampingTermTooLow = 6005isize,
    ///6006 - First buy must be at most 50% of the total supply
    #[error("First buy must be at most 50% of the total supply")]
    FirstBuyMustBeAtMost50PercentOfTotalSupply = 6006isize,
    ///6007 - Graduation fee relative to graduation target is too high
    #[error("Graduation fee relative to graduation target is too high")]
    GraduationFeeRelativeToTargetIsTooHigh = 6007isize,
    ///6008 - Insufficient tokens to transfer out of the bonding curve
    #[error("Insufficient tokens to transfer out of the bonding curve")]
    InsufficientTokensOut = 6008isize,
    ///6009 - Invalid bonding curve status
    #[error("Invalid bonding curve status")]
    InvalidBondingCurveStatus = 6009isize,
    ///6010 - Invalid damping term
    #[error("Invalid damping term")]
    InvalidDampingTerm = 6010isize,
    ///6011 - Invalid mint
    #[error("Invalid mint")]
    InvalidMint = 6011isize,
    ///6012 - Invalid protocol fee recipient
    #[error("Invalid protocol fee recipient")]
    InvalidProtocolFeeRecipient = 6012isize,
    ///6013 - Invalid sqrt price
    #[error("Invalid sqrt price")]
    InvalidSqrtPrice = 6013isize,
    ///6014 - Math overflow
    #[error("Math overflow")]
    MathOverflow = 6014isize,
    ///6015 - Max basis points off graduation price too high
    #[error("Max basis points off graduation price too high")]
    MaxBasisPointsOffGraduationPriceTooHigh = 6015isize,
    ///6016 - Max graduation price deviation basis points too high
    #[error("Max graduation price deviation basis points too high")]
    MaxGraduationPriceDeviationBasisPointsTooHigh = 6016isize,
    ///6017 - Max swap amount for pool price correction basis points too high
    #[error("Max swap amount for pool price correction basis points too high")]
    MaxSwapAmountForPoolPriceCorrectionBasisPointsTooHigh = 6017isize,
    ///6018 - Mint is larger than or equal to native mint
    #[error("Mint is larger than or equal to native mint")]
    MintIsLargerThanOrEqualToNativeMint = 6018isize,
    ///6019 - No authority transfer in progress
    #[error("No authority transfer in progress")]
    NoAuthorityTransferInProgress = 6019isize,
    ///6020 - LP Token amount is too low
    #[error("LP Token amount is too low")]
    NothingToDeposit = 6020isize,
    ///6021 - Nothing to split
    #[error("Nothing to split")]
    NothingToSplit = 6021isize,
    ///6022 - Nothing to lock
    #[error("Nothing to lock")]
    NothingToLock = 6022isize,
    ///6023 - Operator already added
    #[error("Operator already added")]
    OperatorAlreadyAdded = 6023isize,
    ///6024 - Operator does not exist
    #[error("Operator does not exist")]
    OperatorDoesNotExist = 6024isize,
    ///6025 - Paused
    #[error("Paused")]
    Paused = 6025isize,
    ///6026 - Pool is already created and has a price out of range when attempting to deposit liquidity
    #[error(
        "Pool is already created and has a price out of range when attempting to deposit liquidity"
    )]
    PoolPriceOutOfRange = 6026isize,
    ///6027 - Swap fee basis points too high
    #[error("Swap fee basis points too high")]
    SwapFeeBasisPointsTooHigh = 6027isize,
    ///6028 - Swap amount exceeds the reasonable limit to leave as liquidity
    #[error("Swap amount exceeds the reasonable limit to leave as liquidity")]
    SwapAmountTooHigh = 6028isize,
    ///6029 - Token amount for Raydium liquidity too high
    #[error("Token amount for Raydium liquidity too high")]
    TokenAmountForRaydiumLiquidityTooHigh = 6029isize,
    ///6030 - Token for stakers basis points too high
    #[error("Token for stakers basis points too high")]
    TokenForStakersBasisPointsTooHigh = 6030isize,
    ///6031 - Token graduated
    #[error("Token graduated")]
    TokenGraduated = 6031isize,
    ///6032 - Token name too long
    #[error("Token name too long")]
    TokenNameTooLong = 6032isize,
    ///6033 - Token name too short
    #[error("Token name too short")]
    TokenNameTooShort = 6033isize,
    ///6034 - Token symbol too long
    #[error("Token symbol too long")]
    TokenSymbolTooLong = 6034isize,
    ///6035 - Token symbol too short
    #[error("Token symbol too short")]
    TokenSymbolTooShort = 6035isize,
    ///6036 - Unauthorized
    #[error("Unauthorized")]
    Unauthorized = 6036isize,
}
impl From<BoopError> for solana_program_error::ProgramError {
    fn from(e: BoopError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
