//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const GLOBAL_CONFIG_ACCOUNT_DISCM: [u8; 8] =
    [149u8, 8u8, 156u8, 202u8, 160u8, 252u8, 176u8, 217u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GlobalConfig {
    pub discriminator: [u8; 8],
    ///Account update epoch
    pub epoch: u64,
    ///0: Constant Product Curve
    ///1: Fixed Price Curve
    ///2: Linear Price Curve
    pub curve_type: u8,
    ///Config index
    pub index: u16,
    ///The fee of migrate to amm
    pub migrate_fee: u64,
    ///The trade fee rate, denominated in hundredths of a bip (10^-6)
    pub trade_fee_rate: u64,
    ///The maximum share fee rate, denominated in hundredths of a bip (10^-6)
    pub max_share_fee_rate: u64,
    ///The minimum base supply, the value without decimals
    pub min_base_supply: u64,
    ///The maximum lock rate, denominated in hundredths of a bip (10^-6)
    pub max_lock_rate: u64,
    ///The minimum base sell rate, denominated in hundredths of a bip (10^-6)
    pub min_base_sell_rate: u64,
    ///The minimum base migrate rate, denominated in hundredths of a bip (10^-6)
    pub min_base_migrate_rate: u64,
    ///The minimum quote fund raising, the value with decimals
    pub min_quote_fund_raising: u64,
    ///Mint information for quote token
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_mint: Pubkey,
    ///Protocol Fee owner
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub protocol_fee_owner: Pubkey,
    ///Migrate Fee owner
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub migrate_fee_owner: Pubkey,
    ///Migrate to amm control wallet
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub migrate_to_amm_wallet: Pubkey,
    ///Migrate to cpswap wallet
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub migrate_to_cpswap_wallet: Pubkey,
    ///padding for future updates
    pub padding: [u64; 16],
}
impl Default for GlobalConfig {
    fn default() -> Self {
        Self {
            discriminator: GLOBAL_CONFIG_ACCOUNT_DISCM,
            epoch: Default::default(),
            curve_type: Default::default(),
            index: Default::default(),
            migrate_fee: Default::default(),
            trade_fee_rate: Default::default(),
            max_share_fee_rate: Default::default(),
            min_base_supply: Default::default(),
            max_lock_rate: Default::default(),
            min_base_sell_rate: Default::default(),
            min_base_migrate_rate: Default::default(),
            min_quote_fund_raising: Default::default(),
            quote_mint: Default::default(),
            protocol_fee_owner: Default::default(),
            migrate_fee_owner: Default::default(),
            migrate_to_amm_wallet: Default::default(),
            migrate_to_cpswap_wallet: Default::default(),
            padding: Default::default(),
        }
    }
}
impl GlobalConfig {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 371usize;
    pub fn discriminator() -> [u8; 8] {
        GLOBAL_CONFIG_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
