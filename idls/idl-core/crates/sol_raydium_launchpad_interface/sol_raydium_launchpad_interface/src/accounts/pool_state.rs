//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const POOL_STATE_ACCOUNT_DISCM: [u8; 8] =
    [247u8, 237u8, 227u8, 245u8, 215u8, 195u8, 222u8, 70u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PoolState {
    pub discriminator: [u8; 8],
    ///Account update epoch
    pub epoch: u64,
    ///Bump seed used for PDA address derivation
    pub auth_bump: u8,
    ///Current status of the pool
    ///* 0: Pool is funding
    ///* 1: Pool funding is end, waiting for migration
    ///* 2: Pool migration is done
    pub status: u8,
    ///Decimals of the pool base token
    pub base_decimals: u8,
    ///Decimals of the pool quote token
    pub quote_decimals: u8,
    ///Migrate to AMM or CpSwap
    pub migrate_type: u8,
    ///Supply of the pool base token
    pub supply: u64,
    ///Total sell amount of the base token
    pub total_base_sell: u64,
    ///For different curves, virtual_base and virtual_quote have different meanings
    ///For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price
    ///For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect
    ///For fixed price curve, virtual_quote/virtual_base is the initial price
    pub virtual_base: u64,
    pub virtual_quote: u64,
    ///Actual base token amount in the pool
    ///Represents the real tokens available for trading
    pub real_base: u64,
    ///Actual quote token amount in the pool
    ///Represents the real tokens available for trading
    pub real_quote: u64,
    ///The total quote fund raising of the pool
    pub total_quote_fund_raising: u64,
    ///Accumulated trading fees in quote tokens
    ///Can be collected by the protocol fee owner
    pub quote_protocol_fee: u64,
    ///Accumulated platform fees in quote tokens
    ///Can be collected by the platform wallet stored in platform config
    pub platform_fee: u64,
    ///The fee of migrate to amm
    pub migrate_fee: u64,
    ///Vesting schedule for the base token
    pub vesting_schedule: crate::types::VestingSchedule,
    ///Public key of the global configuration account
    ///Contains protocol-wide settings this pool adheres to
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub global_config: Pubkey,
    ///Public key of the platform configuration account
    ///Contains platform-wide settings this pool adheres to
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub platform_config: Pubkey,
    ///Public key of the base mint address
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_mint: Pubkey,
    ///Public key of the quote mint address
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_mint: Pubkey,
    ///Public key of the base token vault
    ///Holds the actual base tokens owned by the pool
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_vault: Pubkey,
    ///Public key of the quote token vault
    ///Holds the actual quote tokens owned by the pool
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_vault: Pubkey,
    ///The creator of base token
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub creator: Pubkey,
    ///padding for future updates
    pub padding: [u64; 8],
}
impl Default for PoolState {
    fn default() -> Self {
        Self {
            discriminator: POOL_STATE_ACCOUNT_DISCM,
            epoch: Default::default(),
            auth_bump: Default::default(),
            status: Default::default(),
            base_decimals: Default::default(),
            quote_decimals: Default::default(),
            migrate_type: Default::default(),
            supply: Default::default(),
            total_base_sell: Default::default(),
            virtual_base: Default::default(),
            virtual_quote: Default::default(),
            real_base: Default::default(),
            real_quote: Default::default(),
            total_quote_fund_raising: Default::default(),
            quote_protocol_fee: Default::default(),
            platform_fee: Default::default(),
            migrate_fee: Default::default(),
            vesting_schedule: Default::default(),
            global_config: Default::default(),
            platform_config: Default::default(),
            base_mint: Default::default(),
            quote_mint: Default::default(),
            base_vault: Default::default(),
            quote_vault: Default::default(),
            creator: Default::default(),
            padding: Default::default(),
        }
    }
}
impl PoolState {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 429usize;
    pub fn discriminator() -> [u8; 8] {
        POOL_STATE_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
