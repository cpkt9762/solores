//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!PlatformParams
///Represents the parameters for initializing a platform config account
///# Fields
///* `migrate_nft_info` - The platform configures liquidity info during migration(Only support MigrateType::CPSWAP)
///* `fee_rate` - Fee rate of the platform
///* `name` - Name of the platform
///* `web` - Website of the platform
///* `img` - Image link of the platform
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Represents the parameters for initializing a platform config account
///# Fields
///* `migrate_nft_info` - The platform configures liquidity info during migration(Only support MigrateType::CPSWAP)
///* `fee_rate` - Fee rate of the platform
///* `name` - Name of the platform
///* `web` - Website of the platform
///* `img` - Image link of the platform
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PlatformParams {
    pub migrate_nft_info: crate::types::MigrateNftInfo,
    pub fee_rate: u64,
    pub name: String,
    pub web: String,
    pub img: String,
}
impl Default for PlatformParams {
    fn default() -> Self {
        Self {
            migrate_nft_info: Default::default(),
            fee_rate: Default::default(),
            name: Default::default(),
            web: Default::default(),
            img: Default::default(),
        }
    }
}
impl PlatformParams {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
