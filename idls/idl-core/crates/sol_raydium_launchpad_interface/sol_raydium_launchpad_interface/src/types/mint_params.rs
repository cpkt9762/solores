//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!MintParams
///Represents the parameters for initializing a new token mint
///# Fields
///* `decimals` - Number of decimal places for the token
///* `name` - Name of the token
///* `symbol` - Symbol/ticker of the token
///* `uri` - URI pointing to token metadata
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Represents the parameters for initializing a new token mint
///# Fields
///* `decimals` - Number of decimal places for the token
///* `name` - Name of the token
///* `symbol` - Symbol/ticker of the token
///* `uri` - URI pointing to token metadata
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MintParams {
    pub decimals: u8,
    pub name: String,
    pub symbol: String,
    pub uri: String,
}
impl Default for MintParams {
    fn default() -> Self {
        Self {
            decimals: Default::default(),
            name: Default::default(),
            symbol: Default::default(),
            uri: Default::default(),
        }
    }
}
impl MintParams {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
