//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!MigrateNftInfo
///Represents the parameters for initializing a platform config account(Only support MigrateType::CPSWAP)
///# Fields
///* `platform_scale` - Scale of the platform liquidity quantity rights will be converted into NFT
///* `creator_scale` - Scale of the token creator liquidity quantity rights will be converted into NFT
///* `burn_scale` - Scale of liquidity directly to burn
///* platform_scale + creator_scale + burn_scale = RATE_DENOMINATOR_VALUE
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Represents the parameters for initializing a platform config account(Only support MigrateType::CPSWAP)
///# Fields
///* `platform_scale` - Scale of the platform liquidity quantity rights will be converted into NFT
///* `creator_scale` - Scale of the token creator liquidity quantity rights will be converted into NFT
///* `burn_scale` - Scale of liquidity directly to burn
///* platform_scale + creator_scale + burn_scale = RATE_DENOMINATOR_VALUE
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateNftInfo {
    pub platform_scale: u64,
    pub creator_scale: u64,
    pub burn_scale: u64,
}
impl Default for MigrateNftInfo {
    fn default() -> Self {
        Self {
            platform_scale: Default::default(),
            creator_scale: Default::default(),
            burn_scale: Default::default(),
        }
    }
}
impl MigrateNftInfo {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
