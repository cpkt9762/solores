//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: claim_platform_fee
///Claim platform fee
///# Arguments
///* `ctx` - The context of accounts
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CLAIM_PLATFORM_FEE_IX_DISCM: [u8; 8] =
    [156u8, 39u8, 208u8, 135u8, 76u8, 237u8, 61u8, 72u8];
pub const CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN: usize = 10;
///Claim platform fee
///# Arguments
///* `ctx` - The context of accounts
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimPlatformFeeIxData {
    pub discriminator: [u8; 8],
}
impl Default for ClaimPlatformFeeIxData {
    fn default() -> Self {
        Self {
            discriminator: CLAIM_PLATFORM_FEE_IX_DISCM,
        }
    }
}
impl ClaimPlatformFeeIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CLAIM_PLATFORM_FEE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ClaimPlatformFeeKeys {
    pub platform_fee_wallet: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub platform_config: Pubkey,
    pub quote_vault: Pubkey,
    pub recipient_token_account: Pubkey,
    pub quote_mint: Pubkey,
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<&[Pubkey]> for ClaimPlatformFeeKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            platform_fee_wallet: pubkeys[0],
            authority: pubkeys[1],
            pool_state: pubkeys[2],
            platform_config: pubkeys[3],
            quote_vault: pubkeys[4],
            recipient_token_account: pubkeys[5],
            quote_mint: pubkeys[6],
            token_program: pubkeys[7],
            system_program: pubkeys[8],
            associated_token_program: pubkeys[9],
        }
    }
}
impl ClaimPlatformFeeKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.platform_fee_wallet,
            self.authority,
            self.pool_state,
            self.platform_config,
            self.quote_vault,
            self.recipient_token_account,
            self.quote_mint,
            self.token_program,
            self.system_program,
            self.associated_token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":\"{}\"",
                    "platform_fee_wallet", self.platform_fee_wallet
                ),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "platform_config", self.platform_config),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!(
                    "\"{}\":\"{}\"",
                    "recipient_token_account", self.recipient_token_account
                ),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                )
            ]
            .join(",")
        )
    }
}
impl From<ClaimPlatformFeeKeys>
    for [solana_instruction::AccountMeta; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN]
{
    fn from(keys: ClaimPlatformFeeKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.platform_fee_wallet, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.platform_config, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.recipient_token_account, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
        ]
    }
}
pub fn claim_platform_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: ClaimPlatformFeeKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN] = keys.into();
    let args = ClaimPlatformFeeIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn claim_platform_fee_ix(
    keys: ClaimPlatformFeeKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    claim_platform_fee_ix_with_program_id(crate::ID, keys)
}
