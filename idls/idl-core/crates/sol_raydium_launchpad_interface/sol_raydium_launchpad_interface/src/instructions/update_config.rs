//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: update_config
///Updates configuration parameters
///# Arguments
///* `ctx` - The context of accounts
///* `param` - Parameter to update:
///- 0: Update trade_fee_rate
///- 1: Update fee owner
///* `value` - New value for the selected parameter
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const UPDATE_CONFIG_IX_DISCM: [u8; 8] = [29u8, 158u8, 252u8, 191u8, 10u8, 83u8, 219u8, 99u8];
pub const UPDATE_CONFIG_IX_ACCOUNTS_LEN: usize = 2;
///Updates configuration parameters
///# Arguments
///* `ctx` - The context of accounts
///* `param` - Parameter to update:
///- 0: Update trade_fee_rate
///- 1: Update fee owner
///* `value` - New value for the selected parameter
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigIxData {
    pub discriminator: [u8; 8],
    pub param: u8,
    pub value: u64,
}
impl Default for UpdateConfigIxData {
    fn default() -> Self {
        Self {
            discriminator: UPDATE_CONFIG_IX_DISCM,
            param: Default::default(),
            value: Default::default(),
        }
    }
}
impl UpdateConfigIxData {
    pub fn new(param: u8, value: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            param,
            value,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        UPDATE_CONFIG_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "param", self.param),
                format!("\"{}\":{}", "value", self.value)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct UpdateConfigKeys {
    pub owner: Pubkey,
    pub global_config: Pubkey,
}
impl From<&[Pubkey]> for UpdateConfigKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            owner: pubkeys[0],
            global_config: pubkeys[1],
        }
    }
}
impl UpdateConfigKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.owner, self.global_config]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "owner", self.owner),
                format!("\"{}\":\"{}\"", "global_config", self.global_config)
            ]
            .join(",")
        )
    }
}
impl From<UpdateConfigKeys> for [solana_instruction::AccountMeta; UPDATE_CONFIG_IX_ACCOUNTS_LEN] {
    fn from(keys: UpdateConfigKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
        ]
    }
}
pub fn update_config_ix_with_program_id(
    program_id: Pubkey,
    keys: UpdateConfigKeys,
    args: UpdateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; UPDATE_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn update_config_ix(
    keys: UpdateConfigKeys,
    args: UpdateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    update_config_ix_with_program_id(crate::ID, keys, args)
}
