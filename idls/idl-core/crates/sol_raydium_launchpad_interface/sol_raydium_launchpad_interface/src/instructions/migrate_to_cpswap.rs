//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: migrate_to_cpswap
///# Arguments
///* `ctx` - The context of accounts
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MIGRATE_TO_CPSWAP_IX_DISCM: [u8; 8] =
    [136u8, 92u8, 200u8, 103u8, 28u8, 218u8, 144u8, 140u8];
pub const MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN: usize = 28;
///# Arguments
///* `ctx` - The context of accounts
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateToCpswapIxData {
    pub discriminator: [u8; 8],
}
impl Default for MigrateToCpswapIxData {
    fn default() -> Self {
        Self {
            discriminator: MIGRATE_TO_CPSWAP_IX_DISCM,
        }
    }
}
impl MigrateToCpswapIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        MIGRATE_TO_CPSWAP_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct MigrateToCpswapKeys {
    pub payer: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub platform_config: Pubkey,
    pub cpswap_program: Pubkey,
    pub cpswap_pool: Pubkey,
    pub cpswap_authority: Pubkey,
    pub cpswap_lp_mint: Pubkey,
    pub cpswap_base_vault: Pubkey,
    pub cpswap_quote_vault: Pubkey,
    pub cpswap_config: Pubkey,
    pub cpswap_create_pool_fee: Pubkey,
    pub cpswap_observation: Pubkey,
    pub lock_program: Pubkey,
    pub lock_authority: Pubkey,
    pub lock_lp_vault: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub global_config: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub pool_lp_token: Pubkey,
    pub base_token_program: Pubkey,
    pub quote_token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent_program: Pubkey,
    pub metadata_program: Pubkey,
}
impl From<&[Pubkey]> for MigrateToCpswapKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            payer: pubkeys[0],
            base_mint: pubkeys[1],
            quote_mint: pubkeys[2],
            platform_config: pubkeys[3],
            cpswap_program: pubkeys[4],
            cpswap_pool: pubkeys[5],
            cpswap_authority: pubkeys[6],
            cpswap_lp_mint: pubkeys[7],
            cpswap_base_vault: pubkeys[8],
            cpswap_quote_vault: pubkeys[9],
            cpswap_config: pubkeys[10],
            cpswap_create_pool_fee: pubkeys[11],
            cpswap_observation: pubkeys[12],
            lock_program: pubkeys[13],
            lock_authority: pubkeys[14],
            lock_lp_vault: pubkeys[15],
            authority: pubkeys[16],
            pool_state: pubkeys[17],
            global_config: pubkeys[18],
            base_vault: pubkeys[19],
            quote_vault: pubkeys[20],
            pool_lp_token: pubkeys[21],
            base_token_program: pubkeys[22],
            quote_token_program: pubkeys[23],
            associated_token_program: pubkeys[24],
            system_program: pubkeys[25],
            rent_program: pubkeys[26],
            metadata_program: pubkeys[27],
        }
    }
}
impl MigrateToCpswapKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.payer,
            self.base_mint,
            self.quote_mint,
            self.platform_config,
            self.cpswap_program,
            self.cpswap_pool,
            self.cpswap_authority,
            self.cpswap_lp_mint,
            self.cpswap_base_vault,
            self.cpswap_quote_vault,
            self.cpswap_config,
            self.cpswap_create_pool_fee,
            self.cpswap_observation,
            self.lock_program,
            self.lock_authority,
            self.lock_lp_vault,
            self.authority,
            self.pool_state,
            self.global_config,
            self.base_vault,
            self.quote_vault,
            self.pool_lp_token,
            self.base_token_program,
            self.quote_token_program,
            self.associated_token_program,
            self.system_program,
            self.rent_program,
            self.metadata_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "platform_config", self.platform_config),
                format!("\"{}\":\"{}\"", "cpswap_program", self.cpswap_program),
                format!("\"{}\":\"{}\"", "cpswap_pool", self.cpswap_pool),
                format!("\"{}\":\"{}\"", "cpswap_authority", self.cpswap_authority),
                format!("\"{}\":\"{}\"", "cpswap_lp_mint", self.cpswap_lp_mint),
                format!("\"{}\":\"{}\"", "cpswap_base_vault", self.cpswap_base_vault),
                format!(
                    "\"{}\":\"{}\"",
                    "cpswap_quote_vault", self.cpswap_quote_vault
                ),
                format!("\"{}\":\"{}\"", "cpswap_config", self.cpswap_config),
                format!(
                    "\"{}\":\"{}\"",
                    "cpswap_create_pool_fee", self.cpswap_create_pool_fee
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "cpswap_observation", self.cpswap_observation
                ),
                format!("\"{}\":\"{}\"", "lock_program", self.lock_program),
                format!("\"{}\":\"{}\"", "lock_authority", self.lock_authority),
                format!("\"{}\":\"{}\"", "lock_lp_vault", self.lock_lp_vault),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!("\"{}\":\"{}\"", "pool_lp_token", self.pool_lp_token),
                format!(
                    "\"{}\":\"{}\"",
                    "base_token_program", self.base_token_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "quote_token_program", self.quote_token_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "rent_program", self.rent_program),
                format!("\"{}\":\"{}\"", "metadata_program", self.metadata_program)
            ]
            .join(",")
        )
    }
}
impl From<MigrateToCpswapKeys>
    for [solana_instruction::AccountMeta; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigrateToCpswapKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.platform_config, false),
            solana_instruction::AccountMeta::new(keys.cpswap_program, false),
            solana_instruction::AccountMeta::new(keys.cpswap_pool, false),
            solana_instruction::AccountMeta::new(keys.cpswap_authority, false),
            solana_instruction::AccountMeta::new(keys.cpswap_lp_mint, false),
            solana_instruction::AccountMeta::new(keys.cpswap_base_vault, false),
            solana_instruction::AccountMeta::new(keys.cpswap_quote_vault, false),
            solana_instruction::AccountMeta::new(keys.cpswap_config, false),
            solana_instruction::AccountMeta::new(keys.cpswap_create_pool_fee, false),
            solana_instruction::AccountMeta::new(keys.cpswap_observation, false),
            solana_instruction::AccountMeta::new(keys.lock_program, false),
            solana_instruction::AccountMeta::new(keys.lock_authority, false),
            solana_instruction::AccountMeta::new(keys.lock_lp_vault, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.pool_lp_token, false),
            solana_instruction::AccountMeta::new(keys.base_token_program, false),
            solana_instruction::AccountMeta::new(keys.quote_token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent_program, false),
            solana_instruction::AccountMeta::new(keys.metadata_program, false),
        ]
    }
}
pub fn migrate_to_cpswap_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateToCpswapKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN] = keys.into();
    let args = MigrateToCpswapIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn migrate_to_cpswap_ix(
    keys: MigrateToCpswapKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    migrate_to_cpswap_ix_with_program_id(crate::ID, keys)
}
