//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: migrate_to_amm
///# Arguments
///* `ctx` - The context of accounts
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MIGRATE_TO_AMM_IX_DISCM: [u8; 8] =
    [207u8, 82u8, 192u8, 145u8, 254u8, 207u8, 145u8, 223u8];
pub const MIGRATE_TO_AMM_IX_ACCOUNTS_LEN: usize = 32;
///# Arguments
///* `ctx` - The context of accounts
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateToAmmIxData {
    pub discriminator: [u8; 8],
    pub base_lot_size: u64,
    pub quote_lot_size: u64,
    pub market_vault_signer_nonce: u8,
}
impl Default for MigrateToAmmIxData {
    fn default() -> Self {
        Self {
            discriminator: MIGRATE_TO_AMM_IX_DISCM,
            base_lot_size: Default::default(),
            quote_lot_size: Default::default(),
            market_vault_signer_nonce: Default::default(),
        }
    }
}
impl MigrateToAmmIxData {
    pub fn new(base_lot_size: u64, quote_lot_size: u64, market_vault_signer_nonce: u8) -> Self {
        Self {
            discriminator: Self::discriminator(),
            base_lot_size,
            quote_lot_size,
            market_vault_signer_nonce,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        MIGRATE_TO_AMM_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "base_lot_size", self.base_lot_size),
                format!("\"{}\":{}", "quote_lot_size", self.quote_lot_size),
                format!(
                    "\"{}\":{}",
                    "market_vault_signer_nonce", self.market_vault_signer_nonce
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct MigrateToAmmKeys {
    pub payer: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub openbook_program: Pubkey,
    pub market: Pubkey,
    pub request_queue: Pubkey,
    pub event_queue: Pubkey,
    pub bids: Pubkey,
    pub asks: Pubkey,
    pub market_vault_signer: Pubkey,
    pub market_base_vault: Pubkey,
    pub market_quote_vault: Pubkey,
    pub amm_program: Pubkey,
    pub amm_pool: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub amm_lp_mint: Pubkey,
    pub amm_base_vault: Pubkey,
    pub amm_quote_vault: Pubkey,
    pub amm_target_orders: Pubkey,
    pub amm_config: Pubkey,
    pub amm_create_fee_destination: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub global_config: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub pool_lp_token: Pubkey,
    pub spl_token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent_program: Pubkey,
}
impl From<&[Pubkey]> for MigrateToAmmKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            payer: pubkeys[0],
            base_mint: pubkeys[1],
            quote_mint: pubkeys[2],
            openbook_program: pubkeys[3],
            market: pubkeys[4],
            request_queue: pubkeys[5],
            event_queue: pubkeys[6],
            bids: pubkeys[7],
            asks: pubkeys[8],
            market_vault_signer: pubkeys[9],
            market_base_vault: pubkeys[10],
            market_quote_vault: pubkeys[11],
            amm_program: pubkeys[12],
            amm_pool: pubkeys[13],
            amm_authority: pubkeys[14],
            amm_open_orders: pubkeys[15],
            amm_lp_mint: pubkeys[16],
            amm_base_vault: pubkeys[17],
            amm_quote_vault: pubkeys[18],
            amm_target_orders: pubkeys[19],
            amm_config: pubkeys[20],
            amm_create_fee_destination: pubkeys[21],
            authority: pubkeys[22],
            pool_state: pubkeys[23],
            global_config: pubkeys[24],
            base_vault: pubkeys[25],
            quote_vault: pubkeys[26],
            pool_lp_token: pubkeys[27],
            spl_token_program: pubkeys[28],
            associated_token_program: pubkeys[29],
            system_program: pubkeys[30],
            rent_program: pubkeys[31],
        }
    }
}
impl MigrateToAmmKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.payer,
            self.base_mint,
            self.quote_mint,
            self.openbook_program,
            self.market,
            self.request_queue,
            self.event_queue,
            self.bids,
            self.asks,
            self.market_vault_signer,
            self.market_base_vault,
            self.market_quote_vault,
            self.amm_program,
            self.amm_pool,
            self.amm_authority,
            self.amm_open_orders,
            self.amm_lp_mint,
            self.amm_base_vault,
            self.amm_quote_vault,
            self.amm_target_orders,
            self.amm_config,
            self.amm_create_fee_destination,
            self.authority,
            self.pool_state,
            self.global_config,
            self.base_vault,
            self.quote_vault,
            self.pool_lp_token,
            self.spl_token_program,
            self.associated_token_program,
            self.system_program,
            self.rent_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "openbook_program", self.openbook_program),
                format!("\"{}\":\"{}\"", "market", self.market),
                format!("\"{}\":\"{}\"", "request_queue", self.request_queue),
                format!("\"{}\":\"{}\"", "event_queue", self.event_queue),
                format!("\"{}\":\"{}\"", "bids", self.bids),
                format!("\"{}\":\"{}\"", "asks", self.asks),
                format!(
                    "\"{}\":\"{}\"",
                    "market_vault_signer", self.market_vault_signer
                ),
                format!("\"{}\":\"{}\"", "market_base_vault", self.market_base_vault),
                format!(
                    "\"{}\":\"{}\"",
                    "market_quote_vault", self.market_quote_vault
                ),
                format!("\"{}\":\"{}\"", "amm_program", self.amm_program),
                format!("\"{}\":\"{}\"", "amm_pool", self.amm_pool),
                format!("\"{}\":\"{}\"", "amm_authority", self.amm_authority),
                format!("\"{}\":\"{}\"", "amm_open_orders", self.amm_open_orders),
                format!("\"{}\":\"{}\"", "amm_lp_mint", self.amm_lp_mint),
                format!("\"{}\":\"{}\"", "amm_base_vault", self.amm_base_vault),
                format!("\"{}\":\"{}\"", "amm_quote_vault", self.amm_quote_vault),
                format!("\"{}\":\"{}\"", "amm_target_orders", self.amm_target_orders),
                format!("\"{}\":\"{}\"", "amm_config", self.amm_config),
                format!(
                    "\"{}\":\"{}\"",
                    "amm_create_fee_destination", self.amm_create_fee_destination
                ),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!("\"{}\":\"{}\"", "pool_lp_token", self.pool_lp_token),
                format!("\"{}\":\"{}\"", "spl_token_program", self.spl_token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "rent_program", self.rent_program)
            ]
            .join(",")
        )
    }
}
impl From<MigrateToAmmKeys> for [solana_instruction::AccountMeta; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrateToAmmKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.openbook_program, false),
            solana_instruction::AccountMeta::new(keys.market, false),
            solana_instruction::AccountMeta::new(keys.request_queue, false),
            solana_instruction::AccountMeta::new(keys.event_queue, false),
            solana_instruction::AccountMeta::new(keys.bids, false),
            solana_instruction::AccountMeta::new(keys.asks, false),
            solana_instruction::AccountMeta::new(keys.market_vault_signer, false),
            solana_instruction::AccountMeta::new(keys.market_base_vault, false),
            solana_instruction::AccountMeta::new(keys.market_quote_vault, false),
            solana_instruction::AccountMeta::new(keys.amm_program, false),
            solana_instruction::AccountMeta::new(keys.amm_pool, false),
            solana_instruction::AccountMeta::new(keys.amm_authority, false),
            solana_instruction::AccountMeta::new(keys.amm_open_orders, false),
            solana_instruction::AccountMeta::new(keys.amm_lp_mint, false),
            solana_instruction::AccountMeta::new(keys.amm_base_vault, false),
            solana_instruction::AccountMeta::new(keys.amm_quote_vault, false),
            solana_instruction::AccountMeta::new(keys.amm_target_orders, false),
            solana_instruction::AccountMeta::new(keys.amm_config, false),
            solana_instruction::AccountMeta::new(keys.amm_create_fee_destination, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.pool_lp_token, false),
            solana_instruction::AccountMeta::new(keys.spl_token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent_program, false),
        ]
    }
}
pub fn migrate_to_amm_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateToAmmKeys,
    args: MigrateToAmmIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn migrate_to_amm_ix(
    keys: MigrateToAmmKeys,
    args: MigrateToAmmIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    migrate_to_amm_ix_with_program_id(crate::ID, keys, args)
}
