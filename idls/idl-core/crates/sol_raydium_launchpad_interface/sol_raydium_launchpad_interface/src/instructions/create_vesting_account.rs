//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_vesting_account
///Create vesting account
///# Arguments
///* `ctx` - The context of accounts
///* `share` - The share amount of base token to be vested
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_VESTING_ACCOUNT_IX_DISCM: [u8; 8] =
    [129u8, 178u8, 2u8, 13u8, 217u8, 172u8, 230u8, 218u8];
pub const CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN: usize = 5;
///Create vesting account
///# Arguments
///* `ctx` - The context of accounts
///* `share` - The share amount of base token to be vested
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateVestingAccountIxData {
    pub discriminator: [u8; 8],
    pub share_amount: u64,
}
impl Default for CreateVestingAccountIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_VESTING_ACCOUNT_IX_DISCM,
            share_amount: Default::default(),
        }
    }
}
impl CreateVestingAccountIxData {
    pub fn new(share_amount: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            share_amount,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_VESTING_ACCOUNT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "share_amount", self.share_amount)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreateVestingAccountKeys {
    pub creator: Pubkey,
    pub beneficiary: Pubkey,
    pub pool_state: Pubkey,
    pub vesting_record: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for CreateVestingAccountKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            creator: pubkeys[0],
            beneficiary: pubkeys[1],
            pool_state: pubkeys[2],
            vesting_record: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl CreateVestingAccountKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.creator,
            self.beneficiary,
            self.pool_state,
            self.vesting_record,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "creator", self.creator),
                format!("\"{}\":\"{}\"", "beneficiary", self.beneficiary),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "vesting_record", self.vesting_record),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<CreateVestingAccountKeys>
    for [solana_instruction::AccountMeta; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN]
{
    fn from(keys: CreateVestingAccountKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.creator, false),
            solana_instruction::AccountMeta::new(keys.beneficiary, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.vesting_record, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn create_vesting_account_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateVestingAccountKeys,
    args: CreateVestingAccountIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_vesting_account_ix(
    keys: CreateVestingAccountKeys,
    args: CreateVestingAccountIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_vesting_account_ix_with_program_id(crate::ID, keys, args)
}
