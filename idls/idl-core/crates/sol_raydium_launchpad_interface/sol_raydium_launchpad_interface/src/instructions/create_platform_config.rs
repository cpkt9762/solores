//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_platform_config
///Create platform config account
///# Arguments
///* `ctx` - The context of accounts
///# Fields
///* `fee_rate` - Fee rate of the platform
///* `name` - Name of the platform
///* `web` - Website of the platform
///* `img` - Image link of the platform
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_PLATFORM_CONFIG_IX_DISCM: [u8; 8] =
    [176u8, 90u8, 196u8, 175u8, 253u8, 113u8, 220u8, 20u8];
pub const CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN: usize = 5;
///Create platform config account
///# Arguments
///* `ctx` - The context of accounts
///# Fields
///* `fee_rate` - Fee rate of the platform
///* `name` - Name of the platform
///* `web` - Website of the platform
///* `img` - Image link of the platform
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePlatformConfigIxData {
    pub discriminator: [u8; 8],
    pub platform_params: crate::types::PlatformParams,
}
impl Default for CreatePlatformConfigIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_PLATFORM_CONFIG_IX_DISCM,
            platform_params: Default::default(),
        }
    }
}
impl CreatePlatformConfigIxData {
    pub fn new(platform_params: crate::types::PlatformParams) -> Self {
        Self {
            discriminator: Self::discriminator(),
            platform_params,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_PLATFORM_CONFIG_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "platform_params",
                    serde_json::to_string(&self.platform_params)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreatePlatformConfigKeys {
    pub platform_admin: Pubkey,
    pub platform_fee_wallet: Pubkey,
    pub platform_nft_wallet: Pubkey,
    pub platform_config: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for CreatePlatformConfigKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            platform_admin: pubkeys[0],
            platform_fee_wallet: pubkeys[1],
            platform_nft_wallet: pubkeys[2],
            platform_config: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl CreatePlatformConfigKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.platform_admin,
            self.platform_fee_wallet,
            self.platform_nft_wallet,
            self.platform_config,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "platform_admin", self.platform_admin),
                format!(
                    "\"{}\":\"{}\"",
                    "platform_fee_wallet", self.platform_fee_wallet
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "platform_nft_wallet", self.platform_nft_wallet
                ),
                format!("\"{}\":\"{}\"", "platform_config", self.platform_config),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<CreatePlatformConfigKeys>
    for [solana_instruction::AccountMeta; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]
{
    fn from(keys: CreatePlatformConfigKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.platform_admin, false),
            solana_instruction::AccountMeta::new(keys.platform_fee_wallet, false),
            solana_instruction::AccountMeta::new(keys.platform_nft_wallet, false),
            solana_instruction::AccountMeta::new(keys.platform_config, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn create_platform_config_ix_with_program_id(
    program_id: Pubkey,
    keys: CreatePlatformConfigKeys,
    args: CreatePlatformConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_platform_config_ix(
    keys: CreatePlatformConfigKeys,
    args: CreatePlatformConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_platform_config_ix_with_program_id(crate::ID, keys, args)
}
