//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: sell_exact_out
///Sell base tokens for the given amount of quote tokens.
///# Arguments
///* `ctx` - The context of accounts
///* `amount_out` - Amount of quote token to receive
///* `maximum_amount_in` - Maximum amount of base token to purchase (slippage protection)
///* `share_fee_rate` - Fee rate for the share
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SELL_EXACT_OUT_IX_DISCM: [u8; 8] = [95u8, 200u8, 71u8, 34u8, 8u8, 9u8, 11u8, 166u8];
pub const SELL_EXACT_OUT_IX_ACCOUNTS_LEN: usize = 15;
///Sell base tokens for the given amount of quote tokens.
///# Arguments
///* `ctx` - The context of accounts
///* `amount_out` - Amount of quote token to receive
///* `maximum_amount_in` - Maximum amount of base token to purchase (slippage protection)
///* `share_fee_rate` - Fee rate for the share
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellExactOutIxData {
    pub discriminator: [u8; 8],
    pub amount_out: u64,
    pub maximum_amount_in: u64,
    pub share_fee_rate: u64,
}
impl Default for SellExactOutIxData {
    fn default() -> Self {
        Self {
            discriminator: SELL_EXACT_OUT_IX_DISCM,
            amount_out: Default::default(),
            maximum_amount_in: Default::default(),
            share_fee_rate: Default::default(),
        }
    }
}
impl SellExactOutIxData {
    pub fn new(amount_out: u64, maximum_amount_in: u64, share_fee_rate: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount_out,
            maximum_amount_in,
            share_fee_rate,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SELL_EXACT_OUT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "amount_out", self.amount_out),
                format!("\"{}\":{}", "maximum_amount_in", self.maximum_amount_in),
                format!("\"{}\":{}", "share_fee_rate", self.share_fee_rate)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SellExactOutKeys {
    pub payer: Pubkey,
    pub authority: Pubkey,
    pub global_config: Pubkey,
    pub platform_config: Pubkey,
    pub pool_state: Pubkey,
    pub user_base_token: Pubkey,
    pub user_quote_token: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub base_token_mint: Pubkey,
    pub quote_token_mint: Pubkey,
    pub base_token_program: Pubkey,
    pub quote_token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for SellExactOutKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            payer: pubkeys[0],
            authority: pubkeys[1],
            global_config: pubkeys[2],
            platform_config: pubkeys[3],
            pool_state: pubkeys[4],
            user_base_token: pubkeys[5],
            user_quote_token: pubkeys[6],
            base_vault: pubkeys[7],
            quote_vault: pubkeys[8],
            base_token_mint: pubkeys[9],
            quote_token_mint: pubkeys[10],
            base_token_program: pubkeys[11],
            quote_token_program: pubkeys[12],
            event_authority: pubkeys[13],
            program: pubkeys[14],
        }
    }
}
impl SellExactOutKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.payer,
            self.authority,
            self.global_config,
            self.platform_config,
            self.pool_state,
            self.user_base_token,
            self.user_quote_token,
            self.base_vault,
            self.quote_vault,
            self.base_token_mint,
            self.quote_token_mint,
            self.base_token_program,
            self.quote_token_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "platform_config", self.platform_config),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "user_base_token", self.user_base_token),
                format!("\"{}\":\"{}\"", "user_quote_token", self.user_quote_token),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!("\"{}\":\"{}\"", "base_token_mint", self.base_token_mint),
                format!("\"{}\":\"{}\"", "quote_token_mint", self.quote_token_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "base_token_program", self.base_token_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "quote_token_program", self.quote_token_program
                ),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<SellExactOutKeys> for [solana_instruction::AccountMeta; SELL_EXACT_OUT_IX_ACCOUNTS_LEN] {
    fn from(keys: SellExactOutKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.platform_config, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.user_base_token, false),
            solana_instruction::AccountMeta::new(keys.user_quote_token, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.base_token_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_token_mint, false),
            solana_instruction::AccountMeta::new(keys.base_token_program, false),
            solana_instruction::AccountMeta::new(keys.quote_token_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn sell_exact_out_ix_with_program_id(
    program_id: Pubkey,
    keys: SellExactOutKeys,
    args: SellExactOutIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SELL_EXACT_OUT_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn sell_exact_out_ix(
    keys: SellExactOutKeys,
    args: SellExactOutIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    sell_exact_out_ix_with_program_id(crate::ID, keys, args)
}
