//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_config
///Creates a new configuration
///# Arguments
///* `ctx` - The accounts needed by instruction
///* `curve_type` - The type of bonding curve (0: ConstantProduct)
///* `index` - The index of config, there may be multiple config with the same curve type.
///* `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_CONFIG_IX_DISCM: [u8; 8] = [201u8, 207u8, 243u8, 114u8, 75u8, 111u8, 47u8, 189u8];
pub const CREATE_CONFIG_IX_ACCOUNTS_LEN: usize = 8;
///Creates a new configuration
///# Arguments
///* `ctx` - The accounts needed by instruction
///* `curve_type` - The type of bonding curve (0: ConstantProduct)
///* `index` - The index of config, there may be multiple config with the same curve type.
///* `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigIxData {
    pub discriminator: [u8; 8],
    pub curve_type: u8,
    pub index: u16,
    pub migrate_fee: u64,
    pub trade_fee_rate: u64,
}
impl Default for CreateConfigIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_CONFIG_IX_DISCM,
            curve_type: Default::default(),
            index: Default::default(),
            migrate_fee: Default::default(),
            trade_fee_rate: Default::default(),
        }
    }
}
impl CreateConfigIxData {
    pub fn new(curve_type: u8, index: u16, migrate_fee: u64, trade_fee_rate: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            curve_type,
            index,
            migrate_fee,
            trade_fee_rate,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_CONFIG_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "curve_type", self.curve_type),
                format!("\"{}\":{}", "index", self.index),
                format!("\"{}\":{}", "migrate_fee", self.migrate_fee),
                format!("\"{}\":{}", "trade_fee_rate", self.trade_fee_rate)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreateConfigKeys {
    pub owner: Pubkey,
    pub global_config: Pubkey,
    pub quote_token_mint: Pubkey,
    pub protocol_fee_owner: Pubkey,
    pub migrate_fee_owner: Pubkey,
    pub migrate_to_amm_wallet: Pubkey,
    pub migrate_to_cpswap_wallet: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for CreateConfigKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            owner: pubkeys[0],
            global_config: pubkeys[1],
            quote_token_mint: pubkeys[2],
            protocol_fee_owner: pubkeys[3],
            migrate_fee_owner: pubkeys[4],
            migrate_to_amm_wallet: pubkeys[5],
            migrate_to_cpswap_wallet: pubkeys[6],
            system_program: pubkeys[7],
        }
    }
}
impl CreateConfigKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.owner,
            self.global_config,
            self.quote_token_mint,
            self.protocol_fee_owner,
            self.migrate_fee_owner,
            self.migrate_to_amm_wallet,
            self.migrate_to_cpswap_wallet,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "owner", self.owner),
                format!("\"{}\":\"{}\"", "global_config", self.global_config),
                format!("\"{}\":\"{}\"", "quote_token_mint", self.quote_token_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "protocol_fee_owner", self.protocol_fee_owner
                ),
                format!("\"{}\":\"{}\"", "migrate_fee_owner", self.migrate_fee_owner),
                format!(
                    "\"{}\":\"{}\"",
                    "migrate_to_amm_wallet", self.migrate_to_amm_wallet
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "migrate_to_cpswap_wallet", self.migrate_to_cpswap_wallet
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<CreateConfigKeys> for [solana_instruction::AccountMeta; CREATE_CONFIG_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateConfigKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.global_config, false),
            solana_instruction::AccountMeta::new(keys.quote_token_mint, false),
            solana_instruction::AccountMeta::new(keys.protocol_fee_owner, false),
            solana_instruction::AccountMeta::new(keys.migrate_fee_owner, false),
            solana_instruction::AccountMeta::new(keys.migrate_to_amm_wallet, false),
            solana_instruction::AccountMeta::new(keys.migrate_to_cpswap_wallet, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn create_config_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateConfigKeys,
    args: CreateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_config_ix(
    keys: CreateConfigKeys,
    args: CreateConfigIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_config_ix_with_program_id(crate::ID, keys, args)
}
