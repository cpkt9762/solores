//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: claim_vested_token
///Claim vested token
///# Arguments
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CLAIM_VESTED_TOKEN_IX_DISCM: [u8; 8] =
    [49u8, 33u8, 104u8, 30u8, 189u8, 157u8, 79u8, 35u8];
pub const CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN: usize = 10;
///Claim vested token
///# Arguments
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimVestedTokenIxData {
    pub discriminator: [u8; 8],
}
impl Default for ClaimVestedTokenIxData {
    fn default() -> Self {
        Self {
            discriminator: CLAIM_VESTED_TOKEN_IX_DISCM,
        }
    }
}
impl ClaimVestedTokenIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CLAIM_VESTED_TOKEN_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ClaimVestedTokenKeys {
    pub beneficiary: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub vesting_record: Pubkey,
    pub base_vault: Pubkey,
    pub user_base_token: Pubkey,
    pub base_token_mint: Pubkey,
    pub base_token_program: Pubkey,
    pub system_program: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<&[Pubkey]> for ClaimVestedTokenKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            beneficiary: pubkeys[0],
            authority: pubkeys[1],
            pool_state: pubkeys[2],
            vesting_record: pubkeys[3],
            base_vault: pubkeys[4],
            user_base_token: pubkeys[5],
            base_token_mint: pubkeys[6],
            base_token_program: pubkeys[7],
            system_program: pubkeys[8],
            associated_token_program: pubkeys[9],
        }
    }
}
impl ClaimVestedTokenKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.beneficiary,
            self.authority,
            self.pool_state,
            self.vesting_record,
            self.base_vault,
            self.user_base_token,
            self.base_token_mint,
            self.base_token_program,
            self.system_program,
            self.associated_token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "beneficiary", self.beneficiary),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!("\"{}\":\"{}\"", "pool_state", self.pool_state),
                format!("\"{}\":\"{}\"", "vesting_record", self.vesting_record),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "user_base_token", self.user_base_token),
                format!("\"{}\":\"{}\"", "base_token_mint", self.base_token_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "base_token_program", self.base_token_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                )
            ]
            .join(",")
        )
    }
}
impl From<ClaimVestedTokenKeys>
    for [solana_instruction::AccountMeta; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN]
{
    fn from(keys: ClaimVestedTokenKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.beneficiary, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.pool_state, false),
            solana_instruction::AccountMeta::new(keys.vesting_record, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.user_base_token, false),
            solana_instruction::AccountMeta::new(keys.base_token_mint, false),
            solana_instruction::AccountMeta::new(keys.base_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
        ]
    }
}
pub fn claim_vested_token_ix_with_program_id(
    program_id: Pubkey,
    keys: ClaimVestedTokenKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN] = keys.into();
    let args = ClaimVestedTokenIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn claim_vested_token_ix(
    keys: ClaimVestedTokenKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    claim_vested_token_ix_with_program_id(crate::ID, keys)
}
