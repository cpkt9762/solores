//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: setParams
///Sets the global state parameters.
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_PARAMS_IX_DISCM: [u8; 8] = [165u8, 31u8, 134u8, 53u8, 189u8, 180u8, 130u8, 255u8];
pub const SET_PARAMS_IX_ACCOUNTS_LEN: usize = 5;
///Sets the global state parameters.
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetParamsIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "feeRecipient"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fee_recipient: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "initialVirtualTokenReserves"))]
    pub initial_virtual_token_reserves: u64,
    #[cfg_attr(feature = "serde", serde(rename = "initialVirtualSolReserves"))]
    pub initial_virtual_sol_reserves: u64,
    #[cfg_attr(feature = "serde", serde(rename = "initialRealTokenReserves"))]
    pub initial_real_token_reserves: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tokenTotalSupply"))]
    pub token_total_supply: u64,
    #[cfg_attr(feature = "serde", serde(rename = "feeBasisPoints"))]
    pub fee_basis_points: u64,
}
impl Default for SetParamsIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_PARAMS_IX_DISCM,
            fee_recipient: Default::default(),
            initial_virtual_token_reserves: Default::default(),
            initial_virtual_sol_reserves: Default::default(),
            initial_real_token_reserves: Default::default(),
            token_total_supply: Default::default(),
            fee_basis_points: Default::default(),
        }
    }
}
impl SetParamsIxData {
    pub fn new(
        fee_recipient: Pubkey,
        initial_virtual_token_reserves: u64,
        initial_virtual_sol_reserves: u64,
        initial_real_token_reserves: u64,
        token_total_supply: u64,
        fee_basis_points: u64,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            fee_recipient,
            initial_virtual_token_reserves,
            initial_virtual_sol_reserves,
            initial_real_token_reserves,
            token_total_supply,
            fee_basis_points,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SET_PARAMS_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "fee_recipient", self.fee_recipient),
                format!(
                    "\"{}\":{}",
                    "initial_virtual_token_reserves", self.initial_virtual_token_reserves
                ),
                format!(
                    "\"{}\":{}",
                    "initial_virtual_sol_reserves", self.initial_virtual_sol_reserves
                ),
                format!(
                    "\"{}\":{}",
                    "initial_real_token_reserves", self.initial_real_token_reserves
                ),
                format!("\"{}\":{}", "token_total_supply", self.token_total_supply),
                format!("\"{}\":{}", "fee_basis_points", self.fee_basis_points)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SetParamsKeys {
    pub global: Pubkey,
    pub user: Pubkey,
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for SetParamsKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            global: pubkeys[0],
            user: pubkeys[1],
            system_program: pubkeys[2],
            event_authority: pubkeys[3],
            program: pubkeys[4],
        }
    }
}
impl SetParamsKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.global,
            self.user,
            self.system_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "global", self.global),
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program),
                format!("\"{}\":\"{}\"", "eventAuthority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<SetParamsKeys> for [solana_instruction::AccountMeta; SET_PARAMS_IX_ACCOUNTS_LEN] {
    fn from(keys: SetParamsKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.global, false),
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn set_params_ix_with_program_id(
    program_id: Pubkey,
    keys: SetParamsKeys,
    args: SetParamsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SET_PARAMS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_params_ix(
    keys: SetParamsKeys,
    args: SetParamsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_params_ix_with_program_id(crate::ID, keys, args)
}
