//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: withdraw
///Allows the admin to withdraw liquidity for a migration once the bonding curve completes
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const WITHDRAW_IX_DISCM: [u8; 8] = [183u8, 18u8, 70u8, 156u8, 148u8, 109u8, 161u8, 34u8];
pub const WITHDRAW_IX_ACCOUNTS_LEN: usize = 11;
///Allows the admin to withdraw liquidity for a migration once the bonding curve completes
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawIxData {
    pub discriminator: [u8; 8],
}
impl Default for WithdrawIxData {
    fn default() -> Self {
        Self {
            discriminator: WITHDRAW_IX_DISCM,
        }
    }
}
impl WithdrawIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        WITHDRAW_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct WithdrawKeys {
    pub global: Pubkey,
    pub mint: Pubkey,
    pub bonding_curve: Pubkey,
    pub associated_bonding_curve: Pubkey,
    pub associated_user: Pubkey,
    pub user: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub rent: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for WithdrawKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            global: pubkeys[0],
            mint: pubkeys[1],
            bonding_curve: pubkeys[2],
            associated_bonding_curve: pubkeys[3],
            associated_user: pubkeys[4],
            user: pubkeys[5],
            system_program: pubkeys[6],
            token_program: pubkeys[7],
            rent: pubkeys[8],
            event_authority: pubkeys[9],
            program: pubkeys[10],
        }
    }
}
impl WithdrawKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.global,
            self.mint,
            self.bonding_curve,
            self.associated_bonding_curve,
            self.associated_user,
            self.user,
            self.system_program,
            self.token_program,
            self.rent,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "global", self.global),
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "bondingCurve", self.bonding_curve),
                format!(
                    "\"{}\":\"{}\"",
                    "associatedBondingCurve", self.associated_bonding_curve
                ),
                format!("\"{}\":\"{}\"", "associatedUser", self.associated_user),
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program),
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program),
                format!("\"{}\":\"{}\"", "rent", self.rent),
                format!("\"{}\":\"{}\"", "eventAuthority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<WithdrawKeys> for [solana_instruction::AccountMeta; WITHDRAW_IX_ACCOUNTS_LEN] {
    fn from(keys: WithdrawKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.global, false),
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.associated_bonding_curve, false),
            solana_instruction::AccountMeta::new(keys.associated_user, false),
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn withdraw_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; WITHDRAW_IX_ACCOUNTS_LEN] = keys.into();
    let args = WithdrawIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn withdraw_ix(keys: WithdrawKeys) -> Result<solana_instruction::Instruction, std::io::Error> {
    withdraw_ix_with_program_id(crate::ID, keys)
}
