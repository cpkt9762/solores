//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: SetParamsEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_PARAMS_EVENT_EVENT_DISCM: [u8; 8] =
    [223u8, 195u8, 159u8, 246u8, 62u8, 48u8, 143u8, 131u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetParamsEvent {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "feeRecipient"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fee_recipient: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "initialVirtualTokenReserves"))]
    pub initial_virtual_token_reserves: u64,
    #[cfg_attr(feature = "serde", serde(rename = "initialVirtualSolReserves"))]
    pub initial_virtual_sol_reserves: u64,
    #[cfg_attr(feature = "serde", serde(rename = "initialRealTokenReserves"))]
    pub initial_real_token_reserves: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tokenTotalSupply"))]
    pub token_total_supply: u64,
    #[cfg_attr(feature = "serde", serde(rename = "feeBasisPoints"))]
    pub fee_basis_points: u64,
}
impl Default for SetParamsEvent {
    fn default() -> Self {
        Self {
            discriminator: SET_PARAMS_EVENT_EVENT_DISCM,
            fee_recipient: Default::default(),
            initial_virtual_token_reserves: Default::default(),
            initial_virtual_sol_reserves: Default::default(),
            initial_real_token_reserves: Default::default(),
            token_total_supply: Default::default(),
            fee_basis_points: Default::default(),
        }
    }
}
impl SetParamsEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
