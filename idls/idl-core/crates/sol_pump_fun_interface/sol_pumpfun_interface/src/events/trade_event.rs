//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: TradeEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const TRADE_EVENT_EVENT_DISCM: [u8; 8] = [189u8, 219u8, 127u8, 211u8, 78u8, 230u8, 97u8, 238u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TradeEvent {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub mint: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "solAmount"))]
    pub sol_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tokenAmount"))]
    pub token_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "isBuy"))]
    pub is_buy: bool,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub user: Pubkey,
    pub timestamp: i64,
    #[cfg_attr(feature = "serde", serde(rename = "virtualSolReserves"))]
    pub virtual_sol_reserves: u64,
    #[cfg_attr(feature = "serde", serde(rename = "virtualTokenReserves"))]
    pub virtual_token_reserves: u64,
}
impl Default for TradeEvent {
    fn default() -> Self {
        Self {
            discriminator: TRADE_EVENT_EVENT_DISCM,
            mint: Default::default(),
            sol_amount: Default::default(),
            token_amount: Default::default(),
            is_buy: Default::default(),
            user: Default::default(),
            timestamp: Default::default(),
            virtual_sol_reserves: Default::default(),
            virtual_token_reserves: Default::default(),
        }
    }
}
impl TradeEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
