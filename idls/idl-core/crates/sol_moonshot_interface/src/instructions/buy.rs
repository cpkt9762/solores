//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: buy
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const BUY_IX_DISCM: [u8; 8] = [102u8, 6u8, 61u8, 18u8, 1u8, 218u8, 235u8, 234u8];
pub const BUY_IX_ACCOUNTS_LEN: usize = 11;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyIxData {
    pub discriminator: [u8; 8],
    pub data: crate::types::TradeParams,
}
impl Default for BuyIxData {
    fn default() -> Self {
        Self {
            discriminator: BUY_IX_DISCM,
            data: Default::default(),
        }
    }
}
impl BuyIxData {
    pub fn new(data: crate::types::TradeParams) -> Self {
        Self {
            discriminator: Self::discriminator(),
            data,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        BUY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "data",
                    serde_json::to_string(&self.data).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct BuyKeys {
    pub sender: Pubkey,
    pub sender_token_account: Pubkey,
    pub curve_account: Pubkey,
    pub curve_token_account: Pubkey,
    pub dex_fee: Pubkey,
    pub helio_fee: Pubkey,
    pub mint: Pubkey,
    pub config_account: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for BuyKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            sender: pubkeys[0],
            sender_token_account: pubkeys[1],
            curve_account: pubkeys[2],
            curve_token_account: pubkeys[3],
            dex_fee: pubkeys[4],
            helio_fee: pubkeys[5],
            mint: pubkeys[6],
            config_account: pubkeys[7],
            token_program: pubkeys[8],
            associated_token_program: pubkeys[9],
            system_program: pubkeys[10],
        }
    }
}
impl BuyKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.sender,
            self.sender_token_account,
            self.curve_account,
            self.curve_token_account,
            self.dex_fee,
            self.helio_fee,
            self.mint,
            self.config_account,
            self.token_program,
            self.associated_token_program,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "sender", self.sender),
                format!(
                    "\"{}\":\"{}\"",
                    "senderTokenAccount", self.sender_token_account
                ),
                format!("\"{}\":\"{}\"", "curveAccount", self.curve_account),
                format!(
                    "\"{}\":\"{}\"",
                    "curveTokenAccount", self.curve_token_account
                ),
                format!("\"{}\":\"{}\"", "dexFee", self.dex_fee),
                format!("\"{}\":\"{}\"", "helioFee", self.helio_fee),
                format!("\"{}\":\"{}\"", "mint", self.mint),
                format!("\"{}\":\"{}\"", "configAccount", self.config_account),
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associatedTokenProgram", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "systemProgram", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<BuyKeys> for [solana_instruction::AccountMeta; BUY_IX_ACCOUNTS_LEN] {
    fn from(keys: BuyKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.sender, false),
            solana_instruction::AccountMeta::new(keys.sender_token_account, false),
            solana_instruction::AccountMeta::new(keys.curve_account, false),
            solana_instruction::AccountMeta::new(keys.curve_token_account, false),
            solana_instruction::AccountMeta::new(keys.dex_fee, false),
            solana_instruction::AccountMeta::new(keys.helio_fee, false),
            solana_instruction::AccountMeta::new(keys.mint, false),
            solana_instruction::AccountMeta::new(keys.config_account, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn buy_ix_with_program_id(
    program_id: Pubkey,
    keys: BuyKeys,
    args: BuyIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; BUY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn buy_ix(
    keys: BuyKeys,
    args: BuyIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    buy_ix_with_program_id(crate::ID, keys, args)
}
