//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: TradeEvent
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const TRADE_EVENT_EVENT_DISCM: [u8; 8] = [189u8, 219u8, 127u8, 211u8, 78u8, 230u8, 97u8, 238u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TradeEvent {
    pub discriminator: [u8; 8],
    pub amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "collateralAmount"))]
    pub collateral_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "dexFee"))]
    pub dex_fee: u64,
    #[cfg_attr(feature = "serde", serde(rename = "helioFee"))]
    pub helio_fee: u64,
    pub allocation: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub curve: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "costToken"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub cost_token: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub sender: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "type"))]
    pub type_: crate::types::TradeType,
    pub label: String,
}
impl Default for TradeEvent {
    fn default() -> Self {
        Self {
            discriminator: TRADE_EVENT_EVENT_DISCM,
            amount: Default::default(),
            collateral_amount: Default::default(),
            dex_fee: Default::default(),
            helio_fee: Default::default(),
            allocation: Default::default(),
            curve: Default::default(),
            cost_token: Default::default(),
            sender: Default::default(),
            type_: Default::default(),
            label: Default::default(),
        }
    }
}
impl TradeEvent {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
