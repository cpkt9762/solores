//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!ConfigParams
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigParams {
    #[cfg_attr(feature = "serde", serde(rename = "migrationAuthority"))]
    pub migration_authority: Option<Pubkey>,
    #[cfg_attr(feature = "serde", serde(rename = "backendAuthority"))]
    pub backend_authority: Option<Pubkey>,
    #[cfg_attr(feature = "serde", serde(rename = "configAuthority"))]
    pub config_authority: Option<Pubkey>,
    #[cfg_attr(feature = "serde", serde(rename = "helioFee"))]
    pub helio_fee: Option<Pubkey>,
    #[cfg_attr(feature = "serde", serde(rename = "dexFee"))]
    pub dex_fee: Option<Pubkey>,
    #[cfg_attr(feature = "serde", serde(rename = "feeBps"))]
    pub fee_bps: Option<u16>,
    #[cfg_attr(feature = "serde", serde(rename = "dexFeeShare"))]
    pub dex_fee_share: Option<u8>,
    #[cfg_attr(feature = "serde", serde(rename = "migrationFee"))]
    pub migration_fee: Option<u64>,
    #[cfg_attr(feature = "serde", serde(rename = "marketcapThreshold"))]
    pub marketcap_threshold: Option<u64>,
    #[cfg_attr(feature = "serde", serde(rename = "marketcapCurrency"))]
    pub marketcap_currency: Option<u8>,
    #[cfg_attr(feature = "serde", serde(rename = "minSupportedDecimalPlaces"))]
    pub min_supported_decimal_places: Option<u8>,
    #[cfg_attr(feature = "serde", serde(rename = "maxSupportedDecimalPlaces"))]
    pub max_supported_decimal_places: Option<u8>,
    #[cfg_attr(feature = "serde", serde(rename = "minSupportedTokenSupply"))]
    pub min_supported_token_supply: Option<u64>,
    #[cfg_attr(feature = "serde", serde(rename = "maxSupportedTokenSupply"))]
    pub max_supported_token_supply: Option<u64>,
    #[cfg_attr(feature = "serde", serde(rename = "coefB"))]
    pub coef_b: Option<u32>,
}
impl Default for ConfigParams {
    fn default() -> Self {
        Self {
            migration_authority: Default::default(),
            backend_authority: Default::default(),
            config_authority: Default::default(),
            helio_fee: Default::default(),
            dex_fee: Default::default(),
            fee_bps: Default::default(),
            dex_fee_share: Default::default(),
            migration_fee: Default::default(),
            marketcap_threshold: Default::default(),
            marketcap_currency: Default::default(),
            min_supported_decimal_places: Default::default(),
            max_supported_decimal_places: Default::default(),
            min_supported_token_supply: Default::default(),
            max_supported_token_supply: Default::default(),
            coef_b: Default::default(),
        }
    }
}
impl ConfigParams {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
