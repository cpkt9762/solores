//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: withdraw_leftover
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const WITHDRAW_LEFTOVER_IX_DISCM: [u8; 8] =
    [20u8, 198u8, 202u8, 237u8, 235u8, 243u8, 183u8, 66u8];
pub const WITHDRAW_LEFTOVER_IX_ACCOUNTS_LEN: usize = 10;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawLeftoverIxData {
    pub discriminator: [u8; 8],
}
impl Default for WithdrawLeftoverIxData {
    fn default() -> Self {
        Self {
            discriminator: WITHDRAW_LEFTOVER_IX_DISCM,
        }
    }
}
impl WithdrawLeftoverIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        WITHDRAW_LEFTOVER_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct WithdrawLeftoverKeys {
    pub pool_authority: Pubkey,
    pub config: Pubkey,
    pub virtual_pool: Pubkey,
    pub token_base_account: Pubkey,
    pub base_vault: Pubkey,
    pub base_mint: Pubkey,
    pub leftover_receiver: Pubkey,
    pub token_base_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for WithdrawLeftoverKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            pool_authority: pubkeys[0],
            config: pubkeys[1],
            virtual_pool: pubkeys[2],
            token_base_account: pubkeys[3],
            base_vault: pubkeys[4],
            base_mint: pubkeys[5],
            leftover_receiver: pubkeys[6],
            token_base_program: pubkeys[7],
            event_authority: pubkeys[8],
            program: pubkeys[9],
        }
    }
}
impl WithdrawLeftoverKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.pool_authority,
            self.config,
            self.virtual_pool,
            self.token_base_account,
            self.base_vault,
            self.base_mint,
            self.leftover_receiver,
            self.token_base_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "virtual_pool", self.virtual_pool),
                format!(
                    "\"{}\":\"{}\"",
                    "token_base_account", self.token_base_account
                ),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "leftover_receiver", self.leftover_receiver),
                format!(
                    "\"{}\":\"{}\"",
                    "token_base_program", self.token_base_program
                ),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<WithdrawLeftoverKeys>
    for [solana_instruction::AccountMeta; WITHDRAW_LEFTOVER_IX_ACCOUNTS_LEN]
{
    fn from(keys: WithdrawLeftoverKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.virtual_pool, false),
            solana_instruction::AccountMeta::new(keys.token_base_account, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.leftover_receiver, false),
            solana_instruction::AccountMeta::new(keys.token_base_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn withdraw_leftover_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawLeftoverKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; WITHDRAW_LEFTOVER_IX_ACCOUNTS_LEN] = keys.into();
    let args = WithdrawLeftoverIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn withdraw_leftover_ix(
    keys: WithdrawLeftoverKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    withdraw_leftover_ix_with_program_id(crate::ID, keys)
}
