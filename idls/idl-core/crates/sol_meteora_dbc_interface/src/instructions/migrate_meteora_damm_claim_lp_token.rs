//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: migrate_meteora_damm_claim_lp_token
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM: [u8; 8] =
    [139u8, 133u8, 2u8, 30u8, 91u8, 145u8, 127u8, 154u8];
pub const MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN: usize = 9;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateMeteoraDammClaimLpTokenIxData {
    pub discriminator: [u8; 8],
}
impl Default for MigrateMeteoraDammClaimLpTokenIxData {
    fn default() -> Self {
        Self {
            discriminator: MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM,
        }
    }
}
impl MigrateMeteoraDammClaimLpTokenIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct MigrateMeteoraDammClaimLpTokenKeys {
    pub virtual_pool: Pubkey,
    pub migration_metadata: Pubkey,
    pub pool_authority: Pubkey,
    pub lp_mint: Pubkey,
    pub source_token: Pubkey,
    pub destination_token: Pubkey,
    pub owner: Pubkey,
    pub sender: Pubkey,
    pub token_program: Pubkey,
}
impl From<&[Pubkey]> for MigrateMeteoraDammClaimLpTokenKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            migration_metadata: pubkeys[1],
            pool_authority: pubkeys[2],
            lp_mint: pubkeys[3],
            source_token: pubkeys[4],
            destination_token: pubkeys[5],
            owner: pubkeys[6],
            sender: pubkeys[7],
            token_program: pubkeys[8],
        }
    }
}
impl MigrateMeteoraDammClaimLpTokenKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.virtual_pool,
            self.migration_metadata,
            self.pool_authority,
            self.lp_mint,
            self.source_token,
            self.destination_token,
            self.owner,
            self.sender,
            self.token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "virtual_pool", self.virtual_pool),
                format!(
                    "\"{}\":\"{}\"",
                    "migration_metadata", self.migration_metadata
                ),
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "lp_mint", self.lp_mint),
                format!("\"{}\":\"{}\"", "source_token", self.source_token),
                format!("\"{}\":\"{}\"", "destination_token", self.destination_token),
                format!("\"{}\":\"{}\"", "owner", self.owner),
                format!("\"{}\":\"{}\"", "sender", self.sender),
                format!("\"{}\":\"{}\"", "token_program", self.token_program)
            ]
            .join(",")
        )
    }
}
impl From<MigrateMeteoraDammClaimLpTokenKeys>
    for [solana_instruction::AccountMeta; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigrateMeteoraDammClaimLpTokenKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.virtual_pool, false),
            solana_instruction::AccountMeta::new(keys.migration_metadata, false),
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.lp_mint, false),
            solana_instruction::AccountMeta::new(keys.source_token, false),
            solana_instruction::AccountMeta::new(keys.destination_token, false),
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.sender, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
        ]
    }
}
pub fn migrate_meteora_damm_claim_lp_token_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateMeteoraDammClaimLpTokenKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta;
        MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN] = keys.into();
    let args = MigrateMeteoraDammClaimLpTokenIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn migrate_meteora_damm_claim_lp_token_ix(
    keys: MigrateMeteoraDammClaimLpTokenKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    migrate_meteora_damm_claim_lp_token_ix_with_program_id(crate::ID, keys)
}
