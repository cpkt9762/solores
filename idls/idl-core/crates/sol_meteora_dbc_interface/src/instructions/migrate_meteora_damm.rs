//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: migrate_meteora_damm
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MIGRATE_METEORA_DAMM_IX_DISCM: [u8; 8] =
    [27u8, 1u8, 48u8, 22u8, 180u8, 63u8, 118u8, 217u8];
pub const MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN: usize = 31;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateMeteoraDammIxData {
    pub discriminator: [u8; 8],
}
impl Default for MigrateMeteoraDammIxData {
    fn default() -> Self {
        Self {
            discriminator: MIGRATE_METEORA_DAMM_IX_DISCM,
        }
    }
}
impl MigrateMeteoraDammIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        MIGRATE_METEORA_DAMM_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct MigrateMeteoraDammKeys {
    pub virtual_pool: Pubkey,
    pub migration_metadata: Pubkey,
    pub config: Pubkey,
    pub pool_authority: Pubkey,
    pub pool: Pubkey,
    pub damm_config: Pubkey,
    pub lp_mint: Pubkey,
    pub token_a_mint: Pubkey,
    pub token_b_mint: Pubkey,
    pub a_vault: Pubkey,
    pub b_vault: Pubkey,
    pub a_token_vault: Pubkey,
    pub b_token_vault: Pubkey,
    pub a_vault_lp_mint: Pubkey,
    pub b_vault_lp_mint: Pubkey,
    pub a_vault_lp: Pubkey,
    pub b_vault_lp: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub virtual_pool_lp: Pubkey,
    pub protocol_token_a_fee: Pubkey,
    pub protocol_token_b_fee: Pubkey,
    pub payer: Pubkey,
    pub rent: Pubkey,
    pub mint_metadata: Pubkey,
    pub metadata_program: Pubkey,
    pub amm_program: Pubkey,
    pub vault_program: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for MigrateMeteoraDammKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            migration_metadata: pubkeys[1],
            config: pubkeys[2],
            pool_authority: pubkeys[3],
            pool: pubkeys[4],
            damm_config: pubkeys[5],
            lp_mint: pubkeys[6],
            token_a_mint: pubkeys[7],
            token_b_mint: pubkeys[8],
            a_vault: pubkeys[9],
            b_vault: pubkeys[10],
            a_token_vault: pubkeys[11],
            b_token_vault: pubkeys[12],
            a_vault_lp_mint: pubkeys[13],
            b_vault_lp_mint: pubkeys[14],
            a_vault_lp: pubkeys[15],
            b_vault_lp: pubkeys[16],
            base_vault: pubkeys[17],
            quote_vault: pubkeys[18],
            virtual_pool_lp: pubkeys[19],
            protocol_token_a_fee: pubkeys[20],
            protocol_token_b_fee: pubkeys[21],
            payer: pubkeys[22],
            rent: pubkeys[23],
            mint_metadata: pubkeys[24],
            metadata_program: pubkeys[25],
            amm_program: pubkeys[26],
            vault_program: pubkeys[27],
            token_program: pubkeys[28],
            associated_token_program: pubkeys[29],
            system_program: pubkeys[30],
        }
    }
}
impl MigrateMeteoraDammKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.virtual_pool,
            self.migration_metadata,
            self.config,
            self.pool_authority,
            self.pool,
            self.damm_config,
            self.lp_mint,
            self.token_a_mint,
            self.token_b_mint,
            self.a_vault,
            self.b_vault,
            self.a_token_vault,
            self.b_token_vault,
            self.a_vault_lp_mint,
            self.b_vault_lp_mint,
            self.a_vault_lp,
            self.b_vault_lp,
            self.base_vault,
            self.quote_vault,
            self.virtual_pool_lp,
            self.protocol_token_a_fee,
            self.protocol_token_b_fee,
            self.payer,
            self.rent,
            self.mint_metadata,
            self.metadata_program,
            self.amm_program,
            self.vault_program,
            self.token_program,
            self.associated_token_program,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "virtual_pool", self.virtual_pool),
                format!(
                    "\"{}\":\"{}\"",
                    "migration_metadata", self.migration_metadata
                ),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "damm_config", self.damm_config),
                format!("\"{}\":\"{}\"", "lp_mint", self.lp_mint),
                format!("\"{}\":\"{}\"", "token_a_mint", self.token_a_mint),
                format!("\"{}\":\"{}\"", "token_b_mint", self.token_b_mint),
                format!("\"{}\":\"{}\"", "a_vault", self.a_vault),
                format!("\"{}\":\"{}\"", "b_vault", self.b_vault),
                format!("\"{}\":\"{}\"", "a_token_vault", self.a_token_vault),
                format!("\"{}\":\"{}\"", "b_token_vault", self.b_token_vault),
                format!("\"{}\":\"{}\"", "a_vault_lp_mint", self.a_vault_lp_mint),
                format!("\"{}\":\"{}\"", "b_vault_lp_mint", self.b_vault_lp_mint),
                format!("\"{}\":\"{}\"", "a_vault_lp", self.a_vault_lp),
                format!("\"{}\":\"{}\"", "b_vault_lp", self.b_vault_lp),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!("\"{}\":\"{}\"", "virtual_pool_lp", self.virtual_pool_lp),
                format!(
                    "\"{}\":\"{}\"",
                    "protocol_token_a_fee", self.protocol_token_a_fee
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "protocol_token_b_fee", self.protocol_token_b_fee
                ),
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!("\"{}\":\"{}\"", "rent", self.rent),
                format!("\"{}\":\"{}\"", "mint_metadata", self.mint_metadata),
                format!("\"{}\":\"{}\"", "metadata_program", self.metadata_program),
                format!("\"{}\":\"{}\"", "amm_program", self.amm_program),
                format!("\"{}\":\"{}\"", "vault_program", self.vault_program),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!(
                    "\"{}\":\"{}\"",
                    "associated_token_program", self.associated_token_program
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<MigrateMeteoraDammKeys>
    for [solana_instruction::AccountMeta; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigrateMeteoraDammKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.virtual_pool, false),
            solana_instruction::AccountMeta::new(keys.migration_metadata, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.damm_config, false),
            solana_instruction::AccountMeta::new(keys.lp_mint, false),
            solana_instruction::AccountMeta::new(keys.token_a_mint, false),
            solana_instruction::AccountMeta::new(keys.token_b_mint, false),
            solana_instruction::AccountMeta::new(keys.a_vault, false),
            solana_instruction::AccountMeta::new(keys.b_vault, false),
            solana_instruction::AccountMeta::new(keys.a_token_vault, false),
            solana_instruction::AccountMeta::new(keys.b_token_vault, false),
            solana_instruction::AccountMeta::new(keys.a_vault_lp_mint, false),
            solana_instruction::AccountMeta::new(keys.b_vault_lp_mint, false),
            solana_instruction::AccountMeta::new(keys.a_vault_lp, false),
            solana_instruction::AccountMeta::new(keys.b_vault_lp, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.virtual_pool_lp, false),
            solana_instruction::AccountMeta::new(keys.protocol_token_a_fee, false),
            solana_instruction::AccountMeta::new(keys.protocol_token_b_fee, false),
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.mint_metadata, false),
            solana_instruction::AccountMeta::new(keys.metadata_program, false),
            solana_instruction::AccountMeta::new(keys.amm_program, false),
            solana_instruction::AccountMeta::new(keys.vault_program, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.associated_token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn migrate_meteora_damm_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateMeteoraDammKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN] =
        keys.into();
    let args = MigrateMeteoraDammIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn migrate_meteora_damm_ix(
    keys: MigrateMeteoraDammKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    migrate_meteora_damm_ix_with_program_id(crate::ID, keys)
}
