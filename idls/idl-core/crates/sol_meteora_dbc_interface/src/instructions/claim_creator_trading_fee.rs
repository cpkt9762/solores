//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: claim_creator_trading_fee
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CLAIM_CREATOR_TRADING_FEE_IX_DISCM: [u8; 8] =
    [82u8, 220u8, 250u8, 189u8, 3u8, 85u8, 107u8, 45u8];
pub const CLAIM_CREATOR_TRADING_FEE_IX_ACCOUNTS_LEN: usize = 13;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimCreatorTradingFeeIxData {
    pub discriminator: [u8; 8],
    pub max_base_amount: u64,
    pub max_quote_amount: u64,
}
impl Default for ClaimCreatorTradingFeeIxData {
    fn default() -> Self {
        Self {
            discriminator: CLAIM_CREATOR_TRADING_FEE_IX_DISCM,
            max_base_amount: Default::default(),
            max_quote_amount: Default::default(),
        }
    }
}
impl ClaimCreatorTradingFeeIxData {
    pub fn new(max_base_amount: u64, max_quote_amount: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            max_base_amount,
            max_quote_amount,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CLAIM_CREATOR_TRADING_FEE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "max_base_amount", self.max_base_amount),
                format!("\"{}\":{}", "max_quote_amount", self.max_quote_amount)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ClaimCreatorTradingFeeKeys {
    pub pool_authority: Pubkey,
    pub pool: Pubkey,
    pub token_a_account: Pubkey,
    pub token_b_account: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub creator: Pubkey,
    pub token_base_program: Pubkey,
    pub token_quote_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for ClaimCreatorTradingFeeKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            pool_authority: pubkeys[0],
            pool: pubkeys[1],
            token_a_account: pubkeys[2],
            token_b_account: pubkeys[3],
            base_vault: pubkeys[4],
            quote_vault: pubkeys[5],
            base_mint: pubkeys[6],
            quote_mint: pubkeys[7],
            creator: pubkeys[8],
            token_base_program: pubkeys[9],
            token_quote_program: pubkeys[10],
            event_authority: pubkeys[11],
            program: pubkeys[12],
        }
    }
}
impl ClaimCreatorTradingFeeKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.pool_authority,
            self.pool,
            self.token_a_account,
            self.token_b_account,
            self.base_vault,
            self.quote_vault,
            self.base_mint,
            self.quote_mint,
            self.creator,
            self.token_base_program,
            self.token_quote_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!("\"{}\":\"{}\"", "token_a_account", self.token_a_account),
                format!("\"{}\":\"{}\"", "token_b_account", self.token_b_account),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "creator", self.creator),
                format!(
                    "\"{}\":\"{}\"",
                    "token_base_program", self.token_base_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "token_quote_program", self.token_quote_program
                ),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<ClaimCreatorTradingFeeKeys>
    for [solana_instruction::AccountMeta; CLAIM_CREATOR_TRADING_FEE_IX_ACCOUNTS_LEN]
{
    fn from(keys: ClaimCreatorTradingFeeKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.token_a_account, false),
            solana_instruction::AccountMeta::new(keys.token_b_account, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.creator, false),
            solana_instruction::AccountMeta::new(keys.token_base_program, false),
            solana_instruction::AccountMeta::new(keys.token_quote_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn claim_creator_trading_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: ClaimCreatorTradingFeeKeys,
    args: ClaimCreatorTradingFeeIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CLAIM_CREATOR_TRADING_FEE_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn claim_creator_trading_fee_ix(
    keys: ClaimCreatorTradingFeeKeys,
    args: ClaimCreatorTradingFeeIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    claim_creator_trading_fee_ix_with_program_id(crate::ID, keys, args)
}
