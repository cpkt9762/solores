//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: create_locker
///PERMISSIONLESS FUNCTIONS ///
///create locker
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_LOCKER_IX_DISCM: [u8; 8] = [167u8, 90u8, 137u8, 154u8, 75u8, 47u8, 17u8, 84u8];
pub const CREATE_LOCKER_IX_ACCOUNTS_LEN: usize = 14;
///PERMISSIONLESS FUNCTIONS ///
///create locker
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateLockerIxData {
    pub discriminator: [u8; 8],
}
impl Default for CreateLockerIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_LOCKER_IX_DISCM,
        }
    }
}
impl CreateLockerIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CREATE_LOCKER_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct CreateLockerKeys {
    pub virtual_pool: Pubkey,
    pub config: Pubkey,
    pub pool_authority: Pubkey,
    pub base_vault: Pubkey,
    pub base_mint: Pubkey,
    pub base: Pubkey,
    pub creator: Pubkey,
    pub escrow: Pubkey,
    pub escrow_token: Pubkey,
    pub payer: Pubkey,
    pub token_program: Pubkey,
    pub locker_program: Pubkey,
    pub locker_event_authority: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for CreateLockerKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            config: pubkeys[1],
            pool_authority: pubkeys[2],
            base_vault: pubkeys[3],
            base_mint: pubkeys[4],
            base: pubkeys[5],
            creator: pubkeys[6],
            escrow: pubkeys[7],
            escrow_token: pubkeys[8],
            payer: pubkeys[9],
            token_program: pubkeys[10],
            locker_program: pubkeys[11],
            locker_event_authority: pubkeys[12],
            system_program: pubkeys[13],
        }
    }
}
impl CreateLockerKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.virtual_pool,
            self.config,
            self.pool_authority,
            self.base_vault,
            self.base_mint,
            self.base,
            self.creator,
            self.escrow,
            self.escrow_token,
            self.payer,
            self.token_program,
            self.locker_program,
            self.locker_event_authority,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "virtual_pool", self.virtual_pool),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "base", self.base),
                format!("\"{}\":\"{}\"", "creator", self.creator),
                format!("\"{}\":\"{}\"", "escrow", self.escrow),
                format!("\"{}\":\"{}\"", "escrow_token", self.escrow_token),
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "locker_program", self.locker_program),
                format!(
                    "\"{}\":\"{}\"",
                    "locker_event_authority", self.locker_event_authority
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<CreateLockerKeys> for [solana_instruction::AccountMeta; CREATE_LOCKER_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateLockerKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.virtual_pool, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.base, false),
            solana_instruction::AccountMeta::new(keys.creator, false),
            solana_instruction::AccountMeta::new(keys.escrow, false),
            solana_instruction::AccountMeta::new(keys.escrow_token, false),
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.locker_program, false),
            solana_instruction::AccountMeta::new(keys.locker_event_authority, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn create_locker_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateLockerKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_LOCKER_IX_ACCOUNTS_LEN] = keys.into();
    let args = CreateLockerIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_locker_ix(
    keys: CreateLockerKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_locker_ix_with_program_id(crate::ID, keys)
}
