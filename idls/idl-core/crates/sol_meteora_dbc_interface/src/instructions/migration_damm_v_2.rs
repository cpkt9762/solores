//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: migration_damm_v2
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MIGRATION_DAMM_V_2_IX_DISCM: [u8; 8] =
    [156u8, 169u8, 230u8, 103u8, 53u8, 228u8, 80u8, 64u8];
pub const MIGRATION_DAMM_V_2_IX_ACCOUNTS_LEN: usize = 25;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrationDammV2IxData {
    pub discriminator: [u8; 8],
}
impl Default for MigrationDammV2IxData {
    fn default() -> Self {
        Self {
            discriminator: MIGRATION_DAMM_V_2_IX_DISCM,
        }
    }
}
impl MigrationDammV2IxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        MIGRATION_DAMM_V_2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct MigrationDammV2Keys {
    pub virtual_pool: Pubkey,
    pub migration_metadata: Pubkey,
    pub config: Pubkey,
    pub pool_authority: Pubkey,
    pub pool: Pubkey,
    pub first_position_nft_mint: Pubkey,
    pub first_position_nft_account: Pubkey,
    pub first_position: Pubkey,
    pub second_position_nft_mint: Pubkey,
    pub second_position_nft_account: Pubkey,
    pub second_position: Pubkey,
    pub damm_pool_authority: Pubkey,
    pub amm_program: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub token_a_vault: Pubkey,
    pub token_b_vault: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub payer: Pubkey,
    pub token_base_program: Pubkey,
    pub token_quote_program: Pubkey,
    pub token_2022_program: Pubkey,
    pub damm_event_authority: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for MigrationDammV2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            migration_metadata: pubkeys[1],
            config: pubkeys[2],
            pool_authority: pubkeys[3],
            pool: pubkeys[4],
            first_position_nft_mint: pubkeys[5],
            first_position_nft_account: pubkeys[6],
            first_position: pubkeys[7],
            second_position_nft_mint: pubkeys[8],
            second_position_nft_account: pubkeys[9],
            second_position: pubkeys[10],
            damm_pool_authority: pubkeys[11],
            amm_program: pubkeys[12],
            base_mint: pubkeys[13],
            quote_mint: pubkeys[14],
            token_a_vault: pubkeys[15],
            token_b_vault: pubkeys[16],
            base_vault: pubkeys[17],
            quote_vault: pubkeys[18],
            payer: pubkeys[19],
            token_base_program: pubkeys[20],
            token_quote_program: pubkeys[21],
            token_2022_program: pubkeys[22],
            damm_event_authority: pubkeys[23],
            system_program: pubkeys[24],
        }
    }
}
impl MigrationDammV2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.virtual_pool,
            self.migration_metadata,
            self.config,
            self.pool_authority,
            self.pool,
            self.first_position_nft_mint,
            self.first_position_nft_account,
            self.first_position,
            self.second_position_nft_mint,
            self.second_position_nft_account,
            self.second_position,
            self.damm_pool_authority,
            self.amm_program,
            self.base_mint,
            self.quote_mint,
            self.token_a_vault,
            self.token_b_vault,
            self.base_vault,
            self.quote_vault,
            self.payer,
            self.token_base_program,
            self.token_quote_program,
            self.token_2022_program,
            self.damm_event_authority,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "virtual_pool", self.virtual_pool),
                format!(
                    "\"{}\":\"{}\"",
                    "migration_metadata", self.migration_metadata
                ),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!(
                    "\"{}\":\"{}\"",
                    "first_position_nft_mint", self.first_position_nft_mint
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "first_position_nft_account", self.first_position_nft_account
                ),
                format!("\"{}\":\"{}\"", "first_position", self.first_position),
                format!(
                    "\"{}\":\"{}\"",
                    "second_position_nft_mint", self.second_position_nft_mint
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "second_position_nft_account", self.second_position_nft_account
                ),
                format!("\"{}\":\"{}\"", "second_position", self.second_position),
                format!(
                    "\"{}\":\"{}\"",
                    "damm_pool_authority", self.damm_pool_authority
                ),
                format!("\"{}\":\"{}\"", "amm_program", self.amm_program),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "token_a_vault", self.token_a_vault),
                format!("\"{}\":\"{}\"", "token_b_vault", self.token_b_vault),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!(
                    "\"{}\":\"{}\"",
                    "token_base_program", self.token_base_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "token_quote_program", self.token_quote_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "token_2022_program", self.token_2022_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "damm_event_authority", self.damm_event_authority
                ),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<MigrationDammV2Keys>
    for [solana_instruction::AccountMeta; MIGRATION_DAMM_V_2_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigrationDammV2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.virtual_pool, false),
            solana_instruction::AccountMeta::new(keys.migration_metadata, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.first_position_nft_mint, false),
            solana_instruction::AccountMeta::new(keys.first_position_nft_account, false),
            solana_instruction::AccountMeta::new(keys.first_position, false),
            solana_instruction::AccountMeta::new(keys.second_position_nft_mint, false),
            solana_instruction::AccountMeta::new(keys.second_position_nft_account, false),
            solana_instruction::AccountMeta::new(keys.second_position, false),
            solana_instruction::AccountMeta::new(keys.damm_pool_authority, false),
            solana_instruction::AccountMeta::new(keys.amm_program, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.token_a_vault, false),
            solana_instruction::AccountMeta::new(keys.token_b_vault, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.token_base_program, false),
            solana_instruction::AccountMeta::new(keys.token_quote_program, false),
            solana_instruction::AccountMeta::new(keys.token_2022_program, false),
            solana_instruction::AccountMeta::new(keys.damm_event_authority, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn migration_damm_v_2_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrationDammV2Keys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; MIGRATION_DAMM_V_2_IX_ACCOUNTS_LEN] = keys.into();
    let args = MigrationDammV2IxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn migration_damm_v_2_ix(
    keys: MigrationDammV2Keys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    migration_damm_v_2_ix_with_program_id(crate::ID, keys)
}
