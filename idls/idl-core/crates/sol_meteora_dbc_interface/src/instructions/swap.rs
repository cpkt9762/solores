//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: swap
///TRADING BOTS FUNCTIONS ////
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWAP_IX_DISCM: [u8; 8] = [248u8, 198u8, 158u8, 145u8, 225u8, 117u8, 135u8, 200u8];
pub const SWAP_IX_ACCOUNTS_LEN: usize = 15;
///TRADING BOTS FUNCTIONS ////
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapIxData {
    pub discriminator: [u8; 8],
    pub params: crate::types::SwapParameters,
}
impl Default for SwapIxData {
    fn default() -> Self {
        Self {
            discriminator: SWAP_IX_DISCM,
            params: Default::default(),
        }
    }
}
impl SwapIxData {
    pub fn new(params: crate::types::SwapParameters) -> Self {
        Self {
            discriminator: Self::discriminator(),
            params,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SWAP_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "params",
                    serde_json::to_string(&self.params).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SwapKeys {
    pub pool_authority: Pubkey,
    pub config: Pubkey,
    pub pool: Pubkey,
    pub input_token_account: Pubkey,
    pub output_token_account: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub payer: Pubkey,
    pub token_base_program: Pubkey,
    pub token_quote_program: Pubkey,
    pub referral_token_account: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for SwapKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            pool_authority: pubkeys[0],
            config: pubkeys[1],
            pool: pubkeys[2],
            input_token_account: pubkeys[3],
            output_token_account: pubkeys[4],
            base_vault: pubkeys[5],
            quote_vault: pubkeys[6],
            base_mint: pubkeys[7],
            quote_mint: pubkeys[8],
            payer: pubkeys[9],
            token_base_program: pubkeys[10],
            token_quote_program: pubkeys[11],
            referral_token_account: pubkeys[12],
            event_authority: pubkeys[13],
            program: pubkeys[14],
        }
    }
}
impl SwapKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.pool_authority,
            self.config,
            self.pool,
            self.input_token_account,
            self.output_token_account,
            self.base_vault,
            self.quote_vault,
            self.base_mint,
            self.quote_mint,
            self.payer,
            self.token_base_program,
            self.token_quote_program,
            self.referral_token_account,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "pool_authority", self.pool_authority),
                format!("\"{}\":\"{}\"", "config", self.config),
                format!("\"{}\":\"{}\"", "pool", self.pool),
                format!(
                    "\"{}\":\"{}\"",
                    "input_token_account", self.input_token_account
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "output_token_account", self.output_token_account
                ),
                format!("\"{}\":\"{}\"", "base_vault", self.base_vault),
                format!("\"{}\":\"{}\"", "quote_vault", self.quote_vault),
                format!("\"{}\":\"{}\"", "base_mint", self.base_mint),
                format!("\"{}\":\"{}\"", "quote_mint", self.quote_mint),
                format!("\"{}\":\"{}\"", "payer", self.payer),
                format!(
                    "\"{}\":\"{}\"",
                    "token_base_program", self.token_base_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "token_quote_program", self.token_quote_program
                ),
                format!(
                    "\"{}\":\"{}\"",
                    "referral_token_account", self.referral_token_account
                ),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<SwapKeys> for [solana_instruction::AccountMeta; SWAP_IX_ACCOUNTS_LEN] {
    fn from(keys: SwapKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.pool_authority, false),
            solana_instruction::AccountMeta::new(keys.config, false),
            solana_instruction::AccountMeta::new(keys.pool, false),
            solana_instruction::AccountMeta::new(keys.input_token_account, false),
            solana_instruction::AccountMeta::new(keys.output_token_account, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.base_mint, false),
            solana_instruction::AccountMeta::new(keys.quote_mint, false),
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.token_base_program, false),
            solana_instruction::AccountMeta::new(keys.token_quote_program, false),
            solana_instruction::AccountMeta::new(keys.referral_token_account, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn swap_ix_with_program_id(
    program_id: Pubkey,
    keys: SwapKeys,
    args: SwapIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SWAP_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn swap_ix(
    keys: SwapKeys,
    args: SwapIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    swap_ix_with_program_id(crate::ID, keys, args)
}
