//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: EvtProtocolWithdrawSurplus
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const EVT_PROTOCOL_WITHDRAW_SURPLUS_EVENT_DISCM: [u8; 8] =
    [109u8, 111u8, 28u8, 221u8, 134u8, 195u8, 230u8, 203u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct EvtProtocolWithdrawSurplus {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    pub surplus_amount: u64,
}
impl Default for EvtProtocolWithdrawSurplus {
    fn default() -> Self {
        Self {
            discriminator: EVT_PROTOCOL_WITHDRAW_SURPLUS_EVENT_DISCM,
            pool: Default::default(),
            surplus_amount: Default::default(),
        }
    }
}
impl EvtProtocolWithdrawSurplus {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
