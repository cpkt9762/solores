//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!DynamicFeeParameters
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DynamicFeeParameters {
    pub bin_step: u16,
    #[cfg_attr(feature = "serde", serde(rename = "bin_step_u128"))]
    pub bin_step_u_128: u128,
    pub filter_period: u16,
    pub decay_period: u16,
    pub reduction_factor: u16,
    pub max_volatility_accumulator: u32,
    pub variable_fee_control: u32,
}
impl Default for DynamicFeeParameters {
    fn default() -> Self {
        Self {
            bin_step: Default::default(),
            bin_step_u_128: Default::default(),
            filter_period: Default::default(),
            decay_period: Default::default(),
            reduction_factor: Default::default(),
            max_volatility_accumulator: Default::default(),
            variable_fee_control: Default::default(),
        }
    }
}
impl DynamicFeeParameters {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
