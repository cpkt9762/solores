//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!ConfigParameters
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigParameters {
    pub pool_fees: crate::types::PoolFeeParameters,
    pub collect_fee_mode: u8,
    pub migration_option: u8,
    pub activation_type: u8,
    pub token_type: u8,
    pub token_decimal: u8,
    pub partner_lp_percentage: u8,
    pub partner_locked_lp_percentage: u8,
    pub creator_lp_percentage: u8,
    pub creator_locked_lp_percentage: u8,
    pub migration_quote_threshold: u64,
    pub sqrt_start_price: u128,
    pub locked_vesting: crate::types::LockedVestingParams,
    pub migration_fee_option: u8,
    pub token_supply: Option<crate::types::TokenSupplyParams>,
    pub creator_trading_fee_percentage: u8,
    pub token_update_authority: u8,
    pub migration_fee: crate::types::MigrationFee,
    pub padding_0: [u8; 4],
    ///padding for future use
    pub padding_1: [u64; 7],
    pub curve: Vec<crate::types::LiquidityDistributionParameters>,
}
impl Default for ConfigParameters {
    fn default() -> Self {
        Self {
            pool_fees: Default::default(),
            collect_fee_mode: Default::default(),
            migration_option: Default::default(),
            activation_type: Default::default(),
            token_type: Default::default(),
            token_decimal: Default::default(),
            partner_lp_percentage: Default::default(),
            partner_locked_lp_percentage: Default::default(),
            creator_lp_percentage: Default::default(),
            creator_locked_lp_percentage: Default::default(),
            migration_quote_threshold: Default::default(),
            sqrt_start_price: Default::default(),
            locked_vesting: Default::default(),
            migration_fee_option: Default::default(),
            token_supply: Default::default(),
            creator_trading_fee_percentage: Default::default(),
            token_update_authority: Default::default(),
            migration_fee: Default::default(),
            padding_0: Default::default(),
            padding_1: Default::default(),
            curve: Default::default(),
        }
    }
}
impl ConfigParameters {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
