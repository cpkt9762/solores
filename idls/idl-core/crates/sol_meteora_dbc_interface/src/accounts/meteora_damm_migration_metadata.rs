//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const METEORA_DAMM_MIGRATION_METADATA_ACCOUNT_DISCM: [u8; 8] =
    [17u8, 155u8, 141u8, 215u8, 207u8, 4u8, 133u8, 156u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MeteoraDammMigrationMetadata {
    pub discriminator: [u8; 8],
    ///pool
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub virtual_pool: Pubkey,
    ///!!! BE CAREFUL to use tomestone field, previous is pool creator
    pub padding_0: [u8; 32],
    ///partner
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub partner: Pubkey,
    ///lp mint
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub lp_mint: Pubkey,
    ///partner locked lp
    pub partner_locked_lp: u64,
    ///partner lp
    pub partner_lp: u64,
    ///creator locked lp
    pub creator_locked_lp: u64,
    ///creator lp
    pub creator_lp: u64,
    ///padding
    pub padding_1: u8,
    ///flag to check whether lp is locked for creator
    pub creator_locked_status: u8,
    ///flag to check whether lp is locked for partner
    pub partner_locked_status: u8,
    ///flag to check whether creator has claimed lp token
    pub creator_claim_status: u8,
    ///flag to check whether partner has claimed lp token
    pub partner_claim_status: u8,
    ///Reserve
    #[cfg_attr(feature = "serde", serde(rename = "_padding"))]
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub padding: [u8; 107],
}
impl Default for MeteoraDammMigrationMetadata {
    fn default() -> Self {
        Self {
            discriminator: METEORA_DAMM_MIGRATION_METADATA_ACCOUNT_DISCM,
            virtual_pool: Default::default(),
            padding_0: Default::default(),
            partner: Default::default(),
            lp_mint: Default::default(),
            partner_locked_lp: Default::default(),
            partner_lp: Default::default(),
            creator_locked_lp: Default::default(),
            creator_lp: Default::default(),
            padding_1: Default::default(),
            creator_locked_status: Default::default(),
            partner_locked_status: Default::default(),
            creator_claim_status: Default::default(),
            partner_claim_status: Default::default(),
            padding: unsafe { std::mem::zeroed() },
        }
    }
}
impl MeteoraDammMigrationMetadata {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 280usize;
    pub fn discriminator() -> [u8; 8] {
        METEORA_DAMM_MIGRATION_METADATA_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
