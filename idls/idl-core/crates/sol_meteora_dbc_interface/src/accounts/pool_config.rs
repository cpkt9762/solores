//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const POOL_CONFIG_ACCOUNT_DISCM: [u8; 8] =
    [26u8, 108u8, 14u8, 123u8, 116u8, 230u8, 129u8, 43u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PoolConfig {
    pub discriminator: [u8; 8],
    ///quote mint
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_mint: Pubkey,
    ///Address to get the fee
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fee_claimer: Pubkey,
    ///Address to receive extra base token after migration, in case token is fixed supply
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub leftover_receiver: Pubkey,
    ///Pool fee
    pub pool_fees: crate::types::PoolFeesConfig,
    ///Collect fee mode
    pub collect_fee_mode: u8,
    ///migration option
    pub migration_option: u8,
    ///whether mode slot or timestamp
    pub activation_type: u8,
    ///token decimals
    pub token_decimal: u8,
    ///version
    pub version: u8,
    ///token type of base token
    pub token_type: u8,
    ///quote token flag
    pub quote_token_flag: u8,
    ///partner locked lp percentage
    pub partner_locked_lp_percentage: u8,
    ///partner lp percentage
    pub partner_lp_percentage: u8,
    ///creator post migration fee percentage
    pub creator_locked_lp_percentage: u8,
    ///creator lp percentage
    pub creator_lp_percentage: u8,
    ///migration fee option
    pub migration_fee_option: u8,
    ///flag to indicate whether token is dynamic supply (0) or fixed supply (1)
    pub fixed_token_supply_flag: u8,
    ///creator trading fee percentage
    pub creator_trading_fee_percentage: u8,
    ///token update authority
    pub token_update_authority: u8,
    ///migration fee percentage
    pub migration_fee_percentage: u8,
    ///creator migration fee percentage
    pub creator_migration_fee_percentage: u8,
    ///padding 1
    #[cfg_attr(feature = "serde", serde(rename = "_padding_1"))]
    pub padding_1: [u8; 7],
    ///swap base amount
    pub swap_base_amount: u64,
    ///migration quote threshold (in quote token)
    pub migration_quote_threshold: u64,
    ///migration base threshold (in base token)
    pub migration_base_threshold: u64,
    ///migration sqrt price
    pub migration_sqrt_price: u128,
    ///locked vesting config
    pub locked_vesting_config: crate::types::LockedVestingConfig,
    ///pre migration token supply
    pub pre_migration_token_supply: u64,
    ///post migration token supply
    pub post_migration_token_supply: u64,
    ///padding 2
    #[cfg_attr(feature = "serde", serde(rename = "_padding_2"))]
    pub padding_2: [u128; 2],
    ///minimum price
    pub sqrt_start_price: u128,
    ///curve, only use 20 point firstly, we can extend that latter
    pub curve: [crate::types::LiquidityDistributionConfig; 20],
}
impl Default for PoolConfig {
    fn default() -> Self {
        Self {
            discriminator: POOL_CONFIG_ACCOUNT_DISCM,
            quote_mint: Default::default(),
            fee_claimer: Default::default(),
            leftover_receiver: Default::default(),
            pool_fees: Default::default(),
            collect_fee_mode: Default::default(),
            migration_option: Default::default(),
            activation_type: Default::default(),
            token_decimal: Default::default(),
            version: Default::default(),
            token_type: Default::default(),
            quote_token_flag: Default::default(),
            partner_locked_lp_percentage: Default::default(),
            partner_lp_percentage: Default::default(),
            creator_locked_lp_percentage: Default::default(),
            creator_lp_percentage: Default::default(),
            migration_fee_option: Default::default(),
            fixed_token_supply_flag: Default::default(),
            creator_trading_fee_percentage: Default::default(),
            token_update_authority: Default::default(),
            migration_fee_percentage: Default::default(),
            creator_migration_fee_percentage: Default::default(),
            padding_1: Default::default(),
            swap_base_amount: Default::default(),
            migration_quote_threshold: Default::default(),
            migration_base_threshold: Default::default(),
            migration_sqrt_price: Default::default(),
            locked_vesting_config: Default::default(),
            pre_migration_token_supply: Default::default(),
            post_migration_token_supply: Default::default(),
            padding_2: Default::default(),
            sqrt_start_price: Default::default(),
            curve: Default::default(),
        }
    }
}
impl PoolConfig {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 408usize;
    pub fn discriminator() -> [u8; 8] {
        POOL_CONFIG_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
