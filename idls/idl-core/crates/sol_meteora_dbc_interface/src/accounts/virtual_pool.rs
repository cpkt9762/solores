//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const VIRTUAL_POOL_ACCOUNT_DISCM: [u8; 8] = [213u8, 224u8, 5u8, 209u8, 98u8, 69u8, 119u8, 92u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct VirtualPool {
    pub discriminator: [u8; 8],
    ///volatility tracker
    pub volatility_tracker: crate::types::VolatilityTracker,
    ///config key
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub config: Pubkey,
    ///creator
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub creator: Pubkey,
    ///base mint
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_mint: Pubkey,
    ///base vault
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_vault: Pubkey,
    ///quote vault
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_vault: Pubkey,
    ///base reserve
    pub base_reserve: u64,
    ///quote reserve
    pub quote_reserve: u64,
    ///protocol base fee
    pub protocol_base_fee: u64,
    ///protocol quote fee
    pub protocol_quote_fee: u64,
    ///partner base fee
    pub partner_base_fee: u64,
    ///trading quote fee
    pub partner_quote_fee: u64,
    ///current price
    pub sqrt_price: u128,
    ///Activation point
    pub activation_point: u64,
    ///pool type, spl token or token2022
    pub pool_type: u8,
    ///is migrated
    pub is_migrated: u8,
    ///is partner withdraw surplus
    pub is_partner_withdraw_surplus: u8,
    ///is protocol withdraw surplus
    pub is_protocol_withdraw_surplus: u8,
    ///migration progress
    pub migration_progress: u8,
    ///is withdraw leftover
    pub is_withdraw_leftover: u8,
    ///is creator withdraw surplus
    pub is_creator_withdraw_surplus: u8,
    ///migration fee withdraw status, first bit is for partner, second bit is for creator
    pub migration_fee_withdraw_status: u8,
    ///pool metrics
    pub metrics: crate::types::PoolMetrics,
    ///The time curve is finished
    pub finish_curve_timestamp: u64,
    ///creator base fee
    pub creator_base_fee: u64,
    ///creator quote fee
    pub creator_quote_fee: u64,
    ///Padding for further use
    #[cfg_attr(feature = "serde", serde(rename = "_padding_1"))]
    pub padding_1: [u64; 7],
}
impl Default for VirtualPool {
    fn default() -> Self {
        Self {
            discriminator: VIRTUAL_POOL_ACCOUNT_DISCM,
            volatility_tracker: Default::default(),
            config: Default::default(),
            creator: Default::default(),
            base_mint: Default::default(),
            base_vault: Default::default(),
            quote_vault: Default::default(),
            base_reserve: Default::default(),
            quote_reserve: Default::default(),
            protocol_base_fee: Default::default(),
            protocol_quote_fee: Default::default(),
            partner_base_fee: Default::default(),
            partner_quote_fee: Default::default(),
            sqrt_price: Default::default(),
            activation_point: Default::default(),
            pool_type: Default::default(),
            is_migrated: Default::default(),
            is_partner_withdraw_surplus: Default::default(),
            is_protocol_withdraw_surplus: Default::default(),
            migration_progress: Default::default(),
            is_withdraw_leftover: Default::default(),
            is_creator_withdraw_surplus: Default::default(),
            migration_fee_withdraw_status: Default::default(),
            metrics: Default::default(),
            finish_curve_timestamp: Default::default(),
            creator_base_fee: Default::default(),
            creator_quote_fee: Default::default(),
            padding_1: Default::default(),
        }
    }
}
impl VirtualPool {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 344usize;
    pub fn discriminator() -> [u8; 8] {
        VIRTUAL_POOL_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
