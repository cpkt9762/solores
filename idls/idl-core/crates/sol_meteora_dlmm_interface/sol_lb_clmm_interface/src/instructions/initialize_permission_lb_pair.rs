//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initialize_permission_lb_pair
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_PERMISSION_LB_PAIR_IX_DISCM: [u8; 8] =
    [108u8, 102u8, 213u8, 85u8, 251u8, 3u8, 53u8, 21u8];
pub const INITIALIZE_PERMISSION_LB_PAIR_IX_ACCOUNTS_LEN: usize = 17;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePermissionLbPairIxData {
    pub discriminator: [u8; 8],
    pub ix_data: crate::types::InitPermissionPairIx,
}
impl Default for InitializePermissionLbPairIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_PERMISSION_LB_PAIR_IX_DISCM,
            ix_data: Default::default(),
        }
    }
}
impl InitializePermissionLbPairIxData {
    pub fn new(ix_data: crate::types::InitPermissionPairIx) -> Self {
        Self {
            discriminator: Self::discriminator(),
            ix_data,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_PERMISSION_LB_PAIR_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "ix_data",
                    serde_json::to_string(&self.ix_data).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializePermissionLbPairKeys {
    pub base: Pubkey,
    pub lb_pair: Pubkey,
    pub bin_array_bitmap_extension: Pubkey,
    pub token_mint_x: Pubkey,
    pub token_mint_y: Pubkey,
    pub reserve_x: Pubkey,
    pub reserve_y: Pubkey,
    pub oracle: Pubkey,
    pub admin: Pubkey,
    pub token_badge_x: Pubkey,
    pub token_badge_y: Pubkey,
    pub token_program_x: Pubkey,
    pub token_program_y: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for InitializePermissionLbPairKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            base: pubkeys[0],
            lb_pair: pubkeys[1],
            bin_array_bitmap_extension: pubkeys[2],
            token_mint_x: pubkeys[3],
            token_mint_y: pubkeys[4],
            reserve_x: pubkeys[5],
            reserve_y: pubkeys[6],
            oracle: pubkeys[7],
            admin: pubkeys[8],
            token_badge_x: pubkeys[9],
            token_badge_y: pubkeys[10],
            token_program_x: pubkeys[11],
            token_program_y: pubkeys[12],
            system_program: pubkeys[13],
            rent: pubkeys[14],
            event_authority: pubkeys[15],
            program: pubkeys[16],
        }
    }
}
impl InitializePermissionLbPairKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.base,
            self.lb_pair,
            self.bin_array_bitmap_extension,
            self.token_mint_x,
            self.token_mint_y,
            self.reserve_x,
            self.reserve_y,
            self.oracle,
            self.admin,
            self.token_badge_x,
            self.token_badge_y,
            self.token_program_x,
            self.token_program_y,
            self.system_program,
            self.rent,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "base", self.base),
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!(
                    "\"{}\":\"{}\"",
                    "bin_array_bitmap_extension", self.bin_array_bitmap_extension
                ),
                format!("\"{}\":\"{}\"", "token_mint_x", self.token_mint_x),
                format!("\"{}\":\"{}\"", "token_mint_y", self.token_mint_y),
                format!("\"{}\":\"{}\"", "reserve_x", self.reserve_x),
                format!("\"{}\":\"{}\"", "reserve_y", self.reserve_y),
                format!("\"{}\":\"{}\"", "oracle", self.oracle),
                format!("\"{}\":\"{}\"", "admin", self.admin),
                format!("\"{}\":\"{}\"", "token_badge_x", self.token_badge_x),
                format!("\"{}\":\"{}\"", "token_badge_y", self.token_badge_y),
                format!("\"{}\":\"{}\"", "token_program_x", self.token_program_x),
                format!("\"{}\":\"{}\"", "token_program_y", self.token_program_y),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<InitializePermissionLbPairKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_PERMISSION_LB_PAIR_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializePermissionLbPairKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.base, false),
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.bin_array_bitmap_extension, false),
            solana_instruction::AccountMeta::new(keys.token_mint_x, false),
            solana_instruction::AccountMeta::new(keys.token_mint_y, false),
            solana_instruction::AccountMeta::new(keys.reserve_x, false),
            solana_instruction::AccountMeta::new(keys.reserve_y, false),
            solana_instruction::AccountMeta::new(keys.oracle, false),
            solana_instruction::AccountMeta::new(keys.admin, false),
            solana_instruction::AccountMeta::new(keys.token_badge_x, false),
            solana_instruction::AccountMeta::new(keys.token_badge_y, false),
            solana_instruction::AccountMeta::new(keys.token_program_x, false),
            solana_instruction::AccountMeta::new(keys.token_program_y, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn initialize_permission_lb_pair_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializePermissionLbPairKeys,
    args: InitializePermissionLbPairIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_PERMISSION_LB_PAIR_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_permission_lb_pair_ix(
    keys: InitializePermissionLbPairKeys,
    args: InitializePermissionLbPairIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_permission_lb_pair_ix_with_program_id(crate::ID, keys, args)
}
