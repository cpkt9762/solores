//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initialize_preset_parameter2
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_PRESET_PARAMETER_2_IX_DISCM: [u8; 8] =
    [184u8, 7u8, 240u8, 171u8, 103u8, 47u8, 183u8, 121u8];
pub const INITIALIZE_PRESET_PARAMETER_2_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePresetParameter2IxData {
    pub discriminator: [u8; 8],
    pub ix: crate::types::InitPresetParameters2Ix,
}
impl Default for InitializePresetParameter2IxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_PRESET_PARAMETER_2_IX_DISCM,
            ix: Default::default(),
        }
    }
}
impl InitializePresetParameter2IxData {
    pub fn new(ix: crate::types::InitPresetParameters2Ix) -> Self {
        Self {
            discriminator: Self::discriminator(),
            ix,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_PRESET_PARAMETER_2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "ix",
                    serde_json::to_string(&self.ix).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializePresetParameter2Keys {
    pub preset_parameter: Pubkey,
    pub admin: Pubkey,
    pub system_program: Pubkey,
}
impl From<&[Pubkey]> for InitializePresetParameter2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            preset_parameter: pubkeys[0],
            admin: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl InitializePresetParameter2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.preset_parameter, self.admin, self.system_program]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "preset_parameter", self.preset_parameter),
                format!("\"{}\":\"{}\"", "admin", self.admin),
                format!("\"{}\":\"{}\"", "system_program", self.system_program)
            ]
            .join(",")
        )
    }
}
impl From<InitializePresetParameter2Keys>
    for [solana_instruction::AccountMeta; INITIALIZE_PRESET_PARAMETER_2_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializePresetParameter2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.preset_parameter, false),
            solana_instruction::AccountMeta::new(keys.admin, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn initialize_preset_parameter_2_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializePresetParameter2Keys,
    args: InitializePresetParameter2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_PRESET_PARAMETER_2_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_preset_parameter_2_ix(
    keys: InitializePresetParameter2Keys,
    args: InitializePresetParameter2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_preset_parameter_2_ix_with_program_id(crate::ID, keys, args)
}
