//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: swap2
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWAP_2_IX_DISCM: [u8; 8] = [65u8, 75u8, 63u8, 76u8, 235u8, 91u8, 91u8, 136u8];
pub const SWAP_2_IX_ACCOUNTS_LEN: usize = 16;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Swap2IxData {
    pub discriminator: [u8; 8],
    pub amount_in: u64,
    pub min_amount_out: u64,
    pub remaining_accounts_info: crate::types::RemainingAccountsInfo,
}
impl Default for Swap2IxData {
    fn default() -> Self {
        Self {
            discriminator: SWAP_2_IX_DISCM,
            amount_in: Default::default(),
            min_amount_out: Default::default(),
            remaining_accounts_info: Default::default(),
        }
    }
}
impl Swap2IxData {
    pub fn new(
        amount_in: u64,
        min_amount_out: u64,
        remaining_accounts_info: crate::types::RemainingAccountsInfo,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount_in,
            min_amount_out,
            remaining_accounts_info,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SWAP_2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "amount_in", self.amount_in),
                format!("\"{}\":{}", "min_amount_out", self.min_amount_out),
                format!(
                    "\"{}\":{}",
                    "remaining_accounts_info",
                    serde_json::to_string(&self.remaining_accounts_info)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct Swap2Keys {
    pub lb_pair: Pubkey,
    pub bin_array_bitmap_extension: Pubkey,
    pub reserve_x: Pubkey,
    pub reserve_y: Pubkey,
    pub user_token_in: Pubkey,
    pub user_token_out: Pubkey,
    pub token_x_mint: Pubkey,
    pub token_y_mint: Pubkey,
    pub oracle: Pubkey,
    pub host_fee_in: Pubkey,
    pub user: Pubkey,
    pub token_x_program: Pubkey,
    pub token_y_program: Pubkey,
    pub memo_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for Swap2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            bin_array_bitmap_extension: pubkeys[1],
            reserve_x: pubkeys[2],
            reserve_y: pubkeys[3],
            user_token_in: pubkeys[4],
            user_token_out: pubkeys[5],
            token_x_mint: pubkeys[6],
            token_y_mint: pubkeys[7],
            oracle: pubkeys[8],
            host_fee_in: pubkeys[9],
            user: pubkeys[10],
            token_x_program: pubkeys[11],
            token_y_program: pubkeys[12],
            memo_program: pubkeys[13],
            event_authority: pubkeys[14],
            program: pubkeys[15],
        }
    }
}
impl Swap2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.lb_pair,
            self.bin_array_bitmap_extension,
            self.reserve_x,
            self.reserve_y,
            self.user_token_in,
            self.user_token_out,
            self.token_x_mint,
            self.token_y_mint,
            self.oracle,
            self.host_fee_in,
            self.user,
            self.token_x_program,
            self.token_y_program,
            self.memo_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!(
                    "\"{}\":\"{}\"",
                    "bin_array_bitmap_extension", self.bin_array_bitmap_extension
                ),
                format!("\"{}\":\"{}\"", "reserve_x", self.reserve_x),
                format!("\"{}\":\"{}\"", "reserve_y", self.reserve_y),
                format!("\"{}\":\"{}\"", "user_token_in", self.user_token_in),
                format!("\"{}\":\"{}\"", "user_token_out", self.user_token_out),
                format!("\"{}\":\"{}\"", "token_x_mint", self.token_x_mint),
                format!("\"{}\":\"{}\"", "token_y_mint", self.token_y_mint),
                format!("\"{}\":\"{}\"", "oracle", self.oracle),
                format!("\"{}\":\"{}\"", "host_fee_in", self.host_fee_in),
                format!("\"{}\":\"{}\"", "user", self.user),
                format!("\"{}\":\"{}\"", "token_x_program", self.token_x_program),
                format!("\"{}\":\"{}\"", "token_y_program", self.token_y_program),
                format!("\"{}\":\"{}\"", "memo_program", self.memo_program),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<Swap2Keys> for [solana_instruction::AccountMeta; SWAP_2_IX_ACCOUNTS_LEN] {
    fn from(keys: Swap2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.bin_array_bitmap_extension, false),
            solana_instruction::AccountMeta::new(keys.reserve_x, false),
            solana_instruction::AccountMeta::new(keys.reserve_y, false),
            solana_instruction::AccountMeta::new(keys.user_token_in, false),
            solana_instruction::AccountMeta::new(keys.user_token_out, false),
            solana_instruction::AccountMeta::new(keys.token_x_mint, false),
            solana_instruction::AccountMeta::new(keys.token_y_mint, false),
            solana_instruction::AccountMeta::new(keys.oracle, false),
            solana_instruction::AccountMeta::new(keys.host_fee_in, false),
            solana_instruction::AccountMeta::new(keys.user, false),
            solana_instruction::AccountMeta::new(keys.token_x_program, false),
            solana_instruction::AccountMeta::new(keys.token_y_program, false),
            solana_instruction::AccountMeta::new(keys.memo_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn swap_2_ix_with_program_id(
    program_id: Pubkey,
    keys: Swap2Keys,
    args: Swap2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SWAP_2_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn swap_2_ix(
    keys: Swap2Keys,
    args: Swap2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    swap_2_ix_with_program_id(crate::ID, keys, args)
}
