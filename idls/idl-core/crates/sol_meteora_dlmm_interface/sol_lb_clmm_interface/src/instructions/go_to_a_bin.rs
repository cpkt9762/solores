//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: go_to_a_bin
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const GO_TO_A_BIN_IX_DISCM: [u8; 8] = [146u8, 72u8, 174u8, 224u8, 40u8, 253u8, 84u8, 174u8];
pub const GO_TO_A_BIN_IX_ACCOUNTS_LEN: usize = 6;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GoToABinIxData {
    pub discriminator: [u8; 8],
    pub bin_id: i32,
}
impl Default for GoToABinIxData {
    fn default() -> Self {
        Self {
            discriminator: GO_TO_A_BIN_IX_DISCM,
            bin_id: Default::default(),
        }
    }
}
impl GoToABinIxData {
    pub fn new(bin_id: i32) -> Self {
        Self {
            discriminator: Self::discriminator(),
            bin_id,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        GO_TO_A_BIN_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "bin_id", self.bin_id)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct GoToABinKeys {
    pub lb_pair: Pubkey,
    pub bin_array_bitmap_extension: Pubkey,
    pub from_bin_array: Pubkey,
    pub to_bin_array: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for GoToABinKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            bin_array_bitmap_extension: pubkeys[1],
            from_bin_array: pubkeys[2],
            to_bin_array: pubkeys[3],
            event_authority: pubkeys[4],
            program: pubkeys[5],
        }
    }
}
impl GoToABinKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.lb_pair,
            self.bin_array_bitmap_extension,
            self.from_bin_array,
            self.to_bin_array,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!(
                    "\"{}\":\"{}\"",
                    "bin_array_bitmap_extension", self.bin_array_bitmap_extension
                ),
                format!("\"{}\":\"{}\"", "from_bin_array", self.from_bin_array),
                format!("\"{}\":\"{}\"", "to_bin_array", self.to_bin_array),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<GoToABinKeys> for [solana_instruction::AccountMeta; GO_TO_A_BIN_IX_ACCOUNTS_LEN] {
    fn from(keys: GoToABinKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.bin_array_bitmap_extension, false),
            solana_instruction::AccountMeta::new(keys.from_bin_array, false),
            solana_instruction::AccountMeta::new(keys.to_bin_array, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn go_to_a_bin_ix_with_program_id(
    program_id: Pubkey,
    keys: GoToABinKeys,
    args: GoToABinIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; GO_TO_A_BIN_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn go_to_a_bin_ix(
    keys: GoToABinKeys,
    args: GoToABinIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    go_to_a_bin_ix_with_program_id(crate::ID, keys, args)
}
