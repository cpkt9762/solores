//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: add_liquidity_by_strategy2
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const ADD_LIQUIDITY_BY_STRATEGY_2_IX_DISCM: [u8; 8] =
    [3u8, 221u8, 149u8, 218u8, 111u8, 141u8, 118u8, 213u8];
pub const ADD_LIQUIDITY_BY_STRATEGY_2_IX_ACCOUNTS_LEN: usize = 14;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityByStrategy2IxData {
    pub discriminator: [u8; 8],
    pub liquidity_parameter: crate::types::LiquidityParameterByStrategy,
    pub remaining_accounts_info: crate::types::RemainingAccountsInfo,
}
impl Default for AddLiquidityByStrategy2IxData {
    fn default() -> Self {
        Self {
            discriminator: ADD_LIQUIDITY_BY_STRATEGY_2_IX_DISCM,
            liquidity_parameter: Default::default(),
            remaining_accounts_info: Default::default(),
        }
    }
}
impl AddLiquidityByStrategy2IxData {
    pub fn new(
        liquidity_parameter: crate::types::LiquidityParameterByStrategy,
        remaining_accounts_info: crate::types::RemainingAccountsInfo,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            liquidity_parameter,
            remaining_accounts_info,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        ADD_LIQUIDITY_BY_STRATEGY_2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "liquidity_parameter",
                    serde_json::to_string(&self.liquidity_parameter)
                        .unwrap_or_else(|_| "null".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "remaining_accounts_info",
                    serde_json::to_string(&self.remaining_accounts_info)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct AddLiquidityByStrategy2Keys {
    pub position: Pubkey,
    pub lb_pair: Pubkey,
    pub bin_array_bitmap_extension: Pubkey,
    pub user_token_x: Pubkey,
    pub user_token_y: Pubkey,
    pub reserve_x: Pubkey,
    pub reserve_y: Pubkey,
    pub token_x_mint: Pubkey,
    pub token_y_mint: Pubkey,
    pub sender: Pubkey,
    pub token_x_program: Pubkey,
    pub token_y_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for AddLiquidityByStrategy2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            position: pubkeys[0],
            lb_pair: pubkeys[1],
            bin_array_bitmap_extension: pubkeys[2],
            user_token_x: pubkeys[3],
            user_token_y: pubkeys[4],
            reserve_x: pubkeys[5],
            reserve_y: pubkeys[6],
            token_x_mint: pubkeys[7],
            token_y_mint: pubkeys[8],
            sender: pubkeys[9],
            token_x_program: pubkeys[10],
            token_y_program: pubkeys[11],
            event_authority: pubkeys[12],
            program: pubkeys[13],
        }
    }
}
impl AddLiquidityByStrategy2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.position,
            self.lb_pair,
            self.bin_array_bitmap_extension,
            self.user_token_x,
            self.user_token_y,
            self.reserve_x,
            self.reserve_y,
            self.token_x_mint,
            self.token_y_mint,
            self.sender,
            self.token_x_program,
            self.token_y_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "position", self.position),
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!(
                    "\"{}\":\"{}\"",
                    "bin_array_bitmap_extension", self.bin_array_bitmap_extension
                ),
                format!("\"{}\":\"{}\"", "user_token_x", self.user_token_x),
                format!("\"{}\":\"{}\"", "user_token_y", self.user_token_y),
                format!("\"{}\":\"{}\"", "reserve_x", self.reserve_x),
                format!("\"{}\":\"{}\"", "reserve_y", self.reserve_y),
                format!("\"{}\":\"{}\"", "token_x_mint", self.token_x_mint),
                format!("\"{}\":\"{}\"", "token_y_mint", self.token_y_mint),
                format!("\"{}\":\"{}\"", "sender", self.sender),
                format!("\"{}\":\"{}\"", "token_x_program", self.token_x_program),
                format!("\"{}\":\"{}\"", "token_y_program", self.token_y_program),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<AddLiquidityByStrategy2Keys>
    for [solana_instruction::AccountMeta; ADD_LIQUIDITY_BY_STRATEGY_2_IX_ACCOUNTS_LEN]
{
    fn from(keys: AddLiquidityByStrategy2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.bin_array_bitmap_extension, false),
            solana_instruction::AccountMeta::new(keys.user_token_x, false),
            solana_instruction::AccountMeta::new(keys.user_token_y, false),
            solana_instruction::AccountMeta::new(keys.reserve_x, false),
            solana_instruction::AccountMeta::new(keys.reserve_y, false),
            solana_instruction::AccountMeta::new(keys.token_x_mint, false),
            solana_instruction::AccountMeta::new(keys.token_y_mint, false),
            solana_instruction::AccountMeta::new(keys.sender, false),
            solana_instruction::AccountMeta::new(keys.token_x_program, false),
            solana_instruction::AccountMeta::new(keys.token_y_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn add_liquidity_by_strategy_2_ix_with_program_id(
    program_id: Pubkey,
    keys: AddLiquidityByStrategy2Keys,
    args: AddLiquidityByStrategy2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; ADD_LIQUIDITY_BY_STRATEGY_2_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn add_liquidity_by_strategy_2_ix(
    keys: AddLiquidityByStrategy2Keys,
    args: AddLiquidityByStrategy2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    add_liquidity_by_strategy_2_ix_with_program_id(crate::ID, keys, args)
}
