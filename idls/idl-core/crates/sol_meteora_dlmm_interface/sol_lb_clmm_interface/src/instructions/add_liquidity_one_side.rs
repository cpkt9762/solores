//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: add_liquidity_one_side
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const ADD_LIQUIDITY_ONE_SIDE_IX_DISCM: [u8; 8] =
    [94u8, 155u8, 103u8, 151u8, 70u8, 95u8, 220u8, 165u8];
pub const ADD_LIQUIDITY_ONE_SIDE_IX_ACCOUNTS_LEN: usize = 12;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityOneSideIxData {
    pub discriminator: [u8; 8],
    pub liquidity_parameter: crate::types::LiquidityOneSideParameter,
}
impl Default for AddLiquidityOneSideIxData {
    fn default() -> Self {
        Self {
            discriminator: ADD_LIQUIDITY_ONE_SIDE_IX_DISCM,
            liquidity_parameter: Default::default(),
        }
    }
}
impl AddLiquidityOneSideIxData {
    pub fn new(liquidity_parameter: crate::types::LiquidityOneSideParameter) -> Self {
        Self {
            discriminator: Self::discriminator(),
            liquidity_parameter,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        ADD_LIQUIDITY_ONE_SIDE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "liquidity_parameter",
                    serde_json::to_string(&self.liquidity_parameter)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct AddLiquidityOneSideKeys {
    pub position: Pubkey,
    pub lb_pair: Pubkey,
    pub bin_array_bitmap_extension: Pubkey,
    pub user_token: Pubkey,
    pub reserve: Pubkey,
    pub token_mint: Pubkey,
    pub bin_array_lower: Pubkey,
    pub bin_array_upper: Pubkey,
    pub sender: Pubkey,
    pub token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for AddLiquidityOneSideKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            position: pubkeys[0],
            lb_pair: pubkeys[1],
            bin_array_bitmap_extension: pubkeys[2],
            user_token: pubkeys[3],
            reserve: pubkeys[4],
            token_mint: pubkeys[5],
            bin_array_lower: pubkeys[6],
            bin_array_upper: pubkeys[7],
            sender: pubkeys[8],
            token_program: pubkeys[9],
            event_authority: pubkeys[10],
            program: pubkeys[11],
        }
    }
}
impl AddLiquidityOneSideKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.position,
            self.lb_pair,
            self.bin_array_bitmap_extension,
            self.user_token,
            self.reserve,
            self.token_mint,
            self.bin_array_lower,
            self.bin_array_upper,
            self.sender,
            self.token_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "position", self.position),
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!(
                    "\"{}\":\"{}\"",
                    "bin_array_bitmap_extension", self.bin_array_bitmap_extension
                ),
                format!("\"{}\":\"{}\"", "user_token", self.user_token),
                format!("\"{}\":\"{}\"", "reserve", self.reserve),
                format!("\"{}\":\"{}\"", "token_mint", self.token_mint),
                format!("\"{}\":\"{}\"", "bin_array_lower", self.bin_array_lower),
                format!("\"{}\":\"{}\"", "bin_array_upper", self.bin_array_upper),
                format!("\"{}\":\"{}\"", "sender", self.sender),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<AddLiquidityOneSideKeys>
    for [solana_instruction::AccountMeta; ADD_LIQUIDITY_ONE_SIDE_IX_ACCOUNTS_LEN]
{
    fn from(keys: AddLiquidityOneSideKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.bin_array_bitmap_extension, false),
            solana_instruction::AccountMeta::new(keys.user_token, false),
            solana_instruction::AccountMeta::new(keys.reserve, false),
            solana_instruction::AccountMeta::new(keys.token_mint, false),
            solana_instruction::AccountMeta::new(keys.bin_array_lower, false),
            solana_instruction::AccountMeta::new(keys.bin_array_upper, false),
            solana_instruction::AccountMeta::new(keys.sender, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn add_liquidity_one_side_ix_with_program_id(
    program_id: Pubkey,
    keys: AddLiquidityOneSideKeys,
    args: AddLiquidityOneSideIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; ADD_LIQUIDITY_ONE_SIDE_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn add_liquidity_one_side_ix(
    keys: AddLiquidityOneSideKeys,
    args: AddLiquidityOneSideIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    add_liquidity_one_side_ix_with_program_id(crate::ID, keys, args)
}
