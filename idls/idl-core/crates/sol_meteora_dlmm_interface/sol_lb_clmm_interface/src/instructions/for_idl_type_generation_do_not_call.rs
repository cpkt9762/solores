//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: for_idl_type_generation_do_not_call
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_DISCM: [u8; 8] =
    [180u8, 105u8, 69u8, 80u8, 95u8, 50u8, 73u8, 108u8];
pub const FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_ACCOUNTS_LEN: usize = 1;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ForIdlTypeGenerationDoNotCallIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "_ix"))]
    pub ix: crate::types::DummyIx,
}
impl Default for ForIdlTypeGenerationDoNotCallIxData {
    fn default() -> Self {
        Self {
            discriminator: FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_DISCM,
            ix: Default::default(),
        }
    }
}
impl ForIdlTypeGenerationDoNotCallIxData {
    pub fn new(ix: crate::types::DummyIx) -> Self {
        Self {
            discriminator: Self::discriminator(),
            ix,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "ix",
                    serde_json::to_string(&self.ix).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ForIdlTypeGenerationDoNotCallKeys {
    pub dummy_zc_account: Pubkey,
}
impl From<&[Pubkey]> for ForIdlTypeGenerationDoNotCallKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            dummy_zc_account: pubkeys[0],
        }
    }
}
impl ForIdlTypeGenerationDoNotCallKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.dummy_zc_account]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"{}\":\"{}\"",
                "dummy_zc_account", self.dummy_zc_account
            )]
            .join(",")
        )
    }
}
impl From<ForIdlTypeGenerationDoNotCallKeys>
    for [solana_instruction::AccountMeta; FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_ACCOUNTS_LEN]
{
    fn from(keys: ForIdlTypeGenerationDoNotCallKeys) -> Self {
        [solana_instruction::AccountMeta::new(
            keys.dummy_zc_account,
            false,
        )]
    }
}
pub fn for_idl_type_generation_do_not_call_ix_with_program_id(
    program_id: Pubkey,
    keys: ForIdlTypeGenerationDoNotCallKeys,
    args: ForIdlTypeGenerationDoNotCallIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta;
        FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn for_idl_type_generation_do_not_call_ix(
    keys: ForIdlTypeGenerationDoNotCallKeys,
    args: ForIdlTypeGenerationDoNotCallIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    for_idl_type_generation_do_not_call_ix_with_program_id(crate::ID, keys, args)
}
