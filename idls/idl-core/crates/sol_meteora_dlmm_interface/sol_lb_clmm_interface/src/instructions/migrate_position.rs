//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: migrate_position
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MIGRATE_POSITION_IX_DISCM: [u8; 8] = [15u8, 132u8, 59u8, 50u8, 199u8, 6u8, 251u8, 46u8];
pub const MIGRATE_POSITION_IX_ACCOUNTS_LEN: usize = 10;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigratePositionIxData {
    pub discriminator: [u8; 8],
}
impl Default for MigratePositionIxData {
    fn default() -> Self {
        Self {
            discriminator: MIGRATE_POSITION_IX_DISCM,
        }
    }
}
impl MigratePositionIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        MIGRATE_POSITION_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct MigratePositionKeys {
    pub position_v_2: Pubkey,
    pub position_v_1: Pubkey,
    pub lb_pair: Pubkey,
    pub bin_array_lower: Pubkey,
    pub bin_array_upper: Pubkey,
    pub owner: Pubkey,
    pub system_program: Pubkey,
    pub rent_receiver: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for MigratePositionKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            position_v_2: pubkeys[0],
            position_v_1: pubkeys[1],
            lb_pair: pubkeys[2],
            bin_array_lower: pubkeys[3],
            bin_array_upper: pubkeys[4],
            owner: pubkeys[5],
            system_program: pubkeys[6],
            rent_receiver: pubkeys[7],
            event_authority: pubkeys[8],
            program: pubkeys[9],
        }
    }
}
impl MigratePositionKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.position_v_2,
            self.position_v_1,
            self.lb_pair,
            self.bin_array_lower,
            self.bin_array_upper,
            self.owner,
            self.system_program,
            self.rent_receiver,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "position_v2", self.position_v_2),
                format!("\"{}\":\"{}\"", "position_v1", self.position_v_1),
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!("\"{}\":\"{}\"", "bin_array_lower", self.bin_array_lower),
                format!("\"{}\":\"{}\"", "bin_array_upper", self.bin_array_upper),
                format!("\"{}\":\"{}\"", "owner", self.owner),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "rent_receiver", self.rent_receiver),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<MigratePositionKeys>
    for [solana_instruction::AccountMeta; MIGRATE_POSITION_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigratePositionKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.position_v_2, false),
            solana_instruction::AccountMeta::new(keys.position_v_1, false),
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.bin_array_lower, false),
            solana_instruction::AccountMeta::new(keys.bin_array_upper, false),
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent_receiver, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn migrate_position_ix_with_program_id(
    program_id: Pubkey,
    keys: MigratePositionKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; MIGRATE_POSITION_IX_ACCOUNTS_LEN] = keys.into();
    let args = MigratePositionIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn migrate_position_ix(
    keys: MigratePositionKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    migrate_position_ix_with_program_id(crate::ID, keys)
}
