//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: claim_fee
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CLAIM_FEE_IX_DISCM: [u8; 8] = [169u8, 32u8, 79u8, 137u8, 136u8, 232u8, 70u8, 137u8];
pub const CLAIM_FEE_IX_ACCOUNTS_LEN: usize = 14;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimFeeIxData {
    pub discriminator: [u8; 8],
}
impl Default for ClaimFeeIxData {
    fn default() -> Self {
        Self {
            discriminator: CLAIM_FEE_IX_DISCM,
        }
    }
}
impl ClaimFeeIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CLAIM_FEE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ClaimFeeKeys {
    pub lb_pair: Pubkey,
    pub position: Pubkey,
    pub bin_array_lower: Pubkey,
    pub bin_array_upper: Pubkey,
    pub sender: Pubkey,
    pub reserve_x: Pubkey,
    pub reserve_y: Pubkey,
    pub user_token_x: Pubkey,
    pub user_token_y: Pubkey,
    pub token_x_mint: Pubkey,
    pub token_y_mint: Pubkey,
    pub token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for ClaimFeeKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            position: pubkeys[1],
            bin_array_lower: pubkeys[2],
            bin_array_upper: pubkeys[3],
            sender: pubkeys[4],
            reserve_x: pubkeys[5],
            reserve_y: pubkeys[6],
            user_token_x: pubkeys[7],
            user_token_y: pubkeys[8],
            token_x_mint: pubkeys[9],
            token_y_mint: pubkeys[10],
            token_program: pubkeys[11],
            event_authority: pubkeys[12],
            program: pubkeys[13],
        }
    }
}
impl ClaimFeeKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.lb_pair,
            self.position,
            self.bin_array_lower,
            self.bin_array_upper,
            self.sender,
            self.reserve_x,
            self.reserve_y,
            self.user_token_x,
            self.user_token_y,
            self.token_x_mint,
            self.token_y_mint,
            self.token_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!("\"{}\":\"{}\"", "position", self.position),
                format!("\"{}\":\"{}\"", "bin_array_lower", self.bin_array_lower),
                format!("\"{}\":\"{}\"", "bin_array_upper", self.bin_array_upper),
                format!("\"{}\":\"{}\"", "sender", self.sender),
                format!("\"{}\":\"{}\"", "reserve_x", self.reserve_x),
                format!("\"{}\":\"{}\"", "reserve_y", self.reserve_y),
                format!("\"{}\":\"{}\"", "user_token_x", self.user_token_x),
                format!("\"{}\":\"{}\"", "user_token_y", self.user_token_y),
                format!("\"{}\":\"{}\"", "token_x_mint", self.token_x_mint),
                format!("\"{}\":\"{}\"", "token_y_mint", self.token_y_mint),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<ClaimFeeKeys> for [solana_instruction::AccountMeta; CLAIM_FEE_IX_ACCOUNTS_LEN] {
    fn from(keys: ClaimFeeKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.bin_array_lower, false),
            solana_instruction::AccountMeta::new(keys.bin_array_upper, false),
            solana_instruction::AccountMeta::new(keys.sender, false),
            solana_instruction::AccountMeta::new(keys.reserve_x, false),
            solana_instruction::AccountMeta::new(keys.reserve_y, false),
            solana_instruction::AccountMeta::new(keys.user_token_x, false),
            solana_instruction::AccountMeta::new(keys.user_token_y, false),
            solana_instruction::AccountMeta::new(keys.token_x_mint, false),
            solana_instruction::AccountMeta::new(keys.token_y_mint, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn claim_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: ClaimFeeKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CLAIM_FEE_IX_ACCOUNTS_LEN] = keys.into();
    let args = ClaimFeeIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn claim_fee_ix(keys: ClaimFeeKeys) -> Result<solana_instruction::Instruction, std::io::Error> {
    claim_fee_ix_with_program_id(crate::ID, keys)
}
