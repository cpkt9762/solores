//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initialize_reward
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_REWARD_IX_DISCM: [u8; 8] =
    [95u8, 135u8, 192u8, 196u8, 242u8, 129u8, 230u8, 68u8];
pub const INITIALIZE_REWARD_IX_ACCOUNTS_LEN: usize = 10;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeRewardIxData {
    pub discriminator: [u8; 8],
    pub reward_index: u64,
    pub reward_duration: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub funder: Pubkey,
}
impl Default for InitializeRewardIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_REWARD_IX_DISCM,
            reward_index: Default::default(),
            reward_duration: Default::default(),
            funder: Default::default(),
        }
    }
}
impl InitializeRewardIxData {
    pub fn new(reward_index: u64, reward_duration: u64, funder: Pubkey) -> Self {
        Self {
            discriminator: Self::discriminator(),
            reward_index,
            reward_duration,
            funder,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_REWARD_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "reward_index", self.reward_index),
                format!("\"{}\":{}", "reward_duration", self.reward_duration),
                format!("\"{}\":{}", "funder", self.funder)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializeRewardKeys {
    pub lb_pair: Pubkey,
    pub reward_vault: Pubkey,
    pub reward_mint: Pubkey,
    pub token_badge: Pubkey,
    pub admin: Pubkey,
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for InitializeRewardKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            reward_vault: pubkeys[1],
            reward_mint: pubkeys[2],
            token_badge: pubkeys[3],
            admin: pubkeys[4],
            token_program: pubkeys[5],
            system_program: pubkeys[6],
            rent: pubkeys[7],
            event_authority: pubkeys[8],
            program: pubkeys[9],
        }
    }
}
impl InitializeRewardKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.lb_pair,
            self.reward_vault,
            self.reward_mint,
            self.token_badge,
            self.admin,
            self.token_program,
            self.system_program,
            self.rent,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!("\"{}\":\"{}\"", "reward_vault", self.reward_vault),
                format!("\"{}\":\"{}\"", "reward_mint", self.reward_mint),
                format!("\"{}\":\"{}\"", "token_badge", self.token_badge),
                format!("\"{}\":\"{}\"", "admin", self.admin),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<InitializeRewardKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_REWARD_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializeRewardKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.reward_vault, false),
            solana_instruction::AccountMeta::new(keys.reward_mint, false),
            solana_instruction::AccountMeta::new(keys.token_badge, false),
            solana_instruction::AccountMeta::new(keys.admin, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn initialize_reward_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeRewardKeys,
    args: InitializeRewardIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_REWARD_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_reward_ix(
    keys: InitializeRewardKeys,
    args: InitializeRewardIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_reward_ix_with_program_id(crate::ID, keys, args)
}
