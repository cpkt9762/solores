//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: withdraw_ineligible_reward
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const WITHDRAW_INELIGIBLE_REWARD_IX_DISCM: [u8; 8] =
    [148u8, 206u8, 42u8, 195u8, 247u8, 49u8, 103u8, 8u8];
pub const WITHDRAW_INELIGIBLE_REWARD_IX_ACCOUNTS_LEN: usize = 10;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawIneligibleRewardIxData {
    pub discriminator: [u8; 8],
    pub reward_index: u64,
    pub remaining_accounts_info: crate::types::RemainingAccountsInfo,
}
impl Default for WithdrawIneligibleRewardIxData {
    fn default() -> Self {
        Self {
            discriminator: WITHDRAW_INELIGIBLE_REWARD_IX_DISCM,
            reward_index: Default::default(),
            remaining_accounts_info: Default::default(),
        }
    }
}
impl WithdrawIneligibleRewardIxData {
    pub fn new(
        reward_index: u64,
        remaining_accounts_info: crate::types::RemainingAccountsInfo,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            reward_index,
            remaining_accounts_info,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        WITHDRAW_INELIGIBLE_REWARD_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "reward_index", self.reward_index),
                format!(
                    "\"{}\":{}",
                    "remaining_accounts_info",
                    serde_json::to_string(&self.remaining_accounts_info)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct WithdrawIneligibleRewardKeys {
    pub lb_pair: Pubkey,
    pub reward_vault: Pubkey,
    pub reward_mint: Pubkey,
    pub funder_token_account: Pubkey,
    pub funder: Pubkey,
    pub bin_array: Pubkey,
    pub token_program: Pubkey,
    pub memo_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for WithdrawIneligibleRewardKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            reward_vault: pubkeys[1],
            reward_mint: pubkeys[2],
            funder_token_account: pubkeys[3],
            funder: pubkeys[4],
            bin_array: pubkeys[5],
            token_program: pubkeys[6],
            memo_program: pubkeys[7],
            event_authority: pubkeys[8],
            program: pubkeys[9],
        }
    }
}
impl WithdrawIneligibleRewardKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.lb_pair,
            self.reward_vault,
            self.reward_mint,
            self.funder_token_account,
            self.funder,
            self.bin_array,
            self.token_program,
            self.memo_program,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!("\"{}\":\"{}\"", "reward_vault", self.reward_vault),
                format!("\"{}\":\"{}\"", "reward_mint", self.reward_mint),
                format!(
                    "\"{}\":\"{}\"",
                    "funder_token_account", self.funder_token_account
                ),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "bin_array", self.bin_array),
                format!("\"{}\":\"{}\"", "token_program", self.token_program),
                format!("\"{}\":\"{}\"", "memo_program", self.memo_program),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<WithdrawIneligibleRewardKeys>
    for [solana_instruction::AccountMeta; WITHDRAW_INELIGIBLE_REWARD_IX_ACCOUNTS_LEN]
{
    fn from(keys: WithdrawIneligibleRewardKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.reward_vault, false),
            solana_instruction::AccountMeta::new(keys.reward_mint, false),
            solana_instruction::AccountMeta::new(keys.funder_token_account, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.bin_array, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.memo_program, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn withdraw_ineligible_reward_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawIneligibleRewardKeys,
    args: WithdrawIneligibleRewardIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; WITHDRAW_INELIGIBLE_REWARD_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn withdraw_ineligible_reward_ix(
    keys: WithdrawIneligibleRewardKeys,
    args: WithdrawIneligibleRewardIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    withdraw_ineligible_reward_ix_with_program_id(crate::ID, keys, args)
}
