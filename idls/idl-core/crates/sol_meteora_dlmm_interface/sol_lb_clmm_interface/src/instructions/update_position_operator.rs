//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: update_position_operator
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const UPDATE_POSITION_OPERATOR_IX_DISCM: [u8; 8] =
    [202u8, 184u8, 103u8, 143u8, 180u8, 191u8, 116u8, 217u8];
pub const UPDATE_POSITION_OPERATOR_IX_ACCOUNTS_LEN: usize = 4;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdatePositionOperatorIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub operator: Pubkey,
}
impl Default for UpdatePositionOperatorIxData {
    fn default() -> Self {
        Self {
            discriminator: UPDATE_POSITION_OPERATOR_IX_DISCM,
            operator: Default::default(),
        }
    }
}
impl UpdatePositionOperatorIxData {
    pub fn new(operator: Pubkey) -> Self {
        Self {
            discriminator: Self::discriminator(),
            operator,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        UPDATE_POSITION_OPERATOR_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "operator", self.operator)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct UpdatePositionOperatorKeys {
    pub position: Pubkey,
    pub owner: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for UpdatePositionOperatorKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            position: pubkeys[0],
            owner: pubkeys[1],
            event_authority: pubkeys[2],
            program: pubkeys[3],
        }
    }
}
impl UpdatePositionOperatorKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.position,
            self.owner,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "position", self.position),
                format!("\"{}\":\"{}\"", "owner", self.owner),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<UpdatePositionOperatorKeys>
    for [solana_instruction::AccountMeta; UPDATE_POSITION_OPERATOR_IX_ACCOUNTS_LEN]
{
    fn from(keys: UpdatePositionOperatorKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn update_position_operator_ix_with_program_id(
    program_id: Pubkey,
    keys: UpdatePositionOperatorKeys,
    args: UpdatePositionOperatorIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; UPDATE_POSITION_OPERATOR_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn update_position_operator_ix(
    keys: UpdatePositionOperatorKeys,
    args: UpdatePositionOperatorIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    update_position_operator_ix_with_program_id(crate::ID, keys, args)
}
