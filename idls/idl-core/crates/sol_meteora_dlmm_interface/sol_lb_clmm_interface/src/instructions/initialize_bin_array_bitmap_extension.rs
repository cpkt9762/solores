//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: initialize_bin_array_bitmap_extension
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_DISCM: [u8; 8] =
    [47u8, 157u8, 226u8, 180u8, 12u8, 240u8, 33u8, 71u8];
pub const INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_ACCOUNTS_LEN: usize = 5;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeBinArrayBitmapExtensionIxData {
    pub discriminator: [u8; 8],
}
impl Default for InitializeBinArrayBitmapExtensionIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_DISCM,
        }
    }
}
impl InitializeBinArrayBitmapExtensionIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct InitializeBinArrayBitmapExtensionKeys {
    pub lb_pair: Pubkey,
    pub bin_array_bitmap_extension: Pubkey,
    pub funder: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
}
impl From<&[Pubkey]> for InitializeBinArrayBitmapExtensionKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            bin_array_bitmap_extension: pubkeys[1],
            funder: pubkeys[2],
            system_program: pubkeys[3],
            rent: pubkeys[4],
        }
    }
}
impl InitializeBinArrayBitmapExtensionKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.lb_pair,
            self.bin_array_bitmap_extension,
            self.funder,
            self.system_program,
            self.rent,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!(
                    "\"{}\":\"{}\"",
                    "bin_array_bitmap_extension", self.bin_array_bitmap_extension
                ),
                format!("\"{}\":\"{}\"", "funder", self.funder),
                format!("\"{}\":\"{}\"", "system_program", self.system_program),
                format!("\"{}\":\"{}\"", "rent", self.rent)
            ]
            .join(",")
        )
    }
}
impl From<InitializeBinArrayBitmapExtensionKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializeBinArrayBitmapExtensionKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.bin_array_bitmap_extension, false),
            solana_instruction::AccountMeta::new(keys.funder, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
        ]
    }
}
pub fn initialize_bin_array_bitmap_extension_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeBinArrayBitmapExtensionKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta;
        INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_ACCOUNTS_LEN] = keys.into();
    let args = InitializeBinArrayBitmapExtensionIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_bin_array_bitmap_extension_ix(
    keys: InitializeBinArrayBitmapExtensionKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_bin_array_bitmap_extension_ix_with_program_id(crate::ID, keys)
}
