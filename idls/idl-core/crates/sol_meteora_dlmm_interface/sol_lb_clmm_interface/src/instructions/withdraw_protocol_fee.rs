//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: withdraw_protocol_fee
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const WITHDRAW_PROTOCOL_FEE_IX_DISCM: [u8; 8] =
    [158u8, 201u8, 158u8, 189u8, 33u8, 93u8, 162u8, 103u8];
pub const WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN: usize = 12;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawProtocolFeeIxData {
    pub discriminator: [u8; 8],
    pub max_amount_x: u64,
    pub max_amount_y: u64,
    pub remaining_accounts_info: crate::types::RemainingAccountsInfo,
}
impl Default for WithdrawProtocolFeeIxData {
    fn default() -> Self {
        Self {
            discriminator: WITHDRAW_PROTOCOL_FEE_IX_DISCM,
            max_amount_x: Default::default(),
            max_amount_y: Default::default(),
            remaining_accounts_info: Default::default(),
        }
    }
}
impl WithdrawProtocolFeeIxData {
    pub fn new(
        max_amount_x: u64,
        max_amount_y: u64,
        remaining_accounts_info: crate::types::RemainingAccountsInfo,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            max_amount_x,
            max_amount_y,
            remaining_accounts_info,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        WITHDRAW_PROTOCOL_FEE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "max_amount_x", self.max_amount_x),
                format!("\"{}\":{}", "max_amount_y", self.max_amount_y),
                format!(
                    "\"{}\":{}",
                    "remaining_accounts_info",
                    serde_json::to_string(&self.remaining_accounts_info)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct WithdrawProtocolFeeKeys {
    pub lb_pair: Pubkey,
    pub reserve_x: Pubkey,
    pub reserve_y: Pubkey,
    pub token_x_mint: Pubkey,
    pub token_y_mint: Pubkey,
    pub receiver_token_x: Pubkey,
    pub receiver_token_y: Pubkey,
    pub claim_fee_operator: Pubkey,
    pub operator: Pubkey,
    pub token_x_program: Pubkey,
    pub token_y_program: Pubkey,
    pub memo_program: Pubkey,
}
impl From<&[Pubkey]> for WithdrawProtocolFeeKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            reserve_x: pubkeys[1],
            reserve_y: pubkeys[2],
            token_x_mint: pubkeys[3],
            token_y_mint: pubkeys[4],
            receiver_token_x: pubkeys[5],
            receiver_token_y: pubkeys[6],
            claim_fee_operator: pubkeys[7],
            operator: pubkeys[8],
            token_x_program: pubkeys[9],
            token_y_program: pubkeys[10],
            memo_program: pubkeys[11],
        }
    }
}
impl WithdrawProtocolFeeKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.lb_pair,
            self.reserve_x,
            self.reserve_y,
            self.token_x_mint,
            self.token_y_mint,
            self.receiver_token_x,
            self.receiver_token_y,
            self.claim_fee_operator,
            self.operator,
            self.token_x_program,
            self.token_y_program,
            self.memo_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!("\"{}\":\"{}\"", "reserve_x", self.reserve_x),
                format!("\"{}\":\"{}\"", "reserve_y", self.reserve_y),
                format!("\"{}\":\"{}\"", "token_x_mint", self.token_x_mint),
                format!("\"{}\":\"{}\"", "token_y_mint", self.token_y_mint),
                format!("\"{}\":\"{}\"", "receiver_token_x", self.receiver_token_x),
                format!("\"{}\":\"{}\"", "receiver_token_y", self.receiver_token_y),
                format!(
                    "\"{}\":\"{}\"",
                    "claim_fee_operator", self.claim_fee_operator
                ),
                format!("\"{}\":\"{}\"", "operator", self.operator),
                format!("\"{}\":\"{}\"", "token_x_program", self.token_x_program),
                format!("\"{}\":\"{}\"", "token_y_program", self.token_y_program),
                format!("\"{}\":\"{}\"", "memo_program", self.memo_program)
            ]
            .join(",")
        )
    }
}
impl From<WithdrawProtocolFeeKeys>
    for [solana_instruction::AccountMeta; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN]
{
    fn from(keys: WithdrawProtocolFeeKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.reserve_x, false),
            solana_instruction::AccountMeta::new(keys.reserve_y, false),
            solana_instruction::AccountMeta::new(keys.token_x_mint, false),
            solana_instruction::AccountMeta::new(keys.token_y_mint, false),
            solana_instruction::AccountMeta::new(keys.receiver_token_x, false),
            solana_instruction::AccountMeta::new(keys.receiver_token_y, false),
            solana_instruction::AccountMeta::new(keys.claim_fee_operator, false),
            solana_instruction::AccountMeta::new(keys.operator, false),
            solana_instruction::AccountMeta::new(keys.token_x_program, false),
            solana_instruction::AccountMeta::new(keys.token_y_program, false),
            solana_instruction::AccountMeta::new(keys.memo_program, false),
        ]
    }
}
pub fn withdraw_protocol_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawProtocolFeeKeys,
    args: WithdrawProtocolFeeIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn withdraw_protocol_fee_ix(
    keys: WithdrawProtocolFeeKeys,
    args: WithdrawProtocolFeeIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    withdraw_protocol_fee_ix_with_program_id(crate::ID, keys, args)
}
