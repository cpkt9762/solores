//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: set_pre_activation_duration
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SET_PRE_ACTIVATION_DURATION_IX_DISCM: [u8; 8] =
    [165u8, 61u8, 201u8, 244u8, 130u8, 159u8, 22u8, 100u8];
pub const SET_PRE_ACTIVATION_DURATION_IX_ACCOUNTS_LEN: usize = 2;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetPreActivationDurationIxData {
    pub discriminator: [u8; 8],
    pub pre_activation_duration: u64,
}
impl Default for SetPreActivationDurationIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_PRE_ACTIVATION_DURATION_IX_DISCM,
            pre_activation_duration: Default::default(),
        }
    }
}
impl SetPreActivationDurationIxData {
    pub fn new(pre_activation_duration: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            pre_activation_duration,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        SET_PRE_ACTIVATION_DURATION_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!(
                    "\"{}\":{}",
                    "pre_activation_duration", self.pre_activation_duration
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct SetPreActivationDurationKeys {
    pub lb_pair: Pubkey,
    pub creator: Pubkey,
}
impl From<&[Pubkey]> for SetPreActivationDurationKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            creator: pubkeys[1],
        }
    }
}
impl SetPreActivationDurationKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.lb_pair, self.creator]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "lb_pair", self.lb_pair),
                format!("\"{}\":\"{}\"", "creator", self.creator)
            ]
            .join(",")
        )
    }
}
impl From<SetPreActivationDurationKeys>
    for [solana_instruction::AccountMeta; SET_PRE_ACTIVATION_DURATION_IX_ACCOUNTS_LEN]
{
    fn from(keys: SetPreActivationDurationKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.lb_pair, false),
            solana_instruction::AccountMeta::new(keys.creator, false),
        ]
    }
}
pub fn set_pre_activation_duration_ix_with_program_id(
    program_id: Pubkey,
    keys: SetPreActivationDurationKeys,
    args: SetPreActivationDurationIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SET_PRE_ACTIVATION_DURATION_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_pre_activation_duration_ix(
    keys: SetPreActivationDurationKeys,
    args: SetPreActivationDurationIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_pre_activation_duration_ix_with_program_id(crate::ID, keys, args)
}
