//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: close_position_if_empty
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CLOSE_POSITION_IF_EMPTY_IX_DISCM: [u8; 8] =
    [59u8, 124u8, 212u8, 118u8, 91u8, 152u8, 110u8, 157u8];
pub const CLOSE_POSITION_IF_EMPTY_IX_ACCOUNTS_LEN: usize = 5;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClosePositionIfEmptyIxData {
    pub discriminator: [u8; 8],
}
impl Default for ClosePositionIfEmptyIxData {
    fn default() -> Self {
        Self {
            discriminator: CLOSE_POSITION_IF_EMPTY_IX_DISCM,
        }
    }
}
impl ClosePositionIfEmptyIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        CLOSE_POSITION_IF_EMPTY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"discriminator\":[{}]",
                self.discriminator
                    .iter()
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join(",")
            )]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct ClosePositionIfEmptyKeys {
    pub position: Pubkey,
    pub sender: Pubkey,
    pub rent_receiver: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<&[Pubkey]> for ClosePositionIfEmptyKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            position: pubkeys[0],
            sender: pubkeys[1],
            rent_receiver: pubkeys[2],
            event_authority: pubkeys[3],
            program: pubkeys[4],
        }
    }
}
impl ClosePositionIfEmptyKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.position,
            self.sender,
            self.rent_receiver,
            self.event_authority,
            self.program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "position", self.position),
                format!("\"{}\":\"{}\"", "sender", self.sender),
                format!("\"{}\":\"{}\"", "rent_receiver", self.rent_receiver),
                format!("\"{}\":\"{}\"", "event_authority", self.event_authority),
                format!("\"{}\":\"{}\"", "program", self.program)
            ]
            .join(",")
        )
    }
}
impl From<ClosePositionIfEmptyKeys>
    for [solana_instruction::AccountMeta; CLOSE_POSITION_IF_EMPTY_IX_ACCOUNTS_LEN]
{
    fn from(keys: ClosePositionIfEmptyKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.position, false),
            solana_instruction::AccountMeta::new(keys.sender, false),
            solana_instruction::AccountMeta::new(keys.rent_receiver, false),
            solana_instruction::AccountMeta::new(keys.event_authority, false),
            solana_instruction::AccountMeta::new(keys.program, false),
        ]
    }
}
pub fn close_position_if_empty_ix_with_program_id(
    program_id: Pubkey,
    keys: ClosePositionIfEmptyKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CLOSE_POSITION_IF_EMPTY_IX_ACCOUNTS_LEN] =
        keys.into();
    let args = ClosePositionIfEmptyIxData::default();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn close_position_if_empty_ix(
    keys: ClosePositionIfEmptyKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    close_position_if_empty_ix_with_program_id(crate::ID, keys)
}
