//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const PRESET_PARAMETER_ACCOUNT_DISCM: [u8; 8] =
    [242u8, 62u8, 244u8, 34u8, 181u8, 112u8, 58u8, 170u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PresetParameter {
    pub discriminator: [u8; 8],
    ///Bin step. Represent the price increment / decrement.
    pub bin_step: u16,
    ///Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
    pub base_factor: u16,
    ///Filter period determine high frequency trading time window.
    pub filter_period: u16,
    ///Decay period determine when the volatile fee start decay / decrease.
    pub decay_period: u16,
    ///Reduction factor controls the volatile fee rate decrement rate.
    pub reduction_factor: u16,
    ///Used to scale the variable fee component depending on the dynamic of the market
    pub variable_fee_control: u32,
    ///Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
    pub max_volatility_accumulator: u32,
    ///Min bin id supported by the pool based on the configured bin step.
    pub min_bin_id: i32,
    ///Max bin id supported by the pool based on the configured bin step.
    pub max_bin_id: i32,
    ///Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
    pub protocol_share: u16,
}
impl Default for PresetParameter {
    fn default() -> Self {
        Self {
            discriminator: PRESET_PARAMETER_ACCOUNT_DISCM,
            bin_step: Default::default(),
            base_factor: Default::default(),
            filter_period: Default::default(),
            decay_period: Default::default(),
            reduction_factor: Default::default(),
            variable_fee_control: Default::default(),
            max_volatility_accumulator: Default::default(),
            min_bin_id: Default::default(),
            max_bin_id: Default::default(),
            protocol_share: Default::default(),
        }
    }
}
impl PresetParameter {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 36usize;
    pub fn discriminator() -> [u8; 8] {
        PRESET_PARAMETER_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
