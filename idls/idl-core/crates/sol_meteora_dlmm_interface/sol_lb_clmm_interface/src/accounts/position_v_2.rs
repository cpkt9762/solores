//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const POSITION_V2_ACCOUNT_DISCM: [u8; 8] =
    [117u8, 176u8, 212u8, 199u8, 245u8, 180u8, 133u8, 182u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PositionV2 {
    pub discriminator: [u8; 8],
    ///The LB pair of this position
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub lb_pair: Pubkey,
    ///Owner of the position. Client rely on this to to fetch their positions.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub owner: Pubkey,
    ///Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub liquidity_shares: [u128; 70],
    ///Farming reward information
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub reward_infos: [crate::types::UserRewardInfo; 70],
    ///Swap fee to claim information
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub fee_infos: [crate::types::FeeInfo; 70],
    ///Lower bin ID
    pub lower_bin_id: i32,
    ///Upper bin ID
    pub upper_bin_id: i32,
    ///Last updated timestamp
    pub last_updated_at: i64,
    ///Total claimed token fee X
    pub total_claimed_fee_x_amount: u64,
    ///Total claimed token fee Y
    pub total_claimed_fee_y_amount: u64,
    ///Total claimed rewards
    pub total_claimed_rewards: [u64; 2],
    ///Operator of position
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub operator: Pubkey,
    ///Time point which the locked liquidity can be withdraw
    pub lock_release_point: u64,
    ///_padding_0, previous subjected_to_bootstrap_liquidity_locking, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    #[cfg_attr(feature = "serde", serde(rename = "_padding_0"))]
    pub padding_0: u8,
    ///Address is able to claim fee in this position, only valid for bootstrap_liquidity_position
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fee_owner: Pubkey,
    ///Reserved space for future use
    #[cfg_attr(feature = "serde", serde(rename = "_reserved"))]
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub reserved: [u8; 87],
}
impl Default for PositionV2 {
    fn default() -> Self {
        Self {
            discriminator: POSITION_V2_ACCOUNT_DISCM,
            lb_pair: Default::default(),
            owner: Default::default(),
            liquidity_shares: unsafe { std::mem::zeroed() },
            reward_infos: unsafe { std::mem::zeroed() },
            fee_infos: unsafe { std::mem::zeroed() },
            lower_bin_id: Default::default(),
            upper_bin_id: Default::default(),
            last_updated_at: Default::default(),
            total_claimed_fee_x_amount: Default::default(),
            total_claimed_fee_y_amount: Default::default(),
            total_claimed_rewards: Default::default(),
            operator: Default::default(),
            lock_release_point: Default::default(),
            padding_0: Default::default(),
            fee_owner: Default::default(),
            reserved: unsafe { std::mem::zeroed() },
        }
    }
}
impl PositionV2 {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 2520usize;
    pub fn discriminator() -> [u8; 8] {
        POSITION_V2_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
