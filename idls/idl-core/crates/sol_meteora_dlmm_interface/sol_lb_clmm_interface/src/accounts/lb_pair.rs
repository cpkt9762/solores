//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const LB_PAIR_ACCOUNT_DISCM: [u8; 8] = [33u8, 11u8, 49u8, 98u8, 181u8, 101u8, 177u8, 13u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LbPair {
    pub discriminator: [u8; 8],
    pub parameters: crate::types::StaticParameters,
    pub v_parameters: crate::types::VariableParameters,
    pub bump_seed: [u8; 1],
    ///Bin step signer seed
    pub bin_step_seed: [u8; 2],
    ///Type of the pair
    pub pair_type: u8,
    ///Active bin id
    pub active_id: i32,
    ///Bin step. Represent the price increment / decrement.
    pub bin_step: u16,
    ///Status of the pair. Check PairStatus enum.
    pub status: u8,
    ///Require base factor seed
    pub require_base_factor_seed: u8,
    ///Base factor seed
    pub base_factor_seed: [u8; 2],
    ///Activation type
    pub activation_type: u8,
    ///Allow pool creator to enable/disable pool with restricted validation. Only applicable for customizable permissionless pair type.
    pub creator_pool_on_off_control: u8,
    ///Token X mint
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub token_x_mint: Pubkey,
    ///Token Y mint
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub token_y_mint: Pubkey,
    ///LB token X vault
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub reserve_x: Pubkey,
    ///LB token Y vault
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub reserve_y: Pubkey,
    ///Uncollected protocol fee
    pub protocol_fee: crate::types::ProtocolFee,
    ///_padding_1, previous Fee owner, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    #[cfg_attr(feature = "serde", serde(rename = "_padding_1"))]
    pub padding_1: [u8; 32],
    ///Farming reward information
    pub reward_infos: [crate::types::RewardInfo; 2],
    ///Oracle pubkey
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub oracle: Pubkey,
    ///Packed initialized bin array state
    pub bin_array_bitmap: [u64; 16],
    ///Last time the pool fee parameter was updated
    pub last_updated_at: i64,
    ///_padding_2, previous whitelisted_wallet, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    #[cfg_attr(feature = "serde", serde(rename = "_padding_2"))]
    pub padding_2: [u8; 32],
    ///Address allowed to swap when the current point is greater than or equal to the pre-activation point. The pre-activation point is calculated as `activation_point - pre_activation_duration`.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pre_activation_swap_address: Pubkey,
    ///Base keypair. Only required for permission pair
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_key: Pubkey,
    ///Time point to enable the pair. Only applicable for permission pair.
    pub activation_point: u64,
    ///Duration before activation activation_point. Used to calculate pre-activation time point for pre_activation_swap_address
    pub pre_activation_duration: u64,
    ///_padding 3 is reclaimed free space from swap_cap_deactivate_point and swap_cap_amount before, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    #[cfg_attr(feature = "serde", serde(rename = "_padding_3"))]
    pub padding_3: [u8; 8],
    ///_padding_4, previous lock_duration, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    #[cfg_attr(feature = "serde", serde(rename = "_padding_4"))]
    pub padding_4: u64,
    ///Pool creator
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub creator: Pubkey,
    ///token_mint_x_program_flag
    pub token_mint_x_program_flag: u8,
    ///token_mint_y_program_flag
    pub token_mint_y_program_flag: u8,
    ///Reserved space for future use
    #[cfg_attr(feature = "serde", serde(rename = "_reserved"))]
    pub reserved: [u8; 22],
}
impl Default for LbPair {
    fn default() -> Self {
        Self {
            discriminator: LB_PAIR_ACCOUNT_DISCM,
            parameters: Default::default(),
            v_parameters: Default::default(),
            bump_seed: Default::default(),
            bin_step_seed: Default::default(),
            pair_type: Default::default(),
            active_id: Default::default(),
            bin_step: Default::default(),
            status: Default::default(),
            require_base_factor_seed: Default::default(),
            base_factor_seed: Default::default(),
            activation_type: Default::default(),
            creator_pool_on_off_control: Default::default(),
            token_x_mint: Default::default(),
            token_y_mint: Default::default(),
            reserve_x: Default::default(),
            reserve_y: Default::default(),
            protocol_fee: Default::default(),
            padding_1: Default::default(),
            reward_infos: Default::default(),
            oracle: Default::default(),
            bin_array_bitmap: Default::default(),
            last_updated_at: Default::default(),
            padding_2: Default::default(),
            pre_activation_swap_address: Default::default(),
            base_key: Default::default(),
            activation_point: Default::default(),
            pre_activation_duration: Default::default(),
            padding_3: Default::default(),
            padding_4: Default::default(),
            creator: Default::default(),
            token_mint_x_program_flag: Default::default(),
            token_mint_y_program_flag: Default::default(),
            reserved: Default::default(),
        }
    }
}
impl LbPair {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 576usize;
    pub fn discriminator() -> [u8; 8] {
        LB_PAIR_ACCOUNT_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, crate::parsers::accounts::AccountParseError> {
        if data.len() < 8 {
            return Err(crate::parsers::accounts::AccountParseError::DataTooShort {
                expected: 8,
                found: data.len(),
            });
        }
        let expected_discriminator = Self::discriminator();
        if &data[0..8] != expected_discriminator {
            let mut found = [0u8; 8];
            found.copy_from_slice(&data[0..8]);
            return Err(
                crate::parsers::accounts::AccountParseError::DiscriminatorMismatch {
                    expected: expected_discriminator,
                    found,
                },
            );
        }
        if data.len() != Self::PACKED_LEN {
            return Err(
                crate::parsers::accounts::AccountParseError::IncorrectLength {
                    expected: Self::PACKED_LEN,
                    found: data.len(),
                },
            );
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..]).map_err(|e| {
            crate::parsers::accounts::AccountParseError::DeserializationFailed(e.to_string())
        })
    }
}
