//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//! Instructions parser for Anchor contracts with 8-byte discriminators
use crate::instructions::*;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
/// Program instruction types for Anchor contract
#[derive(Clone, Debug, PartialEq)]
pub enum LbClmmInstruction {
    AddLiquidity(AddLiquidityKeys, AddLiquidityIxData),
    AddLiquidity2(AddLiquidity2Keys, AddLiquidity2IxData),
    AddLiquidityByStrategy(AddLiquidityByStrategyKeys, AddLiquidityByStrategyIxData),
    AddLiquidityByStrategy2(AddLiquidityByStrategy2Keys, AddLiquidityByStrategy2IxData),
    AddLiquidityByStrategyOneSide(
        AddLiquidityByStrategyOneSideKeys,
        AddLiquidityByStrategyOneSideIxData,
    ),
    AddLiquidityByWeight(AddLiquidityByWeightKeys, AddLiquidityByWeightIxData),
    AddLiquidityOneSide(AddLiquidityOneSideKeys, AddLiquidityOneSideIxData),
    AddLiquidityOneSidePrecise(
        AddLiquidityOneSidePreciseKeys,
        AddLiquidityOneSidePreciseIxData,
    ),
    AddLiquidityOneSidePrecise2(
        AddLiquidityOneSidePrecise2Keys,
        AddLiquidityOneSidePrecise2IxData,
    ),
    ClaimFee(ClaimFeeKeys, ClaimFeeIxData),
    ClaimFee2(ClaimFee2Keys, ClaimFee2IxData),
    ClaimReward(ClaimRewardKeys, ClaimRewardIxData),
    ClaimReward2(ClaimReward2Keys, ClaimReward2IxData),
    CloseClaimProtocolFeeOperator(
        CloseClaimProtocolFeeOperatorKeys,
        CloseClaimProtocolFeeOperatorIxData,
    ),
    ClosePosition(ClosePositionKeys, ClosePositionIxData),
    ClosePosition2(ClosePosition2Keys, ClosePosition2IxData),
    ClosePositionIfEmpty(ClosePositionIfEmptyKeys, ClosePositionIfEmptyIxData),
    ClosePresetParameter(ClosePresetParameterKeys, ClosePresetParameterIxData),
    ClosePresetParameter2(ClosePresetParameter2Keys, ClosePresetParameter2IxData),
    CreateClaimProtocolFeeOperator(
        CreateClaimProtocolFeeOperatorKeys,
        CreateClaimProtocolFeeOperatorIxData,
    ),
    DecreasePositionLength(DecreasePositionLengthKeys, DecreasePositionLengthIxData),
    ForIdlTypeGenerationDoNotCall(
        ForIdlTypeGenerationDoNotCallKeys,
        ForIdlTypeGenerationDoNotCallIxData,
    ),
    FundReward(FundRewardKeys, FundRewardIxData),
    GoToABin(GoToABinKeys, GoToABinIxData),
    IncreaseOracleLength(IncreaseOracleLengthKeys, IncreaseOracleLengthIxData),
    IncreasePositionLength(IncreasePositionLengthKeys, IncreasePositionLengthIxData),
    InitializeBinArray(InitializeBinArrayKeys, InitializeBinArrayIxData),
    InitializeBinArrayBitmapExtension(
        InitializeBinArrayBitmapExtensionKeys,
        InitializeBinArrayBitmapExtensionIxData,
    ),
    InitializeCustomizablePermissionlessLbPair(
        InitializeCustomizablePermissionlessLbPairKeys,
        InitializeCustomizablePermissionlessLbPairIxData,
    ),
    InitializeCustomizablePermissionlessLbPair2(
        InitializeCustomizablePermissionlessLbPair2Keys,
        InitializeCustomizablePermissionlessLbPair2IxData,
    ),
    InitializeLbPair(InitializeLbPairKeys, InitializeLbPairIxData),
    InitializeLbPair2(InitializeLbPair2Keys, InitializeLbPair2IxData),
    InitializePermissionLbPair(
        InitializePermissionLbPairKeys,
        InitializePermissionLbPairIxData,
    ),
    InitializePosition(InitializePositionKeys, InitializePositionIxData),
    InitializePositionByOperator(
        InitializePositionByOperatorKeys,
        InitializePositionByOperatorIxData,
    ),
    InitializePositionPda(InitializePositionPdaKeys, InitializePositionPdaIxData),
    InitializePresetParameter(
        InitializePresetParameterKeys,
        InitializePresetParameterIxData,
    ),
    InitializePresetParameter2(
        InitializePresetParameter2Keys,
        InitializePresetParameter2IxData,
    ),
    InitializeReward(InitializeRewardKeys, InitializeRewardIxData),
    InitializeTokenBadge(InitializeTokenBadgeKeys, InitializeTokenBadgeIxData),
    MigrateBinArray(MigrateBinArrayKeys, MigrateBinArrayIxData),
    MigratePosition(MigratePositionKeys, MigratePositionIxData),
    RebalanceLiquidity(RebalanceLiquidityKeys, RebalanceLiquidityIxData),
    RemoveAllLiquidity(RemoveAllLiquidityKeys, RemoveAllLiquidityIxData),
    RemoveLiquidity(RemoveLiquidityKeys, RemoveLiquidityIxData),
    RemoveLiquidity2(RemoveLiquidity2Keys, RemoveLiquidity2IxData),
    RemoveLiquidityByRange(RemoveLiquidityByRangeKeys, RemoveLiquidityByRangeIxData),
    RemoveLiquidityByRange2(RemoveLiquidityByRange2Keys, RemoveLiquidityByRange2IxData),
    SetActivationPoint(SetActivationPointKeys, SetActivationPointIxData),
    SetPairStatus(SetPairStatusKeys, SetPairStatusIxData),
    SetPairStatusPermissionless(
        SetPairStatusPermissionlessKeys,
        SetPairStatusPermissionlessIxData,
    ),
    SetPreActivationDuration(SetPreActivationDurationKeys, SetPreActivationDurationIxData),
    SetPreActivationSwapAddress(
        SetPreActivationSwapAddressKeys,
        SetPreActivationSwapAddressIxData,
    ),
    Swap(SwapKeys, SwapIxData),
    Swap2(Swap2Keys, Swap2IxData),
    SwapExactOut(SwapExactOutKeys, SwapExactOutIxData),
    SwapExactOut2(SwapExactOut2Keys, SwapExactOut2IxData),
    SwapWithPriceImpact(SwapWithPriceImpactKeys, SwapWithPriceImpactIxData),
    SwapWithPriceImpact2(SwapWithPriceImpact2Keys, SwapWithPriceImpact2IxData),
    UpdateBaseFeeParameters(UpdateBaseFeeParametersKeys, UpdateBaseFeeParametersIxData),
    UpdateDynamicFeeParameters(
        UpdateDynamicFeeParametersKeys,
        UpdateDynamicFeeParametersIxData,
    ),
    UpdateFeesAndReward2(UpdateFeesAndReward2Keys, UpdateFeesAndReward2IxData),
    UpdateFeesAndRewards(UpdateFeesAndRewardsKeys, UpdateFeesAndRewardsIxData),
    UpdatePositionOperator(UpdatePositionOperatorKeys, UpdatePositionOperatorIxData),
    UpdateRewardDuration(UpdateRewardDurationKeys, UpdateRewardDurationIxData),
    UpdateRewardFunder(UpdateRewardFunderKeys, UpdateRewardFunderIxData),
    WithdrawIneligibleReward(WithdrawIneligibleRewardKeys, WithdrawIneligibleRewardIxData),
    WithdrawProtocolFee(WithdrawProtocolFeeKeys, WithdrawProtocolFeeIxData),
}
impl LbClmmInstruction {
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        match self {
            Self::AddLiquidity(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidity2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidityByStrategy(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity_by_strategy",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidityByStrategy2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity_by_strategy2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidityByStrategyOneSide(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity_by_strategy_one_side",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidityByWeight(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity_by_weight",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidityOneSide(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity_one_side",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidityOneSidePrecise(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity_one_side_precise",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::AddLiquidityOneSidePrecise2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "add_liquidity_one_side_precise2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClaimFee(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "claim_fee",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClaimFee2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "claim_fee2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClaimReward(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "claim_reward",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClaimReward2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "claim_reward2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::CloseClaimProtocolFeeOperator(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "close_claim_protocol_fee_operator",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClosePosition(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "close_position",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClosePosition2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "close_position2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClosePositionIfEmpty(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "close_position_if_empty",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClosePresetParameter(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "close_preset_parameter",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ClosePresetParameter2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "close_preset_parameter2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::CreateClaimProtocolFeeOperator(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "create_claim_protocol_fee_operator",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::DecreasePositionLength(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "decrease_position_length",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::ForIdlTypeGenerationDoNotCall(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "for_idl_type_generation_do_not_call",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::FundReward(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "fund_reward",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::GoToABin(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "go_to_a_bin",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::IncreaseOracleLength(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "increase_oracle_length",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::IncreasePositionLength(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "increase_position_length",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeBinArray(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_bin_array",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeBinArrayBitmapExtension(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_bin_array_bitmap_extension",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeCustomizablePermissionlessLbPair(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_customizable_permissionless_lb_pair",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeCustomizablePermissionlessLbPair2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_customizable_permissionless_lb_pair2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeLbPair(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_lb_pair",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeLbPair2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_lb_pair2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializePermissionLbPair(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_permission_lb_pair",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializePosition(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_position",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializePositionByOperator(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_position_by_operator",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializePositionPda(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_position_pda",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializePresetParameter(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_preset_parameter",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializePresetParameter2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_preset_parameter2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeReward(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_reward",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::InitializeTokenBadge(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "initialize_token_badge",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::MigrateBinArray(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "migrate_bin_array",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::MigratePosition(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "migrate_position",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::RebalanceLiquidity(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "rebalance_liquidity",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::RemoveAllLiquidity(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "remove_all_liquidity",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::RemoveLiquidity(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "remove_liquidity",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::RemoveLiquidity2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "remove_liquidity2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::RemoveLiquidityByRange(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "remove_liquidity_by_range",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::RemoveLiquidityByRange2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "remove_liquidity_by_range2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SetActivationPoint(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "set_activation_point",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SetPairStatus(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "set_pair_status",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SetPairStatusPermissionless(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "set_pair_status_permissionless",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SetPreActivationDuration(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "set_pre_activation_duration",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SetPreActivationSwapAddress(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "set_pre_activation_swap_address",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::Swap(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "swap",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::Swap2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "swap2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SwapExactOut(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "swap_exact_out",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SwapExactOut2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "swap_exact_out2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SwapWithPriceImpact(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "swap_with_price_impact",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::SwapWithPriceImpact2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "swap_with_price_impact2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::UpdateBaseFeeParameters(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "update_base_fee_parameters",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::UpdateDynamicFeeParameters(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "update_dynamic_fee_parameters",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::UpdateFeesAndReward2(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "update_fees_and_reward2",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::UpdateFeesAndRewards(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "update_fees_and_rewards",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::UpdatePositionOperator(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "update_position_operator",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::UpdateRewardDuration(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "update_reward_duration",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::UpdateRewardFunder(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "update_reward_funder",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::WithdrawIneligibleReward(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "withdraw_ineligible_reward",
                    keys.to_json(),
                    data.to_json()
                )
            }
            Self::WithdrawProtocolFee(keys, data) => {
                format!(
                    "{{\"instruction\":\"{}\",\"keys\":{},\"data\":{}}}",
                    "withdraw_protocol_fee",
                    keys.to_json(),
                    data.to_json()
                )
            }
        }
    }
}
/// Helper function to check minimum accounts requirement
fn check_min_accounts_req(
    accounts: &[Pubkey],
    required_len: usize,
    instruction_name: &str,
) -> Result<(), std::io::Error> {
    if accounts.len() < required_len {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            format!("Insufficient accounts for instruction {}", instruction_name),
        ));
    }
    Ok(())
}
/// Parse instruction data based on 8-byte discriminator (Anchor contracts)
pub fn parse_instruction(
    data: &[u8],
    accounts: &[Pubkey],
) -> Result<LbClmmInstruction, std::io::Error> {
    if data.len() < 8 {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Instruction data too short for discriminator",
        ));
    }
    let discriminator: [u8; 8] = data[0..8].try_into().map_err(|_| {
        std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Failed to read discriminator",
        )
    })?;
    match discriminator {
        ADD_LIQUIDITY_IX_DISCM => {
            check_min_accounts_req(accounts, ADD_LIQUIDITY_IX_ACCOUNTS_LEN, "AddLiquidity")?;
            let ix_accounts = AddLiquidityKeys::from(&accounts[..ADD_LIQUIDITY_IX_ACCOUNTS_LEN]);
            let args = AddLiquidityIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidity(ix_accounts, args))
        }
        ADD_LIQUIDITY_2_IX_DISCM => {
            check_min_accounts_req(accounts, ADD_LIQUIDITY_2_IX_ACCOUNTS_LEN, "AddLiquidity2")?;
            let ix_accounts = AddLiquidity2Keys::from(&accounts[..ADD_LIQUIDITY_2_IX_ACCOUNTS_LEN]);
            let args = AddLiquidity2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidity2(ix_accounts, args))
        }
        ADD_LIQUIDITY_BY_STRATEGY_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                ADD_LIQUIDITY_BY_STRATEGY_IX_ACCOUNTS_LEN,
                "AddLiquidityByStrategy",
            )?;
            let ix_accounts = AddLiquidityByStrategyKeys::from(
                &accounts[..ADD_LIQUIDITY_BY_STRATEGY_IX_ACCOUNTS_LEN],
            );
            let args = AddLiquidityByStrategyIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidityByStrategy(ix_accounts, args))
        }
        ADD_LIQUIDITY_BY_STRATEGY_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                ADD_LIQUIDITY_BY_STRATEGY_2_IX_ACCOUNTS_LEN,
                "AddLiquidityByStrategy2",
            )?;
            let ix_accounts = AddLiquidityByStrategy2Keys::from(
                &accounts[..ADD_LIQUIDITY_BY_STRATEGY_2_IX_ACCOUNTS_LEN],
            );
            let args = AddLiquidityByStrategy2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidityByStrategy2(
                ix_accounts,
                args,
            ))
        }
        ADD_LIQUIDITY_BY_STRATEGY_ONE_SIDE_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                ADD_LIQUIDITY_BY_STRATEGY_ONE_SIDE_IX_ACCOUNTS_LEN,
                "AddLiquidityByStrategyOneSide",
            )?;
            let ix_accounts = AddLiquidityByStrategyOneSideKeys::from(
                &accounts[..ADD_LIQUIDITY_BY_STRATEGY_ONE_SIDE_IX_ACCOUNTS_LEN],
            );
            let args = AddLiquidityByStrategyOneSideIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidityByStrategyOneSide(
                ix_accounts,
                args,
            ))
        }
        ADD_LIQUIDITY_BY_WEIGHT_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                ADD_LIQUIDITY_BY_WEIGHT_IX_ACCOUNTS_LEN,
                "AddLiquidityByWeight",
            )?;
            let ix_accounts = AddLiquidityByWeightKeys::from(
                &accounts[..ADD_LIQUIDITY_BY_WEIGHT_IX_ACCOUNTS_LEN],
            );
            let args = AddLiquidityByWeightIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidityByWeight(ix_accounts, args))
        }
        ADD_LIQUIDITY_ONE_SIDE_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                ADD_LIQUIDITY_ONE_SIDE_IX_ACCOUNTS_LEN,
                "AddLiquidityOneSide",
            )?;
            let ix_accounts =
                AddLiquidityOneSideKeys::from(&accounts[..ADD_LIQUIDITY_ONE_SIDE_IX_ACCOUNTS_LEN]);
            let args = AddLiquidityOneSideIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidityOneSide(ix_accounts, args))
        }
        ADD_LIQUIDITY_ONE_SIDE_PRECISE_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                ADD_LIQUIDITY_ONE_SIDE_PRECISE_IX_ACCOUNTS_LEN,
                "AddLiquidityOneSidePrecise",
            )?;
            let ix_accounts = AddLiquidityOneSidePreciseKeys::from(
                &accounts[..ADD_LIQUIDITY_ONE_SIDE_PRECISE_IX_ACCOUNTS_LEN],
            );
            let args = AddLiquidityOneSidePreciseIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidityOneSidePrecise(
                ix_accounts,
                args,
            ))
        }
        ADD_LIQUIDITY_ONE_SIDE_PRECISE_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                ADD_LIQUIDITY_ONE_SIDE_PRECISE_2_IX_ACCOUNTS_LEN,
                "AddLiquidityOneSidePrecise2",
            )?;
            let ix_accounts = AddLiquidityOneSidePrecise2Keys::from(
                &accounts[..ADD_LIQUIDITY_ONE_SIDE_PRECISE_2_IX_ACCOUNTS_LEN],
            );
            let args = AddLiquidityOneSidePrecise2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::AddLiquidityOneSidePrecise2(
                ix_accounts,
                args,
            ))
        }
        CLAIM_FEE_IX_DISCM => {
            check_min_accounts_req(accounts, CLAIM_FEE_IX_ACCOUNTS_LEN, "ClaimFee")?;
            let ix_accounts = ClaimFeeKeys::from(&accounts[..CLAIM_FEE_IX_ACCOUNTS_LEN]);
            let args = ClaimFeeIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClaimFee(ix_accounts, args))
        }
        CLAIM_FEE_2_IX_DISCM => {
            check_min_accounts_req(accounts, CLAIM_FEE_2_IX_ACCOUNTS_LEN, "ClaimFee2")?;
            let ix_accounts = ClaimFee2Keys::from(&accounts[..CLAIM_FEE_2_IX_ACCOUNTS_LEN]);
            let args = ClaimFee2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClaimFee2(ix_accounts, args))
        }
        CLAIM_REWARD_IX_DISCM => {
            check_min_accounts_req(accounts, CLAIM_REWARD_IX_ACCOUNTS_LEN, "ClaimReward")?;
            let ix_accounts = ClaimRewardKeys::from(&accounts[..CLAIM_REWARD_IX_ACCOUNTS_LEN]);
            let args = ClaimRewardIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClaimReward(ix_accounts, args))
        }
        CLAIM_REWARD_2_IX_DISCM => {
            check_min_accounts_req(accounts, CLAIM_REWARD_2_IX_ACCOUNTS_LEN, "ClaimReward2")?;
            let ix_accounts = ClaimReward2Keys::from(&accounts[..CLAIM_REWARD_2_IX_ACCOUNTS_LEN]);
            let args = ClaimReward2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClaimReward2(ix_accounts, args))
        }
        CLOSE_CLAIM_PROTOCOL_FEE_OPERATOR_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                CLOSE_CLAIM_PROTOCOL_FEE_OPERATOR_IX_ACCOUNTS_LEN,
                "CloseClaimProtocolFeeOperator",
            )?;
            let ix_accounts = CloseClaimProtocolFeeOperatorKeys::from(
                &accounts[..CLOSE_CLAIM_PROTOCOL_FEE_OPERATOR_IX_ACCOUNTS_LEN],
            );
            let args = CloseClaimProtocolFeeOperatorIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::CloseClaimProtocolFeeOperator(
                ix_accounts,
                args,
            ))
        }
        CLOSE_POSITION_IX_DISCM => {
            check_min_accounts_req(accounts, CLOSE_POSITION_IX_ACCOUNTS_LEN, "ClosePosition")?;
            let ix_accounts = ClosePositionKeys::from(&accounts[..CLOSE_POSITION_IX_ACCOUNTS_LEN]);
            let args = ClosePositionIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClosePosition(ix_accounts, args))
        }
        CLOSE_POSITION_2_IX_DISCM => {
            check_min_accounts_req(accounts, CLOSE_POSITION_2_IX_ACCOUNTS_LEN, "ClosePosition2")?;
            let ix_accounts =
                ClosePosition2Keys::from(&accounts[..CLOSE_POSITION_2_IX_ACCOUNTS_LEN]);
            let args = ClosePosition2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClosePosition2(ix_accounts, args))
        }
        CLOSE_POSITION_IF_EMPTY_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                CLOSE_POSITION_IF_EMPTY_IX_ACCOUNTS_LEN,
                "ClosePositionIfEmpty",
            )?;
            let ix_accounts = ClosePositionIfEmptyKeys::from(
                &accounts[..CLOSE_POSITION_IF_EMPTY_IX_ACCOUNTS_LEN],
            );
            let args = ClosePositionIfEmptyIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClosePositionIfEmpty(ix_accounts, args))
        }
        CLOSE_PRESET_PARAMETER_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                CLOSE_PRESET_PARAMETER_IX_ACCOUNTS_LEN,
                "ClosePresetParameter",
            )?;
            let ix_accounts =
                ClosePresetParameterKeys::from(&accounts[..CLOSE_PRESET_PARAMETER_IX_ACCOUNTS_LEN]);
            let args = ClosePresetParameterIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClosePresetParameter(ix_accounts, args))
        }
        CLOSE_PRESET_PARAMETER_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                CLOSE_PRESET_PARAMETER_2_IX_ACCOUNTS_LEN,
                "ClosePresetParameter2",
            )?;
            let ix_accounts = ClosePresetParameter2Keys::from(
                &accounts[..CLOSE_PRESET_PARAMETER_2_IX_ACCOUNTS_LEN],
            );
            let args = ClosePresetParameter2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ClosePresetParameter2(ix_accounts, args))
        }
        CREATE_CLAIM_PROTOCOL_FEE_OPERATOR_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                CREATE_CLAIM_PROTOCOL_FEE_OPERATOR_IX_ACCOUNTS_LEN,
                "CreateClaimProtocolFeeOperator",
            )?;
            let ix_accounts = CreateClaimProtocolFeeOperatorKeys::from(
                &accounts[..CREATE_CLAIM_PROTOCOL_FEE_OPERATOR_IX_ACCOUNTS_LEN],
            );
            let args = CreateClaimProtocolFeeOperatorIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::CreateClaimProtocolFeeOperator(
                ix_accounts,
                args,
            ))
        }
        DECREASE_POSITION_LENGTH_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                DECREASE_POSITION_LENGTH_IX_ACCOUNTS_LEN,
                "DecreasePositionLength",
            )?;
            let ix_accounts = DecreasePositionLengthKeys::from(
                &accounts[..DECREASE_POSITION_LENGTH_IX_ACCOUNTS_LEN],
            );
            let args = DecreasePositionLengthIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::DecreasePositionLength(ix_accounts, args))
        }
        FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_ACCOUNTS_LEN,
                "ForIdlTypeGenerationDoNotCall",
            )?;
            let ix_accounts = ForIdlTypeGenerationDoNotCallKeys::from(
                &accounts[..FOR_IDL_TYPE_GENERATION_DO_NOT_CALL_IX_ACCOUNTS_LEN],
            );
            let args = ForIdlTypeGenerationDoNotCallIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::ForIdlTypeGenerationDoNotCall(
                ix_accounts,
                args,
            ))
        }
        FUND_REWARD_IX_DISCM => {
            check_min_accounts_req(accounts, FUND_REWARD_IX_ACCOUNTS_LEN, "FundReward")?;
            let ix_accounts = FundRewardKeys::from(&accounts[..FUND_REWARD_IX_ACCOUNTS_LEN]);
            let args = FundRewardIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::FundReward(ix_accounts, args))
        }
        GO_TO_A_BIN_IX_DISCM => {
            check_min_accounts_req(accounts, GO_TO_A_BIN_IX_ACCOUNTS_LEN, "GoToABin")?;
            let ix_accounts = GoToABinKeys::from(&accounts[..GO_TO_A_BIN_IX_ACCOUNTS_LEN]);
            let args = GoToABinIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::GoToABin(ix_accounts, args))
        }
        INCREASE_ORACLE_LENGTH_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INCREASE_ORACLE_LENGTH_IX_ACCOUNTS_LEN,
                "IncreaseOracleLength",
            )?;
            let ix_accounts =
                IncreaseOracleLengthKeys::from(&accounts[..INCREASE_ORACLE_LENGTH_IX_ACCOUNTS_LEN]);
            let args = IncreaseOracleLengthIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::IncreaseOracleLength(ix_accounts, args))
        }
        INCREASE_POSITION_LENGTH_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INCREASE_POSITION_LENGTH_IX_ACCOUNTS_LEN,
                "IncreasePositionLength",
            )?;
            let ix_accounts = IncreasePositionLengthKeys::from(
                &accounts[..INCREASE_POSITION_LENGTH_IX_ACCOUNTS_LEN],
            );
            let args = IncreasePositionLengthIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::IncreasePositionLength(ix_accounts, args))
        }
        INITIALIZE_BIN_ARRAY_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_BIN_ARRAY_IX_ACCOUNTS_LEN,
                "InitializeBinArray",
            )?;
            let ix_accounts =
                InitializeBinArrayKeys::from(&accounts[..INITIALIZE_BIN_ARRAY_IX_ACCOUNTS_LEN]);
            let args = InitializeBinArrayIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeBinArray(ix_accounts, args))
        }
        INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_ACCOUNTS_LEN,
                "InitializeBinArrayBitmapExtension",
            )?;
            let ix_accounts = InitializeBinArrayBitmapExtensionKeys::from(
                &accounts[..INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_ACCOUNTS_LEN],
            );
            let args = InitializeBinArrayBitmapExtensionIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeBinArrayBitmapExtension(
                ix_accounts,
                args,
            ))
        }
        INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_IX_ACCOUNTS_LEN,
                "InitializeCustomizablePermissionlessLbPair",
            )?;
            let ix_accounts = InitializeCustomizablePermissionlessLbPairKeys::from(
                &accounts[..INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_IX_ACCOUNTS_LEN],
            );
            let args = InitializeCustomizablePermissionlessLbPairIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeCustomizablePermissionlessLbPair(ix_accounts, args))
        }
        INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_2_IX_ACCOUNTS_LEN,
                "InitializeCustomizablePermissionlessLbPair2",
            )?;
            let ix_accounts = InitializeCustomizablePermissionlessLbPair2Keys::from(
                &accounts[..INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_2_IX_ACCOUNTS_LEN],
            );
            let args = InitializeCustomizablePermissionlessLbPair2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeCustomizablePermissionlessLbPair2(ix_accounts, args))
        }
        INITIALIZE_LB_PAIR_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_LB_PAIR_IX_ACCOUNTS_LEN,
                "InitializeLbPair",
            )?;
            let ix_accounts =
                InitializeLbPairKeys::from(&accounts[..INITIALIZE_LB_PAIR_IX_ACCOUNTS_LEN]);
            let args = InitializeLbPairIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeLbPair(ix_accounts, args))
        }
        INITIALIZE_LB_PAIR_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_LB_PAIR_2_IX_ACCOUNTS_LEN,
                "InitializeLbPair2",
            )?;
            let ix_accounts =
                InitializeLbPair2Keys::from(&accounts[..INITIALIZE_LB_PAIR_2_IX_ACCOUNTS_LEN]);
            let args = InitializeLbPair2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeLbPair2(ix_accounts, args))
        }
        INITIALIZE_PERMISSION_LB_PAIR_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_PERMISSION_LB_PAIR_IX_ACCOUNTS_LEN,
                "InitializePermissionLbPair",
            )?;
            let ix_accounts = InitializePermissionLbPairKeys::from(
                &accounts[..INITIALIZE_PERMISSION_LB_PAIR_IX_ACCOUNTS_LEN],
            );
            let args = InitializePermissionLbPairIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializePermissionLbPair(
                ix_accounts,
                args,
            ))
        }
        INITIALIZE_POSITION_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_POSITION_IX_ACCOUNTS_LEN,
                "InitializePosition",
            )?;
            let ix_accounts =
                InitializePositionKeys::from(&accounts[..INITIALIZE_POSITION_IX_ACCOUNTS_LEN]);
            let args = InitializePositionIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializePosition(ix_accounts, args))
        }
        INITIALIZE_POSITION_BY_OPERATOR_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN,
                "InitializePositionByOperator",
            )?;
            let ix_accounts = InitializePositionByOperatorKeys::from(
                &accounts[..INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN],
            );
            let args = InitializePositionByOperatorIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializePositionByOperator(
                ix_accounts,
                args,
            ))
        }
        INITIALIZE_POSITION_PDA_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_POSITION_PDA_IX_ACCOUNTS_LEN,
                "InitializePositionPda",
            )?;
            let ix_accounts = InitializePositionPdaKeys::from(
                &accounts[..INITIALIZE_POSITION_PDA_IX_ACCOUNTS_LEN],
            );
            let args = InitializePositionPdaIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializePositionPda(ix_accounts, args))
        }
        INITIALIZE_PRESET_PARAMETER_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_PRESET_PARAMETER_IX_ACCOUNTS_LEN,
                "InitializePresetParameter",
            )?;
            let ix_accounts = InitializePresetParameterKeys::from(
                &accounts[..INITIALIZE_PRESET_PARAMETER_IX_ACCOUNTS_LEN],
            );
            let args = InitializePresetParameterIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializePresetParameter(
                ix_accounts,
                args,
            ))
        }
        INITIALIZE_PRESET_PARAMETER_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_PRESET_PARAMETER_2_IX_ACCOUNTS_LEN,
                "InitializePresetParameter2",
            )?;
            let ix_accounts = InitializePresetParameter2Keys::from(
                &accounts[..INITIALIZE_PRESET_PARAMETER_2_IX_ACCOUNTS_LEN],
            );
            let args = InitializePresetParameter2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializePresetParameter2(
                ix_accounts,
                args,
            ))
        }
        INITIALIZE_REWARD_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_REWARD_IX_ACCOUNTS_LEN,
                "InitializeReward",
            )?;
            let ix_accounts =
                InitializeRewardKeys::from(&accounts[..INITIALIZE_REWARD_IX_ACCOUNTS_LEN]);
            let args = InitializeRewardIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeReward(ix_accounts, args))
        }
        INITIALIZE_TOKEN_BADGE_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                INITIALIZE_TOKEN_BADGE_IX_ACCOUNTS_LEN,
                "InitializeTokenBadge",
            )?;
            let ix_accounts =
                InitializeTokenBadgeKeys::from(&accounts[..INITIALIZE_TOKEN_BADGE_IX_ACCOUNTS_LEN]);
            let args = InitializeTokenBadgeIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::InitializeTokenBadge(ix_accounts, args))
        }
        MIGRATE_BIN_ARRAY_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN,
                "MigrateBinArray",
            )?;
            let ix_accounts =
                MigrateBinArrayKeys::from(&accounts[..MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN]);
            let args = MigrateBinArrayIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::MigrateBinArray(ix_accounts, args))
        }
        MIGRATE_POSITION_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                MIGRATE_POSITION_IX_ACCOUNTS_LEN,
                "MigratePosition",
            )?;
            let ix_accounts =
                MigratePositionKeys::from(&accounts[..MIGRATE_POSITION_IX_ACCOUNTS_LEN]);
            let args = MigratePositionIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::MigratePosition(ix_accounts, args))
        }
        REBALANCE_LIQUIDITY_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                REBALANCE_LIQUIDITY_IX_ACCOUNTS_LEN,
                "RebalanceLiquidity",
            )?;
            let ix_accounts =
                RebalanceLiquidityKeys::from(&accounts[..REBALANCE_LIQUIDITY_IX_ACCOUNTS_LEN]);
            let args = RebalanceLiquidityIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::RebalanceLiquidity(ix_accounts, args))
        }
        REMOVE_ALL_LIQUIDITY_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                REMOVE_ALL_LIQUIDITY_IX_ACCOUNTS_LEN,
                "RemoveAllLiquidity",
            )?;
            let ix_accounts =
                RemoveAllLiquidityKeys::from(&accounts[..REMOVE_ALL_LIQUIDITY_IX_ACCOUNTS_LEN]);
            let args = RemoveAllLiquidityIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::RemoveAllLiquidity(ix_accounts, args))
        }
        REMOVE_LIQUIDITY_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                REMOVE_LIQUIDITY_IX_ACCOUNTS_LEN,
                "RemoveLiquidity",
            )?;
            let ix_accounts =
                RemoveLiquidityKeys::from(&accounts[..REMOVE_LIQUIDITY_IX_ACCOUNTS_LEN]);
            let args = RemoveLiquidityIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::RemoveLiquidity(ix_accounts, args))
        }
        REMOVE_LIQUIDITY_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                REMOVE_LIQUIDITY_2_IX_ACCOUNTS_LEN,
                "RemoveLiquidity2",
            )?;
            let ix_accounts =
                RemoveLiquidity2Keys::from(&accounts[..REMOVE_LIQUIDITY_2_IX_ACCOUNTS_LEN]);
            let args = RemoveLiquidity2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::RemoveLiquidity2(ix_accounts, args))
        }
        REMOVE_LIQUIDITY_BY_RANGE_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                REMOVE_LIQUIDITY_BY_RANGE_IX_ACCOUNTS_LEN,
                "RemoveLiquidityByRange",
            )?;
            let ix_accounts = RemoveLiquidityByRangeKeys::from(
                &accounts[..REMOVE_LIQUIDITY_BY_RANGE_IX_ACCOUNTS_LEN],
            );
            let args = RemoveLiquidityByRangeIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::RemoveLiquidityByRange(ix_accounts, args))
        }
        REMOVE_LIQUIDITY_BY_RANGE_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                REMOVE_LIQUIDITY_BY_RANGE_2_IX_ACCOUNTS_LEN,
                "RemoveLiquidityByRange2",
            )?;
            let ix_accounts = RemoveLiquidityByRange2Keys::from(
                &accounts[..REMOVE_LIQUIDITY_BY_RANGE_2_IX_ACCOUNTS_LEN],
            );
            let args = RemoveLiquidityByRange2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::RemoveLiquidityByRange2(
                ix_accounts,
                args,
            ))
        }
        SET_ACTIVATION_POINT_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                SET_ACTIVATION_POINT_IX_ACCOUNTS_LEN,
                "SetActivationPoint",
            )?;
            let ix_accounts =
                SetActivationPointKeys::from(&accounts[..SET_ACTIVATION_POINT_IX_ACCOUNTS_LEN]);
            let args = SetActivationPointIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SetActivationPoint(ix_accounts, args))
        }
        SET_PAIR_STATUS_IX_DISCM => {
            check_min_accounts_req(accounts, SET_PAIR_STATUS_IX_ACCOUNTS_LEN, "SetPairStatus")?;
            let ix_accounts = SetPairStatusKeys::from(&accounts[..SET_PAIR_STATUS_IX_ACCOUNTS_LEN]);
            let args = SetPairStatusIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SetPairStatus(ix_accounts, args))
        }
        SET_PAIR_STATUS_PERMISSIONLESS_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                SET_PAIR_STATUS_PERMISSIONLESS_IX_ACCOUNTS_LEN,
                "SetPairStatusPermissionless",
            )?;
            let ix_accounts = SetPairStatusPermissionlessKeys::from(
                &accounts[..SET_PAIR_STATUS_PERMISSIONLESS_IX_ACCOUNTS_LEN],
            );
            let args = SetPairStatusPermissionlessIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SetPairStatusPermissionless(
                ix_accounts,
                args,
            ))
        }
        SET_PRE_ACTIVATION_DURATION_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                SET_PRE_ACTIVATION_DURATION_IX_ACCOUNTS_LEN,
                "SetPreActivationDuration",
            )?;
            let ix_accounts = SetPreActivationDurationKeys::from(
                &accounts[..SET_PRE_ACTIVATION_DURATION_IX_ACCOUNTS_LEN],
            );
            let args = SetPreActivationDurationIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SetPreActivationDuration(
                ix_accounts,
                args,
            ))
        }
        SET_PRE_ACTIVATION_SWAP_ADDRESS_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                SET_PRE_ACTIVATION_SWAP_ADDRESS_IX_ACCOUNTS_LEN,
                "SetPreActivationSwapAddress",
            )?;
            let ix_accounts = SetPreActivationSwapAddressKeys::from(
                &accounts[..SET_PRE_ACTIVATION_SWAP_ADDRESS_IX_ACCOUNTS_LEN],
            );
            let args = SetPreActivationSwapAddressIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SetPreActivationSwapAddress(
                ix_accounts,
                args,
            ))
        }
        SWAP_IX_DISCM => {
            check_min_accounts_req(accounts, SWAP_IX_ACCOUNTS_LEN, "Swap")?;
            let ix_accounts = SwapKeys::from(&accounts[..SWAP_IX_ACCOUNTS_LEN]);
            let args = SwapIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::Swap(ix_accounts, args))
        }
        SWAP_2_IX_DISCM => {
            check_min_accounts_req(accounts, SWAP_2_IX_ACCOUNTS_LEN, "Swap2")?;
            let ix_accounts = Swap2Keys::from(&accounts[..SWAP_2_IX_ACCOUNTS_LEN]);
            let args = Swap2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::Swap2(ix_accounts, args))
        }
        SWAP_EXACT_OUT_IX_DISCM => {
            check_min_accounts_req(accounts, SWAP_EXACT_OUT_IX_ACCOUNTS_LEN, "SwapExactOut")?;
            let ix_accounts = SwapExactOutKeys::from(&accounts[..SWAP_EXACT_OUT_IX_ACCOUNTS_LEN]);
            let args = SwapExactOutIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SwapExactOut(ix_accounts, args))
        }
        SWAP_EXACT_OUT_2_IX_DISCM => {
            check_min_accounts_req(accounts, SWAP_EXACT_OUT_2_IX_ACCOUNTS_LEN, "SwapExactOut2")?;
            let ix_accounts =
                SwapExactOut2Keys::from(&accounts[..SWAP_EXACT_OUT_2_IX_ACCOUNTS_LEN]);
            let args = SwapExactOut2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SwapExactOut2(ix_accounts, args))
        }
        SWAP_WITH_PRICE_IMPACT_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                SWAP_WITH_PRICE_IMPACT_IX_ACCOUNTS_LEN,
                "SwapWithPriceImpact",
            )?;
            let ix_accounts =
                SwapWithPriceImpactKeys::from(&accounts[..SWAP_WITH_PRICE_IMPACT_IX_ACCOUNTS_LEN]);
            let args = SwapWithPriceImpactIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SwapWithPriceImpact(ix_accounts, args))
        }
        SWAP_WITH_PRICE_IMPACT_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                SWAP_WITH_PRICE_IMPACT_2_IX_ACCOUNTS_LEN,
                "SwapWithPriceImpact2",
            )?;
            let ix_accounts = SwapWithPriceImpact2Keys::from(
                &accounts[..SWAP_WITH_PRICE_IMPACT_2_IX_ACCOUNTS_LEN],
            );
            let args = SwapWithPriceImpact2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::SwapWithPriceImpact2(ix_accounts, args))
        }
        UPDATE_BASE_FEE_PARAMETERS_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                UPDATE_BASE_FEE_PARAMETERS_IX_ACCOUNTS_LEN,
                "UpdateBaseFeeParameters",
            )?;
            let ix_accounts = UpdateBaseFeeParametersKeys::from(
                &accounts[..UPDATE_BASE_FEE_PARAMETERS_IX_ACCOUNTS_LEN],
            );
            let args = UpdateBaseFeeParametersIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::UpdateBaseFeeParameters(
                ix_accounts,
                args,
            ))
        }
        UPDATE_DYNAMIC_FEE_PARAMETERS_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                UPDATE_DYNAMIC_FEE_PARAMETERS_IX_ACCOUNTS_LEN,
                "UpdateDynamicFeeParameters",
            )?;
            let ix_accounts = UpdateDynamicFeeParametersKeys::from(
                &accounts[..UPDATE_DYNAMIC_FEE_PARAMETERS_IX_ACCOUNTS_LEN],
            );
            let args = UpdateDynamicFeeParametersIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::UpdateDynamicFeeParameters(
                ix_accounts,
                args,
            ))
        }
        UPDATE_FEES_AND_REWARD_2_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                UPDATE_FEES_AND_REWARD_2_IX_ACCOUNTS_LEN,
                "UpdateFeesAndReward2",
            )?;
            let ix_accounts = UpdateFeesAndReward2Keys::from(
                &accounts[..UPDATE_FEES_AND_REWARD_2_IX_ACCOUNTS_LEN],
            );
            let args = UpdateFeesAndReward2IxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::UpdateFeesAndReward2(ix_accounts, args))
        }
        UPDATE_FEES_AND_REWARDS_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                UPDATE_FEES_AND_REWARDS_IX_ACCOUNTS_LEN,
                "UpdateFeesAndRewards",
            )?;
            let ix_accounts = UpdateFeesAndRewardsKeys::from(
                &accounts[..UPDATE_FEES_AND_REWARDS_IX_ACCOUNTS_LEN],
            );
            let args = UpdateFeesAndRewardsIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::UpdateFeesAndRewards(ix_accounts, args))
        }
        UPDATE_POSITION_OPERATOR_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                UPDATE_POSITION_OPERATOR_IX_ACCOUNTS_LEN,
                "UpdatePositionOperator",
            )?;
            let ix_accounts = UpdatePositionOperatorKeys::from(
                &accounts[..UPDATE_POSITION_OPERATOR_IX_ACCOUNTS_LEN],
            );
            let args = UpdatePositionOperatorIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::UpdatePositionOperator(ix_accounts, args))
        }
        UPDATE_REWARD_DURATION_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                UPDATE_REWARD_DURATION_IX_ACCOUNTS_LEN,
                "UpdateRewardDuration",
            )?;
            let ix_accounts =
                UpdateRewardDurationKeys::from(&accounts[..UPDATE_REWARD_DURATION_IX_ACCOUNTS_LEN]);
            let args = UpdateRewardDurationIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::UpdateRewardDuration(ix_accounts, args))
        }
        UPDATE_REWARD_FUNDER_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                UPDATE_REWARD_FUNDER_IX_ACCOUNTS_LEN,
                "UpdateRewardFunder",
            )?;
            let ix_accounts =
                UpdateRewardFunderKeys::from(&accounts[..UPDATE_REWARD_FUNDER_IX_ACCOUNTS_LEN]);
            let args = UpdateRewardFunderIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::UpdateRewardFunder(ix_accounts, args))
        }
        WITHDRAW_INELIGIBLE_REWARD_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                WITHDRAW_INELIGIBLE_REWARD_IX_ACCOUNTS_LEN,
                "WithdrawIneligibleReward",
            )?;
            let ix_accounts = WithdrawIneligibleRewardKeys::from(
                &accounts[..WITHDRAW_INELIGIBLE_REWARD_IX_ACCOUNTS_LEN],
            );
            let args = WithdrawIneligibleRewardIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::WithdrawIneligibleReward(
                ix_accounts,
                args,
            ))
        }
        WITHDRAW_PROTOCOL_FEE_IX_DISCM => {
            check_min_accounts_req(
                accounts,
                WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN,
                "WithdrawProtocolFee",
            )?;
            let ix_accounts =
                WithdrawProtocolFeeKeys::from(&accounts[..WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN]);
            let args = WithdrawProtocolFeeIxData::from_bytes(&data[..])?;
            Ok(LbClmmInstruction::WithdrawProtocolFee(ix_accounts, args))
        }
        _ => Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            format!("Unknown instruction discriminator: {:?}", discriminator),
        )),
    }
}
