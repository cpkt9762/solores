//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!StaticParameters
///Parameter that set by the protocol
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Parameter that set by the protocol
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct StaticParameters {
    ///Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
    pub base_factor: u16,
    ///Filter period determine high frequency trading time window.
    pub filter_period: u16,
    ///Decay period determine when the volatile fee start decay / decrease.
    pub decay_period: u16,
    ///Reduction factor controls the volatile fee rate decrement rate.
    pub reduction_factor: u16,
    ///Used to scale the variable fee component depending on the dynamic of the market
    pub variable_fee_control: u32,
    ///Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
    pub max_volatility_accumulator: u32,
    ///Min bin id supported by the pool based on the configured bin step.
    pub min_bin_id: i32,
    ///Max bin id supported by the pool based on the configured bin step.
    pub max_bin_id: i32,
    ///Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
    pub protocol_share: u16,
    ///Base fee power factor
    pub base_fee_power_factor: u8,
    ///Padding for bytemuck safe alignment
    #[cfg_attr(feature = "serde", serde(rename = "_padding"))]
    pub padding: [u8; 5],
}
impl Default for StaticParameters {
    fn default() -> Self {
        Self {
            base_factor: Default::default(),
            filter_period: Default::default(),
            decay_period: Default::default(),
            reduction_factor: Default::default(),
            variable_fee_control: Default::default(),
            max_volatility_accumulator: Default::default(),
            min_bin_id: Default::default(),
            max_bin_id: Default::default(),
            protocol_share: Default::default(),
            base_fee_power_factor: Default::default(),
            padding: Default::default(),
        }
    }
}
impl StaticParameters {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
