//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!AddLiquidityParams
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityParams {
    pub min_delta_id: i32,
    pub max_delta_id: i32,
    #[cfg_attr(feature = "serde", serde(rename = "x0"))]
    pub x_0: u64,
    #[cfg_attr(feature = "serde", serde(rename = "y0"))]
    pub y_0: u64,
    pub delta_x: u64,
    pub delta_y: u64,
    pub bit_flag: u8,
    pub favor_x_in_active_id: bool,
    pub padding: [u8; 16],
}
impl Default for AddLiquidityParams {
    fn default() -> Self {
        Self {
            min_delta_id: Default::default(),
            max_delta_id: Default::default(),
            x_0: Default::default(),
            y_0: Default::default(),
            delta_x: Default::default(),
            delta_y: Default::default(),
            bit_flag: Default::default(),
            favor_x_in_active_id: Default::default(),
            padding: Default::default(),
        }
    }
}
impl AddLiquidityParams {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
