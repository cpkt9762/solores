//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!RewardInfo
///Stores the state relevant for tracking liquidity mining rewards
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Stores the state relevant for tracking liquidity mining rewards
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RewardInfo {
    ///Reward token mint.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub mint: Pubkey,
    ///Reward vault token account.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub vault: Pubkey,
    ///Authority account that allows to fund rewards
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub funder: Pubkey,
    ///TODO check whether we need to store it in pool
    pub reward_duration: u64,
    ///TODO check whether we need to store it in pool
    pub reward_duration_end: u64,
    ///TODO check whether we need to store it in pool
    pub reward_rate: u128,
    ///The last time reward states were updated.
    pub last_update_time: u64,
    ///Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window.
    pub cumulative_seconds_with_empty_liquidity_reward: u64,
}
impl Default for RewardInfo {
    fn default() -> Self {
        Self {
            mint: Default::default(),
            vault: Default::default(),
            funder: Default::default(),
            reward_duration: Default::default(),
            reward_duration_end: Default::default(),
            reward_rate: Default::default(),
            last_update_time: Default::default(),
            cumulative_seconds_with_empty_liquidity_reward: Default::default(),
        }
    }
}
impl RewardInfo {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
