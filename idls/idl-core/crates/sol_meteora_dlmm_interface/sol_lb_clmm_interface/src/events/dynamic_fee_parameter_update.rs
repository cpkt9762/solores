//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Event: DynamicFeeParameterUpdate
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const DYNAMIC_FEE_PARAMETER_UPDATE_EVENT_DISCM: [u8; 8] =
    [88u8, 88u8, 178u8, 135u8, 194u8, 146u8, 91u8, 243u8];
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DynamicFeeParameterUpdate {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub lb_pair: Pubkey,
    ///Filter period determine high frequency trading time window.
    pub filter_period: u16,
    ///Decay period determine when the volatile fee start decay / decrease.
    pub decay_period: u16,
    ///Reduction factor controls the volatile fee rate decrement rate.
    pub reduction_factor: u16,
    ///Used to scale the variable fee component depending on the dynamic of the market
    pub variable_fee_control: u32,
    ///Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
    pub max_volatility_accumulator: u32,
}
impl Default for DynamicFeeParameterUpdate {
    fn default() -> Self {
        Self {
            discriminator: DYNAMIC_FEE_PARAMETER_UPDATE_EVENT_DISCM,
            lb_pair: Default::default(),
            filter_period: Default::default(),
            decay_period: Default::default(),
            reduction_factor: Default::default(),
            variable_fee_control: Default::default(),
            max_volatility_accumulator: Default::default(),
        }
    }
}
impl DynamicFeeParameterUpdate {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
