//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#![doc = concat!("Anchor", " error definitions module")]
//!Generated error enums and conversion implementations
///Custom errors for the lb_clmm program
#[derive(Clone, Copy, Debug, Eq, thiserror::Error, num_derive::FromPrimitive, PartialEq)]
pub enum LbClmmError {
    ///6000 - Invalid start bin index
    #[error("Invalid start bin index")]
    InvalidStartBinIndex = 6000isize,
    ///6001 - Invalid bin id
    #[error("Invalid bin id")]
    InvalidBinId = 6001isize,
    ///6002 - Invalid input data
    #[error("Invalid input data")]
    InvalidInput = 6002isize,
    ///6003 - Exceeded amount slippage tolerance
    #[error("Exceeded amount slippage tolerance")]
    ExceededAmountSlippageTolerance = 6003isize,
    ///6004 - Exceeded bin slippage tolerance
    #[error("Exceeded bin slippage tolerance")]
    ExceededBinSlippageTolerance = 6004isize,
    ///6005 - Composition factor flawed
    #[error("Composition factor flawed")]
    CompositionFactorFlawed = 6005isize,
    ///6006 - Non preset bin step
    #[error("Non preset bin step")]
    NonPresetBinStep = 6006isize,
    ///6007 - Zero liquidity
    #[error("Zero liquidity")]
    ZeroLiquidity = 6007isize,
    ///6008 - Invalid position
    #[error("Invalid position")]
    InvalidPosition = 6008isize,
    ///6009 - Bin array not found
    #[error("Bin array not found")]
    BinArrayNotFound = 6009isize,
    ///6010 - Invalid token mint
    #[error("Invalid token mint")]
    InvalidTokenMint = 6010isize,
    ///6011 - Invalid account for single deposit
    #[error("Invalid account for single deposit")]
    InvalidAccountForSingleDeposit = 6011isize,
    ///6012 - Pair insufficient liquidity
    #[error("Pair insufficient liquidity")]
    PairInsufficientLiquidity = 6012isize,
    ///6013 - Invalid fee owner
    #[error("Invalid fee owner")]
    InvalidFeeOwner = 6013isize,
    ///6014 - Invalid fee withdraw amount
    #[error("Invalid fee withdraw amount")]
    InvalidFeeWithdrawAmount = 6014isize,
    ///6015 - Invalid admin
    #[error("Invalid admin")]
    InvalidAdmin = 6015isize,
    ///6016 - Identical fee owner
    #[error("Identical fee owner")]
    IdenticalFeeOwner = 6016isize,
    ///6017 - Invalid basis point
    #[error("Invalid basis point")]
    InvalidBps = 6017isize,
    ///6018 - Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow = 6018isize,
    ///6019 - Type cast error
    #[error("Type cast error")]
    TypeCastFailed = 6019isize,
    ///6020 - Invalid reward index
    #[error("Invalid reward index")]
    InvalidRewardIndex = 6020isize,
    ///6021 - Invalid reward duration
    #[error("Invalid reward duration")]
    InvalidRewardDuration = 6021isize,
    ///6022 - Reward already initialized
    #[error("Reward already initialized")]
    RewardInitialized = 6022isize,
    ///6023 - Reward not initialized
    #[error("Reward not initialized")]
    RewardUninitialized = 6023isize,
    ///6024 - Identical funder
    #[error("Identical funder")]
    IdenticalFunder = 6024isize,
    ///6025 - Reward campaign in progress
    #[error("Reward campaign in progress")]
    RewardCampaignInProgress = 6025isize,
    ///6026 - Reward duration is the same
    #[error("Reward duration is the same")]
    IdenticalRewardDuration = 6026isize,
    ///6027 - Invalid bin array
    #[error("Invalid bin array")]
    InvalidBinArray = 6027isize,
    ///6028 - Bin arrays must be continuous
    #[error("Bin arrays must be continuous")]
    NonContinuousBinArrays = 6028isize,
    ///6029 - Invalid reward vault
    #[error("Invalid reward vault")]
    InvalidRewardVault = 6029isize,
    ///6030 - Position is not empty
    #[error("Position is not empty")]
    NonEmptyPosition = 6030isize,
    ///6031 - Unauthorized access
    #[error("Unauthorized access")]
    UnauthorizedAccess = 6031isize,
    ///6032 - Invalid fee parameter
    #[error("Invalid fee parameter")]
    InvalidFeeParameter = 6032isize,
    ///6033 - Missing oracle account
    #[error("Missing oracle account")]
    MissingOracle = 6033isize,
    ///6034 - Insufficient observation sample
    #[error("Insufficient observation sample")]
    InsufficientSample = 6034isize,
    ///6035 - Invalid lookup timestamp
    #[error("Invalid lookup timestamp")]
    InvalidLookupTimestamp = 6035isize,
    ///6036 - Bitmap extension account is not provided
    #[error("Bitmap extension account is not provided")]
    BitmapExtensionAccountIsNotProvided = 6036isize,
    ///6037 - Cannot find non-zero liquidity binArrayId
    #[error("Cannot find non-zero liquidity binArrayId")]
    CannotFindNonZeroLiquidityBinArrayId = 6037isize,
    ///6038 - Bin id out of bound
    #[error("Bin id out of bound")]
    BinIdOutOfBound = 6038isize,
    ///6039 - Insufficient amount in for minimum out
    #[error("Insufficient amount in for minimum out")]
    InsufficientOutAmount = 6039isize,
    ///6040 - Invalid position width
    #[error("Invalid position width")]
    InvalidPositionWidth = 6040isize,
    ///6041 - Excessive fee update
    #[error("Excessive fee update")]
    ExcessiveFeeUpdate = 6041isize,
    ///6042 - Pool disabled
    #[error("Pool disabled")]
    PoolDisabled = 6042isize,
    ///6043 - Invalid pool type
    #[error("Invalid pool type")]
    InvalidPoolType = 6043isize,
    ///6044 - Whitelist for wallet is full
    #[error("Whitelist for wallet is full")]
    ExceedMaxWhitelist = 6044isize,
    ///6045 - Invalid index
    #[error("Invalid index")]
    InvalidIndex = 6045isize,
    ///6046 - Reward not ended
    #[error("Reward not ended")]
    RewardNotEnded = 6046isize,
    ///6047 - Must withdraw ineligible reward
    #[error("Must withdraw ineligible reward")]
    MustWithdrawnIneligibleReward = 6047isize,
    ///6048 - Unauthorized address
    #[error("Unauthorized address")]
    UnauthorizedAddress = 6048isize,
    ///6049 - Cannot update because operators are the same
    #[error("Cannot update because operators are the same")]
    OperatorsAreTheSame = 6049isize,
    ///6050 - Withdraw to wrong token account
    #[error("Withdraw to wrong token account")]
    WithdrawToWrongTokenAccount = 6050isize,
    ///6051 - Wrong rent receiver
    #[error("Wrong rent receiver")]
    WrongRentReceiver = 6051isize,
    ///6052 - Already activated
    #[error("Already activated")]
    AlreadyPassActivationPoint = 6052isize,
    ///6053 - Swapped amount is exceeded max swapped amount
    #[error("Swapped amount is exceeded max swapped amount")]
    ExceedMaxSwappedAmount = 6053isize,
    ///6054 - Invalid strategy parameters
    #[error("Invalid strategy parameters")]
    InvalidStrategyParameters = 6054isize,
    ///6055 - Liquidity locked
    #[error("Liquidity locked")]
    LiquidityLocked = 6055isize,
    ///6056 - Bin range is not empty
    #[error("Bin range is not empty")]
    BinRangeIsNotEmpty = 6056isize,
    ///6057 - Amount out is not matched with exact amount out
    #[error("Amount out is not matched with exact amount out")]
    NotExactAmountOut = 6057isize,
    ///6058 - Invalid activation type
    #[error("Invalid activation type")]
    InvalidActivationType = 6058isize,
    ///6059 - Invalid activation duration
    #[error("Invalid activation duration")]
    InvalidActivationDuration = 6059isize,
    ///6060 - Missing token amount as token launch owner proof
    #[error("Missing token amount as token launch owner proof")]
    MissingTokenAmountAsTokenLaunchProof = 6060isize,
    ///6061 - Quote token must be SOL or USDC
    #[error("Quote token must be SOL or USDC")]
    InvalidQuoteToken = 6061isize,
    ///6062 - Invalid bin step
    #[error("Invalid bin step")]
    InvalidBinStep = 6062isize,
    ///6063 - Invalid base fee
    #[error("Invalid base fee")]
    InvalidBaseFee = 6063isize,
    ///6064 - Invalid pre-activation duration
    #[error("Invalid pre-activation duration")]
    InvalidPreActivationDuration = 6064isize,
    ///6065 - Already pass pre-activation swap point
    #[error("Already pass pre-activation swap point")]
    AlreadyPassPreActivationSwapPoint = 6065isize,
    ///6066 - Invalid status
    #[error("Invalid status")]
    InvalidStatus = 6066isize,
    ///6067 - Exceed max oracle length
    #[error("Exceed max oracle length")]
    ExceededMaxOracleLength = 6067isize,
    ///6068 - Invalid minimum liquidity
    #[error("Invalid minimum liquidity")]
    InvalidMinimumLiquidity = 6068isize,
    ///6069 - Not support token_2022 mint extension
    #[error("Not support token_2022 mint extension")]
    NotSupportMint = 6069isize,
    ///6070 - Unsupported mint extension
    #[error("Unsupported mint extension")]
    UnsupportedMintExtension = 6070isize,
    ///6071 - Unsupported native mint token2022
    #[error("Unsupported native mint token2022")]
    UnsupportNativeMintToken2022 = 6071isize,
    ///6072 - Unmatch token mint
    #[error("Unmatch token mint")]
    UnmatchTokenMint = 6072isize,
    ///6073 - Unsupported token mint
    #[error("Unsupported token mint")]
    UnsupportedTokenMint = 6073isize,
    ///6074 - Insufficient remaining accounts
    #[error("Insufficient remaining accounts")]
    InsufficientRemainingAccounts = 6074isize,
    ///6075 - Invalid remaining account slice
    #[error("Invalid remaining account slice")]
    InvalidRemainingAccountSlice = 6075isize,
    ///6076 - Duplicated remaining account types
    #[error("Duplicated remaining account types")]
    DuplicatedRemainingAccountTypes = 6076isize,
    ///6077 - Missing remaining account for transfer hook
    #[error("Missing remaining account for transfer hook")]
    MissingRemainingAccountForTransferHook = 6077isize,
    ///6078 - Remaining account was passed for transfer hook but there's no hook program
    #[error("Remaining account was passed for transfer hook but there's no hook program")]
    NoTransferHookProgram = 6078isize,
    ///6079 - Zero funded amount
    #[error("Zero funded amount")]
    ZeroFundedAmount = 6079isize,
    ///6080 - Invalid side
    #[error("Invalid side")]
    InvalidSide = 6080isize,
    ///6081 - Invalid resize length
    #[error("Invalid resize length")]
    InvalidResizeLength = 6081isize,
    ///6082 - Not support at the moment
    #[error("Not support at the moment")]
    NotSupportAtTheMoment = 6082isize,
    ///6083 - Invalid rebalance parameters
    #[error("Invalid rebalance parameters")]
    InvalidRebalanceParameters = 6083isize,
    ///6084 - Invalid reward accounts
    #[error("Invalid reward accounts")]
    InvalidRewardAccounts = 6084isize,
    ///6085 - Undetermined error
    #[error("Undetermined error")]
    UndeterminedError = 6085isize,
}
impl From<LbClmmError> for solana_program_error::ProgramError {
    fn from(e: LbClmmError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
