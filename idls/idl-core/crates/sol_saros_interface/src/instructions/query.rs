//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: query (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const QUERY_IX_DISCM: u8 = 2u8;
pub const QUERY_IX_ACCOUNTS_LEN: usize = 1;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct QueryIxData {
    pub discriminator: u8,
    pub scope: crate::types::Scope,
}
impl Default for QueryIxData {
    fn default() -> Self {
        Self {
            discriminator: QUERY_IX_DISCM,
            scope: Default::default(),
        }
    }
}
impl QueryIxData {
    pub fn new(scope: crate::types::Scope) -> Self {
        Self {
            discriminator: Self::discriminator(),
            scope,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        QUERY_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!(
                    "\"{}\":{}",
                    "scope",
                    serde_json::to_string(&self.scope).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct QueryKeys {
    pub feed: Pubkey,
}
impl Default for QueryKeys {
    fn default() -> Self {
        Self {
            feed: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for QueryKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self { feed: pubkeys[0] }
    }
}
impl QueryKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.feed]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!(
                "\"{}\":{}",
                "feed",
                serde_json::to_string(&self.feed).unwrap_or_else(|_| "\"null\"".to_string())
            )]
            .join(",")
        )
    }
}
impl From<QueryKeys> for [solana_instruction::AccountMeta; QUERY_IX_ACCOUNTS_LEN] {
    fn from(keys: QueryKeys) -> Self {
        [solana_instruction::AccountMeta::new(keys.feed, false)]
    }
}
pub fn query_ix_with_program_id(
    program_id: Pubkey,
    keys: QueryKeys,
    args: QueryIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; QUERY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn query_ix(
    keys: QueryKeys,
    args: QueryIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    query_ix_with_program_id(crate::ID, keys, args)
}
