//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: createFeed (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_FEED_IX_DISCM: u8 = 0u8;
pub const CREATE_FEED_IX_ACCOUNTS_LEN: usize = 3;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateFeedIxData {
    pub discriminator: u8,
    #[cfg_attr(feature = "serde", serde(rename = "derivationPath"))]
    pub derivation_path: Vec<u8>,
    #[cfg_attr(feature = "serde", serde(rename = "liveLength"))]
    pub live_length: u8,
    #[cfg_attr(feature = "serde", serde(rename = "historyLength"))]
    pub history_length: u8,
    pub description: String,
    pub decimals: u8,
    pub granularity: u8,
}
impl Default for CreateFeedIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_FEED_IX_DISCM,
            derivation_path: Default::default(),
            live_length: Default::default(),
            history_length: Default::default(),
            description: Default::default(),
            decimals: Default::default(),
            granularity: Default::default(),
        }
    }
}
impl CreateFeedIxData {
    pub fn new(
        derivation_path: Vec<u8>,
        live_length: u8,
        history_length: u8,
        description: String,
        decimals: u8,
        granularity: u8,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            derivation_path,
            live_length,
            history_length,
            description,
            decimals,
            granularity,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        CREATE_FEED_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "derivationPath", self.derivation_path),
                format!("\"{}\":{}", "liveLength", self.live_length),
                format!("\"{}\":{}", "historyLength", self.history_length),
                format!("\"{}\":{}", "description", self.description),
                format!("\"{}\":{}", "decimals", self.decimals),
                format!("\"{}\":{}", "granularity", self.granularity)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateFeedKeys {
    pub authority: Pubkey,
    pub feed: Pubkey,
    pub system_program: Pubkey,
}
impl Default for CreateFeedKeys {
    fn default() -> Self {
        Self {
            authority: Pubkey::default(),
            feed: Pubkey::default(),
            system_program: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for CreateFeedKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            authority: pubkeys[0],
            feed: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl CreateFeedKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.authority, self.feed, self.system_program]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "authority",
                    serde_json::to_string(&self.authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "feed",
                    serde_json::to_string(&self.feed).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "systemProgram",
                    serde_json::to_string(&self.system_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<CreateFeedKeys> for [solana_instruction::AccountMeta; CREATE_FEED_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateFeedKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.feed, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn create_feed_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateFeedKeys,
    args: CreateFeedIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_FEED_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn create_feed_ix(
    keys: CreateFeedKeys,
    args: CreateFeedIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_feed_ix_with_program_id(crate::ID, keys, args)
}
