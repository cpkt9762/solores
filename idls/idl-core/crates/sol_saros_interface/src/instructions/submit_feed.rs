//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: submitFeed (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SUBMIT_FEED_IX_DISCM: u8 = 1u8;
pub const SUBMIT_FEED_IX_ACCOUNTS_LEN: usize = 2;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SubmitFeedIxData {
    pub discriminator: u8,
    pub timestamp: i64,
    pub answer: i128,
}
impl Default for SubmitFeedIxData {
    fn default() -> Self {
        Self {
            discriminator: SUBMIT_FEED_IX_DISCM,
            timestamp: Default::default(),
            answer: Default::default(),
        }
    }
}
impl SubmitFeedIxData {
    pub fn new(timestamp: i64, answer: i128) -> Self {
        Self {
            discriminator: Self::discriminator(),
            timestamp,
            answer,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        SUBMIT_FEED_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "timestamp", self.timestamp),
                format!("\"{}\":{}", "answer", self.answer)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SubmitFeedKeys {
    pub authority: Pubkey,
    pub feed: Pubkey,
}
impl Default for SubmitFeedKeys {
    fn default() -> Self {
        Self {
            authority: Pubkey::default(),
            feed: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for SubmitFeedKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            authority: pubkeys[0],
            feed: pubkeys[1],
        }
    }
}
impl SubmitFeedKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.authority, self.feed]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "authority",
                    serde_json::to_string(&self.authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "feed",
                    serde_json::to_string(&self.feed).unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<SubmitFeedKeys> for [solana_instruction::AccountMeta; SUBMIT_FEED_IX_ACCOUNTS_LEN] {
    fn from(keys: SubmitFeedKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.feed, false),
        ]
    }
}
pub fn submit_feed_ix_with_program_id(
    program_id: Pubkey,
    keys: SubmitFeedKeys,
    args: SubmitFeedIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SUBMIT_FEED_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn submit_feed_ix(
    keys: SubmitFeedKeys,
    args: SubmitFeedIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    submit_feed_ix_with_program_id(crate::ID, keys, args)
}
