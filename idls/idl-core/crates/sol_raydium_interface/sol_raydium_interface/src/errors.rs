//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#![doc = concat!("Non-Anchor", " error definitions module")]
//!Generated error enums and conversion implementations
///Custom errors for the raydium program
#[derive(Clone, Copy, Debug, Eq, thiserror::Error, num_derive::FromPrimitive, PartialEq)]
pub enum RaydiumError {
    ///0 - AlreadyInUse
    #[error("AlreadyInUse")]
    AlreadyInUse = 0isize,
    ///1 - InvalidProgramAddress
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress = 1isize,
    ///2 - ExpectedMint
    #[error("ExpectedMint")]
    ExpectedMint = 2isize,
    ///3 - ExpectedAccount
    #[error("ExpectedAccount")]
    ExpectedAccount = 3isize,
    ///4 - InvalidCoinVault
    #[error("InvalidCoinVault")]
    InvalidCoinVault = 4isize,
    ///5 - InvalidPCVault
    #[error("InvalidPCVault")]
    InvalidPcVault = 5isize,
    ///6 - InvalidTokenLP
    #[error("InvalidTokenLP")]
    InvalidTokenLp = 6isize,
    ///7 - InvalidDestTokenCoin
    #[error("InvalidDestTokenCoin")]
    InvalidDestTokenCoin = 7isize,
    ///8 - InvalidDestTokenPC
    #[error("InvalidDestTokenPC")]
    InvalidDestTokenPc = 8isize,
    ///9 - InvalidPoolMint
    #[error("InvalidPoolMint")]
    InvalidPoolMint = 9isize,
    ///10 - InvalidOpenOrders
    #[error("InvalidOpenOrders")]
    InvalidOpenOrders = 10isize,
    ///11 - InvalidSerumMarket
    #[error("InvalidSerumMarket")]
    InvalidSerumMarket = 11isize,
    ///12 - InvalidSerumProgram
    #[error("InvalidSerumProgram")]
    InvalidSerumProgram = 12isize,
    ///13 - InvalidTargetOrders
    #[error("InvalidTargetOrders")]
    InvalidTargetOrders = 13isize,
    ///14 - InvalidWithdrawQueue
    #[error("InvalidWithdrawQueue")]
    InvalidWithdrawQueue = 14isize,
    ///15 - InvalidTempLp
    #[error("InvalidTempLp")]
    InvalidTempLp = 15isize,
    ///16 - InvalidCoinMint
    #[error("InvalidCoinMint")]
    InvalidCoinMint = 16isize,
    ///17 - InvalidPCMint
    #[error("InvalidPCMint")]
    InvalidPcMint = 17isize,
    ///18 - InvalidOwner
    #[error("InvalidOwner")]
    InvalidOwner = 18isize,
    ///19 - InvalidSupply
    #[error("InvalidSupply")]
    InvalidSupply = 19isize,
    ///20 - InvalidDelegate
    #[error("InvalidDelegate")]
    InvalidDelegate = 20isize,
    ///21 - Invalid Sign Account
    #[error("Invalid Sign Account")]
    InvalidSignAccount = 21isize,
    ///22 - InvalidStatus
    #[error("InvalidStatus")]
    InvalidStatus = 22isize,
    ///23 - Invalid instruction
    #[error("Invalid instruction")]
    InvalidInstruction = 23isize,
    ///24 - Wrong accounts number
    #[error("Wrong accounts number")]
    WrongAccountsNumber = 24isize,
    ///25 - Withdraw_transfer is busy
    #[error("Withdraw_transfer is busy")]
    WithdrawTransferBusy = 25isize,
    ///26 - WithdrawQueue is full
    #[error("WithdrawQueue is full")]
    WithdrawQueueFull = 26isize,
    ///27 - WithdrawQueue is empty
    #[error("WithdrawQueue is empty")]
    WithdrawQueueEmpty = 27isize,
    ///28 - Params Set is invalid
    #[error("Params Set is invalid")]
    InvalidParamsSet = 28isize,
    ///29 - InvalidInput
    #[error("InvalidInput")]
    InvalidInput = 29isize,
    ///30 - instruction exceeds desired slippage limit
    #[error("instruction exceeds desired slippage limit")]
    ExceededSlippage = 30isize,
    ///31 - CalculationExRateFailure
    #[error("CalculationExRateFailure")]
    CalculationExRateFailure = 31isize,
    ///32 - Checked_Sub Overflow
    #[error("Checked_Sub Overflow")]
    CheckedSubOverflow = 32isize,
    ///33 - Checked_Add Overflow
    #[error("Checked_Add Overflow")]
    CheckedAddOverflow = 33isize,
    ///34 - Checked_Mul Overflow
    #[error("Checked_Mul Overflow")]
    CheckedMulOverflow = 34isize,
    ///35 - Checked_Div Overflow
    #[error("Checked_Div Overflow")]
    CheckedDivOverflow = 35isize,
    ///36 - Empty Funds
    #[error("Empty Funds")]
    CheckedEmptyFunds = 36isize,
    ///37 - Calc pnl error
    #[error("Calc pnl error")]
    CalcPnlError = 37isize,
    ///38 - InvalidSplTokenProgram
    #[error("InvalidSplTokenProgram")]
    InvalidSplTokenProgram = 38isize,
    ///39 - Take Pnl error
    #[error("Take Pnl error")]
    TakePnlError = 39isize,
    ///40 - Insufficient funds
    #[error("Insufficient funds")]
    InsufficientFunds = 40isize,
    ///41 - Conversion to u64 failed with an overflow or underflow
    #[error("Conversion to u64 failed with an overflow or underflow")]
    ConversionFailure = 41isize,
    ///42 - user token input does not match amm
    #[error("user token input does not match amm")]
    InvalidUserToken = 42isize,
    ///43 - InvalidSrmMint
    #[error("InvalidSrmMint")]
    InvalidSrmMint = 43isize,
    ///44 - InvalidSrmToken
    #[error("InvalidSrmToken")]
    InvalidSrmToken = 44isize,
    ///45 - TooManyOpenOrders
    #[error("TooManyOpenOrders")]
    TooManyOpenOrders = 45isize,
    ///46 - OrderAtSlotIsPlaced
    #[error("OrderAtSlotIsPlaced")]
    OrderAtSlotIsPlaced = 46isize,
    ///47 - InvalidSysProgramAddress
    #[error("InvalidSysProgramAddress")]
    InvalidSysProgramAddress = 47isize,
    ///48 - The provided fee does not match the program owner's constraints
    #[error("The provided fee does not match the program owner's constraints")]
    InvalidFee = 48isize,
    ///49 - Repeat create amm about market
    #[error("Repeat create amm about market")]
    RepeatCreateAmm = 49isize,
    ///50 - Not allow Zero LP
    #[error("Not allow Zero LP")]
    NotAllowZeroLp = 50isize,
    ///51 - Token account has a close authority
    #[error("Token account has a close authority")]
    InvalidCloseAuthority = 51isize,
    ///52 - Pool token mint has a freeze authority
    #[error("Pool token mint has a freeze authority")]
    InvalidFreezeAuthority = 52isize,
    ///53 - InvalidReferPCMint
    #[error("InvalidReferPCMint")]
    InvalidReferPcMint = 53isize,
    ///54 - InvalidConfigAccount
    #[error("InvalidConfigAccount")]
    InvalidConfigAccount = 54isize,
    ///55 - Repeat create staking config account
    #[error("Repeat create staking config account")]
    RepeatCreateConfigAccount = 55isize,
    ///56 - Unknown Amm Error
    #[error("Unknown Amm Error")]
    UnknownAmmError = 56isize,
}
impl From<RaydiumError> for solana_program_error::ProgramError {
    fn from(e: RaydiumError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
