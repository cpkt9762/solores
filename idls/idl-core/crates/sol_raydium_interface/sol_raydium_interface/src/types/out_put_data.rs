//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Type: OutPutData (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const OUT_PUT_DATA_TYPE_DISCM: u8 = 4u8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OutPutData {
    #[cfg_attr(feature = "serde", serde(rename = "needTakePnlCoin"))]
    pub need_take_pnl_coin: u64,
    #[cfg_attr(feature = "serde", serde(rename = "needTakePnlPc"))]
    pub need_take_pnl_pc: u64,
    #[cfg_attr(feature = "serde", serde(rename = "totalPnlPc"))]
    pub total_pnl_pc: u64,
    #[cfg_attr(feature = "serde", serde(rename = "totalPnlCoin"))]
    pub total_pnl_coin: u64,
    #[cfg_attr(feature = "serde", serde(rename = "poolOpenTime"))]
    pub pool_open_time: u64,
    #[cfg_attr(feature = "serde", serde(rename = "punishPcAmount"))]
    pub punish_pc_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "punishCoinAmount"))]
    pub punish_coin_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "orderbookToInitTime"))]
    pub orderbook_to_init_time: u64,
    #[cfg_attr(feature = "serde", serde(rename = "swapCoinInAmount"))]
    pub swap_coin_in_amount: u128,
    #[cfg_attr(feature = "serde", serde(rename = "swapPcOutAmount"))]
    pub swap_pc_out_amount: u128,
    #[cfg_attr(feature = "serde", serde(rename = "swapTakePcFee"))]
    pub swap_take_pc_fee: u64,
    #[cfg_attr(feature = "serde", serde(rename = "swapPcInAmount"))]
    pub swap_pc_in_amount: u128,
    #[cfg_attr(feature = "serde", serde(rename = "swapCoinOutAmount"))]
    pub swap_coin_out_amount: u128,
    #[cfg_attr(feature = "serde", serde(rename = "swapTakeCoinFee"))]
    pub swap_take_coin_fee: u64,
}
impl Default for OutPutData {
    fn default() -> Self {
        Self {
            need_take_pnl_coin: Default::default(),
            need_take_pnl_pc: Default::default(),
            total_pnl_pc: Default::default(),
            total_pnl_coin: Default::default(),
            pool_open_time: Default::default(),
            punish_pc_amount: Default::default(),
            punish_coin_amount: Default::default(),
            orderbook_to_init_time: Default::default(),
            swap_coin_in_amount: Default::default(),
            swap_pc_out_amount: Default::default(),
            swap_take_pc_fee: Default::default(),
            swap_pc_in_amount: Default::default(),
            swap_coin_out_amount: Default::default(),
            swap_take_coin_fee: Default::default(),
        }
    }
}
impl OutPutData {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
