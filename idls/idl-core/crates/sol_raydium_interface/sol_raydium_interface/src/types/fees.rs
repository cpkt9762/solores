//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Type: Fees (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const FEES_TYPE_DISCM: u8 = 0u8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Fees {
    #[cfg_attr(feature = "serde", serde(rename = "minSeparateNumerator"))]
    pub min_separate_numerator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "minSeparateDenominator"))]
    pub min_separate_denominator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tradeFeeNumerator"))]
    pub trade_fee_numerator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tradeFeeDenominator"))]
    pub trade_fee_denominator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "pnlNumerator"))]
    pub pnl_numerator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "pnlDenominator"))]
    pub pnl_denominator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "swapFeeNumerator"))]
    pub swap_fee_numerator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "swapFeeDenominator"))]
    pub swap_fee_denominator: u64,
}
impl Default for Fees {
    fn default() -> Self {
        Self {
            min_separate_numerator: Default::default(),
            min_separate_denominator: Default::default(),
            trade_fee_numerator: Default::default(),
            trade_fee_denominator: Default::default(),
            pnl_numerator: Default::default(),
            pnl_denominator: Default::default(),
            swap_fee_numerator: Default::default(),
            swap_fee_denominator: Default::default(),
        }
    }
}
impl Fees {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
