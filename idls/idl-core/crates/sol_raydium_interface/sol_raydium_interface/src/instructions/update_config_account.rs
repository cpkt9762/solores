//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: updateConfigAccount (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const UPDATE_CONFIG_ACCOUNT_IX_DISCM: u8 = 15u8;
pub const UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN: usize = 2;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigAccountIxData {
    pub discriminator: u8,
    pub param: u8,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub owner: Pubkey,
}
impl Default for UpdateConfigAccountIxData {
    fn default() -> Self {
        Self {
            discriminator: UPDATE_CONFIG_ACCOUNT_IX_DISCM,
            param: Default::default(),
            owner: Default::default(),
        }
    }
}
impl UpdateConfigAccountIxData {
    pub fn new(param: u8, owner: Pubkey) -> Self {
        Self {
            discriminator: Self::discriminator(),
            param,
            owner,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        UPDATE_CONFIG_ACCOUNT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "param", self.param),
                format!("\"{}\":{}", "owner", self.owner)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct UpdateConfigAccountKeys {
    pub admin: Pubkey,
    pub amm_config: Pubkey,
}
impl Default for UpdateConfigAccountKeys {
    fn default() -> Self {
        Self {
            admin: Pubkey::default(),
            amm_config: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for UpdateConfigAccountKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            admin: pubkeys[0],
            amm_config: pubkeys[1],
        }
    }
}
impl UpdateConfigAccountKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![self.admin, self.amm_config]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "admin",
                    serde_json::to_string(&self.admin).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammConfig",
                    serde_json::to_string(&self.amm_config)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<UpdateConfigAccountKeys>
    for [solana_instruction::AccountMeta; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN]
{
    fn from(keys: UpdateConfigAccountKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.admin, false),
            solana_instruction::AccountMeta::new(keys.amm_config, false),
        ]
    }
}
pub fn update_config_account_ix_with_program_id(
    program_id: Pubkey,
    keys: UpdateConfigAccountKeys,
    args: UpdateConfigAccountIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn update_config_account_ix(
    keys: UpdateConfigAccountKeys,
    args: UpdateConfigAccountIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    update_config_account_ix_with_program_id(crate::ID, keys, args)
}
