//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: migrateToOpenBook (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MIGRATE_TO_OPEN_BOOK_IX_DISCM: u8 = 5u8;
pub const MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN: usize = 21;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateToOpenBookIxData {
    pub discriminator: u8,
}
impl Default for MigrateToOpenBookIxData {
    fn default() -> Self {
        Self {
            discriminator: MIGRATE_TO_OPEN_BOOK_IX_DISCM,
        }
    }
}
impl MigrateToOpenBookIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        MIGRATE_TO_OPEN_BOOK_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!("\"discriminator\":{}", self.discriminator)].join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateToOpenBookKeys {
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub amm: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub amm_token_coin: Pubkey,
    pub amm_token_pc: Pubkey,
    pub amm_target_orders: Pubkey,
    pub serum_program: Pubkey,
    pub serum_market: Pubkey,
    pub serum_bids: Pubkey,
    pub serum_asks: Pubkey,
    pub serum_event_queue: Pubkey,
    pub serum_coin_vault: Pubkey,
    pub serum_pc_vault: Pubkey,
    pub serum_vault_signer: Pubkey,
    pub new_amm_open_orders: Pubkey,
    pub new_serum_program: Pubkey,
    pub new_serum_market: Pubkey,
    pub admin: Pubkey,
}
impl Default for MigrateToOpenBookKeys {
    fn default() -> Self {
        Self {
            token_program: Pubkey::default(),
            system_program: Pubkey::default(),
            rent: Pubkey::default(),
            amm: Pubkey::default(),
            amm_authority: Pubkey::default(),
            amm_open_orders: Pubkey::default(),
            amm_token_coin: Pubkey::default(),
            amm_token_pc: Pubkey::default(),
            amm_target_orders: Pubkey::default(),
            serum_program: Pubkey::default(),
            serum_market: Pubkey::default(),
            serum_bids: Pubkey::default(),
            serum_asks: Pubkey::default(),
            serum_event_queue: Pubkey::default(),
            serum_coin_vault: Pubkey::default(),
            serum_pc_vault: Pubkey::default(),
            serum_vault_signer: Pubkey::default(),
            new_amm_open_orders: Pubkey::default(),
            new_serum_program: Pubkey::default(),
            new_serum_market: Pubkey::default(),
            admin: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for MigrateToOpenBookKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            token_program: pubkeys[0],
            system_program: pubkeys[1],
            rent: pubkeys[2],
            amm: pubkeys[3],
            amm_authority: pubkeys[4],
            amm_open_orders: pubkeys[5],
            amm_token_coin: pubkeys[6],
            amm_token_pc: pubkeys[7],
            amm_target_orders: pubkeys[8],
            serum_program: pubkeys[9],
            serum_market: pubkeys[10],
            serum_bids: pubkeys[11],
            serum_asks: pubkeys[12],
            serum_event_queue: pubkeys[13],
            serum_coin_vault: pubkeys[14],
            serum_pc_vault: pubkeys[15],
            serum_vault_signer: pubkeys[16],
            new_amm_open_orders: pubkeys[17],
            new_serum_program: pubkeys[18],
            new_serum_market: pubkeys[19],
            admin: pubkeys[20],
        }
    }
}
impl MigrateToOpenBookKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.token_program,
            self.system_program,
            self.rent,
            self.amm,
            self.amm_authority,
            self.amm_open_orders,
            self.amm_token_coin,
            self.amm_token_pc,
            self.amm_target_orders,
            self.serum_program,
            self.serum_market,
            self.serum_bids,
            self.serum_asks,
            self.serum_event_queue,
            self.serum_coin_vault,
            self.serum_pc_vault,
            self.serum_vault_signer,
            self.new_amm_open_orders,
            self.new_serum_program,
            self.new_serum_market,
            self.admin,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "tokenProgram",
                    serde_json::to_string(&self.token_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "systemProgram",
                    serde_json::to_string(&self.system_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "rent",
                    serde_json::to_string(&self.rent).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "amm",
                    serde_json::to_string(&self.amm).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammAuthority",
                    serde_json::to_string(&self.amm_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammOpenOrders",
                    serde_json::to_string(&self.amm_open_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammTokenCoin",
                    serde_json::to_string(&self.amm_token_coin)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammTokenPc",
                    serde_json::to_string(&self.amm_token_pc)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammTargetOrders",
                    serde_json::to_string(&self.amm_target_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumProgram",
                    serde_json::to_string(&self.serum_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumMarket",
                    serde_json::to_string(&self.serum_market)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumBids",
                    serde_json::to_string(&self.serum_bids)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumAsks",
                    serde_json::to_string(&self.serum_asks)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumEventQueue",
                    serde_json::to_string(&self.serum_event_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumCoinVault",
                    serde_json::to_string(&self.serum_coin_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumPcVault",
                    serde_json::to_string(&self.serum_pc_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumVaultSigner",
                    serde_json::to_string(&self.serum_vault_signer)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "newAmmOpenOrders",
                    serde_json::to_string(&self.new_amm_open_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "newSerumProgram",
                    serde_json::to_string(&self.new_serum_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "newSerumMarket",
                    serde_json::to_string(&self.new_serum_market)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "admin",
                    serde_json::to_string(&self.admin).unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<MigrateToOpenBookKeys>
    for [solana_instruction::AccountMeta; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigrateToOpenBookKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.amm, false),
            solana_instruction::AccountMeta::new(keys.amm_authority, false),
            solana_instruction::AccountMeta::new(keys.amm_open_orders, false),
            solana_instruction::AccountMeta::new(keys.amm_token_coin, false),
            solana_instruction::AccountMeta::new(keys.amm_token_pc, false),
            solana_instruction::AccountMeta::new(keys.amm_target_orders, false),
            solana_instruction::AccountMeta::new(keys.serum_program, false),
            solana_instruction::AccountMeta::new(keys.serum_market, false),
            solana_instruction::AccountMeta::new(keys.serum_bids, false),
            solana_instruction::AccountMeta::new(keys.serum_asks, false),
            solana_instruction::AccountMeta::new(keys.serum_event_queue, false),
            solana_instruction::AccountMeta::new(keys.serum_coin_vault, false),
            solana_instruction::AccountMeta::new(keys.serum_pc_vault, false),
            solana_instruction::AccountMeta::new(keys.serum_vault_signer, false),
            solana_instruction::AccountMeta::new(keys.new_amm_open_orders, false),
            solana_instruction::AccountMeta::new(keys.new_serum_program, false),
            solana_instruction::AccountMeta::new(keys.new_serum_market, false),
            solana_instruction::AccountMeta::new(keys.admin, false),
        ]
    }
}
pub fn migrate_to_open_book_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateToOpenBookKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrateToOpenBookIxData::default().try_to_vec()?,
    })
}
pub fn migrate_to_open_book_ix(
    keys: MigrateToOpenBookKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    migrate_to_open_book_ix_with_program_id(crate::ID, keys)
}
