//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: withdrawSrm (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const WITHDRAW_SRM_IX_DISCM: u8 = 8u8;
pub const WITHDRAW_SRM_IX_ACCOUNTS_LEN: usize = 6;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawSrmIxData {
    pub discriminator: u8,
    pub amount: u64,
}
impl Default for WithdrawSrmIxData {
    fn default() -> Self {
        Self {
            discriminator: WITHDRAW_SRM_IX_DISCM,
            amount: Default::default(),
        }
    }
}
impl WithdrawSrmIxData {
    pub fn new(amount: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            amount,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        WITHDRAW_SRM_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "amount", self.amount)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct WithdrawSrmKeys {
    pub token_program: Pubkey,
    pub amm: Pubkey,
    pub amm_owner_account: Pubkey,
    pub amm_authority: Pubkey,
    pub srm_token: Pubkey,
    pub dest_srm_token: Pubkey,
}
impl Default for WithdrawSrmKeys {
    fn default() -> Self {
        Self {
            token_program: Pubkey::default(),
            amm: Pubkey::default(),
            amm_owner_account: Pubkey::default(),
            amm_authority: Pubkey::default(),
            srm_token: Pubkey::default(),
            dest_srm_token: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for WithdrawSrmKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            token_program: pubkeys[0],
            amm: pubkeys[1],
            amm_owner_account: pubkeys[2],
            amm_authority: pubkeys[3],
            srm_token: pubkeys[4],
            dest_srm_token: pubkeys[5],
        }
    }
}
impl WithdrawSrmKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.token_program,
            self.amm,
            self.amm_owner_account,
            self.amm_authority,
            self.srm_token,
            self.dest_srm_token,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "tokenProgram",
                    serde_json::to_string(&self.token_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "amm",
                    serde_json::to_string(&self.amm).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammOwnerAccount",
                    serde_json::to_string(&self.amm_owner_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammAuthority",
                    serde_json::to_string(&self.amm_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "srmToken",
                    serde_json::to_string(&self.srm_token)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "destSrmToken",
                    serde_json::to_string(&self.dest_srm_token)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<WithdrawSrmKeys> for [solana_instruction::AccountMeta; WITHDRAW_SRM_IX_ACCOUNTS_LEN] {
    fn from(keys: WithdrawSrmKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.amm, false),
            solana_instruction::AccountMeta::new(keys.amm_owner_account, false),
            solana_instruction::AccountMeta::new(keys.amm_authority, false),
            solana_instruction::AccountMeta::new(keys.srm_token, false),
            solana_instruction::AccountMeta::new(keys.dest_srm_token, false),
        ]
    }
}
pub fn withdraw_srm_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawSrmKeys,
    args: WithdrawSrmIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; WITHDRAW_SRM_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn withdraw_srm_ix(
    keys: WithdrawSrmKeys,
    args: WithdrawSrmIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    withdraw_srm_ix_with_program_id(crate::ID, keys, args)
}
