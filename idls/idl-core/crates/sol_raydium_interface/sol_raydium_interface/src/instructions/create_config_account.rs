//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: createConfigAccount (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CREATE_CONFIG_ACCOUNT_IX_DISCM: u8 = 14u8;
pub const CREATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN: usize = 5;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigAccountIxData {
    pub discriminator: u8,
}
impl Default for CreateConfigAccountIxData {
    fn default() -> Self {
        Self {
            discriminator: CREATE_CONFIG_ACCOUNT_IX_DISCM,
        }
    }
}
impl CreateConfigAccountIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        CREATE_CONFIG_ACCOUNT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!("\"discriminator\":{}", self.discriminator)].join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateConfigAccountKeys {
    pub admin: Pubkey,
    pub amm_config: Pubkey,
    pub owner: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
}
impl Default for CreateConfigAccountKeys {
    fn default() -> Self {
        Self {
            admin: Pubkey::default(),
            amm_config: Pubkey::default(),
            owner: Pubkey::default(),
            system_program: Pubkey::default(),
            rent: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for CreateConfigAccountKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            admin: pubkeys[0],
            amm_config: pubkeys[1],
            owner: pubkeys[2],
            system_program: pubkeys[3],
            rent: pubkeys[4],
        }
    }
}
impl CreateConfigAccountKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.admin,
            self.amm_config,
            self.owner,
            self.system_program,
            self.rent,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "admin",
                    serde_json::to_string(&self.admin).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammConfig",
                    serde_json::to_string(&self.amm_config)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "owner",
                    serde_json::to_string(&self.owner).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "systemProgram",
                    serde_json::to_string(&self.system_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "rent",
                    serde_json::to_string(&self.rent).unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<CreateConfigAccountKeys>
    for [solana_instruction::AccountMeta; CREATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN]
{
    fn from(keys: CreateConfigAccountKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.admin, false),
            solana_instruction::AccountMeta::new(keys.amm_config, false),
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
        ]
    }
}
pub fn create_config_account_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateConfigAccountKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CREATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CreateConfigAccountIxData::default().try_to_vec()?,
    })
}
pub fn create_config_account_ix(
    keys: CreateConfigAccountKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    create_config_account_ix_with_program_id(crate::ID, keys)
}
