//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: swapBaseOut (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWAP_BASE_OUT_IX_DISCM: u8 = 11u8;
pub const SWAP_BASE_OUT_IX_ACCOUNTS_LEN: usize = 18;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapBaseOutIxData {
    pub discriminator: u8,
    #[cfg_attr(feature = "serde", serde(rename = "maxAmountIn"))]
    pub max_amount_in: u64,
    #[cfg_attr(feature = "serde", serde(rename = "amountOut"))]
    pub amount_out: u64,
}
impl Default for SwapBaseOutIxData {
    fn default() -> Self {
        Self {
            discriminator: SWAP_BASE_OUT_IX_DISCM,
            max_amount_in: Default::default(),
            amount_out: Default::default(),
        }
    }
}
impl SwapBaseOutIxData {
    pub fn new(max_amount_in: u64, amount_out: u64) -> Self {
        Self {
            discriminator: Self::discriminator(),
            max_amount_in,
            amount_out,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        SWAP_BASE_OUT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "maxAmountIn", self.max_amount_in),
                format!("\"{}\":{}", "amountOut", self.amount_out)
            ]
            .join(",")
        )
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct SwapBaseOutKeys {
    pub token_program: Pubkey,
    pub amm: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub amm_target_orders: Option<Pubkey>,
    pub pool_coin_token_account: Pubkey,
    pub pool_pc_token_account: Pubkey,
    pub serum_program: Pubkey,
    pub serum_market: Pubkey,
    pub serum_bids: Pubkey,
    pub serum_asks: Pubkey,
    pub serum_event_queue: Pubkey,
    pub serum_coin_vault_account: Pubkey,
    pub serum_pc_vault_account: Pubkey,
    pub serum_vault_signer: Pubkey,
    pub uer_source_token_account: Pubkey,
    pub uer_destination_token_account: Pubkey,
    pub user_source_owner: Pubkey,
}
impl Default for SwapBaseOutKeys {
    fn default() -> Self {
        Self {
            token_program: Pubkey::default(),
            amm: Pubkey::default(),
            amm_authority: Pubkey::default(),
            amm_open_orders: Pubkey::default(),
            amm_target_orders: None,
            pool_coin_token_account: Pubkey::default(),
            pool_pc_token_account: Pubkey::default(),
            serum_program: Pubkey::default(),
            serum_market: Pubkey::default(),
            serum_bids: Pubkey::default(),
            serum_asks: Pubkey::default(),
            serum_event_queue: Pubkey::default(),
            serum_coin_vault_account: Pubkey::default(),
            serum_pc_vault_account: Pubkey::default(),
            serum_vault_signer: Pubkey::default(),
            uer_source_token_account: Pubkey::default(),
            uer_destination_token_account: Pubkey::default(),
            user_source_owner: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for SwapBaseOutKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        let has_target_orders = pubkeys.len() >= 18;
        
        if has_target_orders {
            // 18账户情况：包含amm_target_orders
            Self {
                token_program: pubkeys[0],
                amm: pubkeys[1],
                amm_authority: pubkeys[2],
                amm_open_orders: pubkeys[3],
                amm_target_orders: Some(pubkeys[4]),
                pool_coin_token_account: pubkeys[5],
                pool_pc_token_account: pubkeys[6],
                serum_program: pubkeys[7],
                serum_market: pubkeys[8],
                serum_bids: pubkeys[9],
                serum_asks: pubkeys[10],
                serum_event_queue: pubkeys[11],
                serum_coin_vault_account: pubkeys[12],
                serum_pc_vault_account: pubkeys[13],
                serum_vault_signer: pubkeys[14],
                uer_source_token_account: pubkeys[15],
                uer_destination_token_account: pubkeys[16],
                user_source_owner: pubkeys[17],
            }
        } else {
            // 17账户情况：没有amm_target_orders
            Self {
                token_program: pubkeys[0],
                amm: pubkeys[1],
                amm_authority: pubkeys[2],
                amm_open_orders: pubkeys[3],
                amm_target_orders: None,
                pool_coin_token_account: pubkeys[4],
                pool_pc_token_account: pubkeys[5],
                serum_program: pubkeys[6],
                serum_market: pubkeys[7],
                serum_bids: pubkeys[8],
                serum_asks: pubkeys[9],
                serum_event_queue: pubkeys[10],
                serum_coin_vault_account: pubkeys[11],
                serum_pc_vault_account: pubkeys[12],
                serum_vault_signer: pubkeys[13],
                uer_source_token_account: pubkeys[14],
                uer_destination_token_account: pubkeys[15],
                user_source_owner: pubkeys[16],
            }
        }
    }
}
impl SwapBaseOutKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        let mut vec = vec![
            self.token_program,
            self.amm,
            self.amm_authority,
            self.amm_open_orders,
        ];
        
        // 条件性添加amm_target_orders
        if let Some(amm_target_orders) = self.amm_target_orders {
            vec.push(amm_target_orders);
        }
        
        vec.extend_from_slice(&[
            self.pool_coin_token_account,
            self.pool_pc_token_account,
            self.serum_program,
            self.serum_market,
            self.serum_bids,
            self.serum_asks,
            self.serum_event_queue,
            self.serum_coin_vault_account,
            self.serum_pc_vault_account,
            self.serum_vault_signer,
            self.uer_source_token_account,
            self.uer_destination_token_account,
            self.user_source_owner,
        ]);
        
        vec
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "tokenProgram",
                    serde_json::to_string(&self.token_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "amm",
                    serde_json::to_string(&self.amm).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammAuthority",
                    serde_json::to_string(&self.amm_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammOpenOrders",
                    serde_json::to_string(&self.amm_open_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammTargetOrders",
                    serde_json::to_string(&self.amm_target_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "poolCoinTokenAccount",
                    serde_json::to_string(&self.pool_coin_token_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "poolPcTokenAccount",
                    serde_json::to_string(&self.pool_pc_token_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumProgram",
                    serde_json::to_string(&self.serum_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumMarket",
                    serde_json::to_string(&self.serum_market)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumBids",
                    serde_json::to_string(&self.serum_bids)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumAsks",
                    serde_json::to_string(&self.serum_asks)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumEventQueue",
                    serde_json::to_string(&self.serum_event_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumCoinVaultAccount",
                    serde_json::to_string(&self.serum_coin_vault_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumPcVaultAccount",
                    serde_json::to_string(&self.serum_pc_vault_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumVaultSigner",
                    serde_json::to_string(&self.serum_vault_signer)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "uerSourceTokenAccount",
                    serde_json::to_string(&self.uer_source_token_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "uerDestinationTokenAccount",
                    serde_json::to_string(&self.uer_destination_token_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "userSourceOwner",
                    serde_json::to_string(&self.user_source_owner)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<SwapBaseOutKeys> for Vec<solana_instruction::AccountMeta> {
    fn from(keys: SwapBaseOutKeys) -> Self {
        let mut metas = vec![
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.amm, false),
            solana_instruction::AccountMeta::new(keys.amm_authority, false),
            solana_instruction::AccountMeta::new(keys.amm_open_orders, false),
        ];
        
        if let Some(amm_target_orders) = keys.amm_target_orders {
            metas.push(solana_instruction::AccountMeta::new(amm_target_orders, false));
        }
        
        metas.extend_from_slice(&[
            solana_instruction::AccountMeta::new(keys.pool_coin_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_pc_token_account, false),
            solana_instruction::AccountMeta::new(keys.serum_program, false),
            solana_instruction::AccountMeta::new(keys.serum_market, false),
            solana_instruction::AccountMeta::new(keys.serum_bids, false),
            solana_instruction::AccountMeta::new(keys.serum_asks, false),
            solana_instruction::AccountMeta::new(keys.serum_event_queue, false),
            solana_instruction::AccountMeta::new(keys.serum_coin_vault_account, false),
            solana_instruction::AccountMeta::new(keys.serum_pc_vault_account, false),
            solana_instruction::AccountMeta::new(keys.serum_vault_signer, false),
            solana_instruction::AccountMeta::new(keys.uer_source_token_account, false),
            solana_instruction::AccountMeta::new(keys.uer_destination_token_account, false),
            solana_instruction::AccountMeta::new(keys.user_source_owner, false),
        ]);
        
        metas
    }
}
pub fn swap_base_out_ix_with_program_id(
    program_id: Pubkey,
    keys: SwapBaseOutKeys,
    args: SwapBaseOutIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: Vec<solana_instruction::AccountMeta> = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: metas,
        data: args.try_to_vec()?,
    })
}
pub fn swap_base_out_ix(
    keys: SwapBaseOutKeys,
    args: SwapBaseOutIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    swap_base_out_ix_with_program_id(crate::ID, keys, args)
}
