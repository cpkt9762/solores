//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: setParams (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[cfg(feature = "serde")]
mod option_pubkey_serde {
    use super::*;
    use serde::{Deserialize, Deserializer, Serializer};
    pub fn serialize_option_pubkey_as_string<S>(
        option_pubkey: &Option<Pubkey>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match option_pubkey {
            Some(pubkey) => serializer.serialize_some(&pubkey.to_string()),
            None => serializer.serialize_none(),
        }
    }
    pub fn deserialize_option_pubkey_from_string<'de, D>(
        deserializer: D,
    ) -> Result<Option<Pubkey>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let option_string = Option::<String>::deserialize(deserializer)?;
        match option_string {
            Some(s) => {
                let pubkey = s
                    .parse::<Pubkey>()
                    .map_err(|e| serde::de::Error::custom(format!("Invalid Pubkey: {}", e)))?;
                Ok(Some(pubkey))
            }
            None => Ok(None),
        }
    }
}
#[cfg(feature = "serde")]
use option_pubkey_serde::{
    deserialize_option_pubkey_from_string, serialize_option_pubkey_as_string,
};
pub const SET_PARAMS_IX_DISCM: u8 = 6u8;
pub const SET_PARAMS_IX_ACCOUNTS_LEN: usize = 16;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetParamsIxData {
    pub discriminator: u8,
    pub param: u8,
    pub value: Option<u64>,
    #[cfg_attr(feature = "serde", serde(rename = "newPubkey"))]
    #[cfg_attr(
        feature = "serde",
        serde(
            serialize_with = "serialize_option_pubkey_as_string",
            deserialize_with = "deserialize_option_pubkey_from_string"
        )
    )]
    pub new_pubkey: Option<Pubkey>,
    pub fees: Option<crate::types::Fees>,
    #[cfg_attr(feature = "serde", serde(rename = "lastOrderDistance"))]
    pub last_order_distance: Option<crate::types::LastOrderDistance>,
    #[cfg_attr(feature = "serde", serde(rename = "needTakeAmounts"))]
    pub need_take_amounts: Option<crate::types::NeedTake>,
}
impl Default for SetParamsIxData {
    fn default() -> Self {
        Self {
            discriminator: SET_PARAMS_IX_DISCM,
            param: Default::default(),
            value: Default::default(),
            new_pubkey: Default::default(),
            fees: Default::default(),
            last_order_distance: Default::default(),
            need_take_amounts: Default::default(),
        }
    }
}
impl SetParamsIxData {
    pub fn new(
        param: u8,
        value: Option<u64>,
        new_pubkey: Option<Pubkey>,
        fees: Option<crate::types::Fees>,
        last_order_distance: Option<crate::types::LastOrderDistance>,
        need_take_amounts: Option<crate::types::NeedTake>,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            param,
            value,
            new_pubkey,
            fees,
            last_order_distance,
            need_take_amounts,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        SET_PARAMS_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "param", self.param),
                format!(
                    "\"{}\":{}",
                    "value",
                    serde_json::to_string(&self.value).unwrap_or_else(|_| "null".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "newPubkey",
                    serde_json::to_string(&self.new_pubkey).unwrap_or_else(|_| "null".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "fees",
                    serde_json::to_string(&self.fees).unwrap_or_else(|_| "null".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "lastOrderDistance",
                    serde_json::to_string(&self.last_order_distance)
                        .unwrap_or_else(|_| "null".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "needTakeAmounts",
                    serde_json::to_string(&self.need_take_amounts)
                        .unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SetParamsKeys {
    pub token_program: Pubkey,
    pub amm: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub amm_target_orders: Pubkey,
    pub amm_coin_vault: Pubkey,
    pub amm_pc_vault: Pubkey,
    pub serum_program: Pubkey,
    pub serum_market: Pubkey,
    pub serum_coin_vault: Pubkey,
    pub serum_pc_vault: Pubkey,
    pub serum_vault_signer: Pubkey,
    pub serum_event_queue: Pubkey,
    pub serum_bids: Pubkey,
    pub serum_asks: Pubkey,
    pub amm_admin_account: Pubkey,
}
impl Default for SetParamsKeys {
    fn default() -> Self {
        Self {
            token_program: Pubkey::default(),
            amm: Pubkey::default(),
            amm_authority: Pubkey::default(),
            amm_open_orders: Pubkey::default(),
            amm_target_orders: Pubkey::default(),
            amm_coin_vault: Pubkey::default(),
            amm_pc_vault: Pubkey::default(),
            serum_program: Pubkey::default(),
            serum_market: Pubkey::default(),
            serum_coin_vault: Pubkey::default(),
            serum_pc_vault: Pubkey::default(),
            serum_vault_signer: Pubkey::default(),
            serum_event_queue: Pubkey::default(),
            serum_bids: Pubkey::default(),
            serum_asks: Pubkey::default(),
            amm_admin_account: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for SetParamsKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            token_program: pubkeys[0],
            amm: pubkeys[1],
            amm_authority: pubkeys[2],
            amm_open_orders: pubkeys[3],
            amm_target_orders: pubkeys[4],
            amm_coin_vault: pubkeys[5],
            amm_pc_vault: pubkeys[6],
            serum_program: pubkeys[7],
            serum_market: pubkeys[8],
            serum_coin_vault: pubkeys[9],
            serum_pc_vault: pubkeys[10],
            serum_vault_signer: pubkeys[11],
            serum_event_queue: pubkeys[12],
            serum_bids: pubkeys[13],
            serum_asks: pubkeys[14],
            amm_admin_account: pubkeys[15],
        }
    }
}
impl SetParamsKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.token_program,
            self.amm,
            self.amm_authority,
            self.amm_open_orders,
            self.amm_target_orders,
            self.amm_coin_vault,
            self.amm_pc_vault,
            self.serum_program,
            self.serum_market,
            self.serum_coin_vault,
            self.serum_pc_vault,
            self.serum_vault_signer,
            self.serum_event_queue,
            self.serum_bids,
            self.serum_asks,
            self.amm_admin_account,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "tokenProgram",
                    serde_json::to_string(&self.token_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "amm",
                    serde_json::to_string(&self.amm).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammAuthority",
                    serde_json::to_string(&self.amm_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammOpenOrders",
                    serde_json::to_string(&self.amm_open_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammTargetOrders",
                    serde_json::to_string(&self.amm_target_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammCoinVault",
                    serde_json::to_string(&self.amm_coin_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammPcVault",
                    serde_json::to_string(&self.amm_pc_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumProgram",
                    serde_json::to_string(&self.serum_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumMarket",
                    serde_json::to_string(&self.serum_market)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumCoinVault",
                    serde_json::to_string(&self.serum_coin_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumPcVault",
                    serde_json::to_string(&self.serum_pc_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumVaultSigner",
                    serde_json::to_string(&self.serum_vault_signer)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumEventQueue",
                    serde_json::to_string(&self.serum_event_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumBids",
                    serde_json::to_string(&self.serum_bids)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumAsks",
                    serde_json::to_string(&self.serum_asks)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammAdminAccount",
                    serde_json::to_string(&self.amm_admin_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<SetParamsKeys> for [solana_instruction::AccountMeta; SET_PARAMS_IX_ACCOUNTS_LEN] {
    fn from(keys: SetParamsKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.amm, false),
            solana_instruction::AccountMeta::new(keys.amm_authority, false),
            solana_instruction::AccountMeta::new(keys.amm_open_orders, false),
            solana_instruction::AccountMeta::new(keys.amm_target_orders, false),
            solana_instruction::AccountMeta::new(keys.amm_coin_vault, false),
            solana_instruction::AccountMeta::new(keys.amm_pc_vault, false),
            solana_instruction::AccountMeta::new(keys.serum_program, false),
            solana_instruction::AccountMeta::new(keys.serum_market, false),
            solana_instruction::AccountMeta::new(keys.serum_coin_vault, false),
            solana_instruction::AccountMeta::new(keys.serum_pc_vault, false),
            solana_instruction::AccountMeta::new(keys.serum_vault_signer, false),
            solana_instruction::AccountMeta::new(keys.serum_event_queue, false),
            solana_instruction::AccountMeta::new(keys.serum_bids, false),
            solana_instruction::AccountMeta::new(keys.serum_asks, false),
            solana_instruction::AccountMeta::new(keys.amm_admin_account, false),
        ]
    }
}
pub fn set_params_ix_with_program_id(
    program_id: Pubkey,
    keys: SetParamsKeys,
    args: SetParamsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SET_PARAMS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn set_params_ix(
    keys: SetParamsKeys,
    args: SetParamsIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    set_params_ix_with_program_id(crate::ID, keys, args)
}
