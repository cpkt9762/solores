//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: preInitialize (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const PRE_INITIALIZE_IX_DISCM: u8 = 10u8;
pub const PRE_INITIALIZE_IX_ACCOUNTS_LEN: usize = 14;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PreInitializeIxData {
    pub discriminator: u8,
    pub nonce: u8,
}
impl Default for PreInitializeIxData {
    fn default() -> Self {
        Self {
            discriminator: PRE_INITIALIZE_IX_DISCM,
            nonce: Default::default(),
        }
    }
}
impl PreInitializeIxData {
    pub fn new(nonce: u8) -> Self {
        Self {
            discriminator: Self::discriminator(),
            nonce,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        PRE_INITIALIZE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "nonce", self.nonce)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct PreInitializeKeys {
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub amm_target_orders: Pubkey,
    pub pool_withdraw_queue: Pubkey,
    pub amm_authority: Pubkey,
    pub lp_mint_address: Pubkey,
    pub coin_mint_address: Pubkey,
    pub pc_mint_address: Pubkey,
    pub pool_coin_token_account: Pubkey,
    pub pool_pc_token_account: Pubkey,
    pub pool_temp_lp_token_account: Pubkey,
    pub serum_market: Pubkey,
    pub user_wallet: Pubkey,
}
impl Default for PreInitializeKeys {
    fn default() -> Self {
        Self {
            token_program: Pubkey::default(),
            system_program: Pubkey::default(),
            rent: Pubkey::default(),
            amm_target_orders: Pubkey::default(),
            pool_withdraw_queue: Pubkey::default(),
            amm_authority: Pubkey::default(),
            lp_mint_address: Pubkey::default(),
            coin_mint_address: Pubkey::default(),
            pc_mint_address: Pubkey::default(),
            pool_coin_token_account: Pubkey::default(),
            pool_pc_token_account: Pubkey::default(),
            pool_temp_lp_token_account: Pubkey::default(),
            serum_market: Pubkey::default(),
            user_wallet: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for PreInitializeKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            token_program: pubkeys[0],
            system_program: pubkeys[1],
            rent: pubkeys[2],
            amm_target_orders: pubkeys[3],
            pool_withdraw_queue: pubkeys[4],
            amm_authority: pubkeys[5],
            lp_mint_address: pubkeys[6],
            coin_mint_address: pubkeys[7],
            pc_mint_address: pubkeys[8],
            pool_coin_token_account: pubkeys[9],
            pool_pc_token_account: pubkeys[10],
            pool_temp_lp_token_account: pubkeys[11],
            serum_market: pubkeys[12],
            user_wallet: pubkeys[13],
        }
    }
}
impl PreInitializeKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.token_program,
            self.system_program,
            self.rent,
            self.amm_target_orders,
            self.pool_withdraw_queue,
            self.amm_authority,
            self.lp_mint_address,
            self.coin_mint_address,
            self.pc_mint_address,
            self.pool_coin_token_account,
            self.pool_pc_token_account,
            self.pool_temp_lp_token_account,
            self.serum_market,
            self.user_wallet,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "tokenProgram",
                    serde_json::to_string(&self.token_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "systemProgram",
                    serde_json::to_string(&self.system_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "rent",
                    serde_json::to_string(&self.rent).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammTargetOrders",
                    serde_json::to_string(&self.amm_target_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "poolWithdrawQueue",
                    serde_json::to_string(&self.pool_withdraw_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "ammAuthority",
                    serde_json::to_string(&self.amm_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "lpMintAddress",
                    serde_json::to_string(&self.lp_mint_address)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "coinMintAddress",
                    serde_json::to_string(&self.coin_mint_address)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "pcMintAddress",
                    serde_json::to_string(&self.pc_mint_address)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "poolCoinTokenAccount",
                    serde_json::to_string(&self.pool_coin_token_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "poolPcTokenAccount",
                    serde_json::to_string(&self.pool_pc_token_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "poolTempLpTokenAccount",
                    serde_json::to_string(&self.pool_temp_lp_token_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "serumMarket",
                    serde_json::to_string(&self.serum_market)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "userWallet",
                    serde_json::to_string(&self.user_wallet)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<PreInitializeKeys> for [solana_instruction::AccountMeta; PRE_INITIALIZE_IX_ACCOUNTS_LEN] {
    fn from(keys: PreInitializeKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.token_program, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
            solana_instruction::AccountMeta::new(keys.rent, false),
            solana_instruction::AccountMeta::new(keys.amm_target_orders, false),
            solana_instruction::AccountMeta::new(keys.pool_withdraw_queue, false),
            solana_instruction::AccountMeta::new(keys.amm_authority, false),
            solana_instruction::AccountMeta::new(keys.lp_mint_address, false),
            solana_instruction::AccountMeta::new(keys.coin_mint_address, false),
            solana_instruction::AccountMeta::new(keys.pc_mint_address, false),
            solana_instruction::AccountMeta::new(keys.pool_coin_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_pc_token_account, false),
            solana_instruction::AccountMeta::new(keys.pool_temp_lp_token_account, false),
            solana_instruction::AccountMeta::new(keys.serum_market, false),
            solana_instruction::AccountMeta::new(keys.user_wallet, false),
        ]
    }
}
pub fn pre_initialize_ix_with_program_id(
    program_id: Pubkey,
    keys: PreInitializeKeys,
    args: PreInitializeIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; PRE_INITIALIZE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn pre_initialize_ix(
    keys: PreInitializeKeys,
    args: PreInitializeIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    pre_initialize_ix_with_program_id(crate::ID, keys, args)
}
