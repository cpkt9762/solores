//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Account: AmmInfo (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AmmInfo {
    pub status: u64,
    pub nonce: u64,
    #[cfg_attr(feature = "serde", serde(rename = "orderNum"))]
    pub order_num: u64,
    pub depth: u64,
    #[cfg_attr(feature = "serde", serde(rename = "coinDecimals"))]
    pub coin_decimals: u64,
    #[cfg_attr(feature = "serde", serde(rename = "pcDecimals"))]
    pub pc_decimals: u64,
    pub state: u64,
    #[cfg_attr(feature = "serde", serde(rename = "resetFlag"))]
    pub reset_flag: u64,
    #[cfg_attr(feature = "serde", serde(rename = "minSize"))]
    pub min_size: u64,
    #[cfg_attr(feature = "serde", serde(rename = "volMaxCutRatio"))]
    pub vol_max_cut_ratio: u64,
    #[cfg_attr(feature = "serde", serde(rename = "amountWave"))]
    pub amount_wave: u64,
    #[cfg_attr(feature = "serde", serde(rename = "coinLotSize"))]
    pub coin_lot_size: u64,
    #[cfg_attr(feature = "serde", serde(rename = "pcLotSize"))]
    pub pc_lot_size: u64,
    #[cfg_attr(feature = "serde", serde(rename = "minPriceMultiplier"))]
    pub min_price_multiplier: u64,
    #[cfg_attr(feature = "serde", serde(rename = "maxPriceMultiplier"))]
    pub max_price_multiplier: u64,
    #[cfg_attr(feature = "serde", serde(rename = "sysDecimalValue"))]
    pub sys_decimal_value: u64,
    pub fees: crate::types::Fees,
    #[cfg_attr(feature = "serde", serde(rename = "outPut"))]
    pub out_put: crate::types::OutPutData,
    #[cfg_attr(feature = "serde", serde(rename = "tokenCoin"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub token_coin: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "tokenPc"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub token_pc: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "coinMint"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub coin_mint: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "pcMint"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pc_mint: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "lpMint"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub lp_mint: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "openOrders"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub open_orders: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub market: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "serumDex"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub serum_dex: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "targetOrders"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub target_orders: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "withdrawQueue"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub withdraw_queue: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "tokenTempLp"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub token_temp_lp: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "ammOwner"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub amm_owner: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "lpAmount"))]
    pub lp_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "clientOrderId"))]
    pub client_order_id: u64,
    pub padding: [u64; 2],
}
impl Default for AmmInfo {
    fn default() -> Self {
        Self {
            status: Default::default(),
            nonce: Default::default(),
            order_num: Default::default(),
            depth: Default::default(),
            coin_decimals: Default::default(),
            pc_decimals: Default::default(),
            state: Default::default(),
            reset_flag: Default::default(),
            min_size: Default::default(),
            vol_max_cut_ratio: Default::default(),
            amount_wave: Default::default(),
            coin_lot_size: Default::default(),
            pc_lot_size: Default::default(),
            min_price_multiplier: Default::default(),
            max_price_multiplier: Default::default(),
            sys_decimal_value: Default::default(),
            fees: Default::default(),
            out_put: Default::default(),
            token_coin: Default::default(),
            token_pc: Default::default(),
            coin_mint: Default::default(),
            pc_mint: Default::default(),
            lp_mint: Default::default(),
            open_orders: Default::default(),
            market: Default::default(),
            serum_dex: Default::default(),
            target_orders: Default::default(),
            withdraw_queue: Default::default(),
            token_temp_lp: Default::default(),
            amm_owner: Default::default(),
            lp_amount: Default::default(),
            client_order_id: Default::default(),
            padding: Default::default(),
        }
    }
}
impl AmmInfo {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 560usize;
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::PACKED_LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Account data length mismatch. Expected: {}, got: {}",
                    Self::PACKED_LEN,
                    data.len()
                ),
            ));
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
