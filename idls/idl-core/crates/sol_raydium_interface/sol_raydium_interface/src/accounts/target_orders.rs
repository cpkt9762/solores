//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-15
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Account: TargetOrders (NonAnchor)
#[cfg(feature = "serde")]
use serde_big_array::BigArray;
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TargetOrders {
    pub owner: [u64; 4],
    #[cfg_attr(feature = "serde", serde(rename = "buyOrders"))]
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub buy_orders: [crate::types::TargetOrder; 50],
    #[cfg_attr(feature = "serde", serde(rename = "padding1"))]
    pub padding_1: [u64; 8],
    #[cfg_attr(feature = "serde", serde(rename = "targetX"))]
    pub target_x: u128,
    #[cfg_attr(feature = "serde", serde(rename = "targetY"))]
    pub target_y: u128,
    #[cfg_attr(feature = "serde", serde(rename = "planXBuy"))]
    pub plan_x_buy: u128,
    #[cfg_attr(feature = "serde", serde(rename = "planYBuy"))]
    pub plan_y_buy: u128,
    #[cfg_attr(feature = "serde", serde(rename = "planXSell"))]
    pub plan_x_sell: u128,
    #[cfg_attr(feature = "serde", serde(rename = "planYSell"))]
    pub plan_y_sell: u128,
    #[cfg_attr(feature = "serde", serde(rename = "placedX"))]
    pub placed_x: u128,
    #[cfg_attr(feature = "serde", serde(rename = "placedY"))]
    pub placed_y: u128,
    #[cfg_attr(feature = "serde", serde(rename = "calcPnlX"))]
    pub calc_pnl_x: u128,
    #[cfg_attr(feature = "serde", serde(rename = "calcPnlY"))]
    pub calc_pnl_y: u128,
    #[cfg_attr(feature = "serde", serde(rename = "sellOrders"))]
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub sell_orders: [crate::types::TargetOrder; 50],
    #[cfg_attr(feature = "serde", serde(rename = "padding2"))]
    pub padding_2: [u64; 6],
    #[cfg_attr(feature = "serde", serde(rename = "replaceBuyClientId"))]
    pub replace_buy_client_id: [u64; 10],
    #[cfg_attr(feature = "serde", serde(rename = "replaceSellClientId"))]
    pub replace_sell_client_id: [u64; 10],
    #[cfg_attr(feature = "serde", serde(rename = "lastOrderNumerator"))]
    pub last_order_numerator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "lastOrderDenominator"))]
    pub last_order_denominator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "planOrdersCur"))]
    pub plan_orders_cur: u64,
    #[cfg_attr(feature = "serde", serde(rename = "placeOrdersCur"))]
    pub place_orders_cur: u64,
    #[cfg_attr(feature = "serde", serde(rename = "validBuyOrderNum"))]
    pub valid_buy_order_num: u64,
    #[cfg_attr(feature = "serde", serde(rename = "validSellOrderNum"))]
    pub valid_sell_order_num: u64,
    #[cfg_attr(feature = "serde", serde(rename = "padding3"))]
    pub padding_3: [u64; 10],
    #[cfg_attr(feature = "serde", serde(rename = "freeSlotBits"))]
    pub free_slot_bits: u128,
}
impl Default for TargetOrders {
    fn default() -> Self {
        Self {
            owner: Default::default(),
            buy_orders: [(); 50].map(|_| Default::default()),
            padding_1: Default::default(),
            target_x: Default::default(),
            target_y: Default::default(),
            plan_x_buy: Default::default(),
            plan_y_buy: Default::default(),
            plan_x_sell: Default::default(),
            plan_y_sell: Default::default(),
            placed_x: Default::default(),
            placed_y: Default::default(),
            calc_pnl_x: Default::default(),
            calc_pnl_y: Default::default(),
            sell_orders: [(); 50].map(|_| Default::default()),
            padding_2: Default::default(),
            replace_buy_client_id: Default::default(),
            replace_sell_client_id: Default::default(),
            last_order_numerator: Default::default(),
            last_order_denominator: Default::default(),
            plan_orders_cur: Default::default(),
            place_orders_cur: Default::default(),
            valid_buy_order_num: Default::default(),
            valid_sell_order_num: Default::default(),
            padding_3: Default::default(),
            free_slot_bits: Default::default(),
        }
    }
}
impl TargetOrders {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 1408usize;
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::PACKED_LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Account data length mismatch. Expected: {}, got: {}",
                    Self::PACKED_LEN,
                    data.len()
                ),
            ));
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
