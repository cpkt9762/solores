//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

#![doc = concat!("Non-Anchor", " error definitions module")]
//!Generated error enums and conversion implementations
///Custom errors for the phoenix program
#[derive(Clone, Copy, Debug, Eq, thiserror::Error, num_derive::FromPrimitive, PartialEq)]
pub enum PhoenixError {
    ///0 - Invalid market parameters error
    #[error("Invalid market parameters error")]
    InvalidMarketParameters = 0isize,
    ///1 - Invalid market authority error
    #[error("Invalid market authority error")]
    InvalidMarketAuthority = 1isize,
    ///2 - Market deserialization error
    #[error("Market deserialization error")]
    FailedToLoadMarketFromAccount = 2isize,
    ///3 - Market already initialized error
    #[error("Market already initialized error")]
    MarketAlreadyInitialized = 3isize,
    ///4 - Market is not initialized error
    #[error("Market is not initialized error")]
    MarketUninitialized = 4isize,
    ///5 - Invalid state transition error
    #[error("Invalid state transition error")]
    InvalidStateTransition = 5isize,
    ///6 - Invalid market signer error
    #[error("Invalid market signer error")]
    InvalidMarketSigner = 6isize,
    ///7 - Invalid lot size error
    #[error("Invalid lot size error")]
    InvalidLotSize = 7isize,
    ///8 - Invalid tick size error
    #[error("Invalid tick size error")]
    InvalidTickSize = 8isize,
    ///9 - Invalid mint error
    #[error("Invalid mint error")]
    InvalidMint = 9isize,
    ///10 - Invalid base vault error
    #[error("Invalid base vault error")]
    InvalidBaseVault = 10isize,
    ///11 - Invalid quote vault error
    #[error("Invalid quote vault error")]
    InvalidQuoteVault = 11isize,
    ///12 - Invalid base account error
    #[error("Invalid base account error")]
    InvalidBaseAccount = 12isize,
    ///13 - Invalid quote account error
    #[error("Invalid quote account error")]
    InvalidQuoteAccount = 13isize,
    ///14 - Too many events error
    #[error("Too many events error")]
    TooManyEvents = 14isize,
    ///15 - New order error
    #[error("New order error")]
    NewOrderError = 15isize,
    ///16 - Reduce order error
    #[error("Reduce order error")]
    ReduceOrderError = 16isize,
    ///17 - Cancel multiple orders error
    #[error("Cancel multiple orders error")]
    CancelMultipleOrdersError = 17isize,
    ///18 - Withdraw funds error
    #[error("Withdraw funds error")]
    WithdrawFundsError = 18isize,
    ///19 - Remove empty orders error
    #[error("Remove empty orders error")]
    RemoveEmptyOrdersError = 19isize,
    ///20 - Trader not found error
    #[error("Trader not found error")]
    TraderNotFound = 20isize,
    ///21 - Invalid seat status
    #[error("Invalid seat status")]
    InvalidSeatStatus = 21isize,
    ///22 - Failed to evict trader
    #[error("Failed to evict trader")]
    EvictionError = 22isize,
    ///23 - Non empty scratch buffer
    #[error("Non empty scratch buffer")]
    NonEmptyScratchBuffer = 23isize,
    ///24 - Failed to serialize event
    #[error("Failed to serialize event")]
    FailedToSerializeEvent = 24isize,
    ///25 - Failed to flush buffer
    #[error("Failed to flush buffer")]
    FailedToFlushBuffer = 25isize,
}
impl From<PhoenixError> for solana_program_error::ProgramError {
    fn from(e: PhoenixError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
