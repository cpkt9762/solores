//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: ReduceOrder (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const REDUCE_ORDER_IX_DISCM: u8 = 4u8;
pub const REDUCE_ORDER_IX_ACCOUNTS_LEN: usize = 9;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ReduceOrderIxData {
    pub discriminator: u8,
    pub params: crate::types::ReduceOrderParams,
}
impl Default for ReduceOrderIxData {
    fn default() -> Self {
        Self {
            discriminator: REDUCE_ORDER_IX_DISCM,
            params: Default::default(),
        }
    }
}
impl ReduceOrderIxData {
    pub fn new(params: crate::types::ReduceOrderParams) -> Self {
        Self {
            discriminator: Self::discriminator(),
            params,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        REDUCE_ORDER_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!(
                    "\"{}\":{}",
                    "params",
                    serde_json::to_string(&self.params).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ReduceOrderKeys {
    pub phoenix_program: Pubkey,
    pub log_authority: Pubkey,
    pub market: Pubkey,
    pub trader: Pubkey,
    pub base_account: Pubkey,
    pub quote_account: Pubkey,
    pub base_vault: Pubkey,
    pub quote_vault: Pubkey,
    pub token_program: Pubkey,
}
impl Default for ReduceOrderKeys {
    fn default() -> Self {
        Self {
            phoenix_program: Pubkey::default(),
            log_authority: Pubkey::default(),
            market: Pubkey::default(),
            trader: Pubkey::default(),
            base_account: Pubkey::default(),
            quote_account: Pubkey::default(),
            base_vault: Pubkey::default(),
            quote_vault: Pubkey::default(),
            token_program: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for ReduceOrderKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            phoenix_program: pubkeys[0],
            log_authority: pubkeys[1],
            market: pubkeys[2],
            trader: pubkeys[3],
            base_account: pubkeys[4],
            quote_account: pubkeys[5],
            base_vault: pubkeys[6],
            quote_vault: pubkeys[7],
            token_program: pubkeys[8],
        }
    }
}
impl ReduceOrderKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.phoenix_program,
            self.log_authority,
            self.market,
            self.trader,
            self.base_account,
            self.quote_account,
            self.base_vault,
            self.quote_vault,
            self.token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "phoenixProgram",
                    serde_json::to_string(&self.phoenix_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "logAuthority",
                    serde_json::to_string(&self.log_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "market",
                    serde_json::to_string(&self.market).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "trader",
                    serde_json::to_string(&self.trader).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "baseAccount",
                    serde_json::to_string(&self.base_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "quoteAccount",
                    serde_json::to_string(&self.quote_account)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "baseVault",
                    serde_json::to_string(&self.base_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "quoteVault",
                    serde_json::to_string(&self.quote_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "tokenProgram",
                    serde_json::to_string(&self.token_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<ReduceOrderKeys> for [solana_instruction::AccountMeta; REDUCE_ORDER_IX_ACCOUNTS_LEN] {
    fn from(keys: ReduceOrderKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.phoenix_program, false),
            solana_instruction::AccountMeta::new(keys.log_authority, false),
            solana_instruction::AccountMeta::new(keys.market, false),
            solana_instruction::AccountMeta::new(keys.trader, false),
            solana_instruction::AccountMeta::new(keys.base_account, false),
            solana_instruction::AccountMeta::new(keys.quote_account, false),
            solana_instruction::AccountMeta::new(keys.base_vault, false),
            solana_instruction::AccountMeta::new(keys.quote_vault, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
        ]
    }
}
pub fn reduce_order_ix_with_program_id(
    program_id: Pubkey,
    keys: ReduceOrderKeys,
    args: ReduceOrderIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; REDUCE_ORDER_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn reduce_order_ix(
    keys: ReduceOrderKeys,
    args: ReduceOrderIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    reduce_order_ix_with_program_id(crate::ID, keys, args)
}
