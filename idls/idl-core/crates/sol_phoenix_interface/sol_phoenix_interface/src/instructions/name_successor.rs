//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: NameSuccessor (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const NAME_SUCCESSOR_IX_DISCM: u8 = 20u8;
pub const NAME_SUCCESSOR_IX_ACCOUNTS_LEN: usize = 4;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NameSuccessorIxData {
    pub discriminator: u8,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub successor: Pubkey,
}
impl Default for NameSuccessorIxData {
    fn default() -> Self {
        Self {
            discriminator: NAME_SUCCESSOR_IX_DISCM,
            successor: Default::default(),
        }
    }
}
impl NameSuccessorIxData {
    pub fn new(successor: Pubkey) -> Self {
        Self {
            discriminator: Self::discriminator(),
            successor,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        NAME_SUCCESSOR_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "successor", self.successor)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct NameSuccessorKeys {
    pub phoenix_program: Pubkey,
    pub log_authority: Pubkey,
    pub market: Pubkey,
    pub market_authority: Pubkey,
}
impl Default for NameSuccessorKeys {
    fn default() -> Self {
        Self {
            phoenix_program: Pubkey::default(),
            log_authority: Pubkey::default(),
            market: Pubkey::default(),
            market_authority: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for NameSuccessorKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            phoenix_program: pubkeys[0],
            log_authority: pubkeys[1],
            market: pubkeys[2],
            market_authority: pubkeys[3],
        }
    }
}
impl NameSuccessorKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.phoenix_program,
            self.log_authority,
            self.market,
            self.market_authority,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "phoenixProgram",
                    serde_json::to_string(&self.phoenix_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "logAuthority",
                    serde_json::to_string(&self.log_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "market",
                    serde_json::to_string(&self.market).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "marketAuthority",
                    serde_json::to_string(&self.market_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<NameSuccessorKeys> for [solana_instruction::AccountMeta; NAME_SUCCESSOR_IX_ACCOUNTS_LEN] {
    fn from(keys: NameSuccessorKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.phoenix_program, false),
            solana_instruction::AccountMeta::new(keys.log_authority, false),
            solana_instruction::AccountMeta::new(keys.market, false),
            solana_instruction::AccountMeta::new(keys.market_authority, false),
        ]
    }
}
pub fn name_successor_ix_with_program_id(
    program_id: Pubkey,
    keys: NameSuccessorKeys,
    args: NameSuccessorIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; NAME_SUCCESSOR_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn name_successor_ix(
    keys: NameSuccessorKeys,
    args: NameSuccessorIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    name_successor_ix_with_program_id(crate::ID, keys, args)
}
