//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: RequestSeat (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const REQUEST_SEAT_IX_DISCM: u8 = 14u8;
pub const REQUEST_SEAT_IX_ACCOUNTS_LEN: usize = 6;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RequestSeatIxData {
    pub discriminator: u8,
}
impl Default for RequestSeatIxData {
    fn default() -> Self {
        Self {
            discriminator: REQUEST_SEAT_IX_DISCM,
        }
    }
}
impl RequestSeatIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        REQUEST_SEAT_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!("\"discriminator\":{}", self.discriminator)].join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct RequestSeatKeys {
    pub phoenix_program: Pubkey,
    pub log_authority: Pubkey,
    pub market: Pubkey,
    pub payer: Pubkey,
    pub seat: Pubkey,
    pub system_program: Pubkey,
}
impl Default for RequestSeatKeys {
    fn default() -> Self {
        Self {
            phoenix_program: Pubkey::default(),
            log_authority: Pubkey::default(),
            market: Pubkey::default(),
            payer: Pubkey::default(),
            seat: Pubkey::default(),
            system_program: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for RequestSeatKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            phoenix_program: pubkeys[0],
            log_authority: pubkeys[1],
            market: pubkeys[2],
            payer: pubkeys[3],
            seat: pubkeys[4],
            system_program: pubkeys[5],
        }
    }
}
impl RequestSeatKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.phoenix_program,
            self.log_authority,
            self.market,
            self.payer,
            self.seat,
            self.system_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "phoenixProgram",
                    serde_json::to_string(&self.phoenix_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "logAuthority",
                    serde_json::to_string(&self.log_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "market",
                    serde_json::to_string(&self.market).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "payer",
                    serde_json::to_string(&self.payer).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "seat",
                    serde_json::to_string(&self.seat).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "systemProgram",
                    serde_json::to_string(&self.system_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<RequestSeatKeys> for [solana_instruction::AccountMeta; REQUEST_SEAT_IX_ACCOUNTS_LEN] {
    fn from(keys: RequestSeatKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.phoenix_program, false),
            solana_instruction::AccountMeta::new(keys.log_authority, false),
            solana_instruction::AccountMeta::new(keys.market, false),
            solana_instruction::AccountMeta::new(keys.payer, false),
            solana_instruction::AccountMeta::new(keys.seat, false),
            solana_instruction::AccountMeta::new(keys.system_program, false),
        ]
    }
}
pub fn request_seat_ix_with_program_id(
    program_id: Pubkey,
    keys: RequestSeatKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; REQUEST_SEAT_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: RequestSeatIxData::default().try_to_vec()?,
    })
}
pub fn request_seat_ix(
    keys: RequestSeatKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    request_seat_ix_with_program_id(crate::ID, keys)
}
