//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Type: InitializeParams (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_PARAMS_TYPE_DISCM: u8 = 15u8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeParams {
    #[cfg_attr(feature = "serde", serde(rename = "marketSizeParams"))]
    pub market_size_params: crate::types::MarketSizeParams,
    #[cfg_attr(feature = "serde", serde(rename = "numQuoteLotsPerQuoteUnit"))]
    pub num_quote_lots_per_quote_unit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tickSizeInQuoteLotsPerBaseUnit"))]
    pub tick_size_in_quote_lots_per_base_unit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "numBaseLotsPerBaseUnit"))]
    pub num_base_lots_per_base_unit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "takerFeeBps"))]
    pub taker_fee_bps: u16,
    #[cfg_attr(feature = "serde", serde(rename = "feeCollector"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fee_collector: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "rawBaseUnitsPerBaseUnit"))]
    pub raw_base_units_per_base_unit: Option<u32>,
}
impl Default for InitializeParams {
    fn default() -> Self {
        Self {
            market_size_params: Default::default(),
            num_quote_lots_per_quote_unit: Default::default(),
            tick_size_in_quote_lots_per_base_unit: Default::default(),
            num_base_lots_per_base_unit: Default::default(),
            taker_fee_bps: Default::default(),
            fee_collector: Default::default(),
            raw_base_units_per_base_unit: None,
        }
    }
}
impl InitializeParams {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
