//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Type: CondensedOrder (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CONDENSED_ORDER_TYPE_DISCM: u8 = 17u8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CondensedOrder {
    #[cfg_attr(feature = "serde", serde(rename = "priceInTicks"))]
    pub price_in_ticks: u64,
    #[cfg_attr(feature = "serde", serde(rename = "sizeInBaseLots"))]
    pub size_in_base_lots: u64,
    #[cfg_attr(feature = "serde", serde(rename = "lastValidSlot"))]
    pub last_valid_slot: Option<u64>,
    #[cfg_attr(feature = "serde", serde(rename = "lastValidUnixTimestampInSeconds"))]
    pub last_valid_unix_timestamp_in_seconds: Option<u64>,
}
impl Default for CondensedOrder {
    fn default() -> Self {
        Self {
            price_in_ticks: Default::default(),
            size_in_base_lots: Default::default(),
            last_valid_slot: None,
            last_valid_unix_timestamp_in_seconds: None,
        }
    }
}
impl CondensedOrder {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
