//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Type: MarketHeader (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const MARKET_HEADER_TYPE_DISCM: u8 = 21u8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MarketHeader {
    #[cfg_attr(feature = "serde", serde(rename = "discriminantValue"))]
    pub discriminant_value: u64,
    pub status: u64,
    #[cfg_attr(feature = "serde", serde(rename = "marketSizeParams"))]
    pub market_size_params: crate::types::MarketSizeParams,
    #[cfg_attr(feature = "serde", serde(rename = "baseParams"))]
    pub base_params: crate::types::TokenParams,
    #[cfg_attr(feature = "serde", serde(rename = "baseLotSize"))]
    pub base_lot_size: u64,
    #[cfg_attr(feature = "serde", serde(rename = "quoteParams"))]
    pub quote_params: crate::types::TokenParams,
    #[cfg_attr(feature = "serde", serde(rename = "quoteLotSize"))]
    pub quote_lot_size: u64,
    #[cfg_attr(feature = "serde", serde(rename = "tickSizeInQuoteAtomsPerBaseUnit"))]
    pub tick_size_in_quote_atoms_per_base_unit: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub authority: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "feeRecipient"))]
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fee_recipient: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "marketSequenceNumber"))]
    pub market_sequence_number: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub successor: Pubkey,
    #[cfg_attr(feature = "serde", serde(rename = "rawBaseUnitsPerBaseUnit"))]
    pub raw_base_units_per_base_unit: u32,
    #[cfg_attr(feature = "serde", serde(rename = "padding1"))]
    pub padding_1: u32,
    #[cfg_attr(feature = "serde", serde(rename = "padding2"))]
    pub padding_2: [u64; 32],
}
impl Default for MarketHeader {
    fn default() -> Self {
        Self {
            discriminant_value: Default::default(),
            status: Default::default(),
            market_size_params: Default::default(),
            base_params: Default::default(),
            base_lot_size: Default::default(),
            quote_params: Default::default(),
            quote_lot_size: Default::default(),
            tick_size_in_quote_atoms_per_base_unit: Default::default(),
            authority: Default::default(),
            fee_recipient: Default::default(),
            market_sequence_number: Default::default(),
            successor: Default::default(),
            raw_base_units_per_base_unit: Default::default(),
            padding_1: Default::default(),
            padding_2: Default::default(),
        }
    }
}
impl MarketHeader {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
