//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Type: InitializeMarketInstruction (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_MARKET_INSTRUCTION_TYPE_DISCM: u8 = 0u8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeMarketInstruction {
    ///In the matching engine, all prices and balances are integers.
    ///This only works if the smallest representable quantity of the coin
    ///is at least a few orders of magnitude larger than the smallest representable
    ///quantity of the price currency. The internal representation also relies on
    ///on the assumption that every order will have a (quantity x price) value that
    ///fits into a u64.
    ///If these assumptions are problematic, rejigger the lot sizes.
    pub coin_lot_size: u64,
    pub pc_lot_size: u64,
    pub fee_rate_bps: u16,
    pub vault_signer_nonce: u64,
    pub pc_dust_threshold: u64,
}
impl Default for InitializeMarketInstruction {
    fn default() -> Self {
        Self {
            coin_lot_size: Default::default(),
            pc_lot_size: Default::default(),
            fee_rate_bps: Default::default(),
            vault_signer_nonce: Default::default(),
            pc_dust_threshold: Default::default(),
        }
    }
}
impl InitializeMarketInstruction {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
