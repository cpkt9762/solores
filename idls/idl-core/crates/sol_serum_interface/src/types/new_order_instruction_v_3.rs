//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Type: NewOrderInstructionV3 (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const NEW_ORDER_INSTRUCTION_V3_TYPE_DISCM: u8 = 4u8;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NewOrderInstructionV3 {
    pub side: crate::types::Side,
    pub limit_price: u64,
    pub max_coin_qty: u64,
    pub max_native_pc_qty_including_fees: u64,
    pub self_trade_behavior: crate::types::SelfTradeBehavior,
    pub order_type: crate::types::OrderType,
    pub client_order_id: u64,
    pub limit: u16,
}
impl Default for NewOrderInstructionV3 {
    fn default() -> Self {
        Self {
            side: Default::default(),
            limit_price: Default::default(),
            max_coin_qty: Default::default(),
            max_native_pc_qty_including_fees: Default::default(),
            self_trade_behavior: Default::default(),
            order_type: Default::default(),
            client_order_id: Default::default(),
            limit: Default::default(),
        }
    }
}
impl NewOrderInstructionV3 {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
