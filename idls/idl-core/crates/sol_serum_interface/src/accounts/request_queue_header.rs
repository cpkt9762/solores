//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Account: RequestQueueHeader (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RequestQueueHeader {
    ///Initialized, RequestQueue
    pub account_flags: u64,
    pub head: u64,
    pub count: u64,
    pub next_seq_num: u64,
}
impl Default for RequestQueueHeader {
    fn default() -> Self {
        Self {
            account_flags: Default::default(),
            head: Default::default(),
            count: Default::default(),
            next_seq_num: Default::default(),
        }
    }
}
impl RequestQueueHeader {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 32usize;
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::PACKED_LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Account data length mismatch. Expected: {}, got: {}",
                    Self::PACKED_LEN,
                    data.len()
                ),
            ));
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
