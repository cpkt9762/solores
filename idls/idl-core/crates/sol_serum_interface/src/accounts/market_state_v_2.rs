//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Account: MarketStateV2 (NonAnchor)
#[cfg(feature = "serde")]
use serde_big_array::BigArray;
///Serum market state with additional authorities
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
///Serum market state with additional authorities
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MarketStateV2 {
    ///Account flags - Initialized, Market
    pub account_flags: u64,
    ///Market's own address
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub own_address: Pubkey,
    ///Nonce for vault signer PDA
    pub vault_signer_nonce: u64,
    ///Base token mint address
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub coin_mint: Pubkey,
    ///Quote token mint address (price currency)
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pc_mint: Pubkey,
    ///Base token vault account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub coin_vault: Pubkey,
    ///Total base token deposits
    pub coin_deposits_total: u64,
    ///Accrued base token fees
    pub coin_fees_accrued: u64,
    ///Quote token vault account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pc_vault: Pubkey,
    ///Total quote token deposits
    pub pc_deposits_total: u64,
    ///Accrued quote token fees
    pub pc_fees_accrued: u64,
    ///Minimum quote token amount for orders
    pub pc_dust_threshold: u64,
    ///Request queue account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub req_q: Pubkey,
    ///Event queue account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub event_q: Pubkey,
    ///Bids orderbook account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub bids: Pubkey,
    ///Asks orderbook account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub asks: Pubkey,
    ///Base token lot size for orders
    pub coin_lot_size: u64,
    ///Quote token lot size for orders
    pub pc_lot_size: u64,
    ///Fee rate in basis points
    pub fee_rate_bps: u64,
    ///Accrued referrer rebates
    pub referrer_rebates_accrued: u64,
    ///Authority for open orders accounts
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub open_orders_authority: Pubkey,
    ///Authority to prune market orders
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub prune_authority: Pubkey,
    ///Authority to consume events
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub consume_events_authority: Pubkey,
    ///Unused bytes for future upgrades
    #[cfg_attr(feature = "serde", serde(with = "BigArray"))]
    pub padding: [u8; 992],
}
impl Default for MarketStateV2 {
    fn default() -> Self {
        Self {
            account_flags: Default::default(),
            own_address: Default::default(),
            vault_signer_nonce: Default::default(),
            coin_mint: Default::default(),
            pc_mint: Default::default(),
            coin_vault: Default::default(),
            coin_deposits_total: Default::default(),
            coin_fees_accrued: Default::default(),
            pc_vault: Default::default(),
            pc_deposits_total: Default::default(),
            pc_fees_accrued: Default::default(),
            pc_dust_threshold: Default::default(),
            req_q: Default::default(),
            event_q: Default::default(),
            bids: Default::default(),
            asks: Default::default(),
            coin_lot_size: Default::default(),
            pc_lot_size: Default::default(),
            fee_rate_bps: Default::default(),
            referrer_rebates_accrued: Default::default(),
            open_orders_authority: Default::default(),
            prune_authority: Default::default(),
            consume_events_authority: Default::default(),
            padding: [0u8; 992],
        }
    }
}
impl MarketStateV2 {
    pub const MEM_LEN: usize = std::mem::size_of::<Self>();
    pub const PACKED_LEN: usize = 1464usize;
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::PACKED_LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Account data length mismatch. Expected: {}, got: {}",
                    Self::PACKED_LEN,
                    data.len()
                ),
            ));
        }
        borsh::BorshDeserialize::deserialize(&mut &data[..])
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
