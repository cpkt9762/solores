//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//! Account parser for non-Anchor contracts using length-based identification
use crate::accounts::*;
/// Program account types for non-Anchor contracts
#[derive(Clone, Debug, PartialEq)]
pub enum SerumAccount {
    MarketStateV2(MarketStateV2),
    MarketState(MarketState),
    OpenOrders(OpenOrders),
    RequestQueueHeader(RequestQueueHeader),
    Request(Request),
    EventQueueHeader(EventQueueHeader),
    Event(Event),
}
/// Try to parse account data into one of the known account types using length-based identification
pub fn try_unpack_account(data: &[u8]) -> Result<SerumAccount, std::io::Error> {
    if data.is_empty() {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Empty account data",
        ));
    }
    if let Ok(account) = MarketStateV2::from_bytes(data) {
        return Ok(SerumAccount::MarketStateV2(account));
    }
    if let Ok(account) = MarketState::from_bytes(data) {
        return Ok(SerumAccount::MarketState(account));
    }
    if let Ok(account) = OpenOrders::from_bytes(data) {
        return Ok(SerumAccount::OpenOrders(account));
    }
    if let Ok(account) = RequestQueueHeader::from_bytes(data) {
        return Ok(SerumAccount::RequestQueueHeader(account));
    }
    if let Ok(account) = Request::from_bytes(data) {
        return Ok(SerumAccount::Request(account));
    }
    if let Ok(account) = EventQueueHeader::from_bytes(data) {
        return Ok(SerumAccount::EventQueueHeader(account));
    }
    if let Ok(account) = Event::from_bytes(data) {
        return Ok(SerumAccount::Event(account));
    }
    Err(std::io::Error::new(
        std::io::ErrorKind::InvalidData,
        format!(
            "Unable to parse account data into any known account type (data length: {})",
            data.len()
        ),
    ))
}
