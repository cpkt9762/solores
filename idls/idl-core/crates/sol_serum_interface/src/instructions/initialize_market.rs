//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: InitializeMarket (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const INITIALIZE_MARKET_IX_DISCM: u8 = 0u8;
pub const INITIALIZE_MARKET_IX_ACCOUNTS_LEN: usize = 13;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeMarketIxData {
    pub discriminator: u8,
    pub args: crate::types::InitializeMarketInstruction,
}
impl Default for InitializeMarketIxData {
    fn default() -> Self {
        Self {
            discriminator: INITIALIZE_MARKET_IX_DISCM,
            args: Default::default(),
        }
    }
}
impl InitializeMarketIxData {
    pub fn new(args: crate::types::InitializeMarketInstruction) -> Self {
        Self {
            discriminator: Self::discriminator(),
            args,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        INITIALIZE_MARKET_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!(
                    "\"{}\":{}",
                    "args",
                    serde_json::to_string(&self.args).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitializeMarketKeys {
    pub market_to_initialize: Pubkey,
    pub request_queue: Pubkey,
    pub event_queue: Pubkey,
    pub bids: Pubkey,
    pub asks: Pubkey,
    pub spl_token_account_coin: Pubkey,
    pub spl_token_account_price: Pubkey,
    pub coin_currency_mint: Pubkey,
    pub price_currency_mint: Pubkey,
    pub rent_sysvar: Pubkey,
    pub open_orders_market_authority: Pubkey,
    pub prune_authority: Pubkey,
    pub crank_authority: Pubkey,
}
impl Default for InitializeMarketKeys {
    fn default() -> Self {
        Self {
            market_to_initialize: Pubkey::default(),
            request_queue: Pubkey::default(),
            event_queue: Pubkey::default(),
            bids: Pubkey::default(),
            asks: Pubkey::default(),
            spl_token_account_coin: Pubkey::default(),
            spl_token_account_price: Pubkey::default(),
            coin_currency_mint: Pubkey::default(),
            price_currency_mint: Pubkey::default(),
            rent_sysvar: Pubkey::default(),
            open_orders_market_authority: Pubkey::default(),
            prune_authority: Pubkey::default(),
            crank_authority: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for InitializeMarketKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            market_to_initialize: pubkeys[0],
            request_queue: pubkeys[1],
            event_queue: pubkeys[2],
            bids: pubkeys[3],
            asks: pubkeys[4],
            spl_token_account_coin: pubkeys[5],
            spl_token_account_price: pubkeys[6],
            coin_currency_mint: pubkeys[7],
            price_currency_mint: pubkeys[8],
            rent_sysvar: pubkeys[9],
            open_orders_market_authority: pubkeys[10],
            prune_authority: pubkeys[11],
            crank_authority: pubkeys[12],
        }
    }
}
impl InitializeMarketKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.market_to_initialize,
            self.request_queue,
            self.event_queue,
            self.bids,
            self.asks,
            self.spl_token_account_coin,
            self.spl_token_account_price,
            self.coin_currency_mint,
            self.price_currency_mint,
            self.rent_sysvar,
            self.open_orders_market_authority,
            self.prune_authority,
            self.crank_authority,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "marketToInitialize",
                    serde_json::to_string(&self.market_to_initialize)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "requestQueue",
                    serde_json::to_string(&self.request_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "eventQueue",
                    serde_json::to_string(&self.event_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "bids",
                    serde_json::to_string(&self.bids).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "asks",
                    serde_json::to_string(&self.asks).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "splTokenAccountCoin",
                    serde_json::to_string(&self.spl_token_account_coin)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "splTokenAccountPrice",
                    serde_json::to_string(&self.spl_token_account_price)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "coinCurrencyMint",
                    serde_json::to_string(&self.coin_currency_mint)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "priceCurrencyMint",
                    serde_json::to_string(&self.price_currency_mint)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "rentSysvar",
                    serde_json::to_string(&self.rent_sysvar)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "openOrdersMarketAuthority",
                    serde_json::to_string(&self.open_orders_market_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "pruneAuthority",
                    serde_json::to_string(&self.prune_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "crankAuthority",
                    serde_json::to_string(&self.crank_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<InitializeMarketKeys>
    for [solana_instruction::AccountMeta; INITIALIZE_MARKET_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializeMarketKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.market_to_initialize, false),
            solana_instruction::AccountMeta::new(keys.request_queue, false),
            solana_instruction::AccountMeta::new(keys.event_queue, false),
            solana_instruction::AccountMeta::new(keys.bids, false),
            solana_instruction::AccountMeta::new(keys.asks, false),
            solana_instruction::AccountMeta::new(keys.spl_token_account_coin, false),
            solana_instruction::AccountMeta::new(keys.spl_token_account_price, false),
            solana_instruction::AccountMeta::new(keys.coin_currency_mint, false),
            solana_instruction::AccountMeta::new(keys.price_currency_mint, false),
            solana_instruction::AccountMeta::new(keys.rent_sysvar, false),
            solana_instruction::AccountMeta::new(keys.open_orders_market_authority, false),
            solana_instruction::AccountMeta::new(keys.prune_authority, false),
            solana_instruction::AccountMeta::new(keys.crank_authority, false),
        ]
    }
}
pub fn initialize_market_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeMarketKeys,
    args: InitializeMarketIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; INITIALIZE_MARKET_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn initialize_market_ix(
    keys: InitializeMarketKeys,
    args: InitializeMarketIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    initialize_market_ix_with_program_id(crate::ID, keys, args)
}
