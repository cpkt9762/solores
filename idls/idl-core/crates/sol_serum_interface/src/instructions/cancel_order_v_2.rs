//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: CancelOrderV2 (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const CANCEL_ORDER_V2_IX_DISCM: u8 = 11u8;
pub const CANCEL_ORDER_V2_IX_ACCOUNTS_LEN: usize = 6;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CancelOrderV2IxData {
    pub discriminator: u8,
    pub args: crate::types::CancelOrderInstructionV2,
}
impl Default for CancelOrderV2IxData {
    fn default() -> Self {
        Self {
            discriminator: CANCEL_ORDER_V2_IX_DISCM,
            args: Default::default(),
        }
    }
}
impl CancelOrderV2IxData {
    pub fn new(args: crate::types::CancelOrderInstructionV2) -> Self {
        Self {
            discriminator: Self::discriminator(),
            args,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        CANCEL_ORDER_V2_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!(
                    "\"{}\":{}",
                    "args",
                    serde_json::to_string(&self.args).unwrap_or_else(|_| "null".to_string())
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CancelOrderV2Keys {
    pub market: Pubkey,
    pub bids: Pubkey,
    pub asks: Pubkey,
    pub open_orders: Pubkey,
    pub owner: Pubkey,
    pub event_queue: Pubkey,
}
impl Default for CancelOrderV2Keys {
    fn default() -> Self {
        Self {
            market: Pubkey::default(),
            bids: Pubkey::default(),
            asks: Pubkey::default(),
            open_orders: Pubkey::default(),
            owner: Pubkey::default(),
            event_queue: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for CancelOrderV2Keys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            market: pubkeys[0],
            bids: pubkeys[1],
            asks: pubkeys[2],
            open_orders: pubkeys[3],
            owner: pubkeys[4],
            event_queue: pubkeys[5],
        }
    }
}
impl CancelOrderV2Keys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.market,
            self.bids,
            self.asks,
            self.open_orders,
            self.owner,
            self.event_queue,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "market",
                    serde_json::to_string(&self.market).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "bids",
                    serde_json::to_string(&self.bids).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "asks",
                    serde_json::to_string(&self.asks).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "openOrders",
                    serde_json::to_string(&self.open_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "owner",
                    serde_json::to_string(&self.owner).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "eventQueue",
                    serde_json::to_string(&self.event_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<CancelOrderV2Keys>
    for [solana_instruction::AccountMeta; CANCEL_ORDER_V2_IX_ACCOUNTS_LEN]
{
    fn from(keys: CancelOrderV2Keys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.market, false),
            solana_instruction::AccountMeta::new(keys.bids, false),
            solana_instruction::AccountMeta::new(keys.asks, false),
            solana_instruction::AccountMeta::new(keys.open_orders, false),
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.event_queue, false),
        ]
    }
}
pub fn cancel_order_v_2_ix_with_program_id(
    program_id: Pubkey,
    keys: CancelOrderV2Keys,
    args: CancelOrderV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; CANCEL_ORDER_V2_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn cancel_order_v_2_ix(
    keys: CancelOrderV2Keys,
    args: CancelOrderV2IxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    cancel_order_v_2_ix_with_program_id(crate::ID, keys, args)
}
