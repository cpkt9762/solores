//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: SweepFees (NonAnchor)
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const SWEEP_FEES_IX_DISCM: u8 = 8u8;
pub const SWEEP_FEES_IX_ACCOUNTS_LEN: usize = 6;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SweepFeesIxData {
    pub discriminator: u8,
}
impl Default for SweepFeesIxData {
    fn default() -> Self {
        Self {
            discriminator: SWEEP_FEES_IX_DISCM,
        }
    }
}
impl SweepFeesIxData {
    pub fn new() -> Self {
        Self {
            discriminator: Self::discriminator(),
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        SWEEP_FEES_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [format!("\"discriminator\":{}", self.discriminator)].join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SweepFeesKeys {
    pub market: Pubkey,
    pub pc_vault: Pubkey,
    pub fee_sweeping_authority: Pubkey,
    pub fee_receivable: Pubkey,
    pub vault_signer: Pubkey,
    pub spl_token_program: Pubkey,
}
impl Default for SweepFeesKeys {
    fn default() -> Self {
        Self {
            market: Pubkey::default(),
            pc_vault: Pubkey::default(),
            fee_sweeping_authority: Pubkey::default(),
            fee_receivable: Pubkey::default(),
            vault_signer: Pubkey::default(),
            spl_token_program: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for SweepFeesKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            market: pubkeys[0],
            pc_vault: pubkeys[1],
            fee_sweeping_authority: pubkeys[2],
            fee_receivable: pubkeys[3],
            vault_signer: pubkeys[4],
            spl_token_program: pubkeys[5],
        }
    }
}
impl SweepFeesKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.market,
            self.pc_vault,
            self.fee_sweeping_authority,
            self.fee_receivable,
            self.vault_signer,
            self.spl_token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "market",
                    serde_json::to_string(&self.market).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "pcVault",
                    serde_json::to_string(&self.pc_vault)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "feeSweepingAuthority",
                    serde_json::to_string(&self.fee_sweeping_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "feeReceivable",
                    serde_json::to_string(&self.fee_receivable)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "vaultSigner",
                    serde_json::to_string(&self.vault_signer)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "splTokenProgram",
                    serde_json::to_string(&self.spl_token_program)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<SweepFeesKeys> for [solana_instruction::AccountMeta; SWEEP_FEES_IX_ACCOUNTS_LEN] {
    fn from(keys: SweepFeesKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.market, false),
            solana_instruction::AccountMeta::new(keys.pc_vault, false),
            solana_instruction::AccountMeta::new(keys.fee_sweeping_authority, false),
            solana_instruction::AccountMeta::new(keys.fee_receivable, false),
            solana_instruction::AccountMeta::new(keys.vault_signer, false),
            solana_instruction::AccountMeta::new(keys.spl_token_program, false),
        ]
    }
}
pub fn sweep_fees_ix_with_program_id(
    program_id: Pubkey,
    keys: SweepFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; SWEEP_FEES_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: SweepFeesIxData::default().try_to_vec()?,
    })
}
pub fn sweep_fees_ix(
    keys: SweepFeesKeys,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    sweep_fees_ix_with_program_id(crate::ID, keys)
}
