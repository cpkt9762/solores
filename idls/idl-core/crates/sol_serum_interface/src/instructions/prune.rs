//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: Prune (NonAnchor)
///Removes all orders for a given open orders account from the orderbook.
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const PRUNE_IX_DISCM: u8 = 16u8;
pub const PRUNE_IX_ACCOUNTS_LEN: usize = 7;
///Removes all orders for a given open orders account from the orderbook.
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PruneIxData {
    pub discriminator: u8,
    pub limit: u16,
}
impl Default for PruneIxData {
    fn default() -> Self {
        Self {
            discriminator: PRUNE_IX_DISCM,
            limit: Default::default(),
        }
    }
}
impl PruneIxData {
    pub fn new(limit: u16) -> Self {
        Self {
            discriminator: Self::discriminator(),
            limit,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> u8 {
        PRUNE_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"discriminator\":{}", self.discriminator),
                format!("\"{}\":{}", "limit", self.limit)
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct PruneKeys {
    pub market: Pubkey,
    pub bids: Pubkey,
    pub asks: Pubkey,
    pub prune_authority: Pubkey,
    pub open_orders: Pubkey,
    pub owner: Pubkey,
    pub event_queue: Pubkey,
}
impl Default for PruneKeys {
    fn default() -> Self {
        Self {
            market: Pubkey::default(),
            bids: Pubkey::default(),
            asks: Pubkey::default(),
            prune_authority: Pubkey::default(),
            open_orders: Pubkey::default(),
            owner: Pubkey::default(),
            event_queue: Pubkey::default(),
        }
    }
}
impl From<&[Pubkey]> for PruneKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            market: pubkeys[0],
            bids: pubkeys[1],
            asks: pubkeys[2],
            prune_authority: pubkeys[3],
            open_orders: pubkeys[4],
            owner: pubkeys[5],
            event_queue: pubkeys[6],
        }
    }
}
impl PruneKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.market,
            self.bids,
            self.asks,
            self.prune_authority,
            self.open_orders,
            self.owner,
            self.event_queue,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"{}\":{}",
                    "market",
                    serde_json::to_string(&self.market).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "bids",
                    serde_json::to_string(&self.bids).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "asks",
                    serde_json::to_string(&self.asks).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "pruneAuthority",
                    serde_json::to_string(&self.prune_authority)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "openOrders",
                    serde_json::to_string(&self.open_orders)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "owner",
                    serde_json::to_string(&self.owner).unwrap_or_else(|_| "\"null\"".to_string())
                ),
                format!(
                    "\"{}\":{}",
                    "eventQueue",
                    serde_json::to_string(&self.event_queue)
                        .unwrap_or_else(|_| "\"null\"".to_string())
                )
            ]
            .join(",")
        )
    }
}
impl From<PruneKeys> for [solana_instruction::AccountMeta; PRUNE_IX_ACCOUNTS_LEN] {
    fn from(keys: PruneKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.market, false),
            solana_instruction::AccountMeta::new(keys.bids, false),
            solana_instruction::AccountMeta::new(keys.asks, false),
            solana_instruction::AccountMeta::new(keys.prune_authority, false),
            solana_instruction::AccountMeta::new(keys.open_orders, false),
            solana_instruction::AccountMeta::new(keys.owner, false),
            solana_instruction::AccountMeta::new(keys.event_queue, false),
        ]
    }
}
pub fn prune_ix_with_program_id(
    program_id: Pubkey,
    keys: PruneKeys,
    args: PruneIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; PRUNE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn prune_ix(
    keys: PruneKeys,
    args: PruneIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    prune_ix_with_program_id(crate::ID, keys, args)
}
