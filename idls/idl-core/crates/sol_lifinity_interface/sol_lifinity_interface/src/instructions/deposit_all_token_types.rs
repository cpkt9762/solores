//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!Instruction: depositAllTokenTypes
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
pub const DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM: [u8; 8] =
    [134u8, 56u8, 88u8, 249u8, 143u8, 66u8, 72u8, 232u8];
pub const DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN: usize = 10;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositAllTokenTypesIxData {
    pub discriminator: [u8; 8],
    #[cfg_attr(feature = "serde", serde(rename = "poolTokenAmount"))]
    pub pool_token_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "maximumTokenAAmount"))]
    pub maximum_token_a_amount: u64,
    #[cfg_attr(feature = "serde", serde(rename = "maximumTokenBAmount"))]
    pub maximum_token_b_amount: u64,
}
impl Default for DepositAllTokenTypesIxData {
    fn default() -> Self {
        Self {
            discriminator: DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM,
            pool_token_amount: Default::default(),
            maximum_token_a_amount: Default::default(),
            maximum_token_b_amount: Default::default(),
        }
    }
}
impl DepositAllTokenTypesIxData {
    pub fn new(
        pool_token_amount: u64,
        maximum_token_a_amount: u64,
        maximum_token_b_amount: u64,
    ) -> Self {
        Self {
            discriminator: Self::discriminator(),
            pool_token_amount,
            maximum_token_a_amount,
            maximum_token_b_amount,
        }
    }
    pub fn from_bytes(buf: &[u8]) -> std::io::Result<Self> {
        borsh::BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn discriminator() -> [u8; 8] {
        DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!(
                    "\"discriminator\":[{}]",
                    self.discriminator
                        .iter()
                        .map(|x| x.to_string())
                        .collect::<Vec<_>>()
                        .join(",")
                ),
                format!("\"{}\":{}", "pool_token_amount", self.pool_token_amount),
                format!(
                    "\"{}\":{}",
                    "maximum_token_a_amount", self.maximum_token_a_amount
                ),
                format!(
                    "\"{}\":{}",
                    "maximum_token_b_amount", self.maximum_token_b_amount
                )
            ]
            .join(",")
        )
    }
}
#[derive(Copy, Clone, Debug, PartialEq, Default)]
pub struct DepositAllTokenTypesKeys {
    pub amm: Pubkey,
    pub authority: Pubkey,
    pub user_transfer_authority_info: Pubkey,
    pub source_a_info: Pubkey,
    pub source_b_info: Pubkey,
    pub token_a: Pubkey,
    pub token_b: Pubkey,
    pub pool_mint: Pubkey,
    pub destination: Pubkey,
    pub token_program: Pubkey,
}
impl From<&[Pubkey]> for DepositAllTokenTypesKeys {
    fn from(pubkeys: &[Pubkey]) -> Self {
        Self {
            amm: pubkeys[0],
            authority: pubkeys[1],
            user_transfer_authority_info: pubkeys[2],
            source_a_info: pubkeys[3],
            source_b_info: pubkeys[4],
            token_a: pubkeys[5],
            token_b: pubkeys[6],
            pool_mint: pubkeys[7],
            destination: pubkeys[8],
            token_program: pubkeys[9],
        }
    }
}
impl DepositAllTokenTypesKeys {
    /// Convert Keys to Vec<Pubkey>
    pub fn to_vec(&self) -> Vec<Pubkey> {
        vec![
            self.amm,
            self.authority,
            self.user_transfer_authority_info,
            self.source_a_info,
            self.source_b_info,
            self.token_a,
            self.token_b,
            self.pool_mint,
            self.destination,
            self.token_program,
        ]
    }
    /// Manual JSON serialization
    #[cfg(feature = "serde")]
    pub fn to_json(&self) -> String {
        format!(
            "{{{}}}",
            [
                format!("\"{}\":\"{}\"", "amm", self.amm),
                format!("\"{}\":\"{}\"", "authority", self.authority),
                format!(
                    "\"{}\":\"{}\"",
                    "userTransferAuthorityInfo", self.user_transfer_authority_info
                ),
                format!("\"{}\":\"{}\"", "sourceAInfo", self.source_a_info),
                format!("\"{}\":\"{}\"", "sourceBInfo", self.source_b_info),
                format!("\"{}\":\"{}\"", "tokenA", self.token_a),
                format!("\"{}\":\"{}\"", "tokenB", self.token_b),
                format!("\"{}\":\"{}\"", "poolMint", self.pool_mint),
                format!("\"{}\":\"{}\"", "destination", self.destination),
                format!("\"{}\":\"{}\"", "tokenProgram", self.token_program)
            ]
            .join(",")
        )
    }
}
impl From<DepositAllTokenTypesKeys>
    for [solana_instruction::AccountMeta; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN]
{
    fn from(keys: DepositAllTokenTypesKeys) -> Self {
        [
            solana_instruction::AccountMeta::new(keys.amm, false),
            solana_instruction::AccountMeta::new(keys.authority, false),
            solana_instruction::AccountMeta::new(keys.user_transfer_authority_info, false),
            solana_instruction::AccountMeta::new(keys.source_a_info, false),
            solana_instruction::AccountMeta::new(keys.source_b_info, false),
            solana_instruction::AccountMeta::new(keys.token_a, false),
            solana_instruction::AccountMeta::new(keys.token_b, false),
            solana_instruction::AccountMeta::new(keys.pool_mint, false),
            solana_instruction::AccountMeta::new(keys.destination, false),
            solana_instruction::AccountMeta::new(keys.token_program, false),
        ]
    }
}
pub fn deposit_all_token_types_ix_with_program_id(
    program_id: Pubkey,
    keys: DepositAllTokenTypesKeys,
    args: DepositAllTokenTypesIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    let metas: [solana_instruction::AccountMeta; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN] =
        keys.into();
    Ok(solana_instruction::Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: args.try_to_vec()?,
    })
}
pub fn deposit_all_token_types_ix(
    keys: DepositAllTokenTypesKeys,
    args: DepositAllTokenTypesIxData,
) -> Result<solana_instruction::Instruction, std::io::Error> {
    deposit_all_token_types_ix_with_program_id(crate::ID, keys, args)
}
