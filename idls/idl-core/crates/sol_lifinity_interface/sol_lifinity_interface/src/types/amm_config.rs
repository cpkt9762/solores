//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-16
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

//!AmmConfig
#[allow(unused_imports)]
use solana_pubkey::Pubkey;
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AmmConfig {
    #[cfg_attr(feature = "serde", serde(rename = "lastPrice"))]
    pub last_price: u64,
    #[cfg_attr(feature = "serde", serde(rename = "lastBalancedPrice"))]
    pub last_balanced_price: u64,
    #[cfg_attr(feature = "serde", serde(rename = "configDenominator"))]
    pub config_denominator: u64,
    #[cfg_attr(feature = "serde", serde(rename = "volumeX"))]
    pub volume_x: u64,
    #[cfg_attr(feature = "serde", serde(rename = "volumeY"))]
    pub volume_y: u64,
    #[cfg_attr(feature = "serde", serde(rename = "volumeXInY"))]
    pub volume_x_in_y: u64,
    #[cfg_attr(feature = "serde", serde(rename = "depositCap"))]
    pub deposit_cap: u64,
    #[cfg_attr(feature = "serde", serde(rename = "regressionTarget"))]
    pub regression_target: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oracleType"))]
    pub oracle_type: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oracleStatus"))]
    pub oracle_status: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oracleMainSlotLimit"))]
    pub oracle_main_slot_limit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oracleSubConfidenceLimit"))]
    pub oracle_sub_confidence_limit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oracleSubSlotLimit"))]
    pub oracle_sub_slot_limit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oraclePcConfidenceLimit"))]
    pub oracle_pc_confidence_limit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oraclePcSlotLimit"))]
    pub oracle_pc_slot_limit: u64,
    #[cfg_attr(feature = "serde", serde(rename = "stdSpread"))]
    pub std_spread: u64,
    #[cfg_attr(feature = "serde", serde(rename = "stdSpreadBuffer"))]
    pub std_spread_buffer: u64,
    #[cfg_attr(feature = "serde", serde(rename = "spreadCoefficient"))]
    pub spread_coefficient: u64,
    #[cfg_attr(feature = "serde", serde(rename = "priceBufferCoin"))]
    pub price_buffer_coin: i64,
    #[cfg_attr(feature = "serde", serde(rename = "priceBufferPc"))]
    pub price_buffer_pc: i64,
    #[cfg_attr(feature = "serde", serde(rename = "rebalanceRatio"))]
    pub rebalance_ratio: u64,
    #[cfg_attr(feature = "serde", serde(rename = "feeTrade"))]
    pub fee_trade: u64,
    #[cfg_attr(feature = "serde", serde(rename = "feePlatform"))]
    pub fee_platform: u64,
    #[cfg_attr(feature = "serde", serde(rename = "oracleMainSlotBuffer"))]
    pub oracle_main_slot_buffer: u64,
    #[cfg_attr(feature = "serde", serde(rename = "configTemp4"))]
    pub config_temp_4: u64,
    #[cfg_attr(feature = "serde", serde(rename = "configTemp5"))]
    pub config_temp_5: u64,
    #[cfg_attr(feature = "serde", serde(rename = "configTemp6"))]
    pub config_temp_6: u64,
    #[cfg_attr(feature = "serde", serde(rename = "configTemp7"))]
    pub config_temp_7: u64,
    #[cfg_attr(feature = "serde", serde(rename = "configTemp8"))]
    pub config_temp_8: u64,
}
impl Default for AmmConfig {
    fn default() -> Self {
        Self {
            last_price: Default::default(),
            last_balanced_price: Default::default(),
            config_denominator: Default::default(),
            volume_x: Default::default(),
            volume_y: Default::default(),
            volume_x_in_y: Default::default(),
            deposit_cap: Default::default(),
            regression_target: Default::default(),
            oracle_type: Default::default(),
            oracle_status: Default::default(),
            oracle_main_slot_limit: Default::default(),
            oracle_sub_confidence_limit: Default::default(),
            oracle_sub_slot_limit: Default::default(),
            oracle_pc_confidence_limit: Default::default(),
            oracle_pc_slot_limit: Default::default(),
            std_spread: Default::default(),
            std_spread_buffer: Default::default(),
            spread_coefficient: Default::default(),
            price_buffer_coin: Default::default(),
            price_buffer_pc: Default::default(),
            rebalance_ratio: Default::default(),
            fee_trade: Default::default(),
            fee_platform: Default::default(),
            oracle_main_slot_buffer: Default::default(),
            config_temp_4: Default::default(),
            config_temp_5: Default::default(),
            config_temp_6: Default::default(),
            config_temp_7: Default::default(),
            config_temp_8: Default::default(),
        }
    }
}
impl AmmConfig {
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        borsh::from_slice(data)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }
}
