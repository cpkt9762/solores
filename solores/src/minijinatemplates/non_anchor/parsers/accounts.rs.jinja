//! {{ crate_name }} Account Parsers
//! Non-Anchor style account parsing
{% if accounts %}
/// Parse account from account data
pub fn parse_account(account_data: &[u8]) -> std::result::Result<std::boxed::Box<dyn std::fmt::Debug>, std::boxed::Box<dyn std::error::Error>> {
    if account_data.is_empty() {
        return Err("Empty account data".into());
    }
    {% for account in accounts %}
    // Try to parse as {{ account.name }}
    if let std::result::Result::Ok(account) = {{ account.name }}::from_bytes(account_data) {
        return std::result::Result::Ok(std::boxed::Box::new(account));
    }
    {% endfor %}
    Err("Failed to parse account data".into())
}
{% endif %}