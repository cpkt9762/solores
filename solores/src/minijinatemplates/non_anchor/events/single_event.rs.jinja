//! {{ event.name }} Event
//! Single event structure for {{ crate_name }}

{% if event.docs %}
{{ event.docs | multiline_docs }}
{% endif %}
#[derive(borsh::BorshDeserialize, borsh::BorshSerialize, Clone, Debug, PartialEq)]
{% if has_serde %}
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
{% endif %}
pub struct {{ event.name }} {
    {% for field in event.fields %}
    {% if field.docs %}
    {{ field.docs | multiline_docs }}
    {% endif %}
    {% if field.is_pubkey %}
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
    {% elif field.is_big_array %}
    #[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
    {% endif %}
    pub {{ field.name | rust_field }}: {{ field.rust_type }},
    {% endfor %}
}

impl {{ event.name }} {
    /// Create new event
    pub fn new(
        {% for field in event.fields %}
        {{ field.name | rust_field }}: {{ field.rust_type }},
        {% endfor %}
    ) -> Self {
        Self {
            {% for field in event.fields %}
            {{ field.name | rust_field }},
            {% endfor %}
        }
    }
    
    /// Deserialize from bytes
    pub fn from_bytes(data: &[u8]) -> std::result::Result<Self, std::io::Error> {
        borsh::BorshDeserialize::deserialize(&mut data)
    }
    
    /// Serialize to bytes
    pub fn try_to_vec(&self) -> std::result::Result<std::vec::Vec<u8>, std::io::Error> {
        borsh::to_vec(self)
    }
}