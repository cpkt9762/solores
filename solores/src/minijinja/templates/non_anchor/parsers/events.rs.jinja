{#
AUTO-GENERATED CODE - DO NOT MODIFY
This code is automatically generated by Solores
To make changes, update the Solores generation tool, not this file directly
Generated by Solores - https://github.com/yourorg/solores
#}
//! AUTO-GENERATED CODE - DO NOT MODIFY
//! This file is generated by Solores. To make changes, update the generation tool.
//! Generated by Solores - https://github.com/yourorg/solores

//! {{ crate_name }} Event Parsers
//! Non-Anchor style event parsing (length-based matching)

{% if events and events|length > 0 %}
use crate::errors::EventParseError;

/// Program event types
#[derive(Clone, Debug)]
{% if has_serde %}
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
{% endif %}
pub enum ProgramEvent {
    {% for event in events %}
    {% if event.docs %}
    {{ event.docs | multiline_docs }}
    {% endif %}
    {{ event.name }}(crate::events::{{ event.name }}),
    {% endfor %}
}

impl ProgramEvent {
    /// Parse event from raw bytes using length-based matching
    pub fn try_parse(data: &[u8]) -> std::result::Result<Self, EventParseError> {
        if data.is_empty() {
            return Err(EventParseError::DataTooShort { expected: 1, found: 0 });
        }
        
        // NonAnchor events typically don't have discriminators
        // Try to parse as each event type based on data length or structure
        {% for event in events %}
        match crate::events::{{ event.name }}::from_bytes(data) {
            Ok(event) => return Ok(ProgramEvent::{{ event.name }}(event)),
            Err(EventParseError::DataTooShort { .. }) => {
                // Data too short, try next event type
            }
            Err(EventParseError::IncorrectLength { .. }) => {
                // Incorrect length, try next event type
            }
            Err(e) => {
                // Other errors should not continue to next event type
                return Err(e);
            }
        }
        {% endfor %}
        
        Err(EventParseError::DeserializationFailed(
            "Unable to parse data into any known event type".to_string()
        ))
    }

    /// Get parser identifier (static method)
    pub fn id() -> std::borrow::Cow<'static, str> {
        "{{ crate_name }}::EventParser".into()
    }
}



{% else %}
//! No events defined in this program
use crate::errors::EventParseError;

/// Program event types (empty)
#[derive(Clone, Debug)]
pub enum ProgramEvent {
    // No events defined in this program
}

impl ProgramEvent {
    /// Parse event from raw bytes (always fails for empty events)
    pub fn try_parse(_data: &[u8]) -> std::result::Result<Self, EventParseError> {
        Err(EventParseError::DeserializationFailed(
            "{{ crate_name }}::No events defined in this program".to_string()
        ))
    }

    /// Get parser identifier (static method)
    pub fn id() -> std::borrow::Cow<'static, str> {
        "{{ crate_name }}::EventParser".into()
    }
}

{% endif %}