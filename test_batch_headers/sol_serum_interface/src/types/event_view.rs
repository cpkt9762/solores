//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::FeeTier;
use crate::Side;
use borsh::{BorshDeserialize, BorshSerialize};
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub enum EventView {
    Fill {
        side: Side,
        maker: bool,
        native_qty_paid: u64,
        native_qty_received: u64,
        native_fee_or_rebate: u64,
        order_id: u128,
        owner: [u64; 4],
        owner_slot: u8,
        fee_tier: FeeTier,
        client_order_id: Option<u64>,
    },
    Out {
        side: Side,
        release_funds: bool,
        native_qty_unlocked: u64,
        native_qty_still_locked: u64,
        order_id: u128,
        owner: [u64; 4],
        owner_slot: u8,
        client_order_id: Option<u64>,
    },
}
impl Default for EventView {
    fn default() -> Self {
        Self::Fill {
            side: Default::default(),
            maker: Default::default(),
            native_qty_paid: Default::default(),
            native_qty_received: Default::default(),
            native_fee_or_rebate: Default::default(),
            order_id: Default::default(),
            owner: Default::default(),
            owner_slot: Default::default(),
            fee_tier: Default::default(),
            client_order_id: Default::default(),
        }
    }
}
