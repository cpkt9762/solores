//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const SETTLE_FUNDS_IX_ACCOUNTS_LEN: usize = 10;
///Accounts struct for the SettleFunds instruction
#[derive(Copy, Clone, Debug)]
pub struct SettleFundsAccounts<'me, 'info> {
    ///market
    pub market: &'me AccountInfo<'info>,
    ///OpenOrders
    pub open_orders: &'me AccountInfo<'info>,
    ///the OpenOrders owner
    pub owner: &'me AccountInfo<'info>,
    ///coin vault
    pub coin_vault: &'me AccountInfo<'info>,
    ///pc vault
    pub pc_vault: &'me AccountInfo<'info>,
    ///coin wallet
    pub coin_wallet: &'me AccountInfo<'info>,
    ///pc wallet
    pub pc_wallet: &'me AccountInfo<'info>,
    ///vault signer
    pub vault_signer: &'me AccountInfo<'info>,
    ///spl token program
    pub spl_token_program: &'me AccountInfo<'info>,
    ///(optional) referrer pc wallet
    pub referrer_pc_wallet: &'me AccountInfo<'info>,
}
///Public keys struct for the SettleFunds instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SettleFundsKeys {
    ///market
    pub market: Pubkey,
    ///OpenOrders
    pub open_orders: Pubkey,
    ///the OpenOrders owner
    pub owner: Pubkey,
    ///coin vault
    pub coin_vault: Pubkey,
    ///pc vault
    pub pc_vault: Pubkey,
    ///coin wallet
    pub coin_wallet: Pubkey,
    ///pc wallet
    pub pc_wallet: Pubkey,
    ///vault signer
    pub vault_signer: Pubkey,
    ///spl token program
    pub spl_token_program: Pubkey,
    ///(optional) referrer pc wallet
    pub referrer_pc_wallet: Pubkey,
}
impl From<SettleFundsAccounts<'_, '_>> for SettleFundsKeys {
    fn from(accounts: SettleFundsAccounts) -> Self {
        Self {
            market: *accounts.market.key,
            open_orders: *accounts.open_orders.key,
            owner: *accounts.owner.key,
            coin_vault: *accounts.coin_vault.key,
            pc_vault: *accounts.pc_vault.key,
            coin_wallet: *accounts.coin_wallet.key,
            pc_wallet: *accounts.pc_wallet.key,
            vault_signer: *accounts.vault_signer.key,
            spl_token_program: *accounts.spl_token_program.key,
            referrer_pc_wallet: *accounts.referrer_pc_wallet.key,
        }
    }
}
impl From<SettleFundsKeys> for [AccountMeta; SETTLE_FUNDS_IX_ACCOUNTS_LEN] {
    fn from(keys: SettleFundsKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.coin_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pc_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.coin_wallet,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pc_wallet,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vault_signer,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.spl_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.referrer_pc_wallet,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; SETTLE_FUNDS_IX_ACCOUNTS_LEN]> for SettleFundsKeys {
    fn from(pubkeys: [Pubkey; SETTLE_FUNDS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: pubkeys[0],
            open_orders: pubkeys[1],
            owner: pubkeys[2],
            coin_vault: pubkeys[3],
            pc_vault: pubkeys[4],
            coin_wallet: pubkeys[5],
            pc_wallet: pubkeys[6],
            vault_signer: pubkeys[7],
            spl_token_program: pubkeys[8],
            referrer_pc_wallet: pubkeys[9],
        }
    }
}
impl From<&[String]> for SettleFundsKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            market: pubkeys[0].parse().unwrap(),
            open_orders: pubkeys[1].parse().unwrap(),
            owner: pubkeys[2].parse().unwrap(),
            coin_vault: pubkeys[3].parse().unwrap(),
            pc_vault: pubkeys[4].parse().unwrap(),
            coin_wallet: pubkeys[5].parse().unwrap(),
            pc_wallet: pubkeys[6].parse().unwrap(),
            vault_signer: pubkeys[7].parse().unwrap(),
            spl_token_program: pubkeys[8].parse().unwrap(),
            referrer_pc_wallet: pubkeys[9].parse().unwrap(),
        }
    }
}
impl<'info> From<SettleFundsAccounts<'_, 'info>>
    for [AccountInfo<'info>; SETTLE_FUNDS_IX_ACCOUNTS_LEN]
{
    fn from(accounts: SettleFundsAccounts<'_, 'info>) -> Self {
        [
            accounts.market.clone(),
            accounts.open_orders.clone(),
            accounts.owner.clone(),
            accounts.coin_vault.clone(),
            accounts.pc_vault.clone(),
            accounts.coin_wallet.clone(),
            accounts.pc_wallet.clone(),
            accounts.vault_signer.clone(),
            accounts.spl_token_program.clone(),
            accounts.referrer_pc_wallet.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SETTLE_FUNDS_IX_ACCOUNTS_LEN]>
    for SettleFundsAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; SETTLE_FUNDS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: &arr[0],
            open_orders: &arr[1],
            owner: &arr[2],
            coin_vault: &arr[3],
            pc_vault: &arr[4],
            coin_wallet: &arr[5],
            pc_wallet: &arr[6],
            vault_signer: &arr[7],
            spl_token_program: &arr[8],
            referrer_pc_wallet: &arr[9],
        }
    }
}
pub const SETTLE_FUNDS_IX_DISCM: u8 = 5u8;
#[derive(Clone, Debug, PartialEq)]
pub struct SettleFundsIxData;
impl SettleFundsIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != SETTLE_FUNDS_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    SETTLE_FUNDS_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[SETTLE_FUNDS_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn settle_funds_ix_with_program_id(
    program_id: Pubkey,
    keys: SettleFundsKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SETTLE_FUNDS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: SettleFundsIxData.try_to_vec()?,
    })
}
pub fn settle_funds_ix(keys: SettleFundsKeys) -> std::io::Result<Instruction> {
    settle_funds_ix_with_program_id(crate::ID, keys)
}
pub fn settle_funds_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SettleFundsAccounts<'_, '_>,
) -> ProgramResult {
    let keys: SettleFundsKeys = accounts.into();
    let ix = settle_funds_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn settle_funds_invoke(accounts: SettleFundsAccounts<'_, '_>) -> ProgramResult {
    settle_funds_invoke_with_program_id(crate::ID, accounts)
}
pub fn settle_funds_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SettleFundsAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SettleFundsKeys = accounts.into();
    let ix = settle_funds_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn settle_funds_invoke_signed(
    accounts: SettleFundsAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    settle_funds_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn settle_funds_verify_account_keys(
    accounts: SettleFundsAccounts<'_, '_>,
    keys: SettleFundsKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.market.key, keys.market),
        (*accounts.open_orders.key, keys.open_orders),
        (*accounts.owner.key, keys.owner),
        (*accounts.coin_vault.key, keys.coin_vault),
        (*accounts.pc_vault.key, keys.pc_vault),
        (*accounts.coin_wallet.key, keys.coin_wallet),
        (*accounts.pc_wallet.key, keys.pc_wallet),
        (*accounts.vault_signer.key, keys.vault_signer),
        (*accounts.spl_token_program.key, keys.spl_token_program),
        (*accounts.referrer_pc_wallet.key, keys.referrer_pc_wallet),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
