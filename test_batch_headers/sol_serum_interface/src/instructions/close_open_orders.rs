//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN: usize = 4;
///Accounts struct for the CloseOpenOrders instruction
#[derive(Copy, Clone, Debug)]
pub struct CloseOpenOrdersAccounts<'me, 'info> {
    ///OpenOrders
    pub open_orders: &'me AccountInfo<'info>,
    ///the OpenOrders owner
    pub owner: &'me AccountInfo<'info>,
    ///the destination account to send rent exemption SOL to
    pub destination: &'me AccountInfo<'info>,
    ///market
    pub market: &'me AccountInfo<'info>,
}
///Public keys struct for the CloseOpenOrders instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CloseOpenOrdersKeys {
    ///OpenOrders
    pub open_orders: Pubkey,
    ///the OpenOrders owner
    pub owner: Pubkey,
    ///the destination account to send rent exemption SOL to
    pub destination: Pubkey,
    ///market
    pub market: Pubkey,
}
impl From<CloseOpenOrdersAccounts<'_, '_>> for CloseOpenOrdersKeys {
    fn from(accounts: CloseOpenOrdersAccounts) -> Self {
        Self {
            open_orders: *accounts.open_orders.key,
            owner: *accounts.owner.key,
            destination: *accounts.destination.key,
            market: *accounts.market.key,
        }
    }
}
impl From<CloseOpenOrdersKeys> for [AccountMeta; CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN] {
    fn from(keys: CloseOpenOrdersKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.destination,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN]> for CloseOpenOrdersKeys {
    fn from(pubkeys: [Pubkey; CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            open_orders: pubkeys[0],
            owner: pubkeys[1],
            destination: pubkeys[2],
            market: pubkeys[3],
        }
    }
}
impl From<&[String]> for CloseOpenOrdersKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            open_orders: pubkeys[0].parse().unwrap(),
            owner: pubkeys[1].parse().unwrap(),
            destination: pubkeys[2].parse().unwrap(),
            market: pubkeys[3].parse().unwrap(),
        }
    }
}
impl<'info> From<CloseOpenOrdersAccounts<'_, 'info>>
    for [AccountInfo<'info>; CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CloseOpenOrdersAccounts<'_, 'info>) -> Self {
        [
            accounts.open_orders.clone(),
            accounts.owner.clone(),
            accounts.destination.clone(),
            accounts.market.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN]>
    for CloseOpenOrdersAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            open_orders: &arr[0],
            owner: &arr[1],
            destination: &arr[2],
            market: &arr[3],
        }
    }
}
pub const CLOSE_OPEN_ORDERS_IX_DISCM: u8 = 14u8;
#[derive(Clone, Debug, PartialEq)]
pub struct CloseOpenOrdersIxData;
impl CloseOpenOrdersIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != CLOSE_OPEN_ORDERS_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    CLOSE_OPEN_ORDERS_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[CLOSE_OPEN_ORDERS_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn close_open_orders_ix_with_program_id(
    program_id: Pubkey,
    keys: CloseOpenOrdersKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CLOSE_OPEN_ORDERS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CloseOpenOrdersIxData.try_to_vec()?,
    })
}
pub fn close_open_orders_ix(keys: CloseOpenOrdersKeys) -> std::io::Result<Instruction> {
    close_open_orders_ix_with_program_id(crate::ID, keys)
}
pub fn close_open_orders_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CloseOpenOrdersAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CloseOpenOrdersKeys = accounts.into();
    let ix = close_open_orders_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn close_open_orders_invoke(accounts: CloseOpenOrdersAccounts<'_, '_>) -> ProgramResult {
    close_open_orders_invoke_with_program_id(crate::ID, accounts)
}
pub fn close_open_orders_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CloseOpenOrdersAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CloseOpenOrdersKeys = accounts.into();
    let ix = close_open_orders_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn close_open_orders_invoke_signed(
    accounts: CloseOpenOrdersAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    close_open_orders_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn close_open_orders_verify_account_keys(
    accounts: CloseOpenOrdersAccounts<'_, '_>,
    keys: CloseOpenOrdersKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.open_orders.key, keys.open_orders),
        (*accounts.owner.key, keys.owner),
        (*accounts.destination.key, keys.destination),
        (*accounts.market.key, keys.market),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
