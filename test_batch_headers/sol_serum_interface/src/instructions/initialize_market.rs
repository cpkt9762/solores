//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const INITIALIZE_MARKET_IX_ACCOUNTS_LEN: usize = 13;
///Accounts struct for the InitializeMarket instruction
#[derive(Copy, Clone, Debug)]
pub struct InitializeMarketAccounts<'me, 'info> {
    ///the market to initialize
    pub market_to_initialize: &'me AccountInfo<'info>,
    ///zeroed out request queue
    pub request_queue: &'me AccountInfo<'info>,
    ///zeroed out event queue
    pub event_queue: &'me AccountInfo<'info>,
    ///zeroed out bids
    pub bids: &'me AccountInfo<'info>,
    ///zeroed out asks
    pub asks: &'me AccountInfo<'info>,
    ///spl-token account for the coin currency
    pub spl_token_account_coin: &'me AccountInfo<'info>,
    ///spl-token account for the price currency
    pub spl_token_account_price: &'me AccountInfo<'info>,
    ///coin currency Mint
    pub coin_currency_mint: &'me AccountInfo<'info>,
    ///price currency Mint
    pub price_currency_mint: &'me AccountInfo<'info>,
    ///the rent sysvar
    pub rent_sysvar: &'me AccountInfo<'info>,
    ///open orders market authority (optional)
    pub open_orders_market_authority: &'me AccountInfo<'info>,
    ///prune authority (optional, requires open orders market authority)
    pub prune_authority: &'me AccountInfo<'info>,
    ///crank authority (optional, requires prune authority)
    pub crank_authority: &'me AccountInfo<'info>,
}
///Public keys struct for the InitializeMarket instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitializeMarketKeys {
    ///the market to initialize
    pub market_to_initialize: Pubkey,
    ///zeroed out request queue
    pub request_queue: Pubkey,
    ///zeroed out event queue
    pub event_queue: Pubkey,
    ///zeroed out bids
    pub bids: Pubkey,
    ///zeroed out asks
    pub asks: Pubkey,
    ///spl-token account for the coin currency
    pub spl_token_account_coin: Pubkey,
    ///spl-token account for the price currency
    pub spl_token_account_price: Pubkey,
    ///coin currency Mint
    pub coin_currency_mint: Pubkey,
    ///price currency Mint
    pub price_currency_mint: Pubkey,
    ///the rent sysvar
    pub rent_sysvar: Pubkey,
    ///open orders market authority (optional)
    pub open_orders_market_authority: Pubkey,
    ///prune authority (optional, requires open orders market authority)
    pub prune_authority: Pubkey,
    ///crank authority (optional, requires prune authority)
    pub crank_authority: Pubkey,
}
impl From<InitializeMarketAccounts<'_, '_>> for InitializeMarketKeys {
    fn from(accounts: InitializeMarketAccounts) -> Self {
        Self {
            market_to_initialize: *accounts.market_to_initialize.key,
            request_queue: *accounts.request_queue.key,
            event_queue: *accounts.event_queue.key,
            bids: *accounts.bids.key,
            asks: *accounts.asks.key,
            spl_token_account_coin: *accounts.spl_token_account_coin.key,
            spl_token_account_price: *accounts.spl_token_account_price.key,
            coin_currency_mint: *accounts.coin_currency_mint.key,
            price_currency_mint: *accounts.price_currency_mint.key,
            rent_sysvar: *accounts.rent_sysvar.key,
            open_orders_market_authority: *accounts.open_orders_market_authority.key,
            prune_authority: *accounts.prune_authority.key,
            crank_authority: *accounts.crank_authority.key,
        }
    }
}
impl From<InitializeMarketKeys> for [AccountMeta; INITIALIZE_MARKET_IX_ACCOUNTS_LEN] {
    fn from(keys: InitializeMarketKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.market_to_initialize,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.request_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.event_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bids,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.asks,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.spl_token_account_coin,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.spl_token_account_price,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.coin_currency_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.price_currency_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent_sysvar,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.open_orders_market_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.prune_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.crank_authority,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; INITIALIZE_MARKET_IX_ACCOUNTS_LEN]> for InitializeMarketKeys {
    fn from(pubkeys: [Pubkey; INITIALIZE_MARKET_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market_to_initialize: pubkeys[0],
            request_queue: pubkeys[1],
            event_queue: pubkeys[2],
            bids: pubkeys[3],
            asks: pubkeys[4],
            spl_token_account_coin: pubkeys[5],
            spl_token_account_price: pubkeys[6],
            coin_currency_mint: pubkeys[7],
            price_currency_mint: pubkeys[8],
            rent_sysvar: pubkeys[9],
            open_orders_market_authority: pubkeys[10],
            prune_authority: pubkeys[11],
            crank_authority: pubkeys[12],
        }
    }
}
impl From<&[String]> for InitializeMarketKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            market_to_initialize: pubkeys[0].parse().unwrap(),
            request_queue: pubkeys[1].parse().unwrap(),
            event_queue: pubkeys[2].parse().unwrap(),
            bids: pubkeys[3].parse().unwrap(),
            asks: pubkeys[4].parse().unwrap(),
            spl_token_account_coin: pubkeys[5].parse().unwrap(),
            spl_token_account_price: pubkeys[6].parse().unwrap(),
            coin_currency_mint: pubkeys[7].parse().unwrap(),
            price_currency_mint: pubkeys[8].parse().unwrap(),
            rent_sysvar: pubkeys[9].parse().unwrap(),
            open_orders_market_authority: pubkeys[10].parse().unwrap(),
            prune_authority: pubkeys[11].parse().unwrap(),
            crank_authority: pubkeys[12].parse().unwrap(),
        }
    }
}
impl<'info> From<InitializeMarketAccounts<'_, 'info>>
    for [AccountInfo<'info>; INITIALIZE_MARKET_IX_ACCOUNTS_LEN]
{
    fn from(accounts: InitializeMarketAccounts<'_, 'info>) -> Self {
        [
            accounts.market_to_initialize.clone(),
            accounts.request_queue.clone(),
            accounts.event_queue.clone(),
            accounts.bids.clone(),
            accounts.asks.clone(),
            accounts.spl_token_account_coin.clone(),
            accounts.spl_token_account_price.clone(),
            accounts.coin_currency_mint.clone(),
            accounts.price_currency_mint.clone(),
            accounts.rent_sysvar.clone(),
            accounts.open_orders_market_authority.clone(),
            accounts.prune_authority.clone(),
            accounts.crank_authority.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; INITIALIZE_MARKET_IX_ACCOUNTS_LEN]>
    for InitializeMarketAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; INITIALIZE_MARKET_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market_to_initialize: &arr[0],
            request_queue: &arr[1],
            event_queue: &arr[2],
            bids: &arr[3],
            asks: &arr[4],
            spl_token_account_coin: &arr[5],
            spl_token_account_price: &arr[6],
            coin_currency_mint: &arr[7],
            price_currency_mint: &arr[8],
            rent_sysvar: &arr[9],
            open_orders_market_authority: &arr[10],
            prune_authority: &arr[11],
            crank_authority: &arr[12],
        }
    }
}
pub const INITIALIZE_MARKET_IX_DISCM: u8 = 0u8;
///Arguments for the InitializeMarket instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeMarketIxArgs {
    pub discriminator: u8,
    pub args: InitializeMarketInstruction,
}
impl Default for InitializeMarketIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 0u8,
            args: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct InitializeMarketIxData(pub InitializeMarketIxArgs);
impl From<InitializeMarketIxArgs> for InitializeMarketIxData {
    fn from(args: InitializeMarketIxArgs) -> Self {
        Self(args)
    }
}
impl InitializeMarketIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != INITIALIZE_MARKET_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    INITIALIZE_MARKET_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(InitializeMarketIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[INITIALIZE_MARKET_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initialize_market_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeMarketKeys,
    args: InitializeMarketIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIALIZE_MARKET_IX_ACCOUNTS_LEN] = keys.into();
    let data: InitializeMarketIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn initialize_market_ix(
    keys: InitializeMarketKeys,
    args: InitializeMarketIxArgs,
) -> std::io::Result<Instruction> {
    initialize_market_ix_with_program_id(crate::ID, keys, args)
}
pub fn initialize_market_invoke_with_program_id(
    program_id: Pubkey,
    accounts: InitializeMarketAccounts<'_, '_>,
    args: InitializeMarketIxArgs,
) -> ProgramResult {
    let keys: InitializeMarketKeys = accounts.into();
    let ix = initialize_market_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn initialize_market_invoke(
    accounts: InitializeMarketAccounts<'_, '_>,
    args: InitializeMarketIxArgs,
) -> ProgramResult {
    initialize_market_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn initialize_market_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: InitializeMarketAccounts<'_, '_>,
    args: InitializeMarketIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: InitializeMarketKeys = accounts.into();
    let ix = initialize_market_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initialize_market_invoke_signed(
    accounts: InitializeMarketAccounts<'_, '_>,
    args: InitializeMarketIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initialize_market_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn initialize_market_verify_account_keys(
    accounts: InitializeMarketAccounts<'_, '_>,
    keys: InitializeMarketKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (
            *accounts.market_to_initialize.key,
            keys.market_to_initialize,
        ),
        (*accounts.request_queue.key, keys.request_queue),
        (*accounts.event_queue.key, keys.event_queue),
        (*accounts.bids.key, keys.bids),
        (*accounts.asks.key, keys.asks),
        (
            *accounts.spl_token_account_coin.key,
            keys.spl_token_account_coin,
        ),
        (
            *accounts.spl_token_account_price.key,
            keys.spl_token_account_price,
        ),
        (*accounts.coin_currency_mint.key, keys.coin_currency_mint),
        (*accounts.price_currency_mint.key, keys.price_currency_mint),
        (*accounts.rent_sysvar.key, keys.rent_sysvar),
        (
            *accounts.open_orders_market_authority.key,
            keys.open_orders_market_authority,
        ),
        (*accounts.prune_authority.key, keys.prune_authority),
        (*accounts.crank_authority.key, keys.crank_authority),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl InitializeMarketIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<InitializeMarketIxArgs> for SerumProgramIx {
    fn from(args: InitializeMarketIxArgs) -> Self {
        Self::InitializeMarket(args)
    }
}
