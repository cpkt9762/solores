//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const NEW_ORDER_IX_ACCOUNTS_LEN: usize = 10;
///Accounts struct for the NewOrder instruction
#[derive(Copy, Clone, Debug)]
pub struct NewOrderAccounts<'me, 'info> {
    ///the market
    pub market: &'me AccountInfo<'info>,
    ///the OpenOrders account to use
    pub open_orders: &'me AccountInfo<'info>,
    ///the request queue
    pub request_queue: &'me AccountInfo<'info>,
    ///the (coin or price currency) account paying for the order
    pub order_payer: &'me AccountInfo<'info>,
    ///owner of the OpenOrders account
    pub owner: &'me AccountInfo<'info>,
    ///coin vault
    pub coin_vault: &'me AccountInfo<'info>,
    ///pc vault
    pub pc_vault: &'me AccountInfo<'info>,
    ///spl token program
    pub spl_token_program: &'me AccountInfo<'info>,
    ///the rent sysvar
    pub rent_sysvar: &'me AccountInfo<'info>,
    ///(optional) the (M)SRM account used for fee discounts
    pub fee_discounts: &'me AccountInfo<'info>,
}
///Public keys struct for the NewOrder instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct NewOrderKeys {
    ///the market
    pub market: Pubkey,
    ///the OpenOrders account to use
    pub open_orders: Pubkey,
    ///the request queue
    pub request_queue: Pubkey,
    ///the (coin or price currency) account paying for the order
    pub order_payer: Pubkey,
    ///owner of the OpenOrders account
    pub owner: Pubkey,
    ///coin vault
    pub coin_vault: Pubkey,
    ///pc vault
    pub pc_vault: Pubkey,
    ///spl token program
    pub spl_token_program: Pubkey,
    ///the rent sysvar
    pub rent_sysvar: Pubkey,
    ///(optional) the (M)SRM account used for fee discounts
    pub fee_discounts: Pubkey,
}
impl From<NewOrderAccounts<'_, '_>> for NewOrderKeys {
    fn from(accounts: NewOrderAccounts) -> Self {
        Self {
            market: *accounts.market.key,
            open_orders: *accounts.open_orders.key,
            request_queue: *accounts.request_queue.key,
            order_payer: *accounts.order_payer.key,
            owner: *accounts.owner.key,
            coin_vault: *accounts.coin_vault.key,
            pc_vault: *accounts.pc_vault.key,
            spl_token_program: *accounts.spl_token_program.key,
            rent_sysvar: *accounts.rent_sysvar.key,
            fee_discounts: *accounts.fee_discounts.key,
        }
    }
}
impl From<NewOrderKeys> for [AccountMeta; NEW_ORDER_IX_ACCOUNTS_LEN] {
    fn from(keys: NewOrderKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.request_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.order_payer,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.coin_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pc_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.spl_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent_sysvar,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_discounts,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; NEW_ORDER_IX_ACCOUNTS_LEN]> for NewOrderKeys {
    fn from(pubkeys: [Pubkey; NEW_ORDER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: pubkeys[0],
            open_orders: pubkeys[1],
            request_queue: pubkeys[2],
            order_payer: pubkeys[3],
            owner: pubkeys[4],
            coin_vault: pubkeys[5],
            pc_vault: pubkeys[6],
            spl_token_program: pubkeys[7],
            rent_sysvar: pubkeys[8],
            fee_discounts: pubkeys[9],
        }
    }
}
impl From<&[String]> for NewOrderKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            market: pubkeys[0].parse().unwrap(),
            open_orders: pubkeys[1].parse().unwrap(),
            request_queue: pubkeys[2].parse().unwrap(),
            order_payer: pubkeys[3].parse().unwrap(),
            owner: pubkeys[4].parse().unwrap(),
            coin_vault: pubkeys[5].parse().unwrap(),
            pc_vault: pubkeys[6].parse().unwrap(),
            spl_token_program: pubkeys[7].parse().unwrap(),
            rent_sysvar: pubkeys[8].parse().unwrap(),
            fee_discounts: pubkeys[9].parse().unwrap(),
        }
    }
}
impl<'info> From<NewOrderAccounts<'_, 'info>> for [AccountInfo<'info>; NEW_ORDER_IX_ACCOUNTS_LEN] {
    fn from(accounts: NewOrderAccounts<'_, 'info>) -> Self {
        [
            accounts.market.clone(),
            accounts.open_orders.clone(),
            accounts.request_queue.clone(),
            accounts.order_payer.clone(),
            accounts.owner.clone(),
            accounts.coin_vault.clone(),
            accounts.pc_vault.clone(),
            accounts.spl_token_program.clone(),
            accounts.rent_sysvar.clone(),
            accounts.fee_discounts.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; NEW_ORDER_IX_ACCOUNTS_LEN]>
    for NewOrderAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; NEW_ORDER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: &arr[0],
            open_orders: &arr[1],
            request_queue: &arr[2],
            order_payer: &arr[3],
            owner: &arr[4],
            coin_vault: &arr[5],
            pc_vault: &arr[6],
            spl_token_program: &arr[7],
            rent_sysvar: &arr[8],
            fee_discounts: &arr[9],
        }
    }
}
pub const NEW_ORDER_IX_DISCM: u8 = 1u8;
///Arguments for the NewOrder instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NewOrderIxArgs {
    pub discriminator: u8,
    pub args: NewOrderInstructionV1,
}
impl Default for NewOrderIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 1u8,
            args: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct NewOrderIxData(pub NewOrderIxArgs);
impl From<NewOrderIxArgs> for NewOrderIxData {
    fn from(args: NewOrderIxArgs) -> Self {
        Self(args)
    }
}
impl NewOrderIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != NEW_ORDER_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    NEW_ORDER_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(NewOrderIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[NEW_ORDER_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn new_order_ix_with_program_id(
    program_id: Pubkey,
    keys: NewOrderKeys,
    args: NewOrderIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; NEW_ORDER_IX_ACCOUNTS_LEN] = keys.into();
    let data: NewOrderIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn new_order_ix(keys: NewOrderKeys, args: NewOrderIxArgs) -> std::io::Result<Instruction> {
    new_order_ix_with_program_id(crate::ID, keys, args)
}
pub fn new_order_invoke_with_program_id(
    program_id: Pubkey,
    accounts: NewOrderAccounts<'_, '_>,
    args: NewOrderIxArgs,
) -> ProgramResult {
    let keys: NewOrderKeys = accounts.into();
    let ix = new_order_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn new_order_invoke(accounts: NewOrderAccounts<'_, '_>, args: NewOrderIxArgs) -> ProgramResult {
    new_order_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn new_order_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: NewOrderAccounts<'_, '_>,
    args: NewOrderIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: NewOrderKeys = accounts.into();
    let ix = new_order_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn new_order_invoke_signed(
    accounts: NewOrderAccounts<'_, '_>,
    args: NewOrderIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    new_order_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn new_order_verify_account_keys(
    accounts: NewOrderAccounts<'_, '_>,
    keys: NewOrderKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.market.key, keys.market),
        (*accounts.open_orders.key, keys.open_orders),
        (*accounts.request_queue.key, keys.request_queue),
        (*accounts.order_payer.key, keys.order_payer),
        (*accounts.owner.key, keys.owner),
        (*accounts.coin_vault.key, keys.coin_vault),
        (*accounts.pc_vault.key, keys.pc_vault),
        (*accounts.spl_token_program.key, keys.spl_token_program),
        (*accounts.rent_sysvar.key, keys.rent_sysvar),
        (*accounts.fee_discounts.key, keys.fee_discounts),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl NewOrderIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<NewOrderIxArgs> for SerumProgramIx {
    fn from(args: NewOrderIxArgs) -> Self {
        Self::NewOrder(args)
    }
}
