//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MarketState {
    ///0
    ///Initialized, Market
    pub account_flags: u64,
    ///1
    pub own_address: [u64; 4],
    ///5
    pub vault_signer_nonce: u64,
    ///6
    pub coin_mint: [u64; 4],
    ///10
    pub pc_mint: [u64; 4],
    ///14
    pub coin_vault: [u64; 4],
    ///18
    pub coin_deposits_total: u64,
    ///19
    pub coin_fees_accrued: u64,
    ///20
    pub pc_vault: [u64; 4],
    ///24
    pub pc_deposits_total: u64,
    ///25
    pub pc_fees_accrued: u64,
    ///26
    pub pc_dust_threshold: u64,
    ///27
    pub req_q: [u64; 4],
    ///31
    pub event_q: [u64; 4],
    ///35
    pub bids: [u64; 4],
    ///39
    pub asks: [u64; 4],
    ///43
    pub coin_lot_size: u64,
    ///44
    pub pc_lot_size: u64,
    ///45
    pub fee_rate_bps: u64,
    ///46
    pub referrer_rebates_accrued: u64,
}
impl Default for MarketState {
    fn default() -> Self {
        Self {
            account_flags: Default::default(),
            own_address: [Default::default(); 4],
            vault_signer_nonce: Default::default(),
            coin_mint: [Default::default(); 4],
            pc_mint: [Default::default(); 4],
            coin_vault: [Default::default(); 4],
            coin_deposits_total: Default::default(),
            coin_fees_accrued: Default::default(),
            pc_vault: [Default::default(); 4],
            pc_deposits_total: Default::default(),
            pc_fees_accrued: Default::default(),
            pc_dust_threshold: Default::default(),
            req_q: [Default::default(); 4],
            event_q: [Default::default(); 4],
            bids: [Default::default(); 4],
            asks: [Default::default(); 4],
            coin_lot_size: Default::default(),
            pc_lot_size: Default::default(),
            fee_rate_bps: Default::default(),
            referrer_rebates_accrued: Default::default(),
        }
    }
}
impl MarketState {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
