//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OpenOrders {
    ///Initialized, OpenOrders
    pub account_flags: u64,
    pub market: [u64; 4],
    pub owner: [u64; 4],
    pub native_coin_free: u64,
    pub native_coin_total: u64,
    pub native_pc_free: u64,
    pub native_pc_total: u64,
    pub free_slot_bits: u128,
    pub is_bid_bits: u128,
    pub orders: [u128; 128],
    ///Using Option<NonZeroU64> in a pod type requires nightly
    pub client_order_ids: [u64; 128],
    pub referrer_rebates_accrued: u64,
}
impl Default for OpenOrders {
    fn default() -> Self {
        Self {
            account_flags: Default::default(),
            market: [Default::default(); 4],
            owner: [Default::default(); 4],
            native_coin_free: Default::default(),
            native_coin_total: Default::default(),
            native_pc_free: Default::default(),
            native_pc_total: Default::default(),
            free_slot_bits: Default::default(),
            is_bid_bits: Default::default(),
            orders: core::array::from_fn(|_| Default::default()),
            client_order_ids: [Default::default(); 128],
            referrer_rebates_accrued: Default::default(),
        }
    }
}
impl OpenOrders {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
