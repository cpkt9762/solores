//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CONFIG_ACCOUNT_DISCM: [u8; 8] = [155, 12, 170, 224, 30, 250, 204, 130];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Config {
    pub discriminator: [u8; 8],
    pub pool_fees: PoolFees,
    pub activation_duration: u64,
    pub vault_config_key: Pubkey,
    pub pool_creator_authority: Pubkey,
    pub activation_type: u8,
    pub partner_fee_numerator: u64,
    pub padding: [u8; 219],
}
impl Default for Config {
    fn default() -> Self {
        Self {
            discriminator: CONFIG_ACCOUNT_DISCM,
            pool_fees: Default::default(),
            activation_duration: Default::default(),
            vault_config_key: Default::default(),
            pool_creator_authority: Default::default(),
            activation_type: Default::default(),
            partner_fee_numerator: Default::default(),
            padding: [0u8; 219],
        }
    }
}
impl Config {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != CONFIG_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    CONFIG_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
