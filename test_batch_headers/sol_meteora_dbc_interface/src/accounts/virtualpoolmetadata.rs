//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const VIRTUAL_POOL_METADATA_ACCOUNT_DISCM: [u8; 8] = [217, 37, 82, 250, 43, 47, 228, 254];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct VirtualPoolMetadata {
    pub discriminator: [u8; 8],
    ///virtual pool
    pub virtual_pool: Pubkey,
    ///padding for future use
    pub padding: [u128; 6],
    ///Name of project.
    pub name: String,
    ///Website of project.
    pub website: String,
    ///Logo of project
    pub logo: String,
}
impl Default for VirtualPoolMetadata {
    fn default() -> Self {
        Self {
            discriminator: VIRTUAL_POOL_METADATA_ACCOUNT_DISCM,
            virtual_pool: Default::default(),
            padding: core::array::from_fn(|_| Default::default()),
            name: Default::default(),
            website: Default::default(),
            logo: Default::default(),
        }
    }
}
impl VirtualPoolMetadata {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != VIRTUAL_POOL_METADATA_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    VIRTUAL_POOL_METADATA_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
