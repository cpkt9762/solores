//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///migrate damm v1
pub const MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN: usize = 7;
///Accounts struct for the migration_meteora_damm_create_metadata instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrationMeteoraDammCreateMetadataAccounts<'me, 'info> {
    pub virtual_pool: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub config: &'me AccountInfo<'info>,
    pub migration_metadata: &'me AccountInfo<'info>,
    pub payer: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the migration_meteora_damm_create_metadata instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrationMeteoraDammCreateMetadataKeys {
    pub virtual_pool: Pubkey,
    ///Relations: virtual_pool
    pub config: Pubkey,
    pub migration_metadata: Pubkey,
    pub payer: Pubkey,
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<MigrationMeteoraDammCreateMetadataAccounts<'_, '_>>
    for MigrationMeteoraDammCreateMetadataKeys
{
    fn from(accounts: MigrationMeteoraDammCreateMetadataAccounts) -> Self {
        Self {
            virtual_pool: *accounts.virtual_pool.key,
            config: *accounts.config.key,
            migration_metadata: *accounts.migration_metadata.key,
            payer: *accounts.payer.key,
            system_program: *accounts.system_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<MigrationMeteoraDammCreateMetadataKeys>
    for [AccountMeta; MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigrationMeteoraDammCreateMetadataKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.virtual_pool,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.migration_metadata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN]>
    for MigrationMeteoraDammCreateMetadataKeys
{
    fn from(pubkeys: [Pubkey; MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            config: pubkeys[1],
            migration_metadata: pubkeys[2],
            payer: pubkeys[3],
            system_program: pubkeys[4],
            event_authority: pubkeys[5],
            program: pubkeys[6],
        }
    }
}
impl From<&[String]> for MigrationMeteoraDammCreateMetadataKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            virtual_pool: pubkeys[0].parse().unwrap(),
            config: pubkeys[1].parse().unwrap(),
            migration_metadata: pubkeys[2].parse().unwrap(),
            payer: pubkeys[3].parse().unwrap(),
            system_program: pubkeys[4].parse().unwrap(),
            event_authority: pubkeys[5].parse().unwrap(),
            program: pubkeys[6].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrationMeteoraDammCreateMetadataAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrationMeteoraDammCreateMetadataAccounts<'_, 'info>) -> Self {
        [
            accounts.virtual_pool.clone(),
            accounts.config.clone(),
            accounts.migration_metadata.clone(),
            accounts.payer.clone(),
            accounts.system_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info>
    From<&'me [AccountInfo<'info>; MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN]>
    for MigrationMeteoraDammCreateMetadataAccounts<'me, 'info>
{
    fn from(
        arr: &'me [AccountInfo<'info>; MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN],
    ) -> Self {
        Self {
            virtual_pool: &arr[0],
            config: &arr[1],
            migration_metadata: &arr[2],
            payer: &arr[3],
            system_program: &arr[4],
            event_authority: &arr[5],
            program: &arr[6],
        }
    }
}
pub const MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_DISCM: [u8; 8] =
    [47, 94, 126, 115, 221, 226, 194, 133];
#[derive(Clone, Debug, PartialEq)]
pub struct MigrationMeteoraDammCreateMetadataIxData;
impl MigrationMeteoraDammCreateMetadataIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migration_meteora_damm_create_metadata_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrationMeteoraDammCreateMetadataKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrationMeteoraDammCreateMetadataIxData.try_to_vec()?,
    })
}
pub fn migration_meteora_damm_create_metadata_ix(
    keys: MigrationMeteoraDammCreateMetadataKeys,
) -> std::io::Result<Instruction> {
    migration_meteora_damm_create_metadata_ix_with_program_id(crate::ID, keys)
}
pub fn migration_meteora_damm_create_metadata_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrationMeteoraDammCreateMetadataAccounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrationMeteoraDammCreateMetadataKeys = accounts.into();
    let ix = migration_meteora_damm_create_metadata_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migration_meteora_damm_create_metadata_invoke(
    accounts: MigrationMeteoraDammCreateMetadataAccounts<'_, '_>,
) -> ProgramResult {
    migration_meteora_damm_create_metadata_invoke_with_program_id(crate::ID, accounts)
}
pub fn migration_meteora_damm_create_metadata_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrationMeteoraDammCreateMetadataAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrationMeteoraDammCreateMetadataKeys = accounts.into();
    let ix = migration_meteora_damm_create_metadata_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migration_meteora_damm_create_metadata_invoke_signed(
    accounts: MigrationMeteoraDammCreateMetadataAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migration_meteora_damm_create_metadata_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migration_meteora_damm_create_metadata_verify_account_keys(
    accounts: MigrationMeteoraDammCreateMetadataAccounts<'_, '_>,
    keys: MigrationMeteoraDammCreateMetadataKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.virtual_pool.key, keys.virtual_pool),
        (*accounts.config.key, keys.config),
        (*accounts.migration_metadata.key, keys.migration_metadata),
        (*accounts.payer.key, keys.payer),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///MIGRATION_METADATA_SEED_0 seed for migration_metadata PDA: "meteora"
pub const MIGRATION_METADATA_SEED_0: &[u8] = &[109u8, 101u8, 116u8, 101u8, 111u8, 114u8, 97u8];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl MigrationMeteoraDammCreateMetadataKeys {
    ///Derive the migration_metadata PDA
    pub fn derive_migration_metadata_pda(
        program_id: &Pubkey,
        virtual_pool: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[MIGRATION_METADATA_SEED_0, virtual_pool.as_ref()],
            program_id,
        )
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
