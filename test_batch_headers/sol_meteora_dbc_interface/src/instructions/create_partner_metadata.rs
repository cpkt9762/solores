//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///PARTNER FUNCTIONS ////
pub const CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN: usize = 6;
///Accounts struct for the create_partner_metadata instruction
#[derive(Copy, Clone, Debug)]
pub struct CreatePartnerMetadataAccounts<'me, 'info> {
    ///Partner metadata
    pub partner_metadata: &'me AccountInfo<'info>,
    ///Payer of the partner metadata.
    pub payer: &'me AccountInfo<'info>,
    ///Fee claimer for partner
    pub fee_claimer: &'me AccountInfo<'info>,
    ///System program.
    pub system_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the create_partner_metadata instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreatePartnerMetadataKeys {
    ///Partner metadata
    pub partner_metadata: Pubkey,
    ///Payer of the partner metadata.
    pub payer: Pubkey,
    ///Fee claimer for partner
    pub fee_claimer: Pubkey,
    ///System program.
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<CreatePartnerMetadataAccounts<'_, '_>> for CreatePartnerMetadataKeys {
    fn from(accounts: CreatePartnerMetadataAccounts) -> Self {
        Self {
            partner_metadata: *accounts.partner_metadata.key,
            payer: *accounts.payer.key,
            fee_claimer: *accounts.fee_claimer.key,
            system_program: *accounts.system_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<CreatePartnerMetadataKeys> for [AccountMeta; CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN] {
    fn from(keys: CreatePartnerMetadataKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.partner_metadata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_claimer,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN]> for CreatePartnerMetadataKeys {
    fn from(pubkeys: [Pubkey; CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            partner_metadata: pubkeys[0],
            payer: pubkeys[1],
            fee_claimer: pubkeys[2],
            system_program: pubkeys[3],
            event_authority: pubkeys[4],
            program: pubkeys[5],
        }
    }
}
impl From<&[String]> for CreatePartnerMetadataKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            partner_metadata: pubkeys[0].parse().unwrap(),
            payer: pubkeys[1].parse().unwrap(),
            fee_claimer: pubkeys[2].parse().unwrap(),
            system_program: pubkeys[3].parse().unwrap(),
            event_authority: pubkeys[4].parse().unwrap(),
            program: pubkeys[5].parse().unwrap(),
        }
    }
}
impl<'info> From<CreatePartnerMetadataAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreatePartnerMetadataAccounts<'_, 'info>) -> Self {
        [
            accounts.partner_metadata.clone(),
            accounts.payer.clone(),
            accounts.fee_claimer.clone(),
            accounts.system_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN]>
    for CreatePartnerMetadataAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            partner_metadata: &arr[0],
            payer: &arr[1],
            fee_claimer: &arr[2],
            system_program: &arr[3],
            event_authority: &arr[4],
            program: &arr[5],
        }
    }
}
pub const CREATE_PARTNER_METADATA_IX_DISCM: [u8; 8] = [192, 168, 234, 191, 188, 226, 227, 255];
///PARTNER FUNCTIONS ////
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePartnerMetadataIxArgs {
    pub discriminator: [u8; 8],
    pub metadata: CreatePartnerMetadataParameters,
}
impl Default for CreatePartnerMetadataIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [192u8, 168u8, 234u8, 191u8, 188u8, 226u8, 227u8, 255u8],
            metadata: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CreatePartnerMetadataIxData(pub CreatePartnerMetadataIxArgs);
impl From<CreatePartnerMetadataIxArgs> for CreatePartnerMetadataIxData {
    fn from(args: CreatePartnerMetadataIxArgs) -> Self {
        Self(args)
    }
}
impl CreatePartnerMetadataIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_PARTNER_METADATA_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_PARTNER_METADATA_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(CreatePartnerMetadataIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_PARTNER_METADATA_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_partner_metadata_ix_with_program_id(
    program_id: Pubkey,
    keys: CreatePartnerMetadataKeys,
    args: CreatePartnerMetadataIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_PARTNER_METADATA_IX_ACCOUNTS_LEN] = keys.into();
    let data: CreatePartnerMetadataIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn create_partner_metadata_ix(
    keys: CreatePartnerMetadataKeys,
    args: CreatePartnerMetadataIxArgs,
) -> std::io::Result<Instruction> {
    create_partner_metadata_ix_with_program_id(crate::ID, keys, args)
}
pub fn create_partner_metadata_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreatePartnerMetadataAccounts<'_, '_>,
    args: CreatePartnerMetadataIxArgs,
) -> ProgramResult {
    let keys: CreatePartnerMetadataKeys = accounts.into();
    let ix = create_partner_metadata_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_partner_metadata_invoke(
    accounts: CreatePartnerMetadataAccounts<'_, '_>,
    args: CreatePartnerMetadataIxArgs,
) -> ProgramResult {
    create_partner_metadata_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn create_partner_metadata_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreatePartnerMetadataAccounts<'_, '_>,
    args: CreatePartnerMetadataIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreatePartnerMetadataKeys = accounts.into();
    let ix = create_partner_metadata_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_partner_metadata_invoke_signed(
    accounts: CreatePartnerMetadataAccounts<'_, '_>,
    args: CreatePartnerMetadataIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_partner_metadata_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn create_partner_metadata_verify_account_keys(
    accounts: CreatePartnerMetadataAccounts<'_, '_>,
    keys: CreatePartnerMetadataKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.partner_metadata.key, keys.partner_metadata),
        (*accounts.payer.key, keys.payer),
        (*accounts.fee_claimer.key, keys.fee_claimer),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///PARTNER_METADATA_SEED_0 seed for partner_metadata PDA: "partner_metadata"
pub const PARTNER_METADATA_SEED_0: &[u8] = &[
    112u8, 97u8, 114u8, 116u8, 110u8, 101u8, 114u8, 95u8, 109u8, 101u8, 116u8, 97u8, 100u8, 97u8,
    116u8, 97u8,
];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl CreatePartnerMetadataKeys {
    ///Derive the partner_metadata PDA
    pub fn derive_partner_metadata_pda(program_id: &Pubkey, fee_claimer: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[PARTNER_METADATA_SEED_0, fee_claimer.as_ref()], program_id)
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
impl CreatePartnerMetadataIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CreatePartnerMetadataIxArgs> for MeteoraDbcProgramIx {
    fn from(args: CreatePartnerMetadataIxArgs) -> Self {
        Self::CreatePartnerMetadata(args)
    }
}
