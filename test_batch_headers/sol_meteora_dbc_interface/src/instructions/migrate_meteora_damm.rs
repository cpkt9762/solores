//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN: usize = 31;
///Accounts struct for the migrate_meteora_damm instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrateMeteoraDammAccounts<'me, 'info> {
    ///virtual pool
    ///Relations: migration_metadata
    pub virtual_pool: &'me AccountInfo<'info>,
    pub migration_metadata: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub config: &'me AccountInfo<'info>,
    pub pool_authority: &'me AccountInfo<'info>,
    pub pool: &'me AccountInfo<'info>,
    ///pool config
    pub damm_config: &'me AccountInfo<'info>,
    pub lp_mint: &'me AccountInfo<'info>,
    pub token_a_mint: &'me AccountInfo<'info>,
    pub token_b_mint: &'me AccountInfo<'info>,
    pub a_vault: &'me AccountInfo<'info>,
    pub b_vault: &'me AccountInfo<'info>,
    pub a_token_vault: &'me AccountInfo<'info>,
    pub b_token_vault: &'me AccountInfo<'info>,
    pub a_vault_lp_mint: &'me AccountInfo<'info>,
    pub b_vault_lp_mint: &'me AccountInfo<'info>,
    pub a_vault_lp: &'me AccountInfo<'info>,
    pub b_vault_lp: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub base_vault: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub quote_vault: &'me AccountInfo<'info>,
    pub virtual_pool_lp: &'me AccountInfo<'info>,
    pub protocol_token_a_fee: &'me AccountInfo<'info>,
    pub protocol_token_b_fee: &'me AccountInfo<'info>,
    pub payer: &'me AccountInfo<'info>,
    pub rent: &'me AccountInfo<'info>,
    pub mint_metadata: &'me AccountInfo<'info>,
    pub metadata_program: &'me AccountInfo<'info>,
    pub amm_program: &'me AccountInfo<'info>,
    pub vault_program: &'me AccountInfo<'info>,
    ///token_program
    pub token_program: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
    ///System program.
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the migrate_meteora_damm instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateMeteoraDammKeys {
    ///virtual pool
    ///Relations: migration_metadata
    pub virtual_pool: Pubkey,
    pub migration_metadata: Pubkey,
    ///Relations: virtual_pool
    pub config: Pubkey,
    pub pool_authority: Pubkey,
    pub pool: Pubkey,
    ///pool config
    pub damm_config: Pubkey,
    pub lp_mint: Pubkey,
    pub token_a_mint: Pubkey,
    pub token_b_mint: Pubkey,
    pub a_vault: Pubkey,
    pub b_vault: Pubkey,
    pub a_token_vault: Pubkey,
    pub b_token_vault: Pubkey,
    pub a_vault_lp_mint: Pubkey,
    pub b_vault_lp_mint: Pubkey,
    pub a_vault_lp: Pubkey,
    pub b_vault_lp: Pubkey,
    ///Relations: virtual_pool
    pub base_vault: Pubkey,
    ///Relations: virtual_pool
    pub quote_vault: Pubkey,
    pub virtual_pool_lp: Pubkey,
    pub protocol_token_a_fee: Pubkey,
    pub protocol_token_b_fee: Pubkey,
    pub payer: Pubkey,
    pub rent: Pubkey,
    pub mint_metadata: Pubkey,
    pub metadata_program: Pubkey,
    pub amm_program: Pubkey,
    pub vault_program: Pubkey,
    ///token_program
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
    ///System program.
    pub system_program: Pubkey,
}
impl From<MigrateMeteoraDammAccounts<'_, '_>> for MigrateMeteoraDammKeys {
    fn from(accounts: MigrateMeteoraDammAccounts) -> Self {
        Self {
            virtual_pool: *accounts.virtual_pool.key,
            migration_metadata: *accounts.migration_metadata.key,
            config: *accounts.config.key,
            pool_authority: *accounts.pool_authority.key,
            pool: *accounts.pool.key,
            damm_config: *accounts.damm_config.key,
            lp_mint: *accounts.lp_mint.key,
            token_a_mint: *accounts.token_a_mint.key,
            token_b_mint: *accounts.token_b_mint.key,
            a_vault: *accounts.a_vault.key,
            b_vault: *accounts.b_vault.key,
            a_token_vault: *accounts.a_token_vault.key,
            b_token_vault: *accounts.b_token_vault.key,
            a_vault_lp_mint: *accounts.a_vault_lp_mint.key,
            b_vault_lp_mint: *accounts.b_vault_lp_mint.key,
            a_vault_lp: *accounts.a_vault_lp.key,
            b_vault_lp: *accounts.b_vault_lp.key,
            base_vault: *accounts.base_vault.key,
            quote_vault: *accounts.quote_vault.key,
            virtual_pool_lp: *accounts.virtual_pool_lp.key,
            protocol_token_a_fee: *accounts.protocol_token_a_fee.key,
            protocol_token_b_fee: *accounts.protocol_token_b_fee.key,
            payer: *accounts.payer.key,
            rent: *accounts.rent.key,
            mint_metadata: *accounts.mint_metadata.key,
            metadata_program: *accounts.metadata_program.key,
            amm_program: *accounts.amm_program.key,
            vault_program: *accounts.vault_program.key,
            token_program: *accounts.token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<MigrateMeteoraDammKeys> for [AccountMeta; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrateMeteoraDammKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.virtual_pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.migration_metadata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.damm_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_a_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_b_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.a_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.b_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.a_token_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.b_token_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.a_vault_lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.b_vault_lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.a_vault_lp,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.b_vault_lp,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.virtual_pool_lp,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.protocol_token_a_fee,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.protocol_token_b_fee,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.mint_metadata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.metadata_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN]> for MigrateMeteoraDammKeys {
    fn from(pubkeys: [Pubkey; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            migration_metadata: pubkeys[1],
            config: pubkeys[2],
            pool_authority: pubkeys[3],
            pool: pubkeys[4],
            damm_config: pubkeys[5],
            lp_mint: pubkeys[6],
            token_a_mint: pubkeys[7],
            token_b_mint: pubkeys[8],
            a_vault: pubkeys[9],
            b_vault: pubkeys[10],
            a_token_vault: pubkeys[11],
            b_token_vault: pubkeys[12],
            a_vault_lp_mint: pubkeys[13],
            b_vault_lp_mint: pubkeys[14],
            a_vault_lp: pubkeys[15],
            b_vault_lp: pubkeys[16],
            base_vault: pubkeys[17],
            quote_vault: pubkeys[18],
            virtual_pool_lp: pubkeys[19],
            protocol_token_a_fee: pubkeys[20],
            protocol_token_b_fee: pubkeys[21],
            payer: pubkeys[22],
            rent: pubkeys[23],
            mint_metadata: pubkeys[24],
            metadata_program: pubkeys[25],
            amm_program: pubkeys[26],
            vault_program: pubkeys[27],
            token_program: pubkeys[28],
            associated_token_program: pubkeys[29],
            system_program: pubkeys[30],
        }
    }
}
impl From<&[String]> for MigrateMeteoraDammKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            virtual_pool: pubkeys[0].parse().unwrap(),
            migration_metadata: pubkeys[1].parse().unwrap(),
            config: pubkeys[2].parse().unwrap(),
            pool_authority: pubkeys[3].parse().unwrap(),
            pool: pubkeys[4].parse().unwrap(),
            damm_config: pubkeys[5].parse().unwrap(),
            lp_mint: pubkeys[6].parse().unwrap(),
            token_a_mint: pubkeys[7].parse().unwrap(),
            token_b_mint: pubkeys[8].parse().unwrap(),
            a_vault: pubkeys[9].parse().unwrap(),
            b_vault: pubkeys[10].parse().unwrap(),
            a_token_vault: pubkeys[11].parse().unwrap(),
            b_token_vault: pubkeys[12].parse().unwrap(),
            a_vault_lp_mint: pubkeys[13].parse().unwrap(),
            b_vault_lp_mint: pubkeys[14].parse().unwrap(),
            a_vault_lp: pubkeys[15].parse().unwrap(),
            b_vault_lp: pubkeys[16].parse().unwrap(),
            base_vault: pubkeys[17].parse().unwrap(),
            quote_vault: pubkeys[18].parse().unwrap(),
            virtual_pool_lp: pubkeys[19].parse().unwrap(),
            protocol_token_a_fee: pubkeys[20].parse().unwrap(),
            protocol_token_b_fee: pubkeys[21].parse().unwrap(),
            payer: pubkeys[22].parse().unwrap(),
            rent: pubkeys[23].parse().unwrap(),
            mint_metadata: pubkeys[24].parse().unwrap(),
            metadata_program: pubkeys[25].parse().unwrap(),
            amm_program: pubkeys[26].parse().unwrap(),
            vault_program: pubkeys[27].parse().unwrap(),
            token_program: pubkeys[28].parse().unwrap(),
            associated_token_program: pubkeys[29].parse().unwrap(),
            system_program: pubkeys[30].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrateMeteoraDammAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrateMeteoraDammAccounts<'_, 'info>) -> Self {
        [
            accounts.virtual_pool.clone(),
            accounts.migration_metadata.clone(),
            accounts.config.clone(),
            accounts.pool_authority.clone(),
            accounts.pool.clone(),
            accounts.damm_config.clone(),
            accounts.lp_mint.clone(),
            accounts.token_a_mint.clone(),
            accounts.token_b_mint.clone(),
            accounts.a_vault.clone(),
            accounts.b_vault.clone(),
            accounts.a_token_vault.clone(),
            accounts.b_token_vault.clone(),
            accounts.a_vault_lp_mint.clone(),
            accounts.b_vault_lp_mint.clone(),
            accounts.a_vault_lp.clone(),
            accounts.b_vault_lp.clone(),
            accounts.base_vault.clone(),
            accounts.quote_vault.clone(),
            accounts.virtual_pool_lp.clone(),
            accounts.protocol_token_a_fee.clone(),
            accounts.protocol_token_b_fee.clone(),
            accounts.payer.clone(),
            accounts.rent.clone(),
            accounts.mint_metadata.clone(),
            accounts.metadata_program.clone(),
            accounts.amm_program.clone(),
            accounts.vault_program.clone(),
            accounts.token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN]>
    for MigrateMeteoraDammAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: &arr[0],
            migration_metadata: &arr[1],
            config: &arr[2],
            pool_authority: &arr[3],
            pool: &arr[4],
            damm_config: &arr[5],
            lp_mint: &arr[6],
            token_a_mint: &arr[7],
            token_b_mint: &arr[8],
            a_vault: &arr[9],
            b_vault: &arr[10],
            a_token_vault: &arr[11],
            b_token_vault: &arr[12],
            a_vault_lp_mint: &arr[13],
            b_vault_lp_mint: &arr[14],
            a_vault_lp: &arr[15],
            b_vault_lp: &arr[16],
            base_vault: &arr[17],
            quote_vault: &arr[18],
            virtual_pool_lp: &arr[19],
            protocol_token_a_fee: &arr[20],
            protocol_token_b_fee: &arr[21],
            payer: &arr[22],
            rent: &arr[23],
            mint_metadata: &arr[24],
            metadata_program: &arr[25],
            amm_program: &arr[26],
            vault_program: &arr[27],
            token_program: &arr[28],
            associated_token_program: &arr[29],
            system_program: &arr[30],
        }
    }
}
pub const MIGRATE_METEORA_DAMM_IX_DISCM: [u8; 8] = [27, 1, 48, 22, 180, 63, 118, 217];
#[derive(Clone, Debug, PartialEq)]
pub struct MigrateMeteoraDammIxData;
impl MigrateMeteoraDammIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != MIGRATE_METEORA_DAMM_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    MIGRATE_METEORA_DAMM_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&MIGRATE_METEORA_DAMM_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migrate_meteora_damm_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateMeteoraDammKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATE_METEORA_DAMM_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrateMeteoraDammIxData.try_to_vec()?,
    })
}
pub fn migrate_meteora_damm_ix(keys: MigrateMeteoraDammKeys) -> std::io::Result<Instruction> {
    migrate_meteora_damm_ix_with_program_id(crate::ID, keys)
}
pub fn migrate_meteora_damm_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrateMeteoraDammAccounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrateMeteoraDammKeys = accounts.into();
    let ix = migrate_meteora_damm_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migrate_meteora_damm_invoke(accounts: MigrateMeteoraDammAccounts<'_, '_>) -> ProgramResult {
    migrate_meteora_damm_invoke_with_program_id(crate::ID, accounts)
}
pub fn migrate_meteora_damm_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrateMeteoraDammAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrateMeteoraDammKeys = accounts.into();
    let ix = migrate_meteora_damm_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migrate_meteora_damm_invoke_signed(
    accounts: MigrateMeteoraDammAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migrate_meteora_damm_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migrate_meteora_damm_verify_account_keys(
    accounts: MigrateMeteoraDammAccounts<'_, '_>,
    keys: MigrateMeteoraDammKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.virtual_pool.key, keys.virtual_pool),
        (*accounts.migration_metadata.key, keys.migration_metadata),
        (*accounts.config.key, keys.config),
        (*accounts.pool_authority.key, keys.pool_authority),
        (*accounts.pool.key, keys.pool),
        (*accounts.damm_config.key, keys.damm_config),
        (*accounts.lp_mint.key, keys.lp_mint),
        (*accounts.token_a_mint.key, keys.token_a_mint),
        (*accounts.token_b_mint.key, keys.token_b_mint),
        (*accounts.a_vault.key, keys.a_vault),
        (*accounts.b_vault.key, keys.b_vault),
        (*accounts.a_token_vault.key, keys.a_token_vault),
        (*accounts.b_token_vault.key, keys.b_token_vault),
        (*accounts.a_vault_lp_mint.key, keys.a_vault_lp_mint),
        (*accounts.b_vault_lp_mint.key, keys.b_vault_lp_mint),
        (*accounts.a_vault_lp.key, keys.a_vault_lp),
        (*accounts.b_vault_lp.key, keys.b_vault_lp),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.virtual_pool_lp.key, keys.virtual_pool_lp),
        (
            *accounts.protocol_token_a_fee.key,
            keys.protocol_token_a_fee,
        ),
        (
            *accounts.protocol_token_b_fee.key,
            keys.protocol_token_b_fee,
        ),
        (*accounts.payer.key, keys.payer),
        (*accounts.rent.key, keys.rent),
        (*accounts.mint_metadata.key, keys.mint_metadata),
        (*accounts.metadata_program.key, keys.metadata_program),
        (*accounts.amm_program.key, keys.amm_program),
        (*accounts.vault_program.key, keys.vault_program),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///pool_authority program address
pub const POOL_AUTHORITY_ADDRESS: &str = "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM";
///amm_program program address
pub const AMM_PROGRAM_ADDRESS: &str = "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
