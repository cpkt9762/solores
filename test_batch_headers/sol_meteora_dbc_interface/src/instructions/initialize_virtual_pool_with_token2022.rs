//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN: usize = 14;
///Accounts struct for the initialize_virtual_pool_with_token2022 instruction
#[derive(Copy, Clone, Debug)]
pub struct InitializeVirtualPoolWithToken2022Accounts<'me, 'info> {
    ///Which config the pool belongs to.
    pub config: &'me AccountInfo<'info>,
    pub pool_authority: &'me AccountInfo<'info>,
    pub creator: &'me AccountInfo<'info>,
    ///Unique token mint address, initialize in contract
    pub base_mint: &'me AccountInfo<'info>,
    ///Relations: config
    pub quote_mint: &'me AccountInfo<'info>,
    ///Initialize an account to store the pool state
    pub pool: &'me AccountInfo<'info>,
    pub base_vault: &'me AccountInfo<'info>,
    ///Token quote vault for the pool
    pub quote_vault: &'me AccountInfo<'info>,
    ///Address paying to create the pool. Can be anyone
    pub payer: &'me AccountInfo<'info>,
    ///Program to create mint account and mint tokens
    pub token_quote_program: &'me AccountInfo<'info>,
    ///token program for base mint
    pub token_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the initialize_virtual_pool_with_token2022 instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitializeVirtualPoolWithToken2022Keys {
    ///Which config the pool belongs to.
    pub config: Pubkey,
    pub pool_authority: Pubkey,
    pub creator: Pubkey,
    ///Unique token mint address, initialize in contract
    pub base_mint: Pubkey,
    ///Relations: config
    pub quote_mint: Pubkey,
    ///Initialize an account to store the pool state
    pub pool: Pubkey,
    pub base_vault: Pubkey,
    ///Token quote vault for the pool
    pub quote_vault: Pubkey,
    ///Address paying to create the pool. Can be anyone
    pub payer: Pubkey,
    ///Program to create mint account and mint tokens
    pub token_quote_program: Pubkey,
    ///token program for base mint
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<InitializeVirtualPoolWithToken2022Accounts<'_, '_>>
    for InitializeVirtualPoolWithToken2022Keys
{
    fn from(accounts: InitializeVirtualPoolWithToken2022Accounts) -> Self {
        Self {
            config: *accounts.config.key,
            pool_authority: *accounts.pool_authority.key,
            creator: *accounts.creator.key,
            base_mint: *accounts.base_mint.key,
            quote_mint: *accounts.quote_mint.key,
            pool: *accounts.pool.key,
            base_vault: *accounts.base_vault.key,
            quote_vault: *accounts.quote_vault.key,
            payer: *accounts.payer.key,
            token_quote_program: *accounts.token_quote_program.key,
            token_program: *accounts.token_program.key,
            system_program: *accounts.system_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<InitializeVirtualPoolWithToken2022Keys>
    for [AccountMeta; INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializeVirtualPoolWithToken2022Keys) -> Self {
        [
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.creator,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_quote_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN]>
    for InitializeVirtualPoolWithToken2022Keys
{
    fn from(pubkeys: [Pubkey; INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            config: pubkeys[0],
            pool_authority: pubkeys[1],
            creator: pubkeys[2],
            base_mint: pubkeys[3],
            quote_mint: pubkeys[4],
            pool: pubkeys[5],
            base_vault: pubkeys[6],
            quote_vault: pubkeys[7],
            payer: pubkeys[8],
            token_quote_program: pubkeys[9],
            token_program: pubkeys[10],
            system_program: pubkeys[11],
            event_authority: pubkeys[12],
            program: pubkeys[13],
        }
    }
}
impl From<&[String]> for InitializeVirtualPoolWithToken2022Keys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            config: pubkeys[0].parse().unwrap(),
            pool_authority: pubkeys[1].parse().unwrap(),
            creator: pubkeys[2].parse().unwrap(),
            base_mint: pubkeys[3].parse().unwrap(),
            quote_mint: pubkeys[4].parse().unwrap(),
            pool: pubkeys[5].parse().unwrap(),
            base_vault: pubkeys[6].parse().unwrap(),
            quote_vault: pubkeys[7].parse().unwrap(),
            payer: pubkeys[8].parse().unwrap(),
            token_quote_program: pubkeys[9].parse().unwrap(),
            token_program: pubkeys[10].parse().unwrap(),
            system_program: pubkeys[11].parse().unwrap(),
            event_authority: pubkeys[12].parse().unwrap(),
            program: pubkeys[13].parse().unwrap(),
        }
    }
}
impl<'info> From<InitializeVirtualPoolWithToken2022Accounts<'_, 'info>>
    for [AccountInfo<'info>; INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN]
{
    fn from(accounts: InitializeVirtualPoolWithToken2022Accounts<'_, 'info>) -> Self {
        [
            accounts.config.clone(),
            accounts.pool_authority.clone(),
            accounts.creator.clone(),
            accounts.base_mint.clone(),
            accounts.quote_mint.clone(),
            accounts.pool.clone(),
            accounts.base_vault.clone(),
            accounts.quote_vault.clone(),
            accounts.payer.clone(),
            accounts.token_quote_program.clone(),
            accounts.token_program.clone(),
            accounts.system_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info>
    From<&'me [AccountInfo<'info>; INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN]>
    for InitializeVirtualPoolWithToken2022Accounts<'me, 'info>
{
    fn from(
        arr: &'me [AccountInfo<'info>; INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN],
    ) -> Self {
        Self {
            config: &arr[0],
            pool_authority: &arr[1],
            creator: &arr[2],
            base_mint: &arr[3],
            quote_mint: &arr[4],
            pool: &arr[5],
            base_vault: &arr[6],
            quote_vault: &arr[7],
            payer: &arr[8],
            token_quote_program: &arr[9],
            token_program: &arr[10],
            system_program: &arr[11],
            event_authority: &arr[12],
            program: &arr[13],
        }
    }
}
pub const INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_DISCM: [u8; 8] =
    [169, 118, 51, 78, 145, 110, 220, 155];
///Arguments for the initialize_virtual_pool_with_token2022 instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeVirtualPoolWithToken2022IxArgs {
    pub discriminator: [u8; 8],
    pub params: InitializePoolParameters,
}
impl Default for InitializeVirtualPoolWithToken2022IxArgs {
    fn default() -> Self {
        Self {
            discriminator: [169u8, 118u8, 51u8, 78u8, 145u8, 110u8, 220u8, 155u8],
            params: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct InitializeVirtualPoolWithToken2022IxData(pub InitializeVirtualPoolWithToken2022IxArgs);
impl From<InitializeVirtualPoolWithToken2022IxArgs> for InitializeVirtualPoolWithToken2022IxData {
    fn from(args: InitializeVirtualPoolWithToken2022IxArgs) -> Self {
        Self(args)
    }
}
impl InitializeVirtualPoolWithToken2022IxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(InitializeVirtualPoolWithToken2022IxArgs::deserialize(
            &mut reader,
        )?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initialize_virtual_pool_with_token2022_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeVirtualPoolWithToken2022Keys,
    args: InitializeVirtualPoolWithToken2022IxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_ACCOUNTS_LEN] = keys.into();
    let data: InitializeVirtualPoolWithToken2022IxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn initialize_virtual_pool_with_token2022_ix(
    keys: InitializeVirtualPoolWithToken2022Keys,
    args: InitializeVirtualPoolWithToken2022IxArgs,
) -> std::io::Result<Instruction> {
    initialize_virtual_pool_with_token2022_ix_with_program_id(crate::ID, keys, args)
}
pub fn initialize_virtual_pool_with_token2022_invoke_with_program_id(
    program_id: Pubkey,
    accounts: InitializeVirtualPoolWithToken2022Accounts<'_, '_>,
    args: InitializeVirtualPoolWithToken2022IxArgs,
) -> ProgramResult {
    let keys: InitializeVirtualPoolWithToken2022Keys = accounts.into();
    let ix = initialize_virtual_pool_with_token2022_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn initialize_virtual_pool_with_token2022_invoke(
    accounts: InitializeVirtualPoolWithToken2022Accounts<'_, '_>,
    args: InitializeVirtualPoolWithToken2022IxArgs,
) -> ProgramResult {
    initialize_virtual_pool_with_token2022_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn initialize_virtual_pool_with_token2022_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: InitializeVirtualPoolWithToken2022Accounts<'_, '_>,
    args: InitializeVirtualPoolWithToken2022IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: InitializeVirtualPoolWithToken2022Keys = accounts.into();
    let ix = initialize_virtual_pool_with_token2022_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initialize_virtual_pool_with_token2022_invoke_signed(
    accounts: InitializeVirtualPoolWithToken2022Accounts<'_, '_>,
    args: InitializeVirtualPoolWithToken2022IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initialize_virtual_pool_with_token2022_invoke_signed_with_program_id(
        crate::ID,
        accounts,
        args,
        seeds,
    )
}
pub fn initialize_virtual_pool_with_token2022_verify_account_keys(
    accounts: InitializeVirtualPoolWithToken2022Accounts<'_, '_>,
    keys: InitializeVirtualPoolWithToken2022Keys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.config.key, keys.config),
        (*accounts.pool_authority.key, keys.pool_authority),
        (*accounts.creator.key, keys.creator),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.pool.key, keys.pool),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.payer.key, keys.payer),
        (*accounts.token_quote_program.key, keys.token_quote_program),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///BASE_VAULT_SEED_0 seed for base_vault PDA: "token_vault"
pub const BASE_VAULT_SEED_0: &[u8] = &[
    116u8, 111u8, 107u8, 101u8, 110u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///QUOTE_VAULT_SEED_0 seed for quote_vault PDA: "token_vault"
pub const QUOTE_VAULT_SEED_0: &[u8] = &[
    116u8, 111u8, 107u8, 101u8, 110u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl InitializeVirtualPoolWithToken2022Keys {
    ///Derive the base_vault PDA
    pub fn derive_base_vault_pda(
        program_id: &Pubkey,
        base_mint: &Pubkey,
        pool: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BASE_VAULT_SEED_0, base_mint.as_ref(), pool.as_ref()],
            program_id,
        )
    }
    ///Derive the quote_vault PDA
    pub fn derive_quote_vault_pda(
        program_id: &Pubkey,
        quote_mint: &Pubkey,
        pool: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[QUOTE_VAULT_SEED_0, quote_mint.as_ref(), pool.as_ref()],
            program_id,
        )
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
///pool_authority program address
pub const POOL_AUTHORITY_ADDRESS: &str = "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
impl InitializeVirtualPoolWithToken2022IxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<InitializeVirtualPoolWithToken2022IxArgs> for MeteoraDbcProgramIx {
    fn from(args: InitializeVirtualPoolWithToken2022IxArgs) -> Self {
        Self::InitializeVirtualPoolWithToken2022(args)
    }
}
