//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN: usize = 9;
///Accounts struct for the migrate_meteora_damm_claim_lp_token instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrateMeteoraDammClaimLpTokenAccounts<'me, 'info> {
    ///Relations: migration_metadata
    pub virtual_pool: &'me AccountInfo<'info>,
    ///migration metadata
    pub migration_metadata: &'me AccountInfo<'info>,
    pub pool_authority: &'me AccountInfo<'info>,
    ///Relations: migration_metadata
    pub lp_mint: &'me AccountInfo<'info>,
    pub source_token: &'me AccountInfo<'info>,
    pub destination_token: &'me AccountInfo<'info>,
    pub owner: &'me AccountInfo<'info>,
    pub sender: &'me AccountInfo<'info>,
    ///token_program
    pub token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the migrate_meteora_damm_claim_lp_token instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateMeteoraDammClaimLpTokenKeys {
    ///Relations: migration_metadata
    pub virtual_pool: Pubkey,
    ///migration metadata
    pub migration_metadata: Pubkey,
    pub pool_authority: Pubkey,
    ///Relations: migration_metadata
    pub lp_mint: Pubkey,
    pub source_token: Pubkey,
    pub destination_token: Pubkey,
    pub owner: Pubkey,
    pub sender: Pubkey,
    ///token_program
    pub token_program: Pubkey,
}
impl From<MigrateMeteoraDammClaimLpTokenAccounts<'_, '_>> for MigrateMeteoraDammClaimLpTokenKeys {
    fn from(accounts: MigrateMeteoraDammClaimLpTokenAccounts) -> Self {
        Self {
            virtual_pool: *accounts.virtual_pool.key,
            migration_metadata: *accounts.migration_metadata.key,
            pool_authority: *accounts.pool_authority.key,
            lp_mint: *accounts.lp_mint.key,
            source_token: *accounts.source_token.key,
            destination_token: *accounts.destination_token.key,
            owner: *accounts.owner.key,
            sender: *accounts.sender.key,
            token_program: *accounts.token_program.key,
        }
    }
}
impl From<MigrateMeteoraDammClaimLpTokenKeys>
    for [AccountMeta; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN]
{
    fn from(keys: MigrateMeteoraDammClaimLpTokenKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.virtual_pool,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.migration_metadata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.lp_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.source_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.destination_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.owner,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.sender,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN]>
    for MigrateMeteoraDammClaimLpTokenKeys
{
    fn from(pubkeys: [Pubkey; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            migration_metadata: pubkeys[1],
            pool_authority: pubkeys[2],
            lp_mint: pubkeys[3],
            source_token: pubkeys[4],
            destination_token: pubkeys[5],
            owner: pubkeys[6],
            sender: pubkeys[7],
            token_program: pubkeys[8],
        }
    }
}
impl From<&[String]> for MigrateMeteoraDammClaimLpTokenKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            virtual_pool: pubkeys[0].parse().unwrap(),
            migration_metadata: pubkeys[1].parse().unwrap(),
            pool_authority: pubkeys[2].parse().unwrap(),
            lp_mint: pubkeys[3].parse().unwrap(),
            source_token: pubkeys[4].parse().unwrap(),
            destination_token: pubkeys[5].parse().unwrap(),
            owner: pubkeys[6].parse().unwrap(),
            sender: pubkeys[7].parse().unwrap(),
            token_program: pubkeys[8].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrateMeteoraDammClaimLpTokenAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrateMeteoraDammClaimLpTokenAccounts<'_, 'info>) -> Self {
        [
            accounts.virtual_pool.clone(),
            accounts.migration_metadata.clone(),
            accounts.pool_authority.clone(),
            accounts.lp_mint.clone(),
            accounts.source_token.clone(),
            accounts.destination_token.clone(),
            accounts.owner.clone(),
            accounts.sender.clone(),
            accounts.token_program.clone(),
        ]
    }
}
impl<'me, 'info>
    From<&'me [AccountInfo<'info>; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN]>
    for MigrateMeteoraDammClaimLpTokenAccounts<'me, 'info>
{
    fn from(
        arr: &'me [AccountInfo<'info>; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN],
    ) -> Self {
        Self {
            virtual_pool: &arr[0],
            migration_metadata: &arr[1],
            pool_authority: &arr[2],
            lp_mint: &arr[3],
            source_token: &arr[4],
            destination_token: &arr[5],
            owner: &arr[6],
            sender: &arr[7],
            token_program: &arr[8],
        }
    }
}
pub const MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM: [u8; 8] =
    [139, 133, 2, 30, 91, 145, 127, 154];
#[derive(Clone, Debug, PartialEq)]
pub struct MigrateMeteoraDammClaimLpTokenIxData;
impl MigrateMeteoraDammClaimLpTokenIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migrate_meteora_damm_claim_lp_token_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateMeteoraDammClaimLpTokenKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrateMeteoraDammClaimLpTokenIxData.try_to_vec()?,
    })
}
pub fn migrate_meteora_damm_claim_lp_token_ix(
    keys: MigrateMeteoraDammClaimLpTokenKeys,
) -> std::io::Result<Instruction> {
    migrate_meteora_damm_claim_lp_token_ix_with_program_id(crate::ID, keys)
}
pub fn migrate_meteora_damm_claim_lp_token_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrateMeteoraDammClaimLpTokenAccounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrateMeteoraDammClaimLpTokenKeys = accounts.into();
    let ix = migrate_meteora_damm_claim_lp_token_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migrate_meteora_damm_claim_lp_token_invoke(
    accounts: MigrateMeteoraDammClaimLpTokenAccounts<'_, '_>,
) -> ProgramResult {
    migrate_meteora_damm_claim_lp_token_invoke_with_program_id(crate::ID, accounts)
}
pub fn migrate_meteora_damm_claim_lp_token_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrateMeteoraDammClaimLpTokenAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrateMeteoraDammClaimLpTokenKeys = accounts.into();
    let ix = migrate_meteora_damm_claim_lp_token_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migrate_meteora_damm_claim_lp_token_invoke_signed(
    accounts: MigrateMeteoraDammClaimLpTokenAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migrate_meteora_damm_claim_lp_token_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migrate_meteora_damm_claim_lp_token_verify_account_keys(
    accounts: MigrateMeteoraDammClaimLpTokenAccounts<'_, '_>,
    keys: MigrateMeteoraDammClaimLpTokenKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.virtual_pool.key, keys.virtual_pool),
        (*accounts.migration_metadata.key, keys.migration_metadata),
        (*accounts.pool_authority.key, keys.pool_authority),
        (*accounts.lp_mint.key, keys.lp_mint),
        (*accounts.source_token.key, keys.source_token),
        (*accounts.destination_token.key, keys.destination_token),
        (*accounts.owner.key, keys.owner),
        (*accounts.sender.key, keys.sender),
        (*accounts.token_program.key, keys.token_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///SOURCE_TOKEN_SEED_1 seed for source_token PDA
pub const SOURCE_TOKEN_SEED_1: &[u8] = &[
    6u8, 221u8, 246u8, 225u8, 215u8, 101u8, 161u8, 147u8, 217u8, 203u8, 225u8, 70u8, 206u8, 235u8,
    121u8, 172u8, 28u8, 180u8, 133u8, 237u8, 95u8, 91u8, 55u8, 145u8, 58u8, 140u8, 245u8, 133u8,
    126u8, 255u8, 0u8, 169u8,
];
///DESTINATION_TOKEN_SEED_1 seed for destination_token PDA
pub const DESTINATION_TOKEN_SEED_1: &[u8] = &[
    6u8, 221u8, 246u8, 225u8, 215u8, 101u8, 161u8, 147u8, 217u8, 203u8, 225u8, 70u8, 206u8, 235u8,
    121u8, 172u8, 28u8, 180u8, 133u8, 237u8, 95u8, 91u8, 55u8, 145u8, 58u8, 140u8, 245u8, 133u8,
    126u8, 255u8, 0u8, 169u8,
];
impl MigrateMeteoraDammClaimLpTokenKeys {
    ///Derive the source_token PDA
    pub fn derive_source_token_pda(
        program_id: &Pubkey,
        pool_authority: &Pubkey,
        migration_metadata: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                pool_authority.as_ref(),
                SOURCE_TOKEN_SEED_1,
                migration_metadata.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the destination_token PDA
    pub fn derive_destination_token_pda(
        program_id: &Pubkey,
        owner: &Pubkey,
        migration_metadata: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                owner.as_ref(),
                DESTINATION_TOKEN_SEED_1,
                migration_metadata.as_ref(),
            ],
            program_id,
        )
    }
}
///pool_authority program address
pub const POOL_AUTHORITY_ADDRESS: &str = "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
