//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
use std::io::Read;
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod claim_creator_trading_fee;
pub use claim_creator_trading_fee::*;
pub mod claim_protocol_fee;
pub use claim_protocol_fee::*;
pub mod claim_trading_fee;
pub use claim_trading_fee::*;
pub mod close_claim_fee_operator;
pub use close_claim_fee_operator::*;
pub mod create_claim_fee_operator;
pub use create_claim_fee_operator::*;
pub mod create_config;
pub use create_config::*;
pub mod create_locker;
pub use create_locker::*;
pub mod create_partner_metadata;
pub use create_partner_metadata::*;
pub mod create_virtual_pool_metadata;
pub use create_virtual_pool_metadata::*;
pub mod creator_withdraw_surplus;
pub use creator_withdraw_surplus::*;
pub mod initialize_virtual_pool_with_spl_token;
pub use initialize_virtual_pool_with_spl_token::*;
pub mod initialize_virtual_pool_with_token2022;
pub use initialize_virtual_pool_with_token2022::*;
pub mod migrate_meteora_damm;
pub use migrate_meteora_damm::*;
pub mod migrate_meteora_damm_claim_lp_token;
pub use migrate_meteora_damm_claim_lp_token::*;
pub mod migrate_meteora_damm_lock_lp_token;
pub use migrate_meteora_damm_lock_lp_token::*;
pub mod migration_damm_v2;
pub use migration_damm_v2::*;
pub mod migration_damm_v2_create_metadata;
pub use migration_damm_v2_create_metadata::*;
pub mod migration_meteora_damm_create_metadata;
pub use migration_meteora_damm_create_metadata::*;
pub mod partner_withdraw_surplus;
pub use partner_withdraw_surplus::*;
pub mod protocol_withdraw_surplus;
pub use protocol_withdraw_surplus::*;
pub mod swap;
pub use swap::*;
pub mod transfer_pool_creator;
pub use transfer_pool_creator::*;
pub mod withdraw_leftover;
pub use withdraw_leftover::*;
pub mod withdraw_migration_fee;
pub use withdraw_migration_fee::*;
#[derive(Clone, Debug, PartialEq)]
pub enum MeteoraDbcProgramIx {
    ClaimCreatorTradingFee(ClaimCreatorTradingFeeIxArgs),
    ClaimProtocolFee,
    ClaimTradingFee(ClaimTradingFeeIxArgs),
    CloseClaimFeeOperator,
    CreateClaimFeeOperator,
    CreateConfig(CreateConfigIxArgs),
    CreateLocker,
    CreatePartnerMetadata(CreatePartnerMetadataIxArgs),
    CreateVirtualPoolMetadata(CreateVirtualPoolMetadataIxArgs),
    CreatorWithdrawSurplus,
    InitializeVirtualPoolWithSplToken(InitializeVirtualPoolWithSplTokenIxArgs),
    InitializeVirtualPoolWithToken2022(InitializeVirtualPoolWithToken2022IxArgs),
    MigrateMeteoraDamm,
    MigrateMeteoraDammClaimLpToken,
    MigrateMeteoraDammLockLpToken,
    MigrationDammV2,
    MigrationDammV2CreateMetadata,
    MigrationMeteoraDammCreateMetadata,
    PartnerWithdrawSurplus,
    ProtocolWithdrawSurplus,
    Swap(SwapIxArgs),
    TransferPoolCreator,
    WithdrawLeftover,
    WithdrawMigrationFee(WithdrawMigrationFeeIxArgs),
}
impl MeteoraDbcProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        match maybe_discm {
            CLAIM_CREATOR_TRADING_FEE_IX_DISCM => Ok(Self::ClaimCreatorTradingFee(
                ClaimCreatorTradingFeeIxArgs::deserialize(&mut reader)?,
            )),
            CLAIM_PROTOCOL_FEE_IX_DISCM => Ok(Self::ClaimProtocolFee),
            CLAIM_TRADING_FEE_IX_DISCM => Ok(Self::ClaimTradingFee(
                ClaimTradingFeeIxArgs::deserialize(&mut reader)?,
            )),
            CLOSE_CLAIM_FEE_OPERATOR_IX_DISCM => Ok(Self::CloseClaimFeeOperator),
            CREATE_CLAIM_FEE_OPERATOR_IX_DISCM => Ok(Self::CreateClaimFeeOperator),
            CREATE_CONFIG_IX_DISCM => Ok(Self::CreateConfig(CreateConfigIxArgs::deserialize(
                &mut reader,
            )?)),
            CREATE_LOCKER_IX_DISCM => Ok(Self::CreateLocker),
            CREATE_PARTNER_METADATA_IX_DISCM => Ok(Self::CreatePartnerMetadata(
                CreatePartnerMetadataIxArgs::deserialize(&mut reader)?,
            )),
            CREATE_VIRTUAL_POOL_METADATA_IX_DISCM => Ok(Self::CreateVirtualPoolMetadata(
                CreateVirtualPoolMetadataIxArgs::deserialize(&mut reader)?,
            )),
            CREATOR_WITHDRAW_SURPLUS_IX_DISCM => Ok(Self::CreatorWithdrawSurplus),
            INITIALIZE_VIRTUAL_POOL_WITH_SPL_TOKEN_IX_DISCM => {
                Ok(Self::InitializeVirtualPoolWithSplToken(
                    InitializeVirtualPoolWithSplTokenIxArgs::deserialize(&mut reader)?,
                ))
            }
            INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_DISCM => {
                Ok(Self::InitializeVirtualPoolWithToken2022(
                    InitializeVirtualPoolWithToken2022IxArgs::deserialize(&mut reader)?,
                ))
            }
            MIGRATE_METEORA_DAMM_IX_DISCM => Ok(Self::MigrateMeteoraDamm),
            MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM => {
                Ok(Self::MigrateMeteoraDammClaimLpToken)
            }
            MIGRATE_METEORA_DAMM_LOCK_LP_TOKEN_IX_DISCM => Ok(Self::MigrateMeteoraDammLockLpToken),
            MIGRATION_DAMM_V2_IX_DISCM => Ok(Self::MigrationDammV2),
            MIGRATION_DAMM_V2_CREATE_METADATA_IX_DISCM => Ok(Self::MigrationDammV2CreateMetadata),
            MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_DISCM => {
                Ok(Self::MigrationMeteoraDammCreateMetadata)
            }
            PARTNER_WITHDRAW_SURPLUS_IX_DISCM => Ok(Self::PartnerWithdrawSurplus),
            PROTOCOL_WITHDRAW_SURPLUS_IX_DISCM => Ok(Self::ProtocolWithdrawSurplus),
            SWAP_IX_DISCM => Ok(Self::Swap(SwapIxArgs::deserialize(&mut reader)?)),
            TRANSFER_POOL_CREATOR_IX_DISCM => Ok(Self::TransferPoolCreator),
            WITHDRAW_LEFTOVER_IX_DISCM => Ok(Self::WithdrawLeftover),
            WITHDRAW_MIGRATION_FEE_IX_DISCM => Ok(Self::WithdrawMigrationFee(
                WithdrawMigrationFeeIxArgs::deserialize(&mut reader)?,
            )),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {:?} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::ClaimCreatorTradingFee(args) => {
                writer.write_all(&CLAIM_CREATOR_TRADING_FEE_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::ClaimProtocolFee => writer.write_all(&CLAIM_PROTOCOL_FEE_IX_DISCM),
            Self::ClaimTradingFee(args) => {
                writer.write_all(&CLAIM_TRADING_FEE_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CloseClaimFeeOperator => writer.write_all(&CLOSE_CLAIM_FEE_OPERATOR_IX_DISCM),
            Self::CreateClaimFeeOperator => writer.write_all(&CREATE_CLAIM_FEE_OPERATOR_IX_DISCM),
            Self::CreateConfig(args) => {
                writer.write_all(&CREATE_CONFIG_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CreateLocker => writer.write_all(&CREATE_LOCKER_IX_DISCM),
            Self::CreatePartnerMetadata(args) => {
                writer.write_all(&CREATE_PARTNER_METADATA_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CreateVirtualPoolMetadata(args) => {
                writer.write_all(&CREATE_VIRTUAL_POOL_METADATA_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CreatorWithdrawSurplus => writer.write_all(&CREATOR_WITHDRAW_SURPLUS_IX_DISCM),
            Self::InitializeVirtualPoolWithSplToken(args) => {
                writer.write_all(&INITIALIZE_VIRTUAL_POOL_WITH_SPL_TOKEN_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::InitializeVirtualPoolWithToken2022(args) => {
                writer.write_all(&INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::MigrateMeteoraDamm => writer.write_all(&MIGRATE_METEORA_DAMM_IX_DISCM),
            Self::MigrateMeteoraDammClaimLpToken => {
                writer.write_all(&MIGRATE_METEORA_DAMM_CLAIM_LP_TOKEN_IX_DISCM)
            }
            Self::MigrateMeteoraDammLockLpToken => {
                writer.write_all(&MIGRATE_METEORA_DAMM_LOCK_LP_TOKEN_IX_DISCM)
            }
            Self::MigrationDammV2 => writer.write_all(&MIGRATION_DAMM_V2_IX_DISCM),
            Self::MigrationDammV2CreateMetadata => {
                writer.write_all(&MIGRATION_DAMM_V2_CREATE_METADATA_IX_DISCM)
            }
            Self::MigrationMeteoraDammCreateMetadata => {
                writer.write_all(&MIGRATION_METEORA_DAMM_CREATE_METADATA_IX_DISCM)
            }
            Self::PartnerWithdrawSurplus => writer.write_all(&PARTNER_WITHDRAW_SURPLUS_IX_DISCM),
            Self::ProtocolWithdrawSurplus => writer.write_all(&PROTOCOL_WITHDRAW_SURPLUS_IX_DISCM),
            Self::Swap(args) => {
                writer.write_all(&SWAP_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::TransferPoolCreator => writer.write_all(&TRANSFER_POOL_CREATOR_IX_DISCM),
            Self::WithdrawLeftover => writer.write_all(&WITHDRAW_LEFTOVER_IX_DISCM),
            Self::WithdrawMigrationFee(args) => {
                writer.write_all(&WITHDRAW_MIGRATION_FEE_IX_DISCM)?;
                args.serialize(&mut writer)
            }
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
