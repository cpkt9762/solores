//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///PERMISSIONLESS FUNCTIONS ///
///create locker
pub const CREATE_LOCKER_IX_ACCOUNTS_LEN: usize = 14;
///Accounts struct for the create_locker instruction
#[derive(Copy, Clone, Debug)]
pub struct CreateLockerAccounts<'me, 'info> {
    ///Virtual pool
    pub virtual_pool: &'me AccountInfo<'info>,
    ///Config
    ///Relations: virtual_pool
    pub config: &'me AccountInfo<'info>,
    pub pool_authority: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub base_vault: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub base_mint: &'me AccountInfo<'info>,
    pub base: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub creator: &'me AccountInfo<'info>,
    pub escrow: &'me AccountInfo<'info>,
    pub escrow_token: &'me AccountInfo<'info>,
    pub payer: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub locker_program: &'me AccountInfo<'info>,
    pub locker_event_authority: &'me AccountInfo<'info>,
    ///System program.
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the create_locker instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateLockerKeys {
    ///Virtual pool
    pub virtual_pool: Pubkey,
    ///Config
    ///Relations: virtual_pool
    pub config: Pubkey,
    pub pool_authority: Pubkey,
    ///Relations: virtual_pool
    pub base_vault: Pubkey,
    ///Relations: virtual_pool
    pub base_mint: Pubkey,
    pub base: Pubkey,
    ///Relations: virtual_pool
    pub creator: Pubkey,
    pub escrow: Pubkey,
    pub escrow_token: Pubkey,
    pub payer: Pubkey,
    pub token_program: Pubkey,
    pub locker_program: Pubkey,
    pub locker_event_authority: Pubkey,
    ///System program.
    pub system_program: Pubkey,
}
impl From<CreateLockerAccounts<'_, '_>> for CreateLockerKeys {
    fn from(accounts: CreateLockerAccounts) -> Self {
        Self {
            virtual_pool: *accounts.virtual_pool.key,
            config: *accounts.config.key,
            pool_authority: *accounts.pool_authority.key,
            base_vault: *accounts.base_vault.key,
            base_mint: *accounts.base_mint.key,
            base: *accounts.base.key,
            creator: *accounts.creator.key,
            escrow: *accounts.escrow.key,
            escrow_token: *accounts.escrow_token.key,
            payer: *accounts.payer.key,
            token_program: *accounts.token_program.key,
            locker_program: *accounts.locker_program.key,
            locker_event_authority: *accounts.locker_event_authority.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<CreateLockerKeys> for [AccountMeta; CREATE_LOCKER_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateLockerKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.virtual_pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.creator,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.escrow,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.escrow_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.locker_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.locker_event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_LOCKER_IX_ACCOUNTS_LEN]> for CreateLockerKeys {
    fn from(pubkeys: [Pubkey; CREATE_LOCKER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            config: pubkeys[1],
            pool_authority: pubkeys[2],
            base_vault: pubkeys[3],
            base_mint: pubkeys[4],
            base: pubkeys[5],
            creator: pubkeys[6],
            escrow: pubkeys[7],
            escrow_token: pubkeys[8],
            payer: pubkeys[9],
            token_program: pubkeys[10],
            locker_program: pubkeys[11],
            locker_event_authority: pubkeys[12],
            system_program: pubkeys[13],
        }
    }
}
impl From<&[String]> for CreateLockerKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            virtual_pool: pubkeys[0].parse().unwrap(),
            config: pubkeys[1].parse().unwrap(),
            pool_authority: pubkeys[2].parse().unwrap(),
            base_vault: pubkeys[3].parse().unwrap(),
            base_mint: pubkeys[4].parse().unwrap(),
            base: pubkeys[5].parse().unwrap(),
            creator: pubkeys[6].parse().unwrap(),
            escrow: pubkeys[7].parse().unwrap(),
            escrow_token: pubkeys[8].parse().unwrap(),
            payer: pubkeys[9].parse().unwrap(),
            token_program: pubkeys[10].parse().unwrap(),
            locker_program: pubkeys[11].parse().unwrap(),
            locker_event_authority: pubkeys[12].parse().unwrap(),
            system_program: pubkeys[13].parse().unwrap(),
        }
    }
}
impl<'info> From<CreateLockerAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_LOCKER_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreateLockerAccounts<'_, 'info>) -> Self {
        [
            accounts.virtual_pool.clone(),
            accounts.config.clone(),
            accounts.pool_authority.clone(),
            accounts.base_vault.clone(),
            accounts.base_mint.clone(),
            accounts.base.clone(),
            accounts.creator.clone(),
            accounts.escrow.clone(),
            accounts.escrow_token.clone(),
            accounts.payer.clone(),
            accounts.token_program.clone(),
            accounts.locker_program.clone(),
            accounts.locker_event_authority.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_LOCKER_IX_ACCOUNTS_LEN]>
    for CreateLockerAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_LOCKER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: &arr[0],
            config: &arr[1],
            pool_authority: &arr[2],
            base_vault: &arr[3],
            base_mint: &arr[4],
            base: &arr[5],
            creator: &arr[6],
            escrow: &arr[7],
            escrow_token: &arr[8],
            payer: &arr[9],
            token_program: &arr[10],
            locker_program: &arr[11],
            locker_event_authority: &arr[12],
            system_program: &arr[13],
        }
    }
}
pub const CREATE_LOCKER_IX_DISCM: [u8; 8] = [167, 90, 137, 154, 75, 47, 17, 84];
#[derive(Clone, Debug, PartialEq)]
pub struct CreateLockerIxData;
impl CreateLockerIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_LOCKER_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_LOCKER_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_LOCKER_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_locker_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateLockerKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_LOCKER_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CreateLockerIxData.try_to_vec()?,
    })
}
pub fn create_locker_ix(keys: CreateLockerKeys) -> std::io::Result<Instruction> {
    create_locker_ix_with_program_id(crate::ID, keys)
}
pub fn create_locker_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreateLockerAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CreateLockerKeys = accounts.into();
    let ix = create_locker_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_locker_invoke(accounts: CreateLockerAccounts<'_, '_>) -> ProgramResult {
    create_locker_invoke_with_program_id(crate::ID, accounts)
}
pub fn create_locker_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreateLockerAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreateLockerKeys = accounts.into();
    let ix = create_locker_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_locker_invoke_signed(
    accounts: CreateLockerAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_locker_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn create_locker_verify_account_keys(
    accounts: CreateLockerAccounts<'_, '_>,
    keys: CreateLockerKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.virtual_pool.key, keys.virtual_pool),
        (*accounts.config.key, keys.config),
        (*accounts.pool_authority.key, keys.pool_authority),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.base.key, keys.base),
        (*accounts.creator.key, keys.creator),
        (*accounts.escrow.key, keys.escrow),
        (*accounts.escrow_token.key, keys.escrow_token),
        (*accounts.payer.key, keys.payer),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.locker_program.key, keys.locker_program),
        (
            *accounts.locker_event_authority.key,
            keys.locker_event_authority,
        ),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///BASE_SEED_0 seed for base PDA: "base_locker"
pub const BASE_SEED_0: &[u8] = &[
    98u8, 97u8, 115u8, 101u8, 95u8, 108u8, 111u8, 99u8, 107u8, 101u8, 114u8,
];
impl CreateLockerKeys {
    ///Derive the base PDA
    pub fn derive_base_pda(program_id: &Pubkey, virtual_pool: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BASE_SEED_0, virtual_pool.as_ref()], program_id)
    }
}
///pool_authority program address
pub const POOL_AUTHORITY_ADDRESS: &str = "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM";
///locker_program program address
pub const LOCKER_PROGRAM_ADDRESS: &str = "LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
