//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN: usize = 10;
///Accounts struct for the partner_withdraw_surplus instruction
#[derive(Copy, Clone, Debug)]
pub struct PartnerWithdrawSurplusAccounts<'me, 'info> {
    pub pool_authority: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub config: &'me AccountInfo<'info>,
    pub virtual_pool: &'me AccountInfo<'info>,
    ///The receiver token account
    pub token_quote_account: &'me AccountInfo<'info>,
    ///The vault token account for output token
    ///Relations: virtual_pool
    pub quote_vault: &'me AccountInfo<'info>,
    ///The mint of quote token
    ///Relations: config
    pub quote_mint: &'me AccountInfo<'info>,
    ///Relations: config
    pub fee_claimer: &'me AccountInfo<'info>,
    ///Token b program
    pub token_quote_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the partner_withdraw_surplus instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct PartnerWithdrawSurplusKeys {
    pub pool_authority: Pubkey,
    ///Relations: virtual_pool
    pub config: Pubkey,
    pub virtual_pool: Pubkey,
    ///The receiver token account
    pub token_quote_account: Pubkey,
    ///The vault token account for output token
    ///Relations: virtual_pool
    pub quote_vault: Pubkey,
    ///The mint of quote token
    ///Relations: config
    pub quote_mint: Pubkey,
    ///Relations: config
    pub fee_claimer: Pubkey,
    ///Token b program
    pub token_quote_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<PartnerWithdrawSurplusAccounts<'_, '_>> for PartnerWithdrawSurplusKeys {
    fn from(accounts: PartnerWithdrawSurplusAccounts) -> Self {
        Self {
            pool_authority: *accounts.pool_authority.key,
            config: *accounts.config.key,
            virtual_pool: *accounts.virtual_pool.key,
            token_quote_account: *accounts.token_quote_account.key,
            quote_vault: *accounts.quote_vault.key,
            quote_mint: *accounts.quote_mint.key,
            fee_claimer: *accounts.fee_claimer.key,
            token_quote_program: *accounts.token_quote_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<PartnerWithdrawSurplusKeys> for [AccountMeta; PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN] {
    fn from(keys: PartnerWithdrawSurplusKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.pool_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.virtual_pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_quote_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_claimer,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_quote_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN]> for PartnerWithdrawSurplusKeys {
    fn from(pubkeys: [Pubkey; PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool_authority: pubkeys[0],
            config: pubkeys[1],
            virtual_pool: pubkeys[2],
            token_quote_account: pubkeys[3],
            quote_vault: pubkeys[4],
            quote_mint: pubkeys[5],
            fee_claimer: pubkeys[6],
            token_quote_program: pubkeys[7],
            event_authority: pubkeys[8],
            program: pubkeys[9],
        }
    }
}
impl From<&[String]> for PartnerWithdrawSurplusKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            pool_authority: pubkeys[0].parse().unwrap(),
            config: pubkeys[1].parse().unwrap(),
            virtual_pool: pubkeys[2].parse().unwrap(),
            token_quote_account: pubkeys[3].parse().unwrap(),
            quote_vault: pubkeys[4].parse().unwrap(),
            quote_mint: pubkeys[5].parse().unwrap(),
            fee_claimer: pubkeys[6].parse().unwrap(),
            token_quote_program: pubkeys[7].parse().unwrap(),
            event_authority: pubkeys[8].parse().unwrap(),
            program: pubkeys[9].parse().unwrap(),
        }
    }
}
impl<'info> From<PartnerWithdrawSurplusAccounts<'_, 'info>>
    for [AccountInfo<'info>; PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN]
{
    fn from(accounts: PartnerWithdrawSurplusAccounts<'_, 'info>) -> Self {
        [
            accounts.pool_authority.clone(),
            accounts.config.clone(),
            accounts.virtual_pool.clone(),
            accounts.token_quote_account.clone(),
            accounts.quote_vault.clone(),
            accounts.quote_mint.clone(),
            accounts.fee_claimer.clone(),
            accounts.token_quote_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN]>
    for PartnerWithdrawSurplusAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool_authority: &arr[0],
            config: &arr[1],
            virtual_pool: &arr[2],
            token_quote_account: &arr[3],
            quote_vault: &arr[4],
            quote_mint: &arr[5],
            fee_claimer: &arr[6],
            token_quote_program: &arr[7],
            event_authority: &arr[8],
            program: &arr[9],
        }
    }
}
pub const PARTNER_WITHDRAW_SURPLUS_IX_DISCM: [u8; 8] = [168, 173, 72, 100, 201, 98, 38, 92];
#[derive(Clone, Debug, PartialEq)]
pub struct PartnerWithdrawSurplusIxData;
impl PartnerWithdrawSurplusIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != PARTNER_WITHDRAW_SURPLUS_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    PARTNER_WITHDRAW_SURPLUS_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&PARTNER_WITHDRAW_SURPLUS_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn partner_withdraw_surplus_ix_with_program_id(
    program_id: Pubkey,
    keys: PartnerWithdrawSurplusKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; PARTNER_WITHDRAW_SURPLUS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: PartnerWithdrawSurplusIxData.try_to_vec()?,
    })
}
pub fn partner_withdraw_surplus_ix(
    keys: PartnerWithdrawSurplusKeys,
) -> std::io::Result<Instruction> {
    partner_withdraw_surplus_ix_with_program_id(crate::ID, keys)
}
pub fn partner_withdraw_surplus_invoke_with_program_id(
    program_id: Pubkey,
    accounts: PartnerWithdrawSurplusAccounts<'_, '_>,
) -> ProgramResult {
    let keys: PartnerWithdrawSurplusKeys = accounts.into();
    let ix = partner_withdraw_surplus_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn partner_withdraw_surplus_invoke(
    accounts: PartnerWithdrawSurplusAccounts<'_, '_>,
) -> ProgramResult {
    partner_withdraw_surplus_invoke_with_program_id(crate::ID, accounts)
}
pub fn partner_withdraw_surplus_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: PartnerWithdrawSurplusAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: PartnerWithdrawSurplusKeys = accounts.into();
    let ix = partner_withdraw_surplus_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn partner_withdraw_surplus_invoke_signed(
    accounts: PartnerWithdrawSurplusAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    partner_withdraw_surplus_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn partner_withdraw_surplus_verify_account_keys(
    accounts: PartnerWithdrawSurplusAccounts<'_, '_>,
    keys: PartnerWithdrawSurplusKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.pool_authority.key, keys.pool_authority),
        (*accounts.config.key, keys.config),
        (*accounts.virtual_pool.key, keys.virtual_pool),
        (*accounts.token_quote_account.key, keys.token_quote_account),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.fee_claimer.key, keys.fee_claimer),
        (*accounts.token_quote_program.key, keys.token_quote_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl PartnerWithdrawSurplusKeys {
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
///pool_authority program address
pub const POOL_AUTHORITY_ADDRESS: &str = "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM";
