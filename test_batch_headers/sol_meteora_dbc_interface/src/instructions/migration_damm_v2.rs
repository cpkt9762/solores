//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN: usize = 25;
///Accounts struct for the migration_damm_v2 instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrationDammV2Accounts<'me, 'info> {
    ///virtual pool
    ///Relations: migration_metadata
    pub virtual_pool: &'me AccountInfo<'info>,
    ///migration metadata
    pub migration_metadata: &'me AccountInfo<'info>,
    ///virtual pool config key
    ///Relations: virtual_pool
    pub config: &'me AccountInfo<'info>,
    pub pool_authority: &'me AccountInfo<'info>,
    pub pool: &'me AccountInfo<'info>,
    pub first_position_nft_mint: &'me AccountInfo<'info>,
    pub first_position_nft_account: &'me AccountInfo<'info>,
    pub first_position: &'me AccountInfo<'info>,
    pub second_position_nft_mint: &'me AccountInfo<'info>,
    pub second_position_nft_account: &'me AccountInfo<'info>,
    pub second_position: &'me AccountInfo<'info>,
    pub damm_pool_authority: &'me AccountInfo<'info>,
    pub amm_program: &'me AccountInfo<'info>,
    pub base_mint: &'me AccountInfo<'info>,
    pub quote_mint: &'me AccountInfo<'info>,
    pub token_a_vault: &'me AccountInfo<'info>,
    pub token_b_vault: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub base_vault: &'me AccountInfo<'info>,
    ///Relations: virtual_pool
    pub quote_vault: &'me AccountInfo<'info>,
    pub payer: &'me AccountInfo<'info>,
    pub token_base_program: &'me AccountInfo<'info>,
    pub token_quote_program: &'me AccountInfo<'info>,
    pub token_2022_program: &'me AccountInfo<'info>,
    pub damm_event_authority: &'me AccountInfo<'info>,
    ///System program.
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the migration_damm_v2 instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrationDammV2Keys {
    ///virtual pool
    ///Relations: migration_metadata
    pub virtual_pool: Pubkey,
    ///migration metadata
    pub migration_metadata: Pubkey,
    ///virtual pool config key
    ///Relations: virtual_pool
    pub config: Pubkey,
    pub pool_authority: Pubkey,
    pub pool: Pubkey,
    pub first_position_nft_mint: Pubkey,
    pub first_position_nft_account: Pubkey,
    pub first_position: Pubkey,
    pub second_position_nft_mint: Pubkey,
    pub second_position_nft_account: Pubkey,
    pub second_position: Pubkey,
    pub damm_pool_authority: Pubkey,
    pub amm_program: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub token_a_vault: Pubkey,
    pub token_b_vault: Pubkey,
    ///Relations: virtual_pool
    pub base_vault: Pubkey,
    ///Relations: virtual_pool
    pub quote_vault: Pubkey,
    pub payer: Pubkey,
    pub token_base_program: Pubkey,
    pub token_quote_program: Pubkey,
    pub token_2022_program: Pubkey,
    pub damm_event_authority: Pubkey,
    ///System program.
    pub system_program: Pubkey,
}
impl From<MigrationDammV2Accounts<'_, '_>> for MigrationDammV2Keys {
    fn from(accounts: MigrationDammV2Accounts) -> Self {
        Self {
            virtual_pool: *accounts.virtual_pool.key,
            migration_metadata: *accounts.migration_metadata.key,
            config: *accounts.config.key,
            pool_authority: *accounts.pool_authority.key,
            pool: *accounts.pool.key,
            first_position_nft_mint: *accounts.first_position_nft_mint.key,
            first_position_nft_account: *accounts.first_position_nft_account.key,
            first_position: *accounts.first_position.key,
            second_position_nft_mint: *accounts.second_position_nft_mint.key,
            second_position_nft_account: *accounts.second_position_nft_account.key,
            second_position: *accounts.second_position.key,
            damm_pool_authority: *accounts.damm_pool_authority.key,
            amm_program: *accounts.amm_program.key,
            base_mint: *accounts.base_mint.key,
            quote_mint: *accounts.quote_mint.key,
            token_a_vault: *accounts.token_a_vault.key,
            token_b_vault: *accounts.token_b_vault.key,
            base_vault: *accounts.base_vault.key,
            quote_vault: *accounts.quote_vault.key,
            payer: *accounts.payer.key,
            token_base_program: *accounts.token_base_program.key,
            token_quote_program: *accounts.token_quote_program.key,
            token_2022_program: *accounts.token_2022_program.key,
            damm_event_authority: *accounts.damm_event_authority.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<MigrationDammV2Keys> for [AccountMeta; MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrationDammV2Keys) -> Self {
        [
            AccountMeta {
                pubkey: keys.virtual_pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.migration_metadata,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.first_position_nft_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.first_position_nft_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.first_position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.second_position_nft_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.second_position_nft_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.second_position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.damm_pool_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_a_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_b_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_base_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_quote_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_2022_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.damm_event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN]> for MigrationDammV2Keys {
    fn from(pubkeys: [Pubkey; MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: pubkeys[0],
            migration_metadata: pubkeys[1],
            config: pubkeys[2],
            pool_authority: pubkeys[3],
            pool: pubkeys[4],
            first_position_nft_mint: pubkeys[5],
            first_position_nft_account: pubkeys[6],
            first_position: pubkeys[7],
            second_position_nft_mint: pubkeys[8],
            second_position_nft_account: pubkeys[9],
            second_position: pubkeys[10],
            damm_pool_authority: pubkeys[11],
            amm_program: pubkeys[12],
            base_mint: pubkeys[13],
            quote_mint: pubkeys[14],
            token_a_vault: pubkeys[15],
            token_b_vault: pubkeys[16],
            base_vault: pubkeys[17],
            quote_vault: pubkeys[18],
            payer: pubkeys[19],
            token_base_program: pubkeys[20],
            token_quote_program: pubkeys[21],
            token_2022_program: pubkeys[22],
            damm_event_authority: pubkeys[23],
            system_program: pubkeys[24],
        }
    }
}
impl From<&[String]> for MigrationDammV2Keys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            virtual_pool: pubkeys[0].parse().unwrap(),
            migration_metadata: pubkeys[1].parse().unwrap(),
            config: pubkeys[2].parse().unwrap(),
            pool_authority: pubkeys[3].parse().unwrap(),
            pool: pubkeys[4].parse().unwrap(),
            first_position_nft_mint: pubkeys[5].parse().unwrap(),
            first_position_nft_account: pubkeys[6].parse().unwrap(),
            first_position: pubkeys[7].parse().unwrap(),
            second_position_nft_mint: pubkeys[8].parse().unwrap(),
            second_position_nft_account: pubkeys[9].parse().unwrap(),
            second_position: pubkeys[10].parse().unwrap(),
            damm_pool_authority: pubkeys[11].parse().unwrap(),
            amm_program: pubkeys[12].parse().unwrap(),
            base_mint: pubkeys[13].parse().unwrap(),
            quote_mint: pubkeys[14].parse().unwrap(),
            token_a_vault: pubkeys[15].parse().unwrap(),
            token_b_vault: pubkeys[16].parse().unwrap(),
            base_vault: pubkeys[17].parse().unwrap(),
            quote_vault: pubkeys[18].parse().unwrap(),
            payer: pubkeys[19].parse().unwrap(),
            token_base_program: pubkeys[20].parse().unwrap(),
            token_quote_program: pubkeys[21].parse().unwrap(),
            token_2022_program: pubkeys[22].parse().unwrap(),
            damm_event_authority: pubkeys[23].parse().unwrap(),
            system_program: pubkeys[24].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrationDammV2Accounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrationDammV2Accounts<'_, 'info>) -> Self {
        [
            accounts.virtual_pool.clone(),
            accounts.migration_metadata.clone(),
            accounts.config.clone(),
            accounts.pool_authority.clone(),
            accounts.pool.clone(),
            accounts.first_position_nft_mint.clone(),
            accounts.first_position_nft_account.clone(),
            accounts.first_position.clone(),
            accounts.second_position_nft_mint.clone(),
            accounts.second_position_nft_account.clone(),
            accounts.second_position.clone(),
            accounts.damm_pool_authority.clone(),
            accounts.amm_program.clone(),
            accounts.base_mint.clone(),
            accounts.quote_mint.clone(),
            accounts.token_a_vault.clone(),
            accounts.token_b_vault.clone(),
            accounts.base_vault.clone(),
            accounts.quote_vault.clone(),
            accounts.payer.clone(),
            accounts.token_base_program.clone(),
            accounts.token_quote_program.clone(),
            accounts.token_2022_program.clone(),
            accounts.damm_event_authority.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN]>
    for MigrationDammV2Accounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            virtual_pool: &arr[0],
            migration_metadata: &arr[1],
            config: &arr[2],
            pool_authority: &arr[3],
            pool: &arr[4],
            first_position_nft_mint: &arr[5],
            first_position_nft_account: &arr[6],
            first_position: &arr[7],
            second_position_nft_mint: &arr[8],
            second_position_nft_account: &arr[9],
            second_position: &arr[10],
            damm_pool_authority: &arr[11],
            amm_program: &arr[12],
            base_mint: &arr[13],
            quote_mint: &arr[14],
            token_a_vault: &arr[15],
            token_b_vault: &arr[16],
            base_vault: &arr[17],
            quote_vault: &arr[18],
            payer: &arr[19],
            token_base_program: &arr[20],
            token_quote_program: &arr[21],
            token_2022_program: &arr[22],
            damm_event_authority: &arr[23],
            system_program: &arr[24],
        }
    }
}
pub const MIGRATION_DAMM_V2_IX_DISCM: [u8; 8] = [156, 169, 230, 103, 53, 228, 80, 64];
#[derive(Clone, Debug, PartialEq)]
pub struct MigrationDammV2IxData;
impl MigrationDammV2IxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != MIGRATION_DAMM_V2_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    MIGRATION_DAMM_V2_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&MIGRATION_DAMM_V2_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migration_damm_v2_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrationDammV2Keys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATION_DAMM_V2_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrationDammV2IxData.try_to_vec()?,
    })
}
pub fn migration_damm_v2_ix(keys: MigrationDammV2Keys) -> std::io::Result<Instruction> {
    migration_damm_v2_ix_with_program_id(crate::ID, keys)
}
pub fn migration_damm_v2_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrationDammV2Accounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrationDammV2Keys = accounts.into();
    let ix = migration_damm_v2_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migration_damm_v2_invoke(accounts: MigrationDammV2Accounts<'_, '_>) -> ProgramResult {
    migration_damm_v2_invoke_with_program_id(crate::ID, accounts)
}
pub fn migration_damm_v2_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrationDammV2Accounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrationDammV2Keys = accounts.into();
    let ix = migration_damm_v2_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migration_damm_v2_invoke_signed(
    accounts: MigrationDammV2Accounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migration_damm_v2_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migration_damm_v2_verify_account_keys(
    accounts: MigrationDammV2Accounts<'_, '_>,
    keys: MigrationDammV2Keys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.virtual_pool.key, keys.virtual_pool),
        (*accounts.migration_metadata.key, keys.migration_metadata),
        (*accounts.config.key, keys.config),
        (*accounts.pool_authority.key, keys.pool_authority),
        (*accounts.pool.key, keys.pool),
        (
            *accounts.first_position_nft_mint.key,
            keys.first_position_nft_mint,
        ),
        (
            *accounts.first_position_nft_account.key,
            keys.first_position_nft_account,
        ),
        (*accounts.first_position.key, keys.first_position),
        (
            *accounts.second_position_nft_mint.key,
            keys.second_position_nft_mint,
        ),
        (
            *accounts.second_position_nft_account.key,
            keys.second_position_nft_account,
        ),
        (*accounts.second_position.key, keys.second_position),
        (*accounts.damm_pool_authority.key, keys.damm_pool_authority),
        (*accounts.amm_program.key, keys.amm_program),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.token_a_vault.key, keys.token_a_vault),
        (*accounts.token_b_vault.key, keys.token_b_vault),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.payer.key, keys.payer),
        (*accounts.token_base_program.key, keys.token_base_program),
        (*accounts.token_quote_program.key, keys.token_quote_program),
        (*accounts.token_2022_program.key, keys.token_2022_program),
        (
            *accounts.damm_event_authority.key,
            keys.damm_event_authority,
        ),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///pool_authority program address
pub const POOL_AUTHORITY_ADDRESS: &str = "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM";
///amm_program program address
pub const AMM_PROGRAM_ADDRESS: &str = "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
