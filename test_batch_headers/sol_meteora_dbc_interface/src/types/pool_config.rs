//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::LiquidityDistributionConfig;
use crate::LockedVestingConfig;
use crate::PoolFeesConfig;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PoolConfig {
    ///quote mint
    pub quote_mint: Pubkey,
    ///Address to get the fee
    pub fee_claimer: Pubkey,
    ///Address to receive extra base token after migration, in case token is fixed supply
    pub leftover_receiver: Pubkey,
    ///Pool fee
    pub pool_fees: PoolFeesConfig,
    ///Collect fee mode
    pub collect_fee_mode: u8,
    ///migration option
    pub migration_option: u8,
    ///whether mode slot or timestamp
    pub activation_type: u8,
    ///token decimals
    pub token_decimal: u8,
    ///version
    pub version: u8,
    ///token type of base token
    pub token_type: u8,
    ///quote token flag
    pub quote_token_flag: u8,
    ///partner locked lp percentage
    pub partner_locked_lp_percentage: u8,
    ///partner lp percentage
    pub partner_lp_percentage: u8,
    ///creator post migration fee percentage
    pub creator_locked_lp_percentage: u8,
    ///creator lp percentage
    pub creator_lp_percentage: u8,
    ///migration fee option
    pub migration_fee_option: u8,
    ///flag to indicate whether token is dynamic supply (0) or fixed supply (1)
    pub fixed_token_supply_flag: u8,
    ///creator trading fee percentage
    pub creator_trading_fee_percentage: u8,
    ///token update authority
    pub token_update_authority: u8,
    ///migration fee percentage
    pub migration_fee_percentage: u8,
    ///creator migration fee percentage
    pub creator_migration_fee_percentage: u8,
    ///padding 1
    pub _padding_1: [u8; 7],
    ///swap base amount
    pub swap_base_amount: u64,
    ///migration quote threshold (in quote token)
    pub migration_quote_threshold: u64,
    ///migration base threshold (in base token)
    pub migration_base_threshold: u64,
    ///migration sqrt price
    pub migration_sqrt_price: u128,
    ///locked vesting config
    pub locked_vesting_config: LockedVestingConfig,
    ///pre migration token supply
    pub pre_migration_token_supply: u64,
    ///post migration token supply
    pub post_migration_token_supply: u64,
    ///padding 2
    pub _padding_2: [u128; 2],
    ///minimum price
    pub sqrt_start_price: u128,
    ///curve, only use 20 point firstly, we can extend that latter
    pub curve: [LiquidityDistributionConfig; 20],
}
impl Default for PoolConfig {
    fn default() -> Self {
        Self {
            quote_mint: Default::default(),
            fee_claimer: Default::default(),
            leftover_receiver: Default::default(),
            pool_fees: Default::default(),
            collect_fee_mode: Default::default(),
            migration_option: Default::default(),
            activation_type: Default::default(),
            token_decimal: Default::default(),
            version: Default::default(),
            token_type: Default::default(),
            quote_token_flag: Default::default(),
            partner_locked_lp_percentage: Default::default(),
            partner_lp_percentage: Default::default(),
            creator_locked_lp_percentage: Default::default(),
            creator_lp_percentage: Default::default(),
            migration_fee_option: Default::default(),
            fixed_token_supply_flag: Default::default(),
            creator_trading_fee_percentage: Default::default(),
            token_update_authority: Default::default(),
            migration_fee_percentage: Default::default(),
            creator_migration_fee_percentage: Default::default(),
            _padding_1: [Default::default(); 7],
            swap_base_amount: Default::default(),
            migration_quote_threshold: Default::default(),
            migration_base_threshold: Default::default(),
            migration_sqrt_price: Default::default(),
            locked_vesting_config: Default::default(),
            pre_migration_token_supply: Default::default(),
            post_migration_token_supply: Default::default(),
            _padding_2: core::array::from_fn(|_| Default::default()),
            sqrt_start_price: Default::default(),
            curve: core::array::from_fn(|_| Default::default()),
        }
    }
}
