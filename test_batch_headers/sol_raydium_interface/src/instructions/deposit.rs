//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const DEPOSIT_IX_ACCOUNTS_LEN: usize = 14;
///Accounts struct for the deposit instruction
#[derive(Copy, Clone, Debug)]
pub struct DepositAccounts<'me, 'info> {
    pub token_program: &'me AccountInfo<'info>,
    pub amm: &'me AccountInfo<'info>,
    pub amm_authority: &'me AccountInfo<'info>,
    pub amm_open_orders: &'me AccountInfo<'info>,
    pub amm_target_orders: &'me AccountInfo<'info>,
    pub lp_mint_address: &'me AccountInfo<'info>,
    pub pool_coin_token_account: &'me AccountInfo<'info>,
    pub pool_pc_token_account: &'me AccountInfo<'info>,
    pub serum_market: &'me AccountInfo<'info>,
    pub user_coin_token_account: &'me AccountInfo<'info>,
    pub user_pc_token_account: &'me AccountInfo<'info>,
    pub user_lp_token_account: &'me AccountInfo<'info>,
    pub user_owner: &'me AccountInfo<'info>,
    pub serum_event_queue: &'me AccountInfo<'info>,
}
///Public keys struct for the deposit instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct DepositKeys {
    pub token_program: Pubkey,
    pub amm: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub amm_target_orders: Pubkey,
    pub lp_mint_address: Pubkey,
    pub pool_coin_token_account: Pubkey,
    pub pool_pc_token_account: Pubkey,
    pub serum_market: Pubkey,
    pub user_coin_token_account: Pubkey,
    pub user_pc_token_account: Pubkey,
    pub user_lp_token_account: Pubkey,
    pub user_owner: Pubkey,
    pub serum_event_queue: Pubkey,
}
impl From<DepositAccounts<'_, '_>> for DepositKeys {
    fn from(accounts: DepositAccounts) -> Self {
        Self {
            token_program: *accounts.token_program.key,
            amm: *accounts.amm.key,
            amm_authority: *accounts.amm_authority.key,
            amm_open_orders: *accounts.amm_open_orders.key,
            amm_target_orders: *accounts.amm_target_orders.key,
            lp_mint_address: *accounts.lp_mint_address.key,
            pool_coin_token_account: *accounts.pool_coin_token_account.key,
            pool_pc_token_account: *accounts.pool_pc_token_account.key,
            serum_market: *accounts.serum_market.key,
            user_coin_token_account: *accounts.user_coin_token_account.key,
            user_pc_token_account: *accounts.user_pc_token_account.key,
            user_lp_token_account: *accounts.user_lp_token_account.key,
            user_owner: *accounts.user_owner.key,
            serum_event_queue: *accounts.serum_event_queue.key,
        }
    }
}
impl From<DepositKeys> for [AccountMeta; DEPOSIT_IX_ACCOUNTS_LEN] {
    fn from(keys: DepositKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_open_orders,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_target_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.lp_mint_address,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_coin_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_pc_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_market,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.user_coin_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_pc_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_lp_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.serum_event_queue,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; DEPOSIT_IX_ACCOUNTS_LEN]> for DepositKeys {
    fn from(pubkeys: [Pubkey; DEPOSIT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: pubkeys[0],
            amm: pubkeys[1],
            amm_authority: pubkeys[2],
            amm_open_orders: pubkeys[3],
            amm_target_orders: pubkeys[4],
            lp_mint_address: pubkeys[5],
            pool_coin_token_account: pubkeys[6],
            pool_pc_token_account: pubkeys[7],
            serum_market: pubkeys[8],
            user_coin_token_account: pubkeys[9],
            user_pc_token_account: pubkeys[10],
            user_lp_token_account: pubkeys[11],
            user_owner: pubkeys[12],
            serum_event_queue: pubkeys[13],
        }
    }
}
impl From<&[String]> for DepositKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            token_program: pubkeys[0].parse().unwrap(),
            amm: pubkeys[1].parse().unwrap(),
            amm_authority: pubkeys[2].parse().unwrap(),
            amm_open_orders: pubkeys[3].parse().unwrap(),
            amm_target_orders: pubkeys[4].parse().unwrap(),
            lp_mint_address: pubkeys[5].parse().unwrap(),
            pool_coin_token_account: pubkeys[6].parse().unwrap(),
            pool_pc_token_account: pubkeys[7].parse().unwrap(),
            serum_market: pubkeys[8].parse().unwrap(),
            user_coin_token_account: pubkeys[9].parse().unwrap(),
            user_pc_token_account: pubkeys[10].parse().unwrap(),
            user_lp_token_account: pubkeys[11].parse().unwrap(),
            user_owner: pubkeys[12].parse().unwrap(),
            serum_event_queue: pubkeys[13].parse().unwrap(),
        }
    }
}
impl<'info> From<DepositAccounts<'_, 'info>> for [AccountInfo<'info>; DEPOSIT_IX_ACCOUNTS_LEN] {
    fn from(accounts: DepositAccounts<'_, 'info>) -> Self {
        [
            accounts.token_program.clone(),
            accounts.amm.clone(),
            accounts.amm_authority.clone(),
            accounts.amm_open_orders.clone(),
            accounts.amm_target_orders.clone(),
            accounts.lp_mint_address.clone(),
            accounts.pool_coin_token_account.clone(),
            accounts.pool_pc_token_account.clone(),
            accounts.serum_market.clone(),
            accounts.user_coin_token_account.clone(),
            accounts.user_pc_token_account.clone(),
            accounts.user_lp_token_account.clone(),
            accounts.user_owner.clone(),
            accounts.serum_event_queue.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; DEPOSIT_IX_ACCOUNTS_LEN]>
    for DepositAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; DEPOSIT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: &arr[0],
            amm: &arr[1],
            amm_authority: &arr[2],
            amm_open_orders: &arr[3],
            amm_target_orders: &arr[4],
            lp_mint_address: &arr[5],
            pool_coin_token_account: &arr[6],
            pool_pc_token_account: &arr[7],
            serum_market: &arr[8],
            user_coin_token_account: &arr[9],
            user_pc_token_account: &arr[10],
            user_lp_token_account: &arr[11],
            user_owner: &arr[12],
            serum_event_queue: &arr[13],
        }
    }
}
pub const DEPOSIT_IX_DISCM: u8 = 3u8;
///Arguments for the deposit instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositIxArgs {
    pub discriminator: u8,
    pub max_coin_amount: u64,
    pub max_pc_amount: u64,
    pub base_side: u64,
}
impl Default for DepositIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 3u8,
            max_coin_amount: Default::default(),
            max_pc_amount: Default::default(),
            base_side: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct DepositIxData(pub DepositIxArgs);
impl From<DepositIxArgs> for DepositIxData {
    fn from(args: DepositIxArgs) -> Self {
        Self(args)
    }
}
impl DepositIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != DEPOSIT_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    DEPOSIT_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(DepositIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[DEPOSIT_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn deposit_ix_with_program_id(
    program_id: Pubkey,
    keys: DepositKeys,
    args: DepositIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; DEPOSIT_IX_ACCOUNTS_LEN] = keys.into();
    let data: DepositIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn deposit_ix(keys: DepositKeys, args: DepositIxArgs) -> std::io::Result<Instruction> {
    deposit_ix_with_program_id(crate::ID, keys, args)
}
pub fn deposit_invoke_with_program_id(
    program_id: Pubkey,
    accounts: DepositAccounts<'_, '_>,
    args: DepositIxArgs,
) -> ProgramResult {
    let keys: DepositKeys = accounts.into();
    let ix = deposit_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn deposit_invoke(accounts: DepositAccounts<'_, '_>, args: DepositIxArgs) -> ProgramResult {
    deposit_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn deposit_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: DepositAccounts<'_, '_>,
    args: DepositIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: DepositKeys = accounts.into();
    let ix = deposit_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn deposit_invoke_signed(
    accounts: DepositAccounts<'_, '_>,
    args: DepositIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    deposit_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn deposit_verify_account_keys(
    accounts: DepositAccounts<'_, '_>,
    keys: DepositKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.token_program.key, keys.token_program),
        (*accounts.amm.key, keys.amm),
        (*accounts.amm_authority.key, keys.amm_authority),
        (*accounts.amm_open_orders.key, keys.amm_open_orders),
        (*accounts.amm_target_orders.key, keys.amm_target_orders),
        (*accounts.lp_mint_address.key, keys.lp_mint_address),
        (
            *accounts.pool_coin_token_account.key,
            keys.pool_coin_token_account,
        ),
        (
            *accounts.pool_pc_token_account.key,
            keys.pool_pc_token_account,
        ),
        (*accounts.serum_market.key, keys.serum_market),
        (
            *accounts.user_coin_token_account.key,
            keys.user_coin_token_account,
        ),
        (
            *accounts.user_pc_token_account.key,
            keys.user_pc_token_account,
        ),
        (
            *accounts.user_lp_token_account.key,
            keys.user_lp_token_account,
        ),
        (*accounts.user_owner.key, keys.user_owner),
        (*accounts.serum_event_queue.key, keys.serum_event_queue),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl DepositIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<DepositIxArgs> for RaydiumProgramIx {
    fn from(args: DepositIxArgs) -> Self {
        Self::Deposit(args)
    }
}
