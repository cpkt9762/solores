//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN: usize = 21;
///Accounts struct for the migrateToOpenBook instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrateToOpenBookAccounts<'me, 'info> {
    pub token_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub rent: &'me AccountInfo<'info>,
    pub amm: &'me AccountInfo<'info>,
    pub amm_authority: &'me AccountInfo<'info>,
    pub amm_open_orders: &'me AccountInfo<'info>,
    pub amm_token_coin: &'me AccountInfo<'info>,
    pub amm_token_pc: &'me AccountInfo<'info>,
    pub amm_target_orders: &'me AccountInfo<'info>,
    pub serum_program: &'me AccountInfo<'info>,
    pub serum_market: &'me AccountInfo<'info>,
    pub serum_bids: &'me AccountInfo<'info>,
    pub serum_asks: &'me AccountInfo<'info>,
    pub serum_event_queue: &'me AccountInfo<'info>,
    pub serum_coin_vault: &'me AccountInfo<'info>,
    pub serum_pc_vault: &'me AccountInfo<'info>,
    pub serum_vault_signer: &'me AccountInfo<'info>,
    pub new_amm_open_orders: &'me AccountInfo<'info>,
    pub new_serum_program: &'me AccountInfo<'info>,
    pub new_serum_market: &'me AccountInfo<'info>,
    pub admin: &'me AccountInfo<'info>,
}
///Public keys struct for the migrateToOpenBook instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateToOpenBookKeys {
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub amm: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub amm_token_coin: Pubkey,
    pub amm_token_pc: Pubkey,
    pub amm_target_orders: Pubkey,
    pub serum_program: Pubkey,
    pub serum_market: Pubkey,
    pub serum_bids: Pubkey,
    pub serum_asks: Pubkey,
    pub serum_event_queue: Pubkey,
    pub serum_coin_vault: Pubkey,
    pub serum_pc_vault: Pubkey,
    pub serum_vault_signer: Pubkey,
    pub new_amm_open_orders: Pubkey,
    pub new_serum_program: Pubkey,
    pub new_serum_market: Pubkey,
    pub admin: Pubkey,
}
impl From<MigrateToOpenBookAccounts<'_, '_>> for MigrateToOpenBookKeys {
    fn from(accounts: MigrateToOpenBookAccounts) -> Self {
        Self {
            token_program: *accounts.token_program.key,
            system_program: *accounts.system_program.key,
            rent: *accounts.rent.key,
            amm: *accounts.amm.key,
            amm_authority: *accounts.amm_authority.key,
            amm_open_orders: *accounts.amm_open_orders.key,
            amm_token_coin: *accounts.amm_token_coin.key,
            amm_token_pc: *accounts.amm_token_pc.key,
            amm_target_orders: *accounts.amm_target_orders.key,
            serum_program: *accounts.serum_program.key,
            serum_market: *accounts.serum_market.key,
            serum_bids: *accounts.serum_bids.key,
            serum_asks: *accounts.serum_asks.key,
            serum_event_queue: *accounts.serum_event_queue.key,
            serum_coin_vault: *accounts.serum_coin_vault.key,
            serum_pc_vault: *accounts.serum_pc_vault.key,
            serum_vault_signer: *accounts.serum_vault_signer.key,
            new_amm_open_orders: *accounts.new_amm_open_orders.key,
            new_serum_program: *accounts.new_serum_program.key,
            new_serum_market: *accounts.new_serum_market.key,
            admin: *accounts.admin.key,
        }
    }
}
impl From<MigrateToOpenBookKeys> for [AccountMeta; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrateToOpenBookKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_token_coin,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_token_pc,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_target_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.serum_market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_bids,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_asks,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_event_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_coin_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_pc_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_vault_signer,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.new_amm_open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.new_serum_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.new_serum_market,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.admin,
                is_signer: true,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN]> for MigrateToOpenBookKeys {
    fn from(pubkeys: [Pubkey; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: pubkeys[0],
            system_program: pubkeys[1],
            rent: pubkeys[2],
            amm: pubkeys[3],
            amm_authority: pubkeys[4],
            amm_open_orders: pubkeys[5],
            amm_token_coin: pubkeys[6],
            amm_token_pc: pubkeys[7],
            amm_target_orders: pubkeys[8],
            serum_program: pubkeys[9],
            serum_market: pubkeys[10],
            serum_bids: pubkeys[11],
            serum_asks: pubkeys[12],
            serum_event_queue: pubkeys[13],
            serum_coin_vault: pubkeys[14],
            serum_pc_vault: pubkeys[15],
            serum_vault_signer: pubkeys[16],
            new_amm_open_orders: pubkeys[17],
            new_serum_program: pubkeys[18],
            new_serum_market: pubkeys[19],
            admin: pubkeys[20],
        }
    }
}
impl From<&[String]> for MigrateToOpenBookKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            token_program: pubkeys[0].parse().unwrap(),
            system_program: pubkeys[1].parse().unwrap(),
            rent: pubkeys[2].parse().unwrap(),
            amm: pubkeys[3].parse().unwrap(),
            amm_authority: pubkeys[4].parse().unwrap(),
            amm_open_orders: pubkeys[5].parse().unwrap(),
            amm_token_coin: pubkeys[6].parse().unwrap(),
            amm_token_pc: pubkeys[7].parse().unwrap(),
            amm_target_orders: pubkeys[8].parse().unwrap(),
            serum_program: pubkeys[9].parse().unwrap(),
            serum_market: pubkeys[10].parse().unwrap(),
            serum_bids: pubkeys[11].parse().unwrap(),
            serum_asks: pubkeys[12].parse().unwrap(),
            serum_event_queue: pubkeys[13].parse().unwrap(),
            serum_coin_vault: pubkeys[14].parse().unwrap(),
            serum_pc_vault: pubkeys[15].parse().unwrap(),
            serum_vault_signer: pubkeys[16].parse().unwrap(),
            new_amm_open_orders: pubkeys[17].parse().unwrap(),
            new_serum_program: pubkeys[18].parse().unwrap(),
            new_serum_market: pubkeys[19].parse().unwrap(),
            admin: pubkeys[20].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrateToOpenBookAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrateToOpenBookAccounts<'_, 'info>) -> Self {
        [
            accounts.token_program.clone(),
            accounts.system_program.clone(),
            accounts.rent.clone(),
            accounts.amm.clone(),
            accounts.amm_authority.clone(),
            accounts.amm_open_orders.clone(),
            accounts.amm_token_coin.clone(),
            accounts.amm_token_pc.clone(),
            accounts.amm_target_orders.clone(),
            accounts.serum_program.clone(),
            accounts.serum_market.clone(),
            accounts.serum_bids.clone(),
            accounts.serum_asks.clone(),
            accounts.serum_event_queue.clone(),
            accounts.serum_coin_vault.clone(),
            accounts.serum_pc_vault.clone(),
            accounts.serum_vault_signer.clone(),
            accounts.new_amm_open_orders.clone(),
            accounts.new_serum_program.clone(),
            accounts.new_serum_market.clone(),
            accounts.admin.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN]>
    for MigrateToOpenBookAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: &arr[0],
            system_program: &arr[1],
            rent: &arr[2],
            amm: &arr[3],
            amm_authority: &arr[4],
            amm_open_orders: &arr[5],
            amm_token_coin: &arr[6],
            amm_token_pc: &arr[7],
            amm_target_orders: &arr[8],
            serum_program: &arr[9],
            serum_market: &arr[10],
            serum_bids: &arr[11],
            serum_asks: &arr[12],
            serum_event_queue: &arr[13],
            serum_coin_vault: &arr[14],
            serum_pc_vault: &arr[15],
            serum_vault_signer: &arr[16],
            new_amm_open_orders: &arr[17],
            new_serum_program: &arr[18],
            new_serum_market: &arr[19],
            admin: &arr[20],
        }
    }
}
pub const MIGRATE_TO_OPEN_BOOK_IX_DISCM: u8 = 5u8;
#[derive(Clone, Debug, PartialEq)]
pub struct MigrateToOpenBookIxData;
impl MigrateToOpenBookIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != MIGRATE_TO_OPEN_BOOK_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    MIGRATE_TO_OPEN_BOOK_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[MIGRATE_TO_OPEN_BOOK_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migrate_to_open_book_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateToOpenBookKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATE_TO_OPEN_BOOK_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrateToOpenBookIxData.try_to_vec()?,
    })
}
pub fn migrate_to_open_book_ix(keys: MigrateToOpenBookKeys) -> std::io::Result<Instruction> {
    migrate_to_open_book_ix_with_program_id(crate::ID, keys)
}
pub fn migrate_to_open_book_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrateToOpenBookAccounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrateToOpenBookKeys = accounts.into();
    let ix = migrate_to_open_book_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migrate_to_open_book_invoke(accounts: MigrateToOpenBookAccounts<'_, '_>) -> ProgramResult {
    migrate_to_open_book_invoke_with_program_id(crate::ID, accounts)
}
pub fn migrate_to_open_book_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrateToOpenBookAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrateToOpenBookKeys = accounts.into();
    let ix = migrate_to_open_book_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migrate_to_open_book_invoke_signed(
    accounts: MigrateToOpenBookAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migrate_to_open_book_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migrate_to_open_book_verify_account_keys(
    accounts: MigrateToOpenBookAccounts<'_, '_>,
    keys: MigrateToOpenBookKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.token_program.key, keys.token_program),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent.key, keys.rent),
        (*accounts.amm.key, keys.amm),
        (*accounts.amm_authority.key, keys.amm_authority),
        (*accounts.amm_open_orders.key, keys.amm_open_orders),
        (*accounts.amm_token_coin.key, keys.amm_token_coin),
        (*accounts.amm_token_pc.key, keys.amm_token_pc),
        (*accounts.amm_target_orders.key, keys.amm_target_orders),
        (*accounts.serum_program.key, keys.serum_program),
        (*accounts.serum_market.key, keys.serum_market),
        (*accounts.serum_bids.key, keys.serum_bids),
        (*accounts.serum_asks.key, keys.serum_asks),
        (*accounts.serum_event_queue.key, keys.serum_event_queue),
        (*accounts.serum_coin_vault.key, keys.serum_coin_vault),
        (*accounts.serum_pc_vault.key, keys.serum_pc_vault),
        (*accounts.serum_vault_signer.key, keys.serum_vault_signer),
        (*accounts.new_amm_open_orders.key, keys.new_amm_open_orders),
        (*accounts.new_serum_program.key, keys.new_serum_program),
        (*accounts.new_serum_market.key, keys.new_serum_market),
        (*accounts.admin.key, keys.admin),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
