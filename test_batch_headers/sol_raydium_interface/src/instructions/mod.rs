//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod initialize;
pub use initialize::*;
pub mod initialize2;
pub use initialize2::*;
pub mod monitor_step;
pub use monitor_step::*;
pub mod deposit;
pub use deposit::*;
pub mod withdraw;
pub use withdraw::*;
pub mod migrate_to_open_book;
pub use migrate_to_open_book::*;
pub mod set_params;
pub use set_params::*;
pub mod withdraw_pnl;
pub use withdraw_pnl::*;
pub mod withdraw_srm;
pub use withdraw_srm::*;
pub mod swap_base_in;
pub use swap_base_in::*;
pub mod pre_initialize;
pub use pre_initialize::*;
pub mod swap_base_out;
pub use swap_base_out::*;
pub mod simulate_info;
pub use simulate_info::*;
pub mod admin_cancel_orders;
pub use admin_cancel_orders::*;
pub mod create_config_account;
pub use create_config_account::*;
pub mod update_config_account;
pub use update_config_account::*;
#[derive(Clone, Debug, PartialEq)]
pub enum RaydiumProgramIx {
    Initialize(InitializeIxArgs),
    Initialize2(Initialize2IxArgs),
    MonitorStep(MonitorStepIxArgs),
    Deposit(DepositIxArgs),
    Withdraw(WithdrawIxArgs),
    MigrateToOpenBook,
    SetParams(SetParamsIxArgs),
    WithdrawPnl,
    WithdrawSrm(WithdrawSrmIxArgs),
    SwapBaseIn(SwapBaseInIxArgs),
    PreInitialize(PreInitializeIxArgs),
    SwapBaseOut(SwapBaseOutIxArgs),
    SimulateInfo(SimulateInfoIxArgs),
    AdminCancelOrders(AdminCancelOrdersIxArgs),
    CreateConfigAccount,
    UpdateConfigAccount(UpdateConfigAccountIxArgs),
}
impl RaydiumProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        let mut reader = &buf[1..];
        match maybe_discm {
            INITIALIZE_IX_DISCM => Ok(Self::Initialize(InitializeIxArgs::deserialize(
                &mut reader,
            )?)),
            INITIALIZE2_IX_DISCM => Ok(Self::Initialize2(Initialize2IxArgs::deserialize(
                &mut reader,
            )?)),
            MONITOR_STEP_IX_DISCM => Ok(Self::MonitorStep(MonitorStepIxArgs::deserialize(
                &mut reader,
            )?)),
            DEPOSIT_IX_DISCM => Ok(Self::Deposit(DepositIxArgs::deserialize(&mut reader)?)),
            WITHDRAW_IX_DISCM => Ok(Self::Withdraw(WithdrawIxArgs::deserialize(&mut reader)?)),
            MIGRATE_TO_OPEN_BOOK_IX_DISCM => Ok(Self::MigrateToOpenBook),
            SET_PARAMS_IX_DISCM => Ok(Self::SetParams(SetParamsIxArgs::deserialize(&mut reader)?)),
            WITHDRAW_PNL_IX_DISCM => Ok(Self::WithdrawPnl),
            WITHDRAW_SRM_IX_DISCM => Ok(Self::WithdrawSrm(WithdrawSrmIxArgs::deserialize(
                &mut reader,
            )?)),
            SWAP_BASE_IN_IX_DISCM => Ok(Self::SwapBaseIn(SwapBaseInIxArgs::deserialize(
                &mut reader,
            )?)),
            PRE_INITIALIZE_IX_DISCM => Ok(Self::PreInitialize(PreInitializeIxArgs::deserialize(
                &mut reader,
            )?)),
            SWAP_BASE_OUT_IX_DISCM => Ok(Self::SwapBaseOut(SwapBaseOutIxArgs::deserialize(
                &mut reader,
            )?)),
            SIMULATE_INFO_IX_DISCM => Ok(Self::SimulateInfo(SimulateInfoIxArgs::deserialize(
                &mut reader,
            )?)),
            ADMIN_CANCEL_ORDERS_IX_DISCM => Ok(Self::AdminCancelOrders(
                AdminCancelOrdersIxArgs::deserialize(&mut reader)?,
            )),
            CREATE_CONFIG_ACCOUNT_IX_DISCM => Ok(Self::CreateConfigAccount),
            UPDATE_CONFIG_ACCOUNT_IX_DISCM => Ok(Self::UpdateConfigAccount(
                UpdateConfigAccountIxArgs::deserialize(&mut reader)?,
            )),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::Initialize(args) => {
                writer.write_all(&[INITIALIZE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::Initialize2(args) => {
                writer.write_all(&[INITIALIZE2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::MonitorStep(args) => {
                writer.write_all(&[MONITOR_STEP_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::Deposit(args) => {
                writer.write_all(&[DEPOSIT_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::Withdraw(args) => {
                writer.write_all(&[WITHDRAW_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::MigrateToOpenBook => writer.write_all(&[MIGRATE_TO_OPEN_BOOK_IX_DISCM]),
            Self::SetParams(args) => {
                writer.write_all(&[SET_PARAMS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::WithdrawPnl => writer.write_all(&[WITHDRAW_PNL_IX_DISCM]),
            Self::WithdrawSrm(args) => {
                writer.write_all(&[WITHDRAW_SRM_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SwapBaseIn(args) => {
                writer.write_all(&[SWAP_BASE_IN_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::PreInitialize(args) => {
                writer.write_all(&[PRE_INITIALIZE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SwapBaseOut(args) => {
                writer.write_all(&[SWAP_BASE_OUT_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SimulateInfo(args) => {
                writer.write_all(&[SIMULATE_INFO_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::AdminCancelOrders(args) => {
                writer.write_all(&[ADMIN_CANCEL_ORDERS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CreateConfigAccount => writer.write_all(&[CREATE_CONFIG_ACCOUNT_IX_DISCM]),
            Self::UpdateConfigAccount(args) => {
                writer.write_all(&[UPDATE_CONFIG_ACCOUNT_IX_DISCM])?;
                args.serialize(&mut writer)
            }
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
