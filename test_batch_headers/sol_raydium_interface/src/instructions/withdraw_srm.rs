//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const WITHDRAW_SRM_IX_ACCOUNTS_LEN: usize = 6;
///Accounts struct for the withdrawSrm instruction
#[derive(Copy, Clone, Debug)]
pub struct WithdrawSrmAccounts<'me, 'info> {
    pub token_program: &'me AccountInfo<'info>,
    pub amm: &'me AccountInfo<'info>,
    pub amm_owner_account: &'me AccountInfo<'info>,
    pub amm_authority: &'me AccountInfo<'info>,
    pub srm_token: &'me AccountInfo<'info>,
    pub dest_srm_token: &'me AccountInfo<'info>,
}
///Public keys struct for the withdrawSrm instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct WithdrawSrmKeys {
    pub token_program: Pubkey,
    pub amm: Pubkey,
    pub amm_owner_account: Pubkey,
    pub amm_authority: Pubkey,
    pub srm_token: Pubkey,
    pub dest_srm_token: Pubkey,
}
impl From<WithdrawSrmAccounts<'_, '_>> for WithdrawSrmKeys {
    fn from(accounts: WithdrawSrmAccounts) -> Self {
        Self {
            token_program: *accounts.token_program.key,
            amm: *accounts.amm.key,
            amm_owner_account: *accounts.amm_owner_account.key,
            amm_authority: *accounts.amm_authority.key,
            srm_token: *accounts.srm_token.key,
            dest_srm_token: *accounts.dest_srm_token.key,
        }
    }
}
impl From<WithdrawSrmKeys> for [AccountMeta; WITHDRAW_SRM_IX_ACCOUNTS_LEN] {
    fn from(keys: WithdrawSrmKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_owner_account,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.srm_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.dest_srm_token,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; WITHDRAW_SRM_IX_ACCOUNTS_LEN]> for WithdrawSrmKeys {
    fn from(pubkeys: [Pubkey; WITHDRAW_SRM_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: pubkeys[0],
            amm: pubkeys[1],
            amm_owner_account: pubkeys[2],
            amm_authority: pubkeys[3],
            srm_token: pubkeys[4],
            dest_srm_token: pubkeys[5],
        }
    }
}
impl From<&[String]> for WithdrawSrmKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            token_program: pubkeys[0].parse().unwrap(),
            amm: pubkeys[1].parse().unwrap(),
            amm_owner_account: pubkeys[2].parse().unwrap(),
            amm_authority: pubkeys[3].parse().unwrap(),
            srm_token: pubkeys[4].parse().unwrap(),
            dest_srm_token: pubkeys[5].parse().unwrap(),
        }
    }
}
impl<'info> From<WithdrawSrmAccounts<'_, 'info>>
    for [AccountInfo<'info>; WITHDRAW_SRM_IX_ACCOUNTS_LEN]
{
    fn from(accounts: WithdrawSrmAccounts<'_, 'info>) -> Self {
        [
            accounts.token_program.clone(),
            accounts.amm.clone(),
            accounts.amm_owner_account.clone(),
            accounts.amm_authority.clone(),
            accounts.srm_token.clone(),
            accounts.dest_srm_token.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; WITHDRAW_SRM_IX_ACCOUNTS_LEN]>
    for WithdrawSrmAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; WITHDRAW_SRM_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: &arr[0],
            amm: &arr[1],
            amm_owner_account: &arr[2],
            amm_authority: &arr[3],
            srm_token: &arr[4],
            dest_srm_token: &arr[5],
        }
    }
}
pub const WITHDRAW_SRM_IX_DISCM: u8 = 8u8;
///Arguments for the withdrawSrm instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawSrmIxArgs {
    pub discriminator: u8,
    pub amount: u64,
}
impl Default for WithdrawSrmIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 8u8,
            amount: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct WithdrawSrmIxData(pub WithdrawSrmIxArgs);
impl From<WithdrawSrmIxArgs> for WithdrawSrmIxData {
    fn from(args: WithdrawSrmIxArgs) -> Self {
        Self(args)
    }
}
impl WithdrawSrmIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != WITHDRAW_SRM_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    WITHDRAW_SRM_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(WithdrawSrmIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[WITHDRAW_SRM_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn withdraw_srm_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawSrmKeys,
    args: WithdrawSrmIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; WITHDRAW_SRM_IX_ACCOUNTS_LEN] = keys.into();
    let data: WithdrawSrmIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn withdraw_srm_ix(
    keys: WithdrawSrmKeys,
    args: WithdrawSrmIxArgs,
) -> std::io::Result<Instruction> {
    withdraw_srm_ix_with_program_id(crate::ID, keys, args)
}
pub fn withdraw_srm_invoke_with_program_id(
    program_id: Pubkey,
    accounts: WithdrawSrmAccounts<'_, '_>,
    args: WithdrawSrmIxArgs,
) -> ProgramResult {
    let keys: WithdrawSrmKeys = accounts.into();
    let ix = withdraw_srm_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn withdraw_srm_invoke(
    accounts: WithdrawSrmAccounts<'_, '_>,
    args: WithdrawSrmIxArgs,
) -> ProgramResult {
    withdraw_srm_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn withdraw_srm_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: WithdrawSrmAccounts<'_, '_>,
    args: WithdrawSrmIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: WithdrawSrmKeys = accounts.into();
    let ix = withdraw_srm_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn withdraw_srm_invoke_signed(
    accounts: WithdrawSrmAccounts<'_, '_>,
    args: WithdrawSrmIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    withdraw_srm_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn withdraw_srm_verify_account_keys(
    accounts: WithdrawSrmAccounts<'_, '_>,
    keys: WithdrawSrmKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.token_program.key, keys.token_program),
        (*accounts.amm.key, keys.amm),
        (*accounts.amm_owner_account.key, keys.amm_owner_account),
        (*accounts.amm_authority.key, keys.amm_authority),
        (*accounts.srm_token.key, keys.srm_token),
        (*accounts.dest_srm_token.key, keys.dest_srm_token),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl WithdrawSrmIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<WithdrawSrmIxArgs> for RaydiumProgramIx {
    fn from(args: WithdrawSrmIxArgs) -> Self {
        Self::WithdrawSrm(args)
    }
}
