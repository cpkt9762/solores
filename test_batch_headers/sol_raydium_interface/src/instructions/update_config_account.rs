//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the updateConfigAccount instruction
#[derive(Copy, Clone, Debug)]
pub struct UpdateConfigAccountAccounts<'me, 'info> {
    pub admin: &'me AccountInfo<'info>,
    pub amm_config: &'me AccountInfo<'info>,
}
///Public keys struct for the updateConfigAccount instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct UpdateConfigAccountKeys {
    pub admin: Pubkey,
    pub amm_config: Pubkey,
}
impl From<UpdateConfigAccountAccounts<'_, '_>> for UpdateConfigAccountKeys {
    fn from(accounts: UpdateConfigAccountAccounts) -> Self {
        Self {
            admin: *accounts.admin.key,
            amm_config: *accounts.amm_config.key,
        }
    }
}
impl From<UpdateConfigAccountKeys> for [AccountMeta; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN] {
    fn from(keys: UpdateConfigAccountKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.admin,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_config,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN]> for UpdateConfigAccountKeys {
    fn from(pubkeys: [Pubkey; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            admin: pubkeys[0],
            amm_config: pubkeys[1],
        }
    }
}
impl From<&[String]> for UpdateConfigAccountKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            admin: pubkeys[0].parse().unwrap(),
            amm_config: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<UpdateConfigAccountAccounts<'_, 'info>>
    for [AccountInfo<'info>; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN]
{
    fn from(accounts: UpdateConfigAccountAccounts<'_, 'info>) -> Self {
        [accounts.admin.clone(), accounts.amm_config.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN]>
    for UpdateConfigAccountAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            admin: &arr[0],
            amm_config: &arr[1],
        }
    }
}
pub const UPDATE_CONFIG_ACCOUNT_IX_DISCM: u8 = 15u8;
///Arguments for the updateConfigAccount instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigAccountIxArgs {
    pub discriminator: u8,
    pub param: u8,
    pub owner: Pubkey,
}
impl Default for UpdateConfigAccountIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 15u8,
            param: Default::default(),
            owner: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct UpdateConfigAccountIxData(pub UpdateConfigAccountIxArgs);
impl From<UpdateConfigAccountIxArgs> for UpdateConfigAccountIxData {
    fn from(args: UpdateConfigAccountIxArgs) -> Self {
        Self(args)
    }
}
impl UpdateConfigAccountIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != UPDATE_CONFIG_ACCOUNT_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    UPDATE_CONFIG_ACCOUNT_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(UpdateConfigAccountIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[UPDATE_CONFIG_ACCOUNT_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn update_config_account_ix_with_program_id(
    program_id: Pubkey,
    keys: UpdateConfigAccountKeys,
    args: UpdateConfigAccountIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; UPDATE_CONFIG_ACCOUNT_IX_ACCOUNTS_LEN] = keys.into();
    let data: UpdateConfigAccountIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn update_config_account_ix(
    keys: UpdateConfigAccountKeys,
    args: UpdateConfigAccountIxArgs,
) -> std::io::Result<Instruction> {
    update_config_account_ix_with_program_id(crate::ID, keys, args)
}
pub fn update_config_account_invoke_with_program_id(
    program_id: Pubkey,
    accounts: UpdateConfigAccountAccounts<'_, '_>,
    args: UpdateConfigAccountIxArgs,
) -> ProgramResult {
    let keys: UpdateConfigAccountKeys = accounts.into();
    let ix = update_config_account_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn update_config_account_invoke(
    accounts: UpdateConfigAccountAccounts<'_, '_>,
    args: UpdateConfigAccountIxArgs,
) -> ProgramResult {
    update_config_account_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn update_config_account_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: UpdateConfigAccountAccounts<'_, '_>,
    args: UpdateConfigAccountIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: UpdateConfigAccountKeys = accounts.into();
    let ix = update_config_account_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn update_config_account_invoke_signed(
    accounts: UpdateConfigAccountAccounts<'_, '_>,
    args: UpdateConfigAccountIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    update_config_account_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn update_config_account_verify_account_keys(
    accounts: UpdateConfigAccountAccounts<'_, '_>,
    keys: UpdateConfigAccountKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.admin.key, keys.admin),
        (*accounts.amm_config.key, keys.amm_config),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl UpdateConfigAccountIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<UpdateConfigAccountIxArgs> for RaydiumProgramIx {
    fn from(args: UpdateConfigAccountIxArgs) -> Self {
        Self::UpdateConfigAccount(args)
    }
}
