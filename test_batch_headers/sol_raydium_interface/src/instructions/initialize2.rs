//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const INITIALIZE2_IX_ACCOUNTS_LEN: usize = 21;
///Accounts struct for the initialize2 instruction
#[derive(Copy, Clone, Debug)]
pub struct Initialize2Accounts<'me, 'info> {
    pub token_program: &'me AccountInfo<'info>,
    pub spl_associated_token_account: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub rent: &'me AccountInfo<'info>,
    pub amm: &'me AccountInfo<'info>,
    pub amm_authority: &'me AccountInfo<'info>,
    pub amm_open_orders: &'me AccountInfo<'info>,
    pub lp_mint: &'me AccountInfo<'info>,
    pub coin_mint: &'me AccountInfo<'info>,
    pub pc_mint: &'me AccountInfo<'info>,
    pub pool_coin_token_account: &'me AccountInfo<'info>,
    pub pool_pc_token_account: &'me AccountInfo<'info>,
    pub pool_withdraw_queue: &'me AccountInfo<'info>,
    pub amm_target_orders: &'me AccountInfo<'info>,
    pub pool_temp_lp: &'me AccountInfo<'info>,
    pub serum_program: &'me AccountInfo<'info>,
    pub serum_market: &'me AccountInfo<'info>,
    pub user_wallet: &'me AccountInfo<'info>,
    pub user_token_coin: &'me AccountInfo<'info>,
    pub user_token_pc: &'me AccountInfo<'info>,
    pub user_lp_token_account: &'me AccountInfo<'info>,
}
///Public keys struct for the initialize2 instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct Initialize2Keys {
    pub token_program: Pubkey,
    pub spl_associated_token_account: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub amm: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub lp_mint: Pubkey,
    pub coin_mint: Pubkey,
    pub pc_mint: Pubkey,
    pub pool_coin_token_account: Pubkey,
    pub pool_pc_token_account: Pubkey,
    pub pool_withdraw_queue: Pubkey,
    pub amm_target_orders: Pubkey,
    pub pool_temp_lp: Pubkey,
    pub serum_program: Pubkey,
    pub serum_market: Pubkey,
    pub user_wallet: Pubkey,
    pub user_token_coin: Pubkey,
    pub user_token_pc: Pubkey,
    pub user_lp_token_account: Pubkey,
}
impl From<Initialize2Accounts<'_, '_>> for Initialize2Keys {
    fn from(accounts: Initialize2Accounts) -> Self {
        Self {
            token_program: *accounts.token_program.key,
            spl_associated_token_account: *accounts.spl_associated_token_account.key,
            system_program: *accounts.system_program.key,
            rent: *accounts.rent.key,
            amm: *accounts.amm.key,
            amm_authority: *accounts.amm_authority.key,
            amm_open_orders: *accounts.amm_open_orders.key,
            lp_mint: *accounts.lp_mint.key,
            coin_mint: *accounts.coin_mint.key,
            pc_mint: *accounts.pc_mint.key,
            pool_coin_token_account: *accounts.pool_coin_token_account.key,
            pool_pc_token_account: *accounts.pool_pc_token_account.key,
            pool_withdraw_queue: *accounts.pool_withdraw_queue.key,
            amm_target_orders: *accounts.amm_target_orders.key,
            pool_temp_lp: *accounts.pool_temp_lp.key,
            serum_program: *accounts.serum_program.key,
            serum_market: *accounts.serum_market.key,
            user_wallet: *accounts.user_wallet.key,
            user_token_coin: *accounts.user_token_coin.key,
            user_token_pc: *accounts.user_token_pc.key,
            user_lp_token_account: *accounts.user_lp_token_account.key,
        }
    }
}
impl From<Initialize2Keys> for [AccountMeta; INITIALIZE2_IX_ACCOUNTS_LEN] {
    fn from(keys: Initialize2Keys) -> Self {
        [
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.spl_associated_token_account,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.coin_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pc_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_coin_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_pc_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_withdraw_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_target_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_temp_lp,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.serum_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.serum_market,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.user_wallet,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_token_coin,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_token_pc,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_lp_token_account,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; INITIALIZE2_IX_ACCOUNTS_LEN]> for Initialize2Keys {
    fn from(pubkeys: [Pubkey; INITIALIZE2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: pubkeys[0],
            spl_associated_token_account: pubkeys[1],
            system_program: pubkeys[2],
            rent: pubkeys[3],
            amm: pubkeys[4],
            amm_authority: pubkeys[5],
            amm_open_orders: pubkeys[6],
            lp_mint: pubkeys[7],
            coin_mint: pubkeys[8],
            pc_mint: pubkeys[9],
            pool_coin_token_account: pubkeys[10],
            pool_pc_token_account: pubkeys[11],
            pool_withdraw_queue: pubkeys[12],
            amm_target_orders: pubkeys[13],
            pool_temp_lp: pubkeys[14],
            serum_program: pubkeys[15],
            serum_market: pubkeys[16],
            user_wallet: pubkeys[17],
            user_token_coin: pubkeys[18],
            user_token_pc: pubkeys[19],
            user_lp_token_account: pubkeys[20],
        }
    }
}
impl From<&[String]> for Initialize2Keys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            token_program: pubkeys[0].parse().unwrap(),
            spl_associated_token_account: pubkeys[1].parse().unwrap(),
            system_program: pubkeys[2].parse().unwrap(),
            rent: pubkeys[3].parse().unwrap(),
            amm: pubkeys[4].parse().unwrap(),
            amm_authority: pubkeys[5].parse().unwrap(),
            amm_open_orders: pubkeys[6].parse().unwrap(),
            lp_mint: pubkeys[7].parse().unwrap(),
            coin_mint: pubkeys[8].parse().unwrap(),
            pc_mint: pubkeys[9].parse().unwrap(),
            pool_coin_token_account: pubkeys[10].parse().unwrap(),
            pool_pc_token_account: pubkeys[11].parse().unwrap(),
            pool_withdraw_queue: pubkeys[12].parse().unwrap(),
            amm_target_orders: pubkeys[13].parse().unwrap(),
            pool_temp_lp: pubkeys[14].parse().unwrap(),
            serum_program: pubkeys[15].parse().unwrap(),
            serum_market: pubkeys[16].parse().unwrap(),
            user_wallet: pubkeys[17].parse().unwrap(),
            user_token_coin: pubkeys[18].parse().unwrap(),
            user_token_pc: pubkeys[19].parse().unwrap(),
            user_lp_token_account: pubkeys[20].parse().unwrap(),
        }
    }
}
impl<'info> From<Initialize2Accounts<'_, 'info>>
    for [AccountInfo<'info>; INITIALIZE2_IX_ACCOUNTS_LEN]
{
    fn from(accounts: Initialize2Accounts<'_, 'info>) -> Self {
        [
            accounts.token_program.clone(),
            accounts.spl_associated_token_account.clone(),
            accounts.system_program.clone(),
            accounts.rent.clone(),
            accounts.amm.clone(),
            accounts.amm_authority.clone(),
            accounts.amm_open_orders.clone(),
            accounts.lp_mint.clone(),
            accounts.coin_mint.clone(),
            accounts.pc_mint.clone(),
            accounts.pool_coin_token_account.clone(),
            accounts.pool_pc_token_account.clone(),
            accounts.pool_withdraw_queue.clone(),
            accounts.amm_target_orders.clone(),
            accounts.pool_temp_lp.clone(),
            accounts.serum_program.clone(),
            accounts.serum_market.clone(),
            accounts.user_wallet.clone(),
            accounts.user_token_coin.clone(),
            accounts.user_token_pc.clone(),
            accounts.user_lp_token_account.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; INITIALIZE2_IX_ACCOUNTS_LEN]>
    for Initialize2Accounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; INITIALIZE2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: &arr[0],
            spl_associated_token_account: &arr[1],
            system_program: &arr[2],
            rent: &arr[3],
            amm: &arr[4],
            amm_authority: &arr[5],
            amm_open_orders: &arr[6],
            lp_mint: &arr[7],
            coin_mint: &arr[8],
            pc_mint: &arr[9],
            pool_coin_token_account: &arr[10],
            pool_pc_token_account: &arr[11],
            pool_withdraw_queue: &arr[12],
            amm_target_orders: &arr[13],
            pool_temp_lp: &arr[14],
            serum_program: &arr[15],
            serum_market: &arr[16],
            user_wallet: &arr[17],
            user_token_coin: &arr[18],
            user_token_pc: &arr[19],
            user_lp_token_account: &arr[20],
        }
    }
}
pub const INITIALIZE2_IX_DISCM: u8 = 1u8;
///Arguments for the initialize2 instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Initialize2IxArgs {
    pub discriminator: u8,
    pub nonce: u8,
    pub open_time: u64,
    pub init_pc_amount: u64,
    pub init_coin_amount: u64,
}
impl Default for Initialize2IxArgs {
    fn default() -> Self {
        Self {
            discriminator: 1u8,
            nonce: Default::default(),
            open_time: Default::default(),
            init_pc_amount: Default::default(),
            init_coin_amount: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct Initialize2IxData(pub Initialize2IxArgs);
impl From<Initialize2IxArgs> for Initialize2IxData {
    fn from(args: Initialize2IxArgs) -> Self {
        Self(args)
    }
}
impl Initialize2IxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != INITIALIZE2_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    INITIALIZE2_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(Initialize2IxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[INITIALIZE2_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initialize2_ix_with_program_id(
    program_id: Pubkey,
    keys: Initialize2Keys,
    args: Initialize2IxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIALIZE2_IX_ACCOUNTS_LEN] = keys.into();
    let data: Initialize2IxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn initialize2_ix(
    keys: Initialize2Keys,
    args: Initialize2IxArgs,
) -> std::io::Result<Instruction> {
    initialize2_ix_with_program_id(crate::ID, keys, args)
}
pub fn initialize2_invoke_with_program_id(
    program_id: Pubkey,
    accounts: Initialize2Accounts<'_, '_>,
    args: Initialize2IxArgs,
) -> ProgramResult {
    let keys: Initialize2Keys = accounts.into();
    let ix = initialize2_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn initialize2_invoke(
    accounts: Initialize2Accounts<'_, '_>,
    args: Initialize2IxArgs,
) -> ProgramResult {
    initialize2_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn initialize2_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: Initialize2Accounts<'_, '_>,
    args: Initialize2IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: Initialize2Keys = accounts.into();
    let ix = initialize2_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initialize2_invoke_signed(
    accounts: Initialize2Accounts<'_, '_>,
    args: Initialize2IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initialize2_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn initialize2_verify_account_keys(
    accounts: Initialize2Accounts<'_, '_>,
    keys: Initialize2Keys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.spl_associated_token_account.key,
            keys.spl_associated_token_account,
        ),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent.key, keys.rent),
        (*accounts.amm.key, keys.amm),
        (*accounts.amm_authority.key, keys.amm_authority),
        (*accounts.amm_open_orders.key, keys.amm_open_orders),
        (*accounts.lp_mint.key, keys.lp_mint),
        (*accounts.coin_mint.key, keys.coin_mint),
        (*accounts.pc_mint.key, keys.pc_mint),
        (
            *accounts.pool_coin_token_account.key,
            keys.pool_coin_token_account,
        ),
        (
            *accounts.pool_pc_token_account.key,
            keys.pool_pc_token_account,
        ),
        (*accounts.pool_withdraw_queue.key, keys.pool_withdraw_queue),
        (*accounts.amm_target_orders.key, keys.amm_target_orders),
        (*accounts.pool_temp_lp.key, keys.pool_temp_lp),
        (*accounts.serum_program.key, keys.serum_program),
        (*accounts.serum_market.key, keys.serum_market),
        (*accounts.user_wallet.key, keys.user_wallet),
        (*accounts.user_token_coin.key, keys.user_token_coin),
        (*accounts.user_token_pc.key, keys.user_token_pc),
        (
            *accounts.user_lp_token_account.key,
            keys.user_lp_token_account,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl Initialize2IxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<Initialize2IxArgs> for RaydiumProgramIx {
    fn from(args: Initialize2IxArgs) -> Self {
        Self::Initialize2(args)
    }
}
