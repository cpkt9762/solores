//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AmmInfo {
    pub status: u64,
    pub nonce: u64,
    pub order_num: u64,
    pub depth: u64,
    pub coin_decimals: u64,
    pub pc_decimals: u64,
    pub state: u64,
    pub reset_flag: u64,
    pub min_size: u64,
    pub vol_max_cut_ratio: u64,
    pub amount_wave: u64,
    pub coin_lot_size: u64,
    pub pc_lot_size: u64,
    pub min_price_multiplier: u64,
    pub max_price_multiplier: u64,
    pub sys_decimal_value: u64,
    pub fees: Fees,
    pub out_put: OutPutData,
    pub token_coin: Pubkey,
    pub token_pc: Pubkey,
    pub coin_mint: Pubkey,
    pub pc_mint: Pubkey,
    pub lp_mint: Pubkey,
    pub open_orders: Pubkey,
    pub market: Pubkey,
    pub serum_dex: Pubkey,
    pub target_orders: Pubkey,
    pub withdraw_queue: Pubkey,
    pub token_temp_lp: Pubkey,
    pub amm_owner: Pubkey,
    pub lp_amount: u64,
    pub client_order_id: u64,
    pub padding: [u64; 2],
}
impl Default for AmmInfo {
    fn default() -> Self {
        Self {
            status: Default::default(),
            nonce: Default::default(),
            order_num: Default::default(),
            depth: Default::default(),
            coin_decimals: Default::default(),
            pc_decimals: Default::default(),
            state: Default::default(),
            reset_flag: Default::default(),
            min_size: Default::default(),
            vol_max_cut_ratio: Default::default(),
            amount_wave: Default::default(),
            coin_lot_size: Default::default(),
            pc_lot_size: Default::default(),
            min_price_multiplier: Default::default(),
            max_price_multiplier: Default::default(),
            sys_decimal_value: Default::default(),
            fees: Default::default(),
            out_put: Default::default(),
            token_coin: Pubkey::default(),
            token_pc: Pubkey::default(),
            coin_mint: Pubkey::default(),
            pc_mint: Pubkey::default(),
            lp_mint: Pubkey::default(),
            open_orders: Pubkey::default(),
            market: Pubkey::default(),
            serum_dex: Pubkey::default(),
            target_orders: Pubkey::default(),
            withdraw_queue: Pubkey::default(),
            token_temp_lp: Pubkey::default(),
            amm_owner: Pubkey::default(),
            lp_amount: Default::default(),
            client_order_id: Default::default(),
            padding: [Default::default(); 2],
        }
    }
}
impl AmmInfo {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
