//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TargetOrders {
    pub owner: [u64; 4],
    pub buy_orders: [TargetOrder; 50],
    pub padding1: [u64; 8],
    pub target_x: u128,
    pub target_y: u128,
    pub plan_x_buy: u128,
    pub plan_y_buy: u128,
    pub plan_x_sell: u128,
    pub plan_y_sell: u128,
    pub placed_x: u128,
    pub placed_y: u128,
    pub calc_pnl_x: u128,
    pub calc_pnl_y: u128,
    pub sell_orders: [TargetOrder; 50],
    pub padding2: [u64; 6],
    pub replace_buy_client_id: [u64; 10],
    pub replace_sell_client_id: [u64; 10],
    pub last_order_numerator: u64,
    pub last_order_denominator: u64,
    pub plan_orders_cur: u64,
    pub place_orders_cur: u64,
    pub valid_buy_order_num: u64,
    pub valid_sell_order_num: u64,
    pub padding3: [u64; 10],
    pub free_slot_bits: u128,
}
impl Default for TargetOrders {
    fn default() -> Self {
        Self {
            owner: [Default::default(); 4],
            buy_orders: core::array::from_fn(|_| Default::default()),
            padding1: [Default::default(); 8],
            target_x: Default::default(),
            target_y: Default::default(),
            plan_x_buy: Default::default(),
            plan_y_buy: Default::default(),
            plan_x_sell: Default::default(),
            plan_y_sell: Default::default(),
            placed_x: Default::default(),
            placed_y: Default::default(),
            calc_pnl_x: Default::default(),
            calc_pnl_y: Default::default(),
            sell_orders: core::array::from_fn(|_| Default::default()),
            padding2: [Default::default(); 6],
            replace_buy_client_id: [Default::default(); 10],
            replace_sell_client_id: [Default::default(); 10],
            last_order_numerator: Default::default(),
            last_order_denominator: Default::default(),
            plan_orders_cur: Default::default(),
            place_orders_cur: Default::default(),
            valid_buy_order_num: Default::default(),
            valid_sell_order_num: Default::default(),
            padding3: [Default::default(); 10],
            free_slot_bits: Default::default(),
        }
    }
}
impl TargetOrders {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
