//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN: usize = 4;
///Accounts struct for the ConsumeEventsPermissioned instruction
#[derive(Copy, Clone, Debug)]
pub struct ConsumeEventsPermissionedAccounts<'me, 'info> {
    ///OpenOrders; TODO: this is an array
    pub open_orders: &'me AccountInfo<'info>,
    ///market
    pub market: &'me AccountInfo<'info>,
    ///event queue
    pub event_queue: &'me AccountInfo<'info>,
    ///crank authority
    pub crank_authority: &'me AccountInfo<'info>,
}
///Public keys struct for the ConsumeEventsPermissioned instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ConsumeEventsPermissionedKeys {
    ///OpenOrders; TODO: this is an array
    pub open_orders: Pubkey,
    ///market
    pub market: Pubkey,
    ///event queue
    pub event_queue: Pubkey,
    ///crank authority
    pub crank_authority: Pubkey,
}
impl From<ConsumeEventsPermissionedAccounts<'_, '_>> for ConsumeEventsPermissionedKeys {
    fn from(accounts: ConsumeEventsPermissionedAccounts) -> Self {
        Self {
            open_orders: *accounts.open_orders.key,
            market: *accounts.market.key,
            event_queue: *accounts.event_queue.key,
            crank_authority: *accounts.crank_authority.key,
        }
    }
}
impl From<ConsumeEventsPermissionedKeys>
    for [AccountMeta; CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN]
{
    fn from(keys: ConsumeEventsPermissionedKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.event_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.crank_authority,
                is_signer: true,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN]> for ConsumeEventsPermissionedKeys {
    fn from(pubkeys: [Pubkey; CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            open_orders: pubkeys[0],
            market: pubkeys[1],
            event_queue: pubkeys[2],
            crank_authority: pubkeys[3],
        }
    }
}
impl From<&[String]> for ConsumeEventsPermissionedKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            open_orders: pubkeys[0].parse().unwrap(),
            market: pubkeys[1].parse().unwrap(),
            event_queue: pubkeys[2].parse().unwrap(),
            crank_authority: pubkeys[3].parse().unwrap(),
        }
    }
}
impl<'info> From<ConsumeEventsPermissionedAccounts<'_, 'info>>
    for [AccountInfo<'info>; CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ConsumeEventsPermissionedAccounts<'_, 'info>) -> Self {
        [
            accounts.open_orders.clone(),
            accounts.market.clone(),
            accounts.event_queue.clone(),
            accounts.crank_authority.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN]>
    for ConsumeEventsPermissionedAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            open_orders: &arr[0],
            market: &arr[1],
            event_queue: &arr[2],
            crank_authority: &arr[3],
        }
    }
}
pub const CONSUME_EVENTS_PERMISSIONED_IX_DISCM: u8 = 17u8;
///Arguments for the ConsumeEventsPermissioned instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConsumeEventsPermissionedIxArgs {
    pub discriminator: u8,
    pub limit: u16,
}
impl Default for ConsumeEventsPermissionedIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 17u8,
            limit: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct ConsumeEventsPermissionedIxData(pub ConsumeEventsPermissionedIxArgs);
impl From<ConsumeEventsPermissionedIxArgs> for ConsumeEventsPermissionedIxData {
    fn from(args: ConsumeEventsPermissionedIxArgs) -> Self {
        Self(args)
    }
}
impl ConsumeEventsPermissionedIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != CONSUME_EVENTS_PERMISSIONED_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    CONSUME_EVENTS_PERMISSIONED_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(ConsumeEventsPermissionedIxArgs::deserialize(
            &mut reader,
        )?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[CONSUME_EVENTS_PERMISSIONED_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn consume_events_permissioned_ix_with_program_id(
    program_id: Pubkey,
    keys: ConsumeEventsPermissionedKeys,
    args: ConsumeEventsPermissionedIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CONSUME_EVENTS_PERMISSIONED_IX_ACCOUNTS_LEN] = keys.into();
    let data: ConsumeEventsPermissionedIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn consume_events_permissioned_ix(
    keys: ConsumeEventsPermissionedKeys,
    args: ConsumeEventsPermissionedIxArgs,
) -> std::io::Result<Instruction> {
    consume_events_permissioned_ix_with_program_id(crate::ID, keys, args)
}
pub fn consume_events_permissioned_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ConsumeEventsPermissionedAccounts<'_, '_>,
    args: ConsumeEventsPermissionedIxArgs,
) -> ProgramResult {
    let keys: ConsumeEventsPermissionedKeys = accounts.into();
    let ix = consume_events_permissioned_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn consume_events_permissioned_invoke(
    accounts: ConsumeEventsPermissionedAccounts<'_, '_>,
    args: ConsumeEventsPermissionedIxArgs,
) -> ProgramResult {
    consume_events_permissioned_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn consume_events_permissioned_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ConsumeEventsPermissionedAccounts<'_, '_>,
    args: ConsumeEventsPermissionedIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ConsumeEventsPermissionedKeys = accounts.into();
    let ix = consume_events_permissioned_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn consume_events_permissioned_invoke_signed(
    accounts: ConsumeEventsPermissionedAccounts<'_, '_>,
    args: ConsumeEventsPermissionedIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    consume_events_permissioned_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn consume_events_permissioned_verify_account_keys(
    accounts: ConsumeEventsPermissionedAccounts<'_, '_>,
    keys: ConsumeEventsPermissionedKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.open_orders.key, keys.open_orders),
        (*accounts.market.key, keys.market),
        (*accounts.event_queue.key, keys.event_queue),
        (*accounts.crank_authority.key, keys.crank_authority),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl ConsumeEventsPermissionedIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<ConsumeEventsPermissionedIxArgs> for OpenbookProgramIx {
    fn from(args: ConsumeEventsPermissionedIxArgs) -> Self {
        Self::ConsumeEventsPermissioned(args)
    }
}
