//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const DISABLE_MARKET_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the DisableMarket instruction
#[derive(Copy, Clone, Debug)]
pub struct DisableMarketAccounts<'me, 'info> {
    ///market
    pub market: &'me AccountInfo<'info>,
    ///disable authority
    pub disable_authority: &'me AccountInfo<'info>,
}
///Public keys struct for the DisableMarket instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct DisableMarketKeys {
    ///market
    pub market: Pubkey,
    ///disable authority
    pub disable_authority: Pubkey,
}
impl From<DisableMarketAccounts<'_, '_>> for DisableMarketKeys {
    fn from(accounts: DisableMarketAccounts) -> Self {
        Self {
            market: *accounts.market.key,
            disable_authority: *accounts.disable_authority.key,
        }
    }
}
impl From<DisableMarketKeys> for [AccountMeta; DISABLE_MARKET_IX_ACCOUNTS_LEN] {
    fn from(keys: DisableMarketKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.disable_authority,
                is_signer: true,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; DISABLE_MARKET_IX_ACCOUNTS_LEN]> for DisableMarketKeys {
    fn from(pubkeys: [Pubkey; DISABLE_MARKET_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: pubkeys[0],
            disable_authority: pubkeys[1],
        }
    }
}
impl From<&[String]> for DisableMarketKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            market: pubkeys[0].parse().unwrap(),
            disable_authority: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<DisableMarketAccounts<'_, 'info>>
    for [AccountInfo<'info>; DISABLE_MARKET_IX_ACCOUNTS_LEN]
{
    fn from(accounts: DisableMarketAccounts<'_, 'info>) -> Self {
        [accounts.market.clone(), accounts.disable_authority.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; DISABLE_MARKET_IX_ACCOUNTS_LEN]>
    for DisableMarketAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; DISABLE_MARKET_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: &arr[0],
            disable_authority: &arr[1],
        }
    }
}
pub const DISABLE_MARKET_IX_DISCM: u8 = 7u8;
#[derive(Clone, Debug, PartialEq)]
pub struct DisableMarketIxData;
impl DisableMarketIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != DISABLE_MARKET_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    DISABLE_MARKET_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[DISABLE_MARKET_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn disable_market_ix_with_program_id(
    program_id: Pubkey,
    keys: DisableMarketKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; DISABLE_MARKET_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: DisableMarketIxData.try_to_vec()?,
    })
}
pub fn disable_market_ix(keys: DisableMarketKeys) -> std::io::Result<Instruction> {
    disable_market_ix_with_program_id(crate::ID, keys)
}
pub fn disable_market_invoke_with_program_id(
    program_id: Pubkey,
    accounts: DisableMarketAccounts<'_, '_>,
) -> ProgramResult {
    let keys: DisableMarketKeys = accounts.into();
    let ix = disable_market_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn disable_market_invoke(accounts: DisableMarketAccounts<'_, '_>) -> ProgramResult {
    disable_market_invoke_with_program_id(crate::ID, accounts)
}
pub fn disable_market_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: DisableMarketAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: DisableMarketKeys = accounts.into();
    let ix = disable_market_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn disable_market_invoke_signed(
    accounts: DisableMarketAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    disable_market_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn disable_market_verify_account_keys(
    accounts: DisableMarketAccounts<'_, '_>,
    keys: DisableMarketKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.market.key, keys.market),
        (*accounts.disable_authority.key, keys.disable_authority),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
