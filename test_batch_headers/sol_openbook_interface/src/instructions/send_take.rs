//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const SEND_TAKE_IX_ACCOUNTS_LEN: usize = 12;
///Accounts struct for the SendTake instruction
#[derive(Copy, Clone, Debug)]
pub struct SendTakeAccounts<'me, 'info> {
    ///market
    pub market: &'me AccountInfo<'info>,
    ///the request queue
    pub request_queue: &'me AccountInfo<'info>,
    ///the event queue
    pub event_queue: &'me AccountInfo<'info>,
    ///bids
    pub bids: &'me AccountInfo<'info>,
    ///asks
    pub asks: &'me AccountInfo<'info>,
    ///the coin currency wallet account
    pub coin_currency_wallet: &'me AccountInfo<'info>,
    ///the price currency wallet account
    pub price_currency_wallet: &'me AccountInfo<'info>,
    ///signer
    pub signer: &'me AccountInfo<'info>,
    ///coin vault
    pub coin_vault: &'me AccountInfo<'info>,
    ///pc vault
    pub pc_vault: &'me AccountInfo<'info>,
    ///spl token program
    pub spl_token_program: &'me AccountInfo<'info>,
    ///(optional) the (M)SRM account used for fee discounts
    pub fee_discounts: &'me AccountInfo<'info>,
}
///Public keys struct for the SendTake instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SendTakeKeys {
    ///market
    pub market: Pubkey,
    ///the request queue
    pub request_queue: Pubkey,
    ///the event queue
    pub event_queue: Pubkey,
    ///bids
    pub bids: Pubkey,
    ///asks
    pub asks: Pubkey,
    ///the coin currency wallet account
    pub coin_currency_wallet: Pubkey,
    ///the price currency wallet account
    pub price_currency_wallet: Pubkey,
    ///signer
    pub signer: Pubkey,
    ///coin vault
    pub coin_vault: Pubkey,
    ///pc vault
    pub pc_vault: Pubkey,
    ///spl token program
    pub spl_token_program: Pubkey,
    ///(optional) the (M)SRM account used for fee discounts
    pub fee_discounts: Pubkey,
}
impl From<SendTakeAccounts<'_, '_>> for SendTakeKeys {
    fn from(accounts: SendTakeAccounts) -> Self {
        Self {
            market: *accounts.market.key,
            request_queue: *accounts.request_queue.key,
            event_queue: *accounts.event_queue.key,
            bids: *accounts.bids.key,
            asks: *accounts.asks.key,
            coin_currency_wallet: *accounts.coin_currency_wallet.key,
            price_currency_wallet: *accounts.price_currency_wallet.key,
            signer: *accounts.signer.key,
            coin_vault: *accounts.coin_vault.key,
            pc_vault: *accounts.pc_vault.key,
            spl_token_program: *accounts.spl_token_program.key,
            fee_discounts: *accounts.fee_discounts.key,
        }
    }
}
impl From<SendTakeKeys> for [AccountMeta; SEND_TAKE_IX_ACCOUNTS_LEN] {
    fn from(keys: SendTakeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.request_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.event_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bids,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.asks,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.coin_currency_wallet,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.price_currency_wallet,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.signer,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.coin_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pc_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.spl_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_discounts,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; SEND_TAKE_IX_ACCOUNTS_LEN]> for SendTakeKeys {
    fn from(pubkeys: [Pubkey; SEND_TAKE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: pubkeys[0],
            request_queue: pubkeys[1],
            event_queue: pubkeys[2],
            bids: pubkeys[3],
            asks: pubkeys[4],
            coin_currency_wallet: pubkeys[5],
            price_currency_wallet: pubkeys[6],
            signer: pubkeys[7],
            coin_vault: pubkeys[8],
            pc_vault: pubkeys[9],
            spl_token_program: pubkeys[10],
            fee_discounts: pubkeys[11],
        }
    }
}
impl From<&[String]> for SendTakeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            market: pubkeys[0].parse().unwrap(),
            request_queue: pubkeys[1].parse().unwrap(),
            event_queue: pubkeys[2].parse().unwrap(),
            bids: pubkeys[3].parse().unwrap(),
            asks: pubkeys[4].parse().unwrap(),
            coin_currency_wallet: pubkeys[5].parse().unwrap(),
            price_currency_wallet: pubkeys[6].parse().unwrap(),
            signer: pubkeys[7].parse().unwrap(),
            coin_vault: pubkeys[8].parse().unwrap(),
            pc_vault: pubkeys[9].parse().unwrap(),
            spl_token_program: pubkeys[10].parse().unwrap(),
            fee_discounts: pubkeys[11].parse().unwrap(),
        }
    }
}
impl<'info> From<SendTakeAccounts<'_, 'info>> for [AccountInfo<'info>; SEND_TAKE_IX_ACCOUNTS_LEN] {
    fn from(accounts: SendTakeAccounts<'_, 'info>) -> Self {
        [
            accounts.market.clone(),
            accounts.request_queue.clone(),
            accounts.event_queue.clone(),
            accounts.bids.clone(),
            accounts.asks.clone(),
            accounts.coin_currency_wallet.clone(),
            accounts.price_currency_wallet.clone(),
            accounts.signer.clone(),
            accounts.coin_vault.clone(),
            accounts.pc_vault.clone(),
            accounts.spl_token_program.clone(),
            accounts.fee_discounts.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SEND_TAKE_IX_ACCOUNTS_LEN]>
    for SendTakeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; SEND_TAKE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            market: &arr[0],
            request_queue: &arr[1],
            event_queue: &arr[2],
            bids: &arr[3],
            asks: &arr[4],
            coin_currency_wallet: &arr[5],
            price_currency_wallet: &arr[6],
            signer: &arr[7],
            coin_vault: &arr[8],
            pc_vault: &arr[9],
            spl_token_program: &arr[10],
            fee_discounts: &arr[11],
        }
    }
}
pub const SEND_TAKE_IX_DISCM: u8 = 13u8;
///Arguments for the SendTake instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SendTakeIxArgs {
    pub discriminator: u8,
    pub args: SendTakeInstruction,
}
impl Default for SendTakeIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 13u8,
            args: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct SendTakeIxData(pub SendTakeIxArgs);
impl From<SendTakeIxArgs> for SendTakeIxData {
    fn from(args: SendTakeIxArgs) -> Self {
        Self(args)
    }
}
impl SendTakeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != SEND_TAKE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    SEND_TAKE_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(SendTakeIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[SEND_TAKE_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn send_take_ix_with_program_id(
    program_id: Pubkey,
    keys: SendTakeKeys,
    args: SendTakeIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SEND_TAKE_IX_ACCOUNTS_LEN] = keys.into();
    let data: SendTakeIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn send_take_ix(keys: SendTakeKeys, args: SendTakeIxArgs) -> std::io::Result<Instruction> {
    send_take_ix_with_program_id(crate::ID, keys, args)
}
pub fn send_take_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SendTakeAccounts<'_, '_>,
    args: SendTakeIxArgs,
) -> ProgramResult {
    let keys: SendTakeKeys = accounts.into();
    let ix = send_take_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn send_take_invoke(accounts: SendTakeAccounts<'_, '_>, args: SendTakeIxArgs) -> ProgramResult {
    send_take_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn send_take_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SendTakeAccounts<'_, '_>,
    args: SendTakeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SendTakeKeys = accounts.into();
    let ix = send_take_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn send_take_invoke_signed(
    accounts: SendTakeAccounts<'_, '_>,
    args: SendTakeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    send_take_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn send_take_verify_account_keys(
    accounts: SendTakeAccounts<'_, '_>,
    keys: SendTakeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.market.key, keys.market),
        (*accounts.request_queue.key, keys.request_queue),
        (*accounts.event_queue.key, keys.event_queue),
        (*accounts.bids.key, keys.bids),
        (*accounts.asks.key, keys.asks),
        (
            *accounts.coin_currency_wallet.key,
            keys.coin_currency_wallet,
        ),
        (
            *accounts.price_currency_wallet.key,
            keys.price_currency_wallet,
        ),
        (*accounts.signer.key, keys.signer),
        (*accounts.coin_vault.key, keys.coin_vault),
        (*accounts.pc_vault.key, keys.pc_vault),
        (*accounts.spl_token_program.key, keys.spl_token_program),
        (*accounts.fee_discounts.key, keys.fee_discounts),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl SendTakeIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<SendTakeIxArgs> for OpenbookProgramIx {
    fn from(args: SendTakeIxArgs) -> Self {
        Self::SendTake(args)
    }
}
