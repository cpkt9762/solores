//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockedCpLiquidityState {
    ///The Locked liquidity amount without claimed lp fee
    pub locked_lp_amount: u64,
    ///Claimed lp fee amount
    pub claimed_lp_amount: u64,
    ///Unclaimed lp fee amount
    pub unclaimed_lp_amount: u64,
    ///Last updated cp pool lp total supply
    pub last_lp: u64,
    ///Last updated cp pool k
    pub last_k: u128,
    ///Account update recent epoch
    pub recent_epoch: u64,
    ///The ID of the pool with which this record is connected
    pub pool_id: Pubkey,
    ///nft mint to check who has authority to collect fee
    pub fee_nft_mint: Pubkey,
    ///The owner who has locked liquidity
    pub locked_owner: Pubkey,
    ///The mint of locked lp token
    pub locked_lp_mint: Pubkey,
    ///Unused bytes for future upgrades.
    pub padding: [u64; 8],
}
impl Default for LockedCpLiquidityState {
    fn default() -> Self {
        Self {
            locked_lp_amount: Default::default(),
            claimed_lp_amount: Default::default(),
            unclaimed_lp_amount: Default::default(),
            last_lp: Default::default(),
            last_k: Default::default(),
            recent_epoch: Default::default(),
            pool_id: Default::default(),
            fee_nft_mint: Default::default(),
            locked_owner: Default::default(),
            locked_lp_mint: Default::default(),
            padding: [Default::default(); 8],
        }
    }
}
