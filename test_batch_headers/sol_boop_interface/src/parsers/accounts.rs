//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::accounts::*;
/// Program account types
#[derive(Clone, Debug, PartialEq)]
pub enum BoopAccount {
    AmmConfig(AmmConfig),
    BondingCurve(BondingCurve),
    Config(Config),
    LockedCpLiquidityState(LockedCpLiquidityState),
}
/// Parse account data based on discriminator (Anchor contracts)
pub fn try_unpack_account(data: &[u8]) -> Result<BoopAccount, std::io::Error> {
    if data.len() < 8 {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Account data too short for discriminator",
        ));
    }
    let discriminator: [u8; 8] = data[0..8].try_into().map_err(|_| {
        std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Failed to read discriminator",
        )
    })?;
    match discriminator {
        [218u8, 244u8, 33u8, 104u8, 203u8, 203u8, 43u8, 111u8] => {
            Ok(BoopAccount::AmmConfig(AmmConfig::from_bytes(data)?))
        }
        [23u8, 183u8, 248u8, 55u8, 96u8, 216u8, 172u8, 96u8] => {
            Ok(BoopAccount::BondingCurve(BondingCurve::from_bytes(data)?))
        }
        [155u8, 12u8, 170u8, 224u8, 30u8, 250u8, 204u8, 130u8] => {
            Ok(BoopAccount::Config(Config::from_bytes(data)?))
        }
        [25u8, 10u8, 238u8, 197u8, 207u8, 234u8, 73u8, 22u8] => Ok(
            BoopAccount::LockedCpLiquidityState(LockedCpLiquidityState::from_bytes(data)?),
        ),
        _ => Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            format!("Unknown account discriminator: {:?}", discriminator),
        )),
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    use borsh::{BorshDeserialize, BorshSerialize};
    #[test]
    fn test_amm_config_consistency() {
        let expected_first_field = 42u8;
        let test_account = AmmConfig {
            bump: expected_first_field,
            ..Default::default()
        };
        let test_data = test_account.try_to_vec().unwrap();
        match try_unpack_account(&test_data) {
            Ok(BoopAccount::AmmConfig(account)) => {
                assert_eq!(
                    account.bump, expected_first_field,
                    "First field value should match expected value"
                );
                assert_eq!(
                    account.discriminator,
                    [218u8, 244u8, 33u8, 104u8, 203u8, 203u8, 43u8, 111u8],
                    "Discriminator field should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong account type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(AmmConfig)
                );
            }
        }
    }
    #[test]
    fn test_bonding_curve_consistency() {
        let expected_first_field = Default::default();
        let test_account = BondingCurve {
            creator: expected_first_field,
            ..Default::default()
        };
        let test_data = test_account.try_to_vec().unwrap();
        match try_unpack_account(&test_data) {
            Ok(BoopAccount::BondingCurve(account)) => {
                assert_eq!(
                    account.creator, expected_first_field,
                    "First field value should match expected value"
                );
                assert_eq!(
                    account.discriminator,
                    [23u8, 183u8, 248u8, 55u8, 96u8, 216u8, 172u8, 96u8],
                    "Discriminator field should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong account type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(BondingCurve)
                );
            }
        }
    }
    #[test]
    fn test_config_consistency() {
        let expected_first_field = true;
        let test_account = Config {
            is_paused: expected_first_field,
            ..Default::default()
        };
        let test_data = test_account.try_to_vec().unwrap();
        match try_unpack_account(&test_data) {
            Ok(BoopAccount::Config(account)) => {
                assert_eq!(
                    account.is_paused, expected_first_field,
                    "First field value should match expected value"
                );
                assert_eq!(
                    account.discriminator,
                    [155u8, 12u8, 170u8, 224u8, 30u8, 250u8, 204u8, 130u8],
                    "Discriminator field should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong account type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Config)
                );
            }
        }
    }
    #[test]
    fn test_locked_cp_liquidity_state_consistency() {
        let expected_first_field = 42u64;
        let test_account = LockedCpLiquidityState {
            locked_lp_amount: expected_first_field,
            ..Default::default()
        };
        let test_data = test_account.try_to_vec().unwrap();
        match try_unpack_account(&test_data) {
            Ok(BoopAccount::LockedCpLiquidityState(account)) => {
                assert_eq!(
                    account.locked_lp_amount, expected_first_field,
                    "First field value should match expected value"
                );
                assert_eq!(
                    account.discriminator,
                    [25u8, 10u8, 238u8, 197u8, 207u8, 234u8, 73u8, 22u8],
                    "Discriminator field should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong account type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(LockedCpLiquidityState)
                );
            }
        }
    }
    #[test]
    fn test_discriminator_recognition() {
        let test_account = AmmConfig::default();
        let test_data = test_account.try_to_vec().unwrap();
        assert!(
            test_data.len() >= 8,
            "Test data should have at least 8 bytes for discriminator"
        );
        let result = try_unpack_account(&test_data);
        match result {
            Ok(_) => {}
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for account {}",
                    stringify!(AmmConfig)
                );
            }
        }
        let test_account = BondingCurve::default();
        let test_data = test_account.try_to_vec().unwrap();
        assert!(
            test_data.len() >= 8,
            "Test data should have at least 8 bytes for discriminator"
        );
        let result = try_unpack_account(&test_data);
        match result {
            Ok(_) => {}
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for account {}",
                    stringify!(BondingCurve)
                );
            }
        }
        let test_account = Config::default();
        let test_data = test_account.try_to_vec().unwrap();
        assert!(
            test_data.len() >= 8,
            "Test data should have at least 8 bytes for discriminator"
        );
        let result = try_unpack_account(&test_data);
        match result {
            Ok(_) => {}
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for account {}",
                    stringify!(Config)
                );
            }
        }
        let test_account = LockedCpLiquidityState::default();
        let test_data = test_account.try_to_vec().unwrap();
        assert!(
            test_data.len() >= 8,
            "Test data should have at least 8 bytes for discriminator"
        );
        let result = try_unpack_account(&test_data);
        match result {
            Ok(_) => {}
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for account {}",
                    stringify!(LockedCpLiquidityState)
                );
            }
        }
    }
    #[test]
    fn test_invalid_discriminator() {
        let invalid_data = vec![255u8; 40];
        let result = try_unpack_account(&invalid_data);
        assert!(result.is_err(), "Should fail with invalid discriminator");
    }
    #[test]
    fn test_insufficient_data() {
        let short_data = vec![1u8; 4];
        let result = try_unpack_account(&short_data);
        assert!(result.is_err(), "Should fail with insufficient data");
    }
}
