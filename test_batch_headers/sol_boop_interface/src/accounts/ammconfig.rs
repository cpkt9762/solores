//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const AMM_CONFIG_ACCOUNT_DISCM: [u8; 8] = [218, 244, 33, 104, 203, 203, 43, 111];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AmmConfig {
    pub discriminator: [u8; 8],
    ///Bump to identify PDA
    pub bump: u8,
    ///Status to control if new pool can be create
    pub disable_create_pool: bool,
    ///Config index
    pub index: u16,
    ///The trade fee, denominated in hundredths of a bip (10^-6)
    pub trade_fee_rate: u64,
    ///The protocol fee
    pub protocol_fee_rate: u64,
    ///The fund fee, denominated in hundredths of a bip (10^-6)
    pub fund_fee_rate: u64,
    ///Fee for create a new pool
    pub create_pool_fee: u64,
    ///Address of the protocol fee owner
    pub protocol_owner: Pubkey,
    ///Address of the fund fee owner
    pub fund_owner: Pubkey,
    ///padding
    pub padding: [u64; 16],
}
impl Default for AmmConfig {
    fn default() -> Self {
        Self {
            discriminator: AMM_CONFIG_ACCOUNT_DISCM,
            bump: Default::default(),
            disable_create_pool: Default::default(),
            index: Default::default(),
            trade_fee_rate: Default::default(),
            protocol_fee_rate: Default::default(),
            fund_fee_rate: Default::default(),
            create_pool_fee: Default::default(),
            protocol_owner: Default::default(),
            fund_owner: Default::default(),
            padding: [0u64; 16],
        }
    }
}
impl AmmConfig {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != AMM_CONFIG_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    AMM_CONFIG_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
