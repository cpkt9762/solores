//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const LOCKED_CP_LIQUIDITY_STATE_ACCOUNT_DISCM: [u8; 8] = [25, 10, 238, 197, 207, 234, 73, 22];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockedCpLiquidityState {
    pub discriminator: [u8; 8],
    ///The Locked liquidity amount without claimed lp fee
    pub locked_lp_amount: u64,
    ///Claimed lp fee amount
    pub claimed_lp_amount: u64,
    ///Unclaimed lp fee amount
    pub unclaimed_lp_amount: u64,
    ///Last updated cp pool lp total supply
    pub last_lp: u64,
    ///Last updated cp pool k
    pub last_k: u128,
    ///Account update recent epoch
    pub recent_epoch: u64,
    ///The ID of the pool with which this record is connected
    pub pool_id: Pubkey,
    ///nft mint to check who has authority to collect fee
    pub fee_nft_mint: Pubkey,
    ///The owner who has locked liquidity
    pub locked_owner: Pubkey,
    ///The mint of locked lp token
    pub locked_lp_mint: Pubkey,
    ///Unused bytes for future upgrades.
    pub padding: [u64; 8],
}
impl Default for LockedCpLiquidityState {
    fn default() -> Self {
        Self {
            discriminator: LOCKED_CP_LIQUIDITY_STATE_ACCOUNT_DISCM,
            locked_lp_amount: Default::default(),
            claimed_lp_amount: Default::default(),
            unclaimed_lp_amount: Default::default(),
            last_lp: Default::default(),
            last_k: Default::default(),
            recent_epoch: Default::default(),
            pool_id: Default::default(),
            fee_nft_mint: Default::default(),
            locked_owner: Default::default(),
            locked_lp_mint: Default::default(),
            padding: [0u64; 8],
        }
    }
}
impl LockedCpLiquidityState {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != LOCKED_CP_LIQUIDITY_STATE_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    LOCKED_CP_LIQUIDITY_STATE_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
