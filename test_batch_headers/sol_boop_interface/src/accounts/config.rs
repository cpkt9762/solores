//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CONFIG_ACCOUNT_DISCM: [u8; 8] = [155, 12, 170, 224, 30, 250, 204, 130];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Config {
    pub discriminator: [u8; 8],
    pub is_paused: bool,
    pub authority: Pubkey,
    pub pending_authority: Pubkey,
    pub operators: Vec<Pubkey>,
    pub protocol_fee_recipient: Pubkey,
    pub token_distributor: Pubkey,
    pub virtual_sol_reserves: u64,
    pub virtual_token_reserves: u64,
    pub graduation_target: u64,
    pub graduation_fee: u64,
    pub damping_term: u8,
    pub token_for_stakers_basis_points: u16,
    pub swap_fee_basis_points: u8,
    pub token_amount_for_raydium_liquidity: u64,
    pub max_graduation_price_deviation_basis_points: u16,
    pub max_swap_amount_for_pool_price_correction_basis_points: u16,
}
impl Default for Config {
    fn default() -> Self {
        Self {
            discriminator: CONFIG_ACCOUNT_DISCM,
            is_paused: Default::default(),
            authority: Default::default(),
            pending_authority: Default::default(),
            operators: Default::default(),
            protocol_fee_recipient: Default::default(),
            token_distributor: Default::default(),
            virtual_sol_reserves: Default::default(),
            virtual_token_reserves: Default::default(),
            graduation_target: Default::default(),
            graduation_fee: Default::default(),
            damping_term: Default::default(),
            token_for_stakers_basis_points: Default::default(),
            swap_fee_basis_points: Default::default(),
            token_amount_for_raydium_liquidity: Default::default(),
            max_graduation_price_deviation_basis_points: Default::default(),
            max_swap_amount_for_pool_price_correction_basis_points: Default::default(),
        }
    }
}
impl Config {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != CONFIG_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    CONFIG_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
