//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CREATE_METEORA_POOL_IX_ACCOUNTS_LEN: usize = 21;
///Accounts struct for the create_meteora_pool instruction
#[derive(Copy, Clone, Debug)]
pub struct CreateMeteoraPoolAccounts<'me, 'info> {
    pub operator: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub cp_amm_config: &'me AccountInfo<'info>,
    pub pool_authority: &'me AccountInfo<'info>,
    pub pool: &'me AccountInfo<'info>,
    pub position: &'me AccountInfo<'info>,
    pub position_nft_mint: &'me AccountInfo<'info>,
    pub position_nft_account: &'me AccountInfo<'info>,
    pub token_a_mint: &'me AccountInfo<'info>,
    pub token_b_mint: &'me AccountInfo<'info>,
    pub token_a_vault: &'me AccountInfo<'info>,
    pub token_b_vault: &'me AccountInfo<'info>,
    pub bonding_curve: &'me AccountInfo<'info>,
    pub bonding_curve_vault: &'me AccountInfo<'info>,
    pub bonding_curve_wsol_vault: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub token_2022_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub cp_amm_program: &'me AccountInfo<'info>,
}
///Public keys struct for the create_meteora_pool instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateMeteoraPoolKeys {
    pub operator: Pubkey,
    pub config: Pubkey,
    pub vault_authority: Pubkey,
    pub cp_amm_config: Pubkey,
    pub pool_authority: Pubkey,
    pub pool: Pubkey,
    pub position: Pubkey,
    pub position_nft_mint: Pubkey,
    pub position_nft_account: Pubkey,
    pub token_a_mint: Pubkey,
    pub token_b_mint: Pubkey,
    pub token_a_vault: Pubkey,
    pub token_b_vault: Pubkey,
    pub bonding_curve: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_vault: Pubkey,
    pub token_program: Pubkey,
    pub token_2022_program: Pubkey,
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub cp_amm_program: Pubkey,
}
impl From<CreateMeteoraPoolAccounts<'_, '_>> for CreateMeteoraPoolKeys {
    fn from(accounts: CreateMeteoraPoolAccounts) -> Self {
        Self {
            operator: *accounts.operator.key,
            config: *accounts.config.key,
            vault_authority: *accounts.vault_authority.key,
            cp_amm_config: *accounts.cp_amm_config.key,
            pool_authority: *accounts.pool_authority.key,
            pool: *accounts.pool.key,
            position: *accounts.position.key,
            position_nft_mint: *accounts.position_nft_mint.key,
            position_nft_account: *accounts.position_nft_account.key,
            token_a_mint: *accounts.token_a_mint.key,
            token_b_mint: *accounts.token_b_mint.key,
            token_a_vault: *accounts.token_a_vault.key,
            token_b_vault: *accounts.token_b_vault.key,
            bonding_curve: *accounts.bonding_curve.key,
            bonding_curve_vault: *accounts.bonding_curve_vault.key,
            bonding_curve_wsol_vault: *accounts.bonding_curve_wsol_vault.key,
            token_program: *accounts.token_program.key,
            token_2022_program: *accounts.token_2022_program.key,
            system_program: *accounts.system_program.key,
            event_authority: *accounts.event_authority.key,
            cp_amm_program: *accounts.cp_amm_program.key,
        }
    }
}
impl From<CreateMeteoraPoolKeys> for [AccountMeta; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateMeteoraPoolKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.operator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.cp_amm_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_nft_mint,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_nft_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_a_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_b_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_a_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_b_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_wsol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_2022_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.cp_amm_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN]> for CreateMeteoraPoolKeys {
    fn from(pubkeys: [Pubkey; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            operator: pubkeys[0],
            config: pubkeys[1],
            vault_authority: pubkeys[2],
            cp_amm_config: pubkeys[3],
            pool_authority: pubkeys[4],
            pool: pubkeys[5],
            position: pubkeys[6],
            position_nft_mint: pubkeys[7],
            position_nft_account: pubkeys[8],
            token_a_mint: pubkeys[9],
            token_b_mint: pubkeys[10],
            token_a_vault: pubkeys[11],
            token_b_vault: pubkeys[12],
            bonding_curve: pubkeys[13],
            bonding_curve_vault: pubkeys[14],
            bonding_curve_wsol_vault: pubkeys[15],
            token_program: pubkeys[16],
            token_2022_program: pubkeys[17],
            system_program: pubkeys[18],
            event_authority: pubkeys[19],
            cp_amm_program: pubkeys[20],
        }
    }
}
impl From<&[String]> for CreateMeteoraPoolKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            operator: pubkeys[0].parse().unwrap(),
            config: pubkeys[1].parse().unwrap(),
            vault_authority: pubkeys[2].parse().unwrap(),
            cp_amm_config: pubkeys[3].parse().unwrap(),
            pool_authority: pubkeys[4].parse().unwrap(),
            pool: pubkeys[5].parse().unwrap(),
            position: pubkeys[6].parse().unwrap(),
            position_nft_mint: pubkeys[7].parse().unwrap(),
            position_nft_account: pubkeys[8].parse().unwrap(),
            token_a_mint: pubkeys[9].parse().unwrap(),
            token_b_mint: pubkeys[10].parse().unwrap(),
            token_a_vault: pubkeys[11].parse().unwrap(),
            token_b_vault: pubkeys[12].parse().unwrap(),
            bonding_curve: pubkeys[13].parse().unwrap(),
            bonding_curve_vault: pubkeys[14].parse().unwrap(),
            bonding_curve_wsol_vault: pubkeys[15].parse().unwrap(),
            token_program: pubkeys[16].parse().unwrap(),
            token_2022_program: pubkeys[17].parse().unwrap(),
            system_program: pubkeys[18].parse().unwrap(),
            event_authority: pubkeys[19].parse().unwrap(),
            cp_amm_program: pubkeys[20].parse().unwrap(),
        }
    }
}
impl<'info> From<CreateMeteoraPoolAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreateMeteoraPoolAccounts<'_, 'info>) -> Self {
        [
            accounts.operator.clone(),
            accounts.config.clone(),
            accounts.vault_authority.clone(),
            accounts.cp_amm_config.clone(),
            accounts.pool_authority.clone(),
            accounts.pool.clone(),
            accounts.position.clone(),
            accounts.position_nft_mint.clone(),
            accounts.position_nft_account.clone(),
            accounts.token_a_mint.clone(),
            accounts.token_b_mint.clone(),
            accounts.token_a_vault.clone(),
            accounts.token_b_vault.clone(),
            accounts.bonding_curve.clone(),
            accounts.bonding_curve_vault.clone(),
            accounts.bonding_curve_wsol_vault.clone(),
            accounts.token_program.clone(),
            accounts.token_2022_program.clone(),
            accounts.system_program.clone(),
            accounts.event_authority.clone(),
            accounts.cp_amm_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN]>
    for CreateMeteoraPoolAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            operator: &arr[0],
            config: &arr[1],
            vault_authority: &arr[2],
            cp_amm_config: &arr[3],
            pool_authority: &arr[4],
            pool: &arr[5],
            position: &arr[6],
            position_nft_mint: &arr[7],
            position_nft_account: &arr[8],
            token_a_mint: &arr[9],
            token_b_mint: &arr[10],
            token_a_vault: &arr[11],
            token_b_vault: &arr[12],
            bonding_curve: &arr[13],
            bonding_curve_vault: &arr[14],
            bonding_curve_wsol_vault: &arr[15],
            token_program: &arr[16],
            token_2022_program: &arr[17],
            system_program: &arr[18],
            event_authority: &arr[19],
            cp_amm_program: &arr[20],
        }
    }
}
pub const CREATE_METEORA_POOL_IX_DISCM: [u8; 8] = [246, 254, 33, 37, 225, 176, 41, 232];
#[derive(Clone, Debug, PartialEq)]
pub struct CreateMeteoraPoolIxData;
impl CreateMeteoraPoolIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_METEORA_POOL_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_METEORA_POOL_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_METEORA_POOL_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_meteora_pool_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateMeteoraPoolKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_METEORA_POOL_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CreateMeteoraPoolIxData.try_to_vec()?,
    })
}
pub fn create_meteora_pool_ix(keys: CreateMeteoraPoolKeys) -> std::io::Result<Instruction> {
    create_meteora_pool_ix_with_program_id(crate::ID, keys)
}
pub fn create_meteora_pool_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreateMeteoraPoolAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CreateMeteoraPoolKeys = accounts.into();
    let ix = create_meteora_pool_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_meteora_pool_invoke(accounts: CreateMeteoraPoolAccounts<'_, '_>) -> ProgramResult {
    create_meteora_pool_invoke_with_program_id(crate::ID, accounts)
}
pub fn create_meteora_pool_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreateMeteoraPoolAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreateMeteoraPoolKeys = accounts.into();
    let ix = create_meteora_pool_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_meteora_pool_invoke_signed(
    accounts: CreateMeteoraPoolAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_meteora_pool_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn create_meteora_pool_verify_account_keys(
    accounts: CreateMeteoraPoolAccounts<'_, '_>,
    keys: CreateMeteoraPoolKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.operator.key, keys.operator),
        (*accounts.config.key, keys.config),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.cp_amm_config.key, keys.cp_amm_config),
        (*accounts.pool_authority.key, keys.pool_authority),
        (*accounts.pool.key, keys.pool),
        (*accounts.position.key, keys.position),
        (*accounts.position_nft_mint.key, keys.position_nft_mint),
        (
            *accounts.position_nft_account.key,
            keys.position_nft_account,
        ),
        (*accounts.token_a_mint.key, keys.token_a_mint),
        (*accounts.token_b_mint.key, keys.token_b_mint),
        (*accounts.token_a_vault.key, keys.token_a_vault),
        (*accounts.token_b_vault.key, keys.token_b_vault),
        (*accounts.bonding_curve.key, keys.bonding_curve),
        (*accounts.bonding_curve_vault.key, keys.bonding_curve_vault),
        (
            *accounts.bonding_curve_wsol_vault.key,
            keys.bonding_curve_wsol_vault,
        ),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.token_2022_program.key, keys.token_2022_program),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.cp_amm_program.key, keys.cp_amm_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
///VAULT_AUTHORITY_SEED seed for vault_authority PDA: "vault_authority"
pub const VAULT_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8,
    121u8,
];
///BONDING_CURVE_SEED_0 seed for bonding_curve PDA: "bonding_curve"
pub const BONDING_CURVE_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8,
];
///BONDING_CURVE_VAULT_SEED_0 seed for bonding_curve_vault PDA: "bonding_curve_vault"
pub const BONDING_CURVE_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    118u8, 97u8, 117u8, 108u8, 116u8,
];
///BONDING_CURVE_WSOL_VAULT_SEED_0 seed for bonding_curve_wsol_vault PDA: "bonding_curve_wsol_vault"
pub const BONDING_CURVE_WSOL_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    119u8, 115u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
impl CreateMeteoraPoolKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
    ///Derive the vault_authority PDA
    pub fn derive_vault_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], program_id)
    }
    ///Derive the bonding_curve PDA
    pub fn derive_bonding_curve_pda(program_id: &Pubkey, token_a_mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BONDING_CURVE_SEED_0, token_a_mint.as_ref()], program_id)
    }
    ///Derive the bonding_curve_vault PDA
    pub fn derive_bonding_curve_vault_pda(
        program_id: &Pubkey,
        token_a_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_VAULT_SEED_0, token_a_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the bonding_curve_wsol_vault PDA
    pub fn derive_bonding_curve_wsol_vault_pda(
        program_id: &Pubkey,
        token_a_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_WSOL_VAULT_SEED_0, token_a_mint.as_ref()],
            program_id,
        )
    }
}
///token_b_mint program address
pub const TOKEN_B_MINT_ADDRESS: &str = "So11111111111111111111111111111111111111112";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///token_2022_program program address
pub const TOKEN_2022_PROGRAM_ADDRESS: &str = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///cp_amm_program program address
pub const CP_AMM_PROGRAM_ADDRESS: &str = "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG";
