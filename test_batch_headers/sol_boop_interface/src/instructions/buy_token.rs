//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const BUY_TOKEN_IX_ACCOUNTS_LEN: usize = 13;
///Accounts struct for the buy_token instruction
#[derive(Copy, Clone, Debug)]
pub struct BuyTokenAccounts<'me, 'info> {
    pub mint: &'me AccountInfo<'info>,
    pub bonding_curve: &'me AccountInfo<'info>,
    pub trading_fees_vault: &'me AccountInfo<'info>,
    pub bonding_curve_vault: &'me AccountInfo<'info>,
    pub bonding_curve_sol_vault: &'me AccountInfo<'info>,
    pub recipient_token_account: &'me AccountInfo<'info>,
    pub buyer: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub wsol: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the buy_token instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct BuyTokenKeys {
    pub mint: Pubkey,
    pub bonding_curve: Pubkey,
    pub trading_fees_vault: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_sol_vault: Pubkey,
    pub recipient_token_account: Pubkey,
    pub buyer: Pubkey,
    pub config: Pubkey,
    pub vault_authority: Pubkey,
    pub wsol: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<BuyTokenAccounts<'_, '_>> for BuyTokenKeys {
    fn from(accounts: BuyTokenAccounts) -> Self {
        Self {
            mint: *accounts.mint.key,
            bonding_curve: *accounts.bonding_curve.key,
            trading_fees_vault: *accounts.trading_fees_vault.key,
            bonding_curve_vault: *accounts.bonding_curve_vault.key,
            bonding_curve_sol_vault: *accounts.bonding_curve_sol_vault.key,
            recipient_token_account: *accounts.recipient_token_account.key,
            buyer: *accounts.buyer.key,
            config: *accounts.config.key,
            vault_authority: *accounts.vault_authority.key,
            wsol: *accounts.wsol.key,
            system_program: *accounts.system_program.key,
            token_program: *accounts.token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
        }
    }
}
impl From<BuyTokenKeys> for [AccountMeta; BUY_TOKEN_IX_ACCOUNTS_LEN] {
    fn from(keys: BuyTokenKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.bonding_curve,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.trading_fees_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_sol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.recipient_token_account,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.buyer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.wsol,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; BUY_TOKEN_IX_ACCOUNTS_LEN]> for BuyTokenKeys {
    fn from(pubkeys: [Pubkey; BUY_TOKEN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            mint: pubkeys[0],
            bonding_curve: pubkeys[1],
            trading_fees_vault: pubkeys[2],
            bonding_curve_vault: pubkeys[3],
            bonding_curve_sol_vault: pubkeys[4],
            recipient_token_account: pubkeys[5],
            buyer: pubkeys[6],
            config: pubkeys[7],
            vault_authority: pubkeys[8],
            wsol: pubkeys[9],
            system_program: pubkeys[10],
            token_program: pubkeys[11],
            associated_token_program: pubkeys[12],
        }
    }
}
impl From<&[String]> for BuyTokenKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            mint: pubkeys[0].parse().unwrap(),
            bonding_curve: pubkeys[1].parse().unwrap(),
            trading_fees_vault: pubkeys[2].parse().unwrap(),
            bonding_curve_vault: pubkeys[3].parse().unwrap(),
            bonding_curve_sol_vault: pubkeys[4].parse().unwrap(),
            recipient_token_account: pubkeys[5].parse().unwrap(),
            buyer: pubkeys[6].parse().unwrap(),
            config: pubkeys[7].parse().unwrap(),
            vault_authority: pubkeys[8].parse().unwrap(),
            wsol: pubkeys[9].parse().unwrap(),
            system_program: pubkeys[10].parse().unwrap(),
            token_program: pubkeys[11].parse().unwrap(),
            associated_token_program: pubkeys[12].parse().unwrap(),
        }
    }
}
impl<'info> From<BuyTokenAccounts<'_, 'info>> for [AccountInfo<'info>; BUY_TOKEN_IX_ACCOUNTS_LEN] {
    fn from(accounts: BuyTokenAccounts<'_, 'info>) -> Self {
        [
            accounts.mint.clone(),
            accounts.bonding_curve.clone(),
            accounts.trading_fees_vault.clone(),
            accounts.bonding_curve_vault.clone(),
            accounts.bonding_curve_sol_vault.clone(),
            accounts.recipient_token_account.clone(),
            accounts.buyer.clone(),
            accounts.config.clone(),
            accounts.vault_authority.clone(),
            accounts.wsol.clone(),
            accounts.system_program.clone(),
            accounts.token_program.clone(),
            accounts.associated_token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; BUY_TOKEN_IX_ACCOUNTS_LEN]>
    for BuyTokenAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; BUY_TOKEN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            mint: &arr[0],
            bonding_curve: &arr[1],
            trading_fees_vault: &arr[2],
            bonding_curve_vault: &arr[3],
            bonding_curve_sol_vault: &arr[4],
            recipient_token_account: &arr[5],
            buyer: &arr[6],
            config: &arr[7],
            vault_authority: &arr[8],
            wsol: &arr[9],
            system_program: &arr[10],
            token_program: &arr[11],
            associated_token_program: &arr[12],
        }
    }
}
pub const BUY_TOKEN_IX_DISCM: [u8; 8] = [138, 127, 14, 91, 38, 87, 115, 105];
///Arguments for the buy_token instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyTokenIxArgs {
    pub discriminator: [u8; 8],
    pub buy_amount: u64,
    pub amount_out_min: u64,
}
impl Default for BuyTokenIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [138u8, 127u8, 14u8, 91u8, 38u8, 87u8, 115u8, 105u8],
            buy_amount: Default::default(),
            amount_out_min: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct BuyTokenIxData(pub BuyTokenIxArgs);
impl From<BuyTokenIxArgs> for BuyTokenIxData {
    fn from(args: BuyTokenIxArgs) -> Self {
        Self(args)
    }
}
impl BuyTokenIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != BUY_TOKEN_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    BUY_TOKEN_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(BuyTokenIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&BUY_TOKEN_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn buy_token_ix_with_program_id(
    program_id: Pubkey,
    keys: BuyTokenKeys,
    args: BuyTokenIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; BUY_TOKEN_IX_ACCOUNTS_LEN] = keys.into();
    let data: BuyTokenIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn buy_token_ix(keys: BuyTokenKeys, args: BuyTokenIxArgs) -> std::io::Result<Instruction> {
    buy_token_ix_with_program_id(crate::ID, keys, args)
}
pub fn buy_token_invoke_with_program_id(
    program_id: Pubkey,
    accounts: BuyTokenAccounts<'_, '_>,
    args: BuyTokenIxArgs,
) -> ProgramResult {
    let keys: BuyTokenKeys = accounts.into();
    let ix = buy_token_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn buy_token_invoke(accounts: BuyTokenAccounts<'_, '_>, args: BuyTokenIxArgs) -> ProgramResult {
    buy_token_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn buy_token_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: BuyTokenAccounts<'_, '_>,
    args: BuyTokenIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: BuyTokenKeys = accounts.into();
    let ix = buy_token_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn buy_token_invoke_signed(
    accounts: BuyTokenAccounts<'_, '_>,
    args: BuyTokenIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    buy_token_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn buy_token_verify_account_keys(
    accounts: BuyTokenAccounts<'_, '_>,
    keys: BuyTokenKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.mint.key, keys.mint),
        (*accounts.bonding_curve.key, keys.bonding_curve),
        (*accounts.trading_fees_vault.key, keys.trading_fees_vault),
        (*accounts.bonding_curve_vault.key, keys.bonding_curve_vault),
        (
            *accounts.bonding_curve_sol_vault.key,
            keys.bonding_curve_sol_vault,
        ),
        (
            *accounts.recipient_token_account.key,
            keys.recipient_token_account,
        ),
        (*accounts.buyer.key, keys.buyer),
        (*accounts.config.key, keys.config),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.wsol.key, keys.wsol),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///BONDING_CURVE_SEED_0 seed for bonding_curve PDA: "bonding_curve"
pub const BONDING_CURVE_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8,
];
///TRADING_FEES_VAULT_SEED_0 seed for trading_fees_vault PDA: "trading_fees_vault"
pub const TRADING_FEES_VAULT_SEED_0: &[u8] = &[
    116u8, 114u8, 97u8, 100u8, 105u8, 110u8, 103u8, 95u8, 102u8, 101u8, 101u8, 115u8, 95u8, 118u8,
    97u8, 117u8, 108u8, 116u8,
];
///BONDING_CURVE_VAULT_SEED_0 seed for bonding_curve_vault PDA: "bonding_curve_vault"
pub const BONDING_CURVE_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    118u8, 97u8, 117u8, 108u8, 116u8,
];
///BONDING_CURVE_SOL_VAULT_SEED_0 seed for bonding_curve_sol_vault PDA: "bonding_curve_sol_vault"
pub const BONDING_CURVE_SOL_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    115u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
///VAULT_AUTHORITY_SEED seed for vault_authority PDA: "vault_authority"
pub const VAULT_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8,
    121u8,
];
impl BuyTokenKeys {
    ///Derive the bonding_curve PDA
    pub fn derive_bonding_curve_pda(program_id: &Pubkey, mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BONDING_CURVE_SEED_0, mint.as_ref()], program_id)
    }
    ///Derive the trading_fees_vault PDA
    pub fn derive_trading_fees_vault_pda(program_id: &Pubkey, mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[TRADING_FEES_VAULT_SEED_0, mint.as_ref()], program_id)
    }
    ///Derive the bonding_curve_vault PDA
    pub fn derive_bonding_curve_vault_pda(program_id: &Pubkey, mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BONDING_CURVE_VAULT_SEED_0, mint.as_ref()], program_id)
    }
    ///Derive the bonding_curve_sol_vault PDA
    pub fn derive_bonding_curve_sol_vault_pda(program_id: &Pubkey, mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BONDING_CURVE_SOL_VAULT_SEED_0, mint.as_ref()], program_id)
    }
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
    ///Derive the vault_authority PDA
    pub fn derive_vault_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], program_id)
    }
}
///wsol program address
pub const WSOL_ADDRESS: &str = "So11111111111111111111111111111111111111112";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
impl BuyTokenIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<BuyTokenIxArgs> for BoopProgramIx {
    fn from(args: BuyTokenIxArgs) -> Self {
        Self::BuyToken(args)
    }
}
