//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const REMOVE_OPERATORS_IX_ACCOUNTS_LEN: usize = 3;
///Accounts struct for the remove_operators instruction
#[derive(Copy, Clone, Debug)]
pub struct RemoveOperatorsAccounts<'me, 'info> {
    pub config: &'me AccountInfo<'info>,
    ///Relations: config
    pub authority: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the remove_operators instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct RemoveOperatorsKeys {
    pub config: Pubkey,
    ///Relations: config
    pub authority: Pubkey,
    pub system_program: Pubkey,
}
impl From<RemoveOperatorsAccounts<'_, '_>> for RemoveOperatorsKeys {
    fn from(accounts: RemoveOperatorsAccounts) -> Self {
        Self {
            config: *accounts.config.key,
            authority: *accounts.authority.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<RemoveOperatorsKeys> for [AccountMeta; REMOVE_OPERATORS_IX_ACCOUNTS_LEN] {
    fn from(keys: RemoveOperatorsKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; REMOVE_OPERATORS_IX_ACCOUNTS_LEN]> for RemoveOperatorsKeys {
    fn from(pubkeys: [Pubkey; REMOVE_OPERATORS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            config: pubkeys[0],
            authority: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl From<&[String]> for RemoveOperatorsKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            config: pubkeys[0].parse().unwrap(),
            authority: pubkeys[1].parse().unwrap(),
            system_program: pubkeys[2].parse().unwrap(),
        }
    }
}
impl<'info> From<RemoveOperatorsAccounts<'_, 'info>>
    for [AccountInfo<'info>; REMOVE_OPERATORS_IX_ACCOUNTS_LEN]
{
    fn from(accounts: RemoveOperatorsAccounts<'_, 'info>) -> Self {
        [
            accounts.config.clone(),
            accounts.authority.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; REMOVE_OPERATORS_IX_ACCOUNTS_LEN]>
    for RemoveOperatorsAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; REMOVE_OPERATORS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            config: &arr[0],
            authority: &arr[1],
            system_program: &arr[2],
        }
    }
}
pub const REMOVE_OPERATORS_IX_DISCM: [u8; 8] = [42, 20, 89, 83, 222, 37, 4, 109];
///Arguments for the remove_operators instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RemoveOperatorsIxArgs {
    pub discriminator: [u8; 8],
    pub operators: Vec<Pubkey>,
}
impl Default for RemoveOperatorsIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [42u8, 20u8, 89u8, 83u8, 222u8, 37u8, 4u8, 109u8],
            operators: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct RemoveOperatorsIxData(pub RemoveOperatorsIxArgs);
impl From<RemoveOperatorsIxArgs> for RemoveOperatorsIxData {
    fn from(args: RemoveOperatorsIxArgs) -> Self {
        Self(args)
    }
}
impl RemoveOperatorsIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != REMOVE_OPERATORS_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    REMOVE_OPERATORS_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(RemoveOperatorsIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&REMOVE_OPERATORS_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn remove_operators_ix_with_program_id(
    program_id: Pubkey,
    keys: RemoveOperatorsKeys,
    args: RemoveOperatorsIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; REMOVE_OPERATORS_IX_ACCOUNTS_LEN] = keys.into();
    let data: RemoveOperatorsIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn remove_operators_ix(
    keys: RemoveOperatorsKeys,
    args: RemoveOperatorsIxArgs,
) -> std::io::Result<Instruction> {
    remove_operators_ix_with_program_id(crate::ID, keys, args)
}
pub fn remove_operators_invoke_with_program_id(
    program_id: Pubkey,
    accounts: RemoveOperatorsAccounts<'_, '_>,
    args: RemoveOperatorsIxArgs,
) -> ProgramResult {
    let keys: RemoveOperatorsKeys = accounts.into();
    let ix = remove_operators_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn remove_operators_invoke(
    accounts: RemoveOperatorsAccounts<'_, '_>,
    args: RemoveOperatorsIxArgs,
) -> ProgramResult {
    remove_operators_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn remove_operators_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: RemoveOperatorsAccounts<'_, '_>,
    args: RemoveOperatorsIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: RemoveOperatorsKeys = accounts.into();
    let ix = remove_operators_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn remove_operators_invoke_signed(
    accounts: RemoveOperatorsAccounts<'_, '_>,
    args: RemoveOperatorsIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    remove_operators_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn remove_operators_verify_account_keys(
    accounts: RemoveOperatorsAccounts<'_, '_>,
    keys: RemoveOperatorsKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.config.key, keys.config),
        (*accounts.authority.key, keys.authority),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
impl RemoveOperatorsKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
impl RemoveOperatorsIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<RemoveOperatorsIxArgs> for BoopProgramIx {
    fn from(args: RemoveOperatorsIxArgs) -> Self {
        Self::RemoveOperators(args)
    }
}
