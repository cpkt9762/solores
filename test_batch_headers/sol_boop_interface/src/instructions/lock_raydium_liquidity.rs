//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN: usize = 22;
///Accounts struct for the lock_raydium_liquidity instruction
#[derive(Copy, Clone, Debug)]
pub struct LockRaydiumLiquidityAccounts<'me, 'info> {
    pub lock_program: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub authority: &'me AccountInfo<'info>,
    pub fee_nft_owner: &'me AccountInfo<'info>,
    pub fee_nft_mint: &'me AccountInfo<'info>,
    pub fee_nft_account: &'me AccountInfo<'info>,
    pub pool_state: &'me AccountInfo<'info>,
    ///Store the locked information of liquidity
    pub locked_liquidity: &'me AccountInfo<'info>,
    ///The mint of liquidity token
    pub lp_mint: &'me AccountInfo<'info>,
    ///liquidity owner lp token account
    pub liquidity_owner_lp: &'me AccountInfo<'info>,
    pub locked_lp_vault: &'me AccountInfo<'info>,
    ///The address that holds pool tokens for token_0
    pub token_0_vault: &'me AccountInfo<'info>,
    ///The address that holds pool tokens for token_1
    pub token_1_vault: &'me AccountInfo<'info>,
    pub operator: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    pub bonding_curve: &'me AccountInfo<'info>,
    ///To store metaplex metadata
    pub metadata_account: &'me AccountInfo<'info>,
    ///Sysvar for token mint and ATA creation
    pub rent: &'me AccountInfo<'info>,
    ///Program to create the new account
    pub system_program: &'me AccountInfo<'info>,
    ///Program to create/transfer mint/token account
    pub token_program: &'me AccountInfo<'info>,
    ///Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'me AccountInfo<'info>,
    ///Program to create NFT metadata accunt
    pub metadata_program: &'me AccountInfo<'info>,
}
///Public keys struct for the lock_raydium_liquidity instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct LockRaydiumLiquidityKeys {
    pub lock_program: Pubkey,
    pub vault_authority: Pubkey,
    pub authority: Pubkey,
    pub fee_nft_owner: Pubkey,
    pub fee_nft_mint: Pubkey,
    pub fee_nft_account: Pubkey,
    pub pool_state: Pubkey,
    ///Store the locked information of liquidity
    pub locked_liquidity: Pubkey,
    ///The mint of liquidity token
    pub lp_mint: Pubkey,
    ///liquidity owner lp token account
    pub liquidity_owner_lp: Pubkey,
    pub locked_lp_vault: Pubkey,
    ///The address that holds pool tokens for token_0
    pub token_0_vault: Pubkey,
    ///The address that holds pool tokens for token_1
    pub token_1_vault: Pubkey,
    pub operator: Pubkey,
    pub config: Pubkey,
    pub bonding_curve: Pubkey,
    ///To store metaplex metadata
    pub metadata_account: Pubkey,
    ///Sysvar for token mint and ATA creation
    pub rent: Pubkey,
    ///Program to create the new account
    pub system_program: Pubkey,
    ///Program to create/transfer mint/token account
    pub token_program: Pubkey,
    ///Program to create an ATA for receiving fee NFT
    pub associated_token_program: Pubkey,
    ///Program to create NFT metadata accunt
    pub metadata_program: Pubkey,
}
impl From<LockRaydiumLiquidityAccounts<'_, '_>> for LockRaydiumLiquidityKeys {
    fn from(accounts: LockRaydiumLiquidityAccounts) -> Self {
        Self {
            lock_program: *accounts.lock_program.key,
            vault_authority: *accounts.vault_authority.key,
            authority: *accounts.authority.key,
            fee_nft_owner: *accounts.fee_nft_owner.key,
            fee_nft_mint: *accounts.fee_nft_mint.key,
            fee_nft_account: *accounts.fee_nft_account.key,
            pool_state: *accounts.pool_state.key,
            locked_liquidity: *accounts.locked_liquidity.key,
            lp_mint: *accounts.lp_mint.key,
            liquidity_owner_lp: *accounts.liquidity_owner_lp.key,
            locked_lp_vault: *accounts.locked_lp_vault.key,
            token_0_vault: *accounts.token_0_vault.key,
            token_1_vault: *accounts.token_1_vault.key,
            operator: *accounts.operator.key,
            config: *accounts.config.key,
            bonding_curve: *accounts.bonding_curve.key,
            metadata_account: *accounts.metadata_account.key,
            rent: *accounts.rent.key,
            system_program: *accounts.system_program.key,
            token_program: *accounts.token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            metadata_program: *accounts.metadata_program.key,
        }
    }
}
impl From<LockRaydiumLiquidityKeys> for [AccountMeta; LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN] {
    fn from(keys: LockRaydiumLiquidityKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.lock_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_nft_owner,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_nft_mint,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_nft_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.locked_liquidity,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.liquidity_owner_lp,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.locked_lp_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_0_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_1_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.operator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.bonding_curve,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.metadata_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.metadata_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN]> for LockRaydiumLiquidityKeys {
    fn from(pubkeys: [Pubkey; LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lock_program: pubkeys[0],
            vault_authority: pubkeys[1],
            authority: pubkeys[2],
            fee_nft_owner: pubkeys[3],
            fee_nft_mint: pubkeys[4],
            fee_nft_account: pubkeys[5],
            pool_state: pubkeys[6],
            locked_liquidity: pubkeys[7],
            lp_mint: pubkeys[8],
            liquidity_owner_lp: pubkeys[9],
            locked_lp_vault: pubkeys[10],
            token_0_vault: pubkeys[11],
            token_1_vault: pubkeys[12],
            operator: pubkeys[13],
            config: pubkeys[14],
            bonding_curve: pubkeys[15],
            metadata_account: pubkeys[16],
            rent: pubkeys[17],
            system_program: pubkeys[18],
            token_program: pubkeys[19],
            associated_token_program: pubkeys[20],
            metadata_program: pubkeys[21],
        }
    }
}
impl From<&[String]> for LockRaydiumLiquidityKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            lock_program: pubkeys[0].parse().unwrap(),
            vault_authority: pubkeys[1].parse().unwrap(),
            authority: pubkeys[2].parse().unwrap(),
            fee_nft_owner: pubkeys[3].parse().unwrap(),
            fee_nft_mint: pubkeys[4].parse().unwrap(),
            fee_nft_account: pubkeys[5].parse().unwrap(),
            pool_state: pubkeys[6].parse().unwrap(),
            locked_liquidity: pubkeys[7].parse().unwrap(),
            lp_mint: pubkeys[8].parse().unwrap(),
            liquidity_owner_lp: pubkeys[9].parse().unwrap(),
            locked_lp_vault: pubkeys[10].parse().unwrap(),
            token_0_vault: pubkeys[11].parse().unwrap(),
            token_1_vault: pubkeys[12].parse().unwrap(),
            operator: pubkeys[13].parse().unwrap(),
            config: pubkeys[14].parse().unwrap(),
            bonding_curve: pubkeys[15].parse().unwrap(),
            metadata_account: pubkeys[16].parse().unwrap(),
            rent: pubkeys[17].parse().unwrap(),
            system_program: pubkeys[18].parse().unwrap(),
            token_program: pubkeys[19].parse().unwrap(),
            associated_token_program: pubkeys[20].parse().unwrap(),
            metadata_program: pubkeys[21].parse().unwrap(),
        }
    }
}
impl<'info> From<LockRaydiumLiquidityAccounts<'_, 'info>>
    for [AccountInfo<'info>; LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN]
{
    fn from(accounts: LockRaydiumLiquidityAccounts<'_, 'info>) -> Self {
        [
            accounts.lock_program.clone(),
            accounts.vault_authority.clone(),
            accounts.authority.clone(),
            accounts.fee_nft_owner.clone(),
            accounts.fee_nft_mint.clone(),
            accounts.fee_nft_account.clone(),
            accounts.pool_state.clone(),
            accounts.locked_liquidity.clone(),
            accounts.lp_mint.clone(),
            accounts.liquidity_owner_lp.clone(),
            accounts.locked_lp_vault.clone(),
            accounts.token_0_vault.clone(),
            accounts.token_1_vault.clone(),
            accounts.operator.clone(),
            accounts.config.clone(),
            accounts.bonding_curve.clone(),
            accounts.metadata_account.clone(),
            accounts.rent.clone(),
            accounts.system_program.clone(),
            accounts.token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.metadata_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN]>
    for LockRaydiumLiquidityAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lock_program: &arr[0],
            vault_authority: &arr[1],
            authority: &arr[2],
            fee_nft_owner: &arr[3],
            fee_nft_mint: &arr[4],
            fee_nft_account: &arr[5],
            pool_state: &arr[6],
            locked_liquidity: &arr[7],
            lp_mint: &arr[8],
            liquidity_owner_lp: &arr[9],
            locked_lp_vault: &arr[10],
            token_0_vault: &arr[11],
            token_1_vault: &arr[12],
            operator: &arr[13],
            config: &arr[14],
            bonding_curve: &arr[15],
            metadata_account: &arr[16],
            rent: &arr[17],
            system_program: &arr[18],
            token_program: &arr[19],
            associated_token_program: &arr[20],
            metadata_program: &arr[21],
        }
    }
}
pub const LOCK_RAYDIUM_LIQUIDITY_IX_DISCM: [u8; 8] = [173, 255, 148, 6, 122, 99, 140, 22];
#[derive(Clone, Debug, PartialEq)]
pub struct LockRaydiumLiquidityIxData;
impl LockRaydiumLiquidityIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != LOCK_RAYDIUM_LIQUIDITY_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    LOCK_RAYDIUM_LIQUIDITY_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&LOCK_RAYDIUM_LIQUIDITY_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn lock_raydium_liquidity_ix_with_program_id(
    program_id: Pubkey,
    keys: LockRaydiumLiquidityKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; LOCK_RAYDIUM_LIQUIDITY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: LockRaydiumLiquidityIxData.try_to_vec()?,
    })
}
pub fn lock_raydium_liquidity_ix(keys: LockRaydiumLiquidityKeys) -> std::io::Result<Instruction> {
    lock_raydium_liquidity_ix_with_program_id(crate::ID, keys)
}
pub fn lock_raydium_liquidity_invoke_with_program_id(
    program_id: Pubkey,
    accounts: LockRaydiumLiquidityAccounts<'_, '_>,
) -> ProgramResult {
    let keys: LockRaydiumLiquidityKeys = accounts.into();
    let ix = lock_raydium_liquidity_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn lock_raydium_liquidity_invoke(
    accounts: LockRaydiumLiquidityAccounts<'_, '_>,
) -> ProgramResult {
    lock_raydium_liquidity_invoke_with_program_id(crate::ID, accounts)
}
pub fn lock_raydium_liquidity_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: LockRaydiumLiquidityAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: LockRaydiumLiquidityKeys = accounts.into();
    let ix = lock_raydium_liquidity_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn lock_raydium_liquidity_invoke_signed(
    accounts: LockRaydiumLiquidityAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    lock_raydium_liquidity_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn lock_raydium_liquidity_verify_account_keys(
    accounts: LockRaydiumLiquidityAccounts<'_, '_>,
    keys: LockRaydiumLiquidityKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.lock_program.key, keys.lock_program),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.authority.key, keys.authority),
        (*accounts.fee_nft_owner.key, keys.fee_nft_owner),
        (*accounts.fee_nft_mint.key, keys.fee_nft_mint),
        (*accounts.fee_nft_account.key, keys.fee_nft_account),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.locked_liquidity.key, keys.locked_liquidity),
        (*accounts.lp_mint.key, keys.lp_mint),
        (*accounts.liquidity_owner_lp.key, keys.liquidity_owner_lp),
        (*accounts.locked_lp_vault.key, keys.locked_lp_vault),
        (*accounts.token_0_vault.key, keys.token_0_vault),
        (*accounts.token_1_vault.key, keys.token_1_vault),
        (*accounts.operator.key, keys.operator),
        (*accounts.config.key, keys.config),
        (*accounts.bonding_curve.key, keys.bonding_curve),
        (*accounts.metadata_account.key, keys.metadata_account),
        (*accounts.rent.key, keys.rent),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.metadata_program.key, keys.metadata_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///VAULT_AUTHORITY_SEED seed for vault_authority PDA: "vault_authority"
pub const VAULT_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8,
    121u8,
];
///AUTHORITY_SEED seed for authority PDA: "lock_cp_authority_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    108u8, 111u8, 99u8, 107u8, 95u8, 99u8, 112u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///LOCKED_LIQUIDITY_SEED_0 seed for locked_liquidity PDA: "locked_liquidity"
pub const LOCKED_LIQUIDITY_SEED_0: &[u8] = &[
    108u8, 111u8, 99u8, 107u8, 101u8, 100u8, 95u8, 108u8, 105u8, 113u8, 117u8, 105u8, 100u8, 105u8,
    116u8, 121u8,
];
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
///BONDING_CURVE_SEED_0 seed for bonding_curve PDA: "bonding_curve"
pub const BONDING_CURVE_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8,
];
///METADATA_ACCOUNT_SEED_0 seed for metadata_account PDA: "metadata"
pub const METADATA_ACCOUNT_SEED_0: &[u8] = &[109u8, 101u8, 116u8, 97u8, 100u8, 97u8, 116u8, 97u8];
///METADATA_ACCOUNT_SEED_1 seed for metadata_account PDA
pub const METADATA_ACCOUNT_SEED_1: &[u8] = &[
    11u8, 112u8, 101u8, 177u8, 227u8, 209u8, 124u8, 69u8, 56u8, 157u8, 82u8, 127u8, 107u8, 4u8,
    195u8, 205u8, 88u8, 184u8, 108u8, 115u8, 26u8, 160u8, 253u8, 181u8, 73u8, 182u8, 209u8, 188u8,
    3u8, 248u8, 41u8, 70u8,
];
impl LockRaydiumLiquidityKeys {
    ///Derive the vault_authority PDA
    pub fn derive_vault_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], program_id)
    }
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the locked_liquidity PDA
    pub fn derive_locked_liquidity_pda(program_id: &Pubkey, fee_nft_mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[LOCKED_LIQUIDITY_SEED_0, fee_nft_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
    ///Derive the bonding_curve PDA
    pub fn derive_bonding_curve_pda(
        program_id: &Pubkey,
        token_0_vault_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_SEED_0, token_0_vault_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the metadata_account PDA
    pub fn derive_metadata_account_pda(program_id: &Pubkey, fee_nft_mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                METADATA_ACCOUNT_SEED_0,
                METADATA_ACCOUNT_SEED_1,
                fee_nft_mint.as_ref(),
            ],
            program_id,
        )
    }
}
///lock_program program address
pub const LOCK_PROGRAM_ADDRESS: &str = "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE";
///rent program address
pub const RENT_ADDRESS: &str = "SysvarRent111111111111111111111111111111111";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
///metadata_program program address
pub const METADATA_PROGRAM_ADDRESS: &str = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
