//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN: usize = 22;
///Accounts struct for the create_raydium_random_pool instruction
#[derive(Copy, Clone, Debug)]
pub struct CreateRaydiumRandomPoolAccounts<'me, 'info> {
    pub cpmm_program: &'me AccountInfo<'info>,
    ///Which config the pool belongs to.
    pub amm_config: &'me AccountInfo<'info>,
    pub authority: &'me AccountInfo<'info>,
    pub pool_state: &'me AccountInfo<'info>,
    pub token_0_mint: &'me AccountInfo<'info>,
    ///Token_1 mint, the key must be greater than token_0 mint.
    pub token_1_mint: &'me AccountInfo<'info>,
    pub lp_mint: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub bonding_curve: &'me AccountInfo<'info>,
    pub bonding_curve_vault: &'me AccountInfo<'info>,
    pub bonding_curve_wsol_vault: &'me AccountInfo<'info>,
    pub creator_lp_token: &'me AccountInfo<'info>,
    pub token_0_vault: &'me AccountInfo<'info>,
    pub token_1_vault: &'me AccountInfo<'info>,
    ///create pool fee account
    pub create_pool_fee: &'me AccountInfo<'info>,
    pub observation_state: &'me AccountInfo<'info>,
    pub operator: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    ///Program to create mint account and mint tokens
    pub token_program: &'me AccountInfo<'info>,
    ///Program to create an ATA for receiving position NFT
    pub associated_token_program: &'me AccountInfo<'info>,
    ///To create a new program account
    pub system_program: &'me AccountInfo<'info>,
    ///Sysvar for program account
    pub rent: &'me AccountInfo<'info>,
}
///Public keys struct for the create_raydium_random_pool instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateRaydiumRandomPoolKeys {
    pub cpmm_program: Pubkey,
    ///Which config the pool belongs to.
    pub amm_config: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub token_0_mint: Pubkey,
    ///Token_1 mint, the key must be greater than token_0 mint.
    pub token_1_mint: Pubkey,
    pub lp_mint: Pubkey,
    pub vault_authority: Pubkey,
    pub bonding_curve: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_vault: Pubkey,
    pub creator_lp_token: Pubkey,
    pub token_0_vault: Pubkey,
    pub token_1_vault: Pubkey,
    ///create pool fee account
    pub create_pool_fee: Pubkey,
    pub observation_state: Pubkey,
    pub operator: Pubkey,
    pub config: Pubkey,
    ///Program to create mint account and mint tokens
    pub token_program: Pubkey,
    ///Program to create an ATA for receiving position NFT
    pub associated_token_program: Pubkey,
    ///To create a new program account
    pub system_program: Pubkey,
    ///Sysvar for program account
    pub rent: Pubkey,
}
impl From<CreateRaydiumRandomPoolAccounts<'_, '_>> for CreateRaydiumRandomPoolKeys {
    fn from(accounts: CreateRaydiumRandomPoolAccounts) -> Self {
        Self {
            cpmm_program: *accounts.cpmm_program.key,
            amm_config: *accounts.amm_config.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            token_0_mint: *accounts.token_0_mint.key,
            token_1_mint: *accounts.token_1_mint.key,
            lp_mint: *accounts.lp_mint.key,
            vault_authority: *accounts.vault_authority.key,
            bonding_curve: *accounts.bonding_curve.key,
            bonding_curve_vault: *accounts.bonding_curve_vault.key,
            bonding_curve_wsol_vault: *accounts.bonding_curve_wsol_vault.key,
            creator_lp_token: *accounts.creator_lp_token.key,
            token_0_vault: *accounts.token_0_vault.key,
            token_1_vault: *accounts.token_1_vault.key,
            create_pool_fee: *accounts.create_pool_fee.key,
            observation_state: *accounts.observation_state.key,
            operator: *accounts.operator.key,
            config: *accounts.config.key,
            token_program: *accounts.token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            system_program: *accounts.system_program.key,
            rent: *accounts.rent.key,
        }
    }
}
impl From<CreateRaydiumRandomPoolKeys>
    for [AccountMeta; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN]
{
    fn from(keys: CreateRaydiumRandomPoolKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.cpmm_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_0_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_1_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_wsol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.creator_lp_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_0_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_1_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.create_pool_fee,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.observation_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.operator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN]> for CreateRaydiumRandomPoolKeys {
    fn from(pubkeys: [Pubkey; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            cpmm_program: pubkeys[0],
            amm_config: pubkeys[1],
            authority: pubkeys[2],
            pool_state: pubkeys[3],
            token_0_mint: pubkeys[4],
            token_1_mint: pubkeys[5],
            lp_mint: pubkeys[6],
            vault_authority: pubkeys[7],
            bonding_curve: pubkeys[8],
            bonding_curve_vault: pubkeys[9],
            bonding_curve_wsol_vault: pubkeys[10],
            creator_lp_token: pubkeys[11],
            token_0_vault: pubkeys[12],
            token_1_vault: pubkeys[13],
            create_pool_fee: pubkeys[14],
            observation_state: pubkeys[15],
            operator: pubkeys[16],
            config: pubkeys[17],
            token_program: pubkeys[18],
            associated_token_program: pubkeys[19],
            system_program: pubkeys[20],
            rent: pubkeys[21],
        }
    }
}
impl From<&[String]> for CreateRaydiumRandomPoolKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            cpmm_program: pubkeys[0].parse().unwrap(),
            amm_config: pubkeys[1].parse().unwrap(),
            authority: pubkeys[2].parse().unwrap(),
            pool_state: pubkeys[3].parse().unwrap(),
            token_0_mint: pubkeys[4].parse().unwrap(),
            token_1_mint: pubkeys[5].parse().unwrap(),
            lp_mint: pubkeys[6].parse().unwrap(),
            vault_authority: pubkeys[7].parse().unwrap(),
            bonding_curve: pubkeys[8].parse().unwrap(),
            bonding_curve_vault: pubkeys[9].parse().unwrap(),
            bonding_curve_wsol_vault: pubkeys[10].parse().unwrap(),
            creator_lp_token: pubkeys[11].parse().unwrap(),
            token_0_vault: pubkeys[12].parse().unwrap(),
            token_1_vault: pubkeys[13].parse().unwrap(),
            create_pool_fee: pubkeys[14].parse().unwrap(),
            observation_state: pubkeys[15].parse().unwrap(),
            operator: pubkeys[16].parse().unwrap(),
            config: pubkeys[17].parse().unwrap(),
            token_program: pubkeys[18].parse().unwrap(),
            associated_token_program: pubkeys[19].parse().unwrap(),
            system_program: pubkeys[20].parse().unwrap(),
            rent: pubkeys[21].parse().unwrap(),
        }
    }
}
impl<'info> From<CreateRaydiumRandomPoolAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreateRaydiumRandomPoolAccounts<'_, 'info>) -> Self {
        [
            accounts.cpmm_program.clone(),
            accounts.amm_config.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.token_0_mint.clone(),
            accounts.token_1_mint.clone(),
            accounts.lp_mint.clone(),
            accounts.vault_authority.clone(),
            accounts.bonding_curve.clone(),
            accounts.bonding_curve_vault.clone(),
            accounts.bonding_curve_wsol_vault.clone(),
            accounts.creator_lp_token.clone(),
            accounts.token_0_vault.clone(),
            accounts.token_1_vault.clone(),
            accounts.create_pool_fee.clone(),
            accounts.observation_state.clone(),
            accounts.operator.clone(),
            accounts.config.clone(),
            accounts.token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.system_program.clone(),
            accounts.rent.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN]>
    for CreateRaydiumRandomPoolAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            cpmm_program: &arr[0],
            amm_config: &arr[1],
            authority: &arr[2],
            pool_state: &arr[3],
            token_0_mint: &arr[4],
            token_1_mint: &arr[5],
            lp_mint: &arr[6],
            vault_authority: &arr[7],
            bonding_curve: &arr[8],
            bonding_curve_vault: &arr[9],
            bonding_curve_wsol_vault: &arr[10],
            creator_lp_token: &arr[11],
            token_0_vault: &arr[12],
            token_1_vault: &arr[13],
            create_pool_fee: &arr[14],
            observation_state: &arr[15],
            operator: &arr[16],
            config: &arr[17],
            token_program: &arr[18],
            associated_token_program: &arr[19],
            system_program: &arr[20],
            rent: &arr[21],
        }
    }
}
pub const CREATE_RAYDIUM_RANDOM_POOL_IX_DISCM: [u8; 8] = [78, 44, 173, 29, 132, 180, 4, 172];
#[derive(Clone, Debug, PartialEq)]
pub struct CreateRaydiumRandomPoolIxData;
impl CreateRaydiumRandomPoolIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_RAYDIUM_RANDOM_POOL_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_RAYDIUM_RANDOM_POOL_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_RAYDIUM_RANDOM_POOL_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_raydium_random_pool_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateRaydiumRandomPoolKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_RAYDIUM_RANDOM_POOL_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CreateRaydiumRandomPoolIxData.try_to_vec()?,
    })
}
pub fn create_raydium_random_pool_ix(
    keys: CreateRaydiumRandomPoolKeys,
) -> std::io::Result<Instruction> {
    create_raydium_random_pool_ix_with_program_id(crate::ID, keys)
}
pub fn create_raydium_random_pool_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreateRaydiumRandomPoolAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CreateRaydiumRandomPoolKeys = accounts.into();
    let ix = create_raydium_random_pool_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_raydium_random_pool_invoke(
    accounts: CreateRaydiumRandomPoolAccounts<'_, '_>,
) -> ProgramResult {
    create_raydium_random_pool_invoke_with_program_id(crate::ID, accounts)
}
pub fn create_raydium_random_pool_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreateRaydiumRandomPoolAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreateRaydiumRandomPoolKeys = accounts.into();
    let ix = create_raydium_random_pool_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_raydium_random_pool_invoke_signed(
    accounts: CreateRaydiumRandomPoolAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_raydium_random_pool_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn create_raydium_random_pool_verify_account_keys(
    accounts: CreateRaydiumRandomPoolAccounts<'_, '_>,
    keys: CreateRaydiumRandomPoolKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.cpmm_program.key, keys.cpmm_program),
        (*accounts.amm_config.key, keys.amm_config),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.token_0_mint.key, keys.token_0_mint),
        (*accounts.token_1_mint.key, keys.token_1_mint),
        (*accounts.lp_mint.key, keys.lp_mint),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.bonding_curve.key, keys.bonding_curve),
        (*accounts.bonding_curve_vault.key, keys.bonding_curve_vault),
        (
            *accounts.bonding_curve_wsol_vault.key,
            keys.bonding_curve_wsol_vault,
        ),
        (*accounts.creator_lp_token.key, keys.creator_lp_token),
        (*accounts.token_0_vault.key, keys.token_0_vault),
        (*accounts.token_1_vault.key, keys.token_1_vault),
        (*accounts.create_pool_fee.key, keys.create_pool_fee),
        (*accounts.observation_state.key, keys.observation_state),
        (*accounts.operator.key, keys.operator),
        (*accounts.config.key, keys.config),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent.key, keys.rent),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///AUTHORITY_SEED seed for authority PDA: "vault_and_lp_mint_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 110u8, 100u8, 95u8, 108u8, 112u8, 95u8, 109u8,
    105u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///LP_MINT_SEED_0 seed for lp_mint PDA: "pool_lp_mint"
pub const LP_MINT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 108u8, 112u8, 95u8, 109u8, 105u8, 110u8, 116u8,
];
///VAULT_AUTHORITY_SEED seed for vault_authority PDA: "vault_authority"
pub const VAULT_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8,
    121u8,
];
///BONDING_CURVE_SEED_0 seed for bonding_curve PDA: "bonding_curve"
pub const BONDING_CURVE_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8,
];
///BONDING_CURVE_VAULT_SEED_0 seed for bonding_curve_vault PDA: "bonding_curve_vault"
pub const BONDING_CURVE_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    118u8, 97u8, 117u8, 108u8, 116u8,
];
///BONDING_CURVE_WSOL_VAULT_SEED_0 seed for bonding_curve_wsol_vault PDA: "bonding_curve_wsol_vault"
pub const BONDING_CURVE_WSOL_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    119u8, 115u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///TOKEN_0_VAULT_SEED_0 seed for token_0_vault PDA: "pool_vault"
pub const TOKEN_0_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///TOKEN_1_VAULT_SEED_0 seed for token_1_vault PDA: "pool_vault"
pub const TOKEN_1_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///OBSERVATION_STATE_SEED_0 seed for observation_state PDA: "observation"
pub const OBSERVATION_STATE_SEED_0: &[u8] = &[
    111u8, 98u8, 115u8, 101u8, 114u8, 118u8, 97u8, 116u8, 105u8, 111u8, 110u8,
];
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
impl CreateRaydiumRandomPoolKeys {
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the lp_mint PDA
    pub fn derive_lp_mint_pda(program_id: &Pubkey, pool_state: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[LP_MINT_SEED_0, pool_state.as_ref()], program_id)
    }
    ///Derive the vault_authority PDA
    pub fn derive_vault_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], program_id)
    }
    ///Derive the bonding_curve PDA
    pub fn derive_bonding_curve_pda(program_id: &Pubkey, token_0_mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BONDING_CURVE_SEED_0, token_0_mint.as_ref()], program_id)
    }
    ///Derive the bonding_curve_vault PDA
    pub fn derive_bonding_curve_vault_pda(
        program_id: &Pubkey,
        token_0_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_VAULT_SEED_0, token_0_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the bonding_curve_wsol_vault PDA
    pub fn derive_bonding_curve_wsol_vault_pda(
        program_id: &Pubkey,
        token_0_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_WSOL_VAULT_SEED_0, token_0_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the token_0_vault PDA
    pub fn derive_token_0_vault_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        token_0_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                TOKEN_0_VAULT_SEED_0,
                pool_state.as_ref(),
                token_0_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the token_1_vault PDA
    pub fn derive_token_1_vault_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        token_1_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                TOKEN_1_VAULT_SEED_0,
                pool_state.as_ref(),
                token_1_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the observation_state PDA
    pub fn derive_observation_state_pda(program_id: &Pubkey, pool_state: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[OBSERVATION_STATE_SEED_0, pool_state.as_ref()], program_id)
    }
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
}
///cpmm_program program address
pub const CPMM_PROGRAM_ADDRESS: &str = "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C";
///token_1_mint program address
pub const TOKEN_1_MINT_ADDRESS: &str = "So11111111111111111111111111111111111111112";
///create_pool_fee program address
pub const CREATE_POOL_FEE_ADDRESS: &str = "DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///rent program address
pub const RENT_ADDRESS: &str = "SysvarRent111111111111111111111111111111111";
