//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN: usize = 24;
///Accounts struct for the split_trading_fees instruction
#[derive(Copy, Clone, Debug)]
pub struct SplitTradingFeesAccounts<'me, 'info> {
    pub operator: &'me AccountInfo<'info>,
    pub mint: &'me AccountInfo<'info>,
    pub wsol: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub bonding_curve: &'me AccountInfo<'info>,
    pub trading_fees_vault: &'me AccountInfo<'info>,
    pub fee_splitter_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
    pub fee_splitter_config: &'me AccountInfo<'info>,
    pub fee_splitter_creator_vault: &'me AccountInfo<'info>,
    pub fee_splitter_vault_authority: &'me AccountInfo<'info>,
    pub fee_splitter_creator_vault_authority: &'me AccountInfo<'info>,
    pub fee_splitter_staking_mint: &'me AccountInfo<'info>,
    pub fee_splitter_wsol_vault: &'me AccountInfo<'info>,
    pub fee_splitter_creator_vault_authority_wsol_vault: &'me AccountInfo<'info>,
    pub fee_splitter_treasury_wsol_vault: &'me AccountInfo<'info>,
    pub fee_splitter_team_wsol_vault: &'me AccountInfo<'info>,
    pub fee_splitter_reward_pool: &'me AccountInfo<'info>,
    pub fee_splitter_reward_pool_staking_vault: &'me AccountInfo<'info>,
    pub fee_splitter_reward_pool_reward_vault: &'me AccountInfo<'info>,
    pub fee_splitter_reward_pool_program: &'me AccountInfo<'info>,
}
///Public keys struct for the split_trading_fees instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SplitTradingFeesKeys {
    pub operator: Pubkey,
    pub mint: Pubkey,
    pub wsol: Pubkey,
    pub config: Pubkey,
    pub vault_authority: Pubkey,
    pub bonding_curve: Pubkey,
    pub trading_fees_vault: Pubkey,
    pub fee_splitter_program: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub fee_splitter_config: Pubkey,
    pub fee_splitter_creator_vault: Pubkey,
    pub fee_splitter_vault_authority: Pubkey,
    pub fee_splitter_creator_vault_authority: Pubkey,
    pub fee_splitter_staking_mint: Pubkey,
    pub fee_splitter_wsol_vault: Pubkey,
    pub fee_splitter_creator_vault_authority_wsol_vault: Pubkey,
    pub fee_splitter_treasury_wsol_vault: Pubkey,
    pub fee_splitter_team_wsol_vault: Pubkey,
    pub fee_splitter_reward_pool: Pubkey,
    pub fee_splitter_reward_pool_staking_vault: Pubkey,
    pub fee_splitter_reward_pool_reward_vault: Pubkey,
    pub fee_splitter_reward_pool_program: Pubkey,
}
impl From<SplitTradingFeesAccounts<'_, '_>> for SplitTradingFeesKeys {
    fn from(accounts: SplitTradingFeesAccounts) -> Self {
        Self {
            operator: *accounts.operator.key,
            mint: *accounts.mint.key,
            wsol: *accounts.wsol.key,
            config: *accounts.config.key,
            vault_authority: *accounts.vault_authority.key,
            bonding_curve: *accounts.bonding_curve.key,
            trading_fees_vault: *accounts.trading_fees_vault.key,
            fee_splitter_program: *accounts.fee_splitter_program.key,
            system_program: *accounts.system_program.key,
            token_program: *accounts.token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            fee_splitter_config: *accounts.fee_splitter_config.key,
            fee_splitter_creator_vault: *accounts.fee_splitter_creator_vault.key,
            fee_splitter_vault_authority: *accounts.fee_splitter_vault_authority.key,
            fee_splitter_creator_vault_authority: *accounts
                .fee_splitter_creator_vault_authority
                .key,
            fee_splitter_staking_mint: *accounts.fee_splitter_staking_mint.key,
            fee_splitter_wsol_vault: *accounts.fee_splitter_wsol_vault.key,
            fee_splitter_creator_vault_authority_wsol_vault: *accounts
                .fee_splitter_creator_vault_authority_wsol_vault
                .key,
            fee_splitter_treasury_wsol_vault: *accounts.fee_splitter_treasury_wsol_vault.key,
            fee_splitter_team_wsol_vault: *accounts.fee_splitter_team_wsol_vault.key,
            fee_splitter_reward_pool: *accounts.fee_splitter_reward_pool.key,
            fee_splitter_reward_pool_staking_vault: *accounts
                .fee_splitter_reward_pool_staking_vault
                .key,
            fee_splitter_reward_pool_reward_vault: *accounts
                .fee_splitter_reward_pool_reward_vault
                .key,
            fee_splitter_reward_pool_program: *accounts.fee_splitter_reward_pool_program.key,
        }
    }
}
impl From<SplitTradingFeesKeys> for [AccountMeta; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN] {
    fn from(keys: SplitTradingFeesKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.operator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.wsol,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.bonding_curve,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.trading_fees_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_creator_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_vault_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_creator_vault_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_staking_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_wsol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_creator_vault_authority_wsol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_treasury_wsol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_team_wsol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_reward_pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_reward_pool_staking_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_reward_pool_reward_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.fee_splitter_reward_pool_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN]> for SplitTradingFeesKeys {
    fn from(pubkeys: [Pubkey; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            operator: pubkeys[0],
            mint: pubkeys[1],
            wsol: pubkeys[2],
            config: pubkeys[3],
            vault_authority: pubkeys[4],
            bonding_curve: pubkeys[5],
            trading_fees_vault: pubkeys[6],
            fee_splitter_program: pubkeys[7],
            system_program: pubkeys[8],
            token_program: pubkeys[9],
            associated_token_program: pubkeys[10],
            fee_splitter_config: pubkeys[11],
            fee_splitter_creator_vault: pubkeys[12],
            fee_splitter_vault_authority: pubkeys[13],
            fee_splitter_creator_vault_authority: pubkeys[14],
            fee_splitter_staking_mint: pubkeys[15],
            fee_splitter_wsol_vault: pubkeys[16],
            fee_splitter_creator_vault_authority_wsol_vault: pubkeys[17],
            fee_splitter_treasury_wsol_vault: pubkeys[18],
            fee_splitter_team_wsol_vault: pubkeys[19],
            fee_splitter_reward_pool: pubkeys[20],
            fee_splitter_reward_pool_staking_vault: pubkeys[21],
            fee_splitter_reward_pool_reward_vault: pubkeys[22],
            fee_splitter_reward_pool_program: pubkeys[23],
        }
    }
}
impl From<&[String]> for SplitTradingFeesKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            operator: pubkeys[0].parse().unwrap(),
            mint: pubkeys[1].parse().unwrap(),
            wsol: pubkeys[2].parse().unwrap(),
            config: pubkeys[3].parse().unwrap(),
            vault_authority: pubkeys[4].parse().unwrap(),
            bonding_curve: pubkeys[5].parse().unwrap(),
            trading_fees_vault: pubkeys[6].parse().unwrap(),
            fee_splitter_program: pubkeys[7].parse().unwrap(),
            system_program: pubkeys[8].parse().unwrap(),
            token_program: pubkeys[9].parse().unwrap(),
            associated_token_program: pubkeys[10].parse().unwrap(),
            fee_splitter_config: pubkeys[11].parse().unwrap(),
            fee_splitter_creator_vault: pubkeys[12].parse().unwrap(),
            fee_splitter_vault_authority: pubkeys[13].parse().unwrap(),
            fee_splitter_creator_vault_authority: pubkeys[14].parse().unwrap(),
            fee_splitter_staking_mint: pubkeys[15].parse().unwrap(),
            fee_splitter_wsol_vault: pubkeys[16].parse().unwrap(),
            fee_splitter_creator_vault_authority_wsol_vault: pubkeys[17].parse().unwrap(),
            fee_splitter_treasury_wsol_vault: pubkeys[18].parse().unwrap(),
            fee_splitter_team_wsol_vault: pubkeys[19].parse().unwrap(),
            fee_splitter_reward_pool: pubkeys[20].parse().unwrap(),
            fee_splitter_reward_pool_staking_vault: pubkeys[21].parse().unwrap(),
            fee_splitter_reward_pool_reward_vault: pubkeys[22].parse().unwrap(),
            fee_splitter_reward_pool_program: pubkeys[23].parse().unwrap(),
        }
    }
}
impl<'info> From<SplitTradingFeesAccounts<'_, 'info>>
    for [AccountInfo<'info>; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN]
{
    fn from(accounts: SplitTradingFeesAccounts<'_, 'info>) -> Self {
        [
            accounts.operator.clone(),
            accounts.mint.clone(),
            accounts.wsol.clone(),
            accounts.config.clone(),
            accounts.vault_authority.clone(),
            accounts.bonding_curve.clone(),
            accounts.trading_fees_vault.clone(),
            accounts.fee_splitter_program.clone(),
            accounts.system_program.clone(),
            accounts.token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.fee_splitter_config.clone(),
            accounts.fee_splitter_creator_vault.clone(),
            accounts.fee_splitter_vault_authority.clone(),
            accounts.fee_splitter_creator_vault_authority.clone(),
            accounts.fee_splitter_staking_mint.clone(),
            accounts.fee_splitter_wsol_vault.clone(),
            accounts
                .fee_splitter_creator_vault_authority_wsol_vault
                .clone(),
            accounts.fee_splitter_treasury_wsol_vault.clone(),
            accounts.fee_splitter_team_wsol_vault.clone(),
            accounts.fee_splitter_reward_pool.clone(),
            accounts.fee_splitter_reward_pool_staking_vault.clone(),
            accounts.fee_splitter_reward_pool_reward_vault.clone(),
            accounts.fee_splitter_reward_pool_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN]>
    for SplitTradingFeesAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            operator: &arr[0],
            mint: &arr[1],
            wsol: &arr[2],
            config: &arr[3],
            vault_authority: &arr[4],
            bonding_curve: &arr[5],
            trading_fees_vault: &arr[6],
            fee_splitter_program: &arr[7],
            system_program: &arr[8],
            token_program: &arr[9],
            associated_token_program: &arr[10],
            fee_splitter_config: &arr[11],
            fee_splitter_creator_vault: &arr[12],
            fee_splitter_vault_authority: &arr[13],
            fee_splitter_creator_vault_authority: &arr[14],
            fee_splitter_staking_mint: &arr[15],
            fee_splitter_wsol_vault: &arr[16],
            fee_splitter_creator_vault_authority_wsol_vault: &arr[17],
            fee_splitter_treasury_wsol_vault: &arr[18],
            fee_splitter_team_wsol_vault: &arr[19],
            fee_splitter_reward_pool: &arr[20],
            fee_splitter_reward_pool_staking_vault: &arr[21],
            fee_splitter_reward_pool_reward_vault: &arr[22],
            fee_splitter_reward_pool_program: &arr[23],
        }
    }
}
pub const SPLIT_TRADING_FEES_IX_DISCM: [u8; 8] = [96, 126, 225, 47, 185, 213, 50, 58];
#[derive(Clone, Debug, PartialEq)]
pub struct SplitTradingFeesIxData;
impl SplitTradingFeesIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != SPLIT_TRADING_FEES_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    SPLIT_TRADING_FEES_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&SPLIT_TRADING_FEES_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn split_trading_fees_ix_with_program_id(
    program_id: Pubkey,
    keys: SplitTradingFeesKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SPLIT_TRADING_FEES_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: SplitTradingFeesIxData.try_to_vec()?,
    })
}
pub fn split_trading_fees_ix(keys: SplitTradingFeesKeys) -> std::io::Result<Instruction> {
    split_trading_fees_ix_with_program_id(crate::ID, keys)
}
pub fn split_trading_fees_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SplitTradingFeesAccounts<'_, '_>,
) -> ProgramResult {
    let keys: SplitTradingFeesKeys = accounts.into();
    let ix = split_trading_fees_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn split_trading_fees_invoke(accounts: SplitTradingFeesAccounts<'_, '_>) -> ProgramResult {
    split_trading_fees_invoke_with_program_id(crate::ID, accounts)
}
pub fn split_trading_fees_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SplitTradingFeesAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SplitTradingFeesKeys = accounts.into();
    let ix = split_trading_fees_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn split_trading_fees_invoke_signed(
    accounts: SplitTradingFeesAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    split_trading_fees_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn split_trading_fees_verify_account_keys(
    accounts: SplitTradingFeesAccounts<'_, '_>,
    keys: SplitTradingFeesKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.operator.key, keys.operator),
        (*accounts.mint.key, keys.mint),
        (*accounts.wsol.key, keys.wsol),
        (*accounts.config.key, keys.config),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.bonding_curve.key, keys.bonding_curve),
        (*accounts.trading_fees_vault.key, keys.trading_fees_vault),
        (
            *accounts.fee_splitter_program.key,
            keys.fee_splitter_program,
        ),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.fee_splitter_config.key, keys.fee_splitter_config),
        (
            *accounts.fee_splitter_creator_vault.key,
            keys.fee_splitter_creator_vault,
        ),
        (
            *accounts.fee_splitter_vault_authority.key,
            keys.fee_splitter_vault_authority,
        ),
        (
            *accounts.fee_splitter_creator_vault_authority.key,
            keys.fee_splitter_creator_vault_authority,
        ),
        (
            *accounts.fee_splitter_staking_mint.key,
            keys.fee_splitter_staking_mint,
        ),
        (
            *accounts.fee_splitter_wsol_vault.key,
            keys.fee_splitter_wsol_vault,
        ),
        (
            *accounts.fee_splitter_creator_vault_authority_wsol_vault.key,
            keys.fee_splitter_creator_vault_authority_wsol_vault,
        ),
        (
            *accounts.fee_splitter_treasury_wsol_vault.key,
            keys.fee_splitter_treasury_wsol_vault,
        ),
        (
            *accounts.fee_splitter_team_wsol_vault.key,
            keys.fee_splitter_team_wsol_vault,
        ),
        (
            *accounts.fee_splitter_reward_pool.key,
            keys.fee_splitter_reward_pool,
        ),
        (
            *accounts.fee_splitter_reward_pool_staking_vault.key,
            keys.fee_splitter_reward_pool_staking_vault,
        ),
        (
            *accounts.fee_splitter_reward_pool_reward_vault.key,
            keys.fee_splitter_reward_pool_reward_vault,
        ),
        (
            *accounts.fee_splitter_reward_pool_program.key,
            keys.fee_splitter_reward_pool_program,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
///VAULT_AUTHORITY_SEED seed for vault_authority PDA: "vault_authority"
pub const VAULT_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8,
    121u8,
];
///BONDING_CURVE_SEED_0 seed for bonding_curve PDA: "bonding_curve"
pub const BONDING_CURVE_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8,
];
///TRADING_FEES_VAULT_SEED_0 seed for trading_fees_vault PDA: "trading_fees_vault"
pub const TRADING_FEES_VAULT_SEED_0: &[u8] = &[
    116u8, 114u8, 97u8, 100u8, 105u8, 110u8, 103u8, 95u8, 102u8, 101u8, 101u8, 115u8, 95u8, 118u8,
    97u8, 117u8, 108u8, 116u8,
];
///FEE_SPLITTER_WSOL_VAULT_SEED_1 seed for fee_splitter_wsol_vault PDA
pub const FEE_SPLITTER_WSOL_VAULT_SEED_1: &[u8] = &[
    6u8, 221u8, 246u8, 225u8, 215u8, 101u8, 161u8, 147u8, 217u8, 203u8, 225u8, 70u8, 206u8, 235u8,
    121u8, 172u8, 28u8, 180u8, 133u8, 237u8, 95u8, 91u8, 55u8, 145u8, 58u8, 140u8, 245u8, 133u8,
    126u8, 255u8, 0u8, 169u8,
];
impl SplitTradingFeesKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
    ///Derive the vault_authority PDA
    pub fn derive_vault_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], program_id)
    }
    ///Derive the bonding_curve PDA
    pub fn derive_bonding_curve_pda(program_id: &Pubkey, mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BONDING_CURVE_SEED_0, mint.as_ref()], program_id)
    }
    ///Derive the trading_fees_vault PDA
    pub fn derive_trading_fees_vault_pda(program_id: &Pubkey, mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[TRADING_FEES_VAULT_SEED_0, mint.as_ref()], program_id)
    }
    ///Derive the fee_splitter_wsol_vault PDA
    pub fn derive_fee_splitter_wsol_vault_pda(
        program_id: &Pubkey,
        fee_splitter_vault_authority: &Pubkey,
        wsol: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                fee_splitter_vault_authority.as_ref(),
                FEE_SPLITTER_WSOL_VAULT_SEED_1,
                wsol.as_ref(),
            ],
            program_id,
        )
    }
}
///wsol program address
pub const WSOL_ADDRESS: &str = "So11111111111111111111111111111111111111112";
///fee_splitter_program program address
pub const FEE_SPLITTER_PROGRAM_ADDRESS: &str = "boopEYztaEYSnajfMtjcRysyzyRcchgKsPboRZEbnJi";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
