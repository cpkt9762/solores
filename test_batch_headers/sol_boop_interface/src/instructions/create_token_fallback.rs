//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN: usize = 8;
///Accounts struct for the create_token_fallback instruction
#[derive(Copy, Clone, Debug)]
pub struct CreateTokenFallbackAccounts<'me, 'info> {
    pub config: &'me AccountInfo<'info>,
    pub metadata: &'me AccountInfo<'info>,
    pub mint: &'me AccountInfo<'info>,
    pub payer: &'me AccountInfo<'info>,
    pub rent: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub token_metadata_program: &'me AccountInfo<'info>,
}
///Public keys struct for the create_token_fallback instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateTokenFallbackKeys {
    pub config: Pubkey,
    pub metadata: Pubkey,
    pub mint: Pubkey,
    pub payer: Pubkey,
    pub rent: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub token_metadata_program: Pubkey,
}
impl From<CreateTokenFallbackAccounts<'_, '_>> for CreateTokenFallbackKeys {
    fn from(accounts: CreateTokenFallbackAccounts) -> Self {
        Self {
            config: *accounts.config.key,
            metadata: *accounts.metadata.key,
            mint: *accounts.mint.key,
            payer: *accounts.payer.key,
            rent: *accounts.rent.key,
            system_program: *accounts.system_program.key,
            token_program: *accounts.token_program.key,
            token_metadata_program: *accounts.token_metadata_program.key,
        }
    }
}
impl From<CreateTokenFallbackKeys> for [AccountMeta; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateTokenFallbackKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.metadata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_metadata_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN]> for CreateTokenFallbackKeys {
    fn from(pubkeys: [Pubkey; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            config: pubkeys[0],
            metadata: pubkeys[1],
            mint: pubkeys[2],
            payer: pubkeys[3],
            rent: pubkeys[4],
            system_program: pubkeys[5],
            token_program: pubkeys[6],
            token_metadata_program: pubkeys[7],
        }
    }
}
impl From<&[String]> for CreateTokenFallbackKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            config: pubkeys[0].parse().unwrap(),
            metadata: pubkeys[1].parse().unwrap(),
            mint: pubkeys[2].parse().unwrap(),
            payer: pubkeys[3].parse().unwrap(),
            rent: pubkeys[4].parse().unwrap(),
            system_program: pubkeys[5].parse().unwrap(),
            token_program: pubkeys[6].parse().unwrap(),
            token_metadata_program: pubkeys[7].parse().unwrap(),
        }
    }
}
impl<'info> From<CreateTokenFallbackAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreateTokenFallbackAccounts<'_, 'info>) -> Self {
        [
            accounts.config.clone(),
            accounts.metadata.clone(),
            accounts.mint.clone(),
            accounts.payer.clone(),
            accounts.rent.clone(),
            accounts.system_program.clone(),
            accounts.token_program.clone(),
            accounts.token_metadata_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN]>
    for CreateTokenFallbackAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            config: &arr[0],
            metadata: &arr[1],
            mint: &arr[2],
            payer: &arr[3],
            rent: &arr[4],
            system_program: &arr[5],
            token_program: &arr[6],
            token_metadata_program: &arr[7],
        }
    }
}
pub const CREATE_TOKEN_FALLBACK_IX_DISCM: [u8; 8] = [253, 184, 126, 199, 235, 232, 172, 162];
///Arguments for the create_token_fallback instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateTokenFallbackIxArgs {
    pub discriminator: [u8; 8],
    pub salt: u64,
    pub name: String,
    pub symbol: String,
    pub uri: String,
}
impl Default for CreateTokenFallbackIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [253u8, 184u8, 126u8, 199u8, 235u8, 232u8, 172u8, 162u8],
            salt: Default::default(),
            name: Default::default(),
            symbol: Default::default(),
            uri: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CreateTokenFallbackIxData(pub CreateTokenFallbackIxArgs);
impl From<CreateTokenFallbackIxArgs> for CreateTokenFallbackIxData {
    fn from(args: CreateTokenFallbackIxArgs) -> Self {
        Self(args)
    }
}
impl CreateTokenFallbackIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_TOKEN_FALLBACK_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_TOKEN_FALLBACK_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(CreateTokenFallbackIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_TOKEN_FALLBACK_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_token_fallback_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateTokenFallbackKeys,
    args: CreateTokenFallbackIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_TOKEN_FALLBACK_IX_ACCOUNTS_LEN] = keys.into();
    let data: CreateTokenFallbackIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn create_token_fallback_ix(
    keys: CreateTokenFallbackKeys,
    args: CreateTokenFallbackIxArgs,
) -> std::io::Result<Instruction> {
    create_token_fallback_ix_with_program_id(crate::ID, keys, args)
}
pub fn create_token_fallback_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreateTokenFallbackAccounts<'_, '_>,
    args: CreateTokenFallbackIxArgs,
) -> ProgramResult {
    let keys: CreateTokenFallbackKeys = accounts.into();
    let ix = create_token_fallback_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_token_fallback_invoke(
    accounts: CreateTokenFallbackAccounts<'_, '_>,
    args: CreateTokenFallbackIxArgs,
) -> ProgramResult {
    create_token_fallback_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn create_token_fallback_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreateTokenFallbackAccounts<'_, '_>,
    args: CreateTokenFallbackIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreateTokenFallbackKeys = accounts.into();
    let ix = create_token_fallback_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_token_fallback_invoke_signed(
    accounts: CreateTokenFallbackAccounts<'_, '_>,
    args: CreateTokenFallbackIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_token_fallback_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn create_token_fallback_verify_account_keys(
    accounts: CreateTokenFallbackAccounts<'_, '_>,
    keys: CreateTokenFallbackKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.config.key, keys.config),
        (*accounts.metadata.key, keys.metadata),
        (*accounts.mint.key, keys.mint),
        (*accounts.payer.key, keys.payer),
        (*accounts.rent.key, keys.rent),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.token_metadata_program.key,
            keys.token_metadata_program,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
///METADATA_SEED_0 seed for metadata PDA: "metadata"
pub const METADATA_SEED_0: &[u8] = &[109u8, 101u8, 116u8, 97u8, 100u8, 97u8, 116u8, 97u8];
///METADATA_SEED_1 seed for metadata PDA
pub const METADATA_SEED_1: &[u8] = &[
    11u8, 112u8, 101u8, 177u8, 227u8, 209u8, 124u8, 69u8, 56u8, 157u8, 82u8, 127u8, 107u8, 4u8,
    195u8, 205u8, 88u8, 184u8, 108u8, 115u8, 26u8, 160u8, 253u8, 181u8, 73u8, 182u8, 209u8, 188u8,
    3u8, 248u8, 41u8, 70u8,
];
///MINT_SEED_0 seed for mint PDA: "mint"
pub const MINT_SEED_0: &[u8] = &[109u8, 105u8, 110u8, 116u8];
impl CreateTokenFallbackKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
    ///Derive the metadata PDA
    pub fn derive_metadata_pda(program_id: &Pubkey, mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[METADATA_SEED_0, METADATA_SEED_1, mint.as_ref()],
            program_id,
        )
    }
    ///Derive the mint PDA
    pub fn derive_mint_pda(program_id: &Pubkey, salt: &[u8]) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[MINT_SEED_0, salt], program_id)
    }
}
///rent program address
pub const RENT_ADDRESS: &str = "SysvarRent111111111111111111111111111111111";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///token_metadata_program program address
pub const TOKEN_METADATA_PROGRAM_ADDRESS: &str = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
impl CreateTokenFallbackIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CreateTokenFallbackIxArgs> for BoopProgramIx {
    fn from(args: CreateTokenFallbackIxArgs) -> Self {
        Self::CreateTokenFallback(args)
    }
}
