//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN: usize = 16;
///Accounts struct for the swap_sol_for_tokens_on_raydium instruction
#[derive(Copy, Clone, Debug)]
pub struct SwapSolForTokensOnRaydiumAccounts<'me, 'info> {
    pub config: &'me AccountInfo<'info>,
    pub bonding_curve: &'me AccountInfo<'info>,
    ///Which config the pool belongs to.
    pub amm_config: &'me AccountInfo<'info>,
    pub operator: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub authority: &'me AccountInfo<'info>,
    pub pool_state: &'me AccountInfo<'info>,
    pub input_vault: &'me AccountInfo<'info>,
    pub output_vault: &'me AccountInfo<'info>,
    pub bonding_curve_vault: &'me AccountInfo<'info>,
    pub bonding_curve_wsol_vault: &'me AccountInfo<'info>,
    ///token_0 mint, the key must smaller than token_1 mint
    pub output_token_mint: &'me AccountInfo<'info>,
    ///token_1 mint, the key must greater than token_0 mint
    pub input_token_mint: &'me AccountInfo<'info>,
    ///input_token_mint and output_token_mint have the same token program
    pub token_program: &'me AccountInfo<'info>,
    pub cp_swap_program: &'me AccountInfo<'info>,
    pub observation_state: &'me AccountInfo<'info>,
}
///Public keys struct for the swap_sol_for_tokens_on_raydium instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SwapSolForTokensOnRaydiumKeys {
    pub config: Pubkey,
    pub bonding_curve: Pubkey,
    ///Which config the pool belongs to.
    pub amm_config: Pubkey,
    pub operator: Pubkey,
    pub vault_authority: Pubkey,
    pub authority: Pubkey,
    pub pool_state: Pubkey,
    pub input_vault: Pubkey,
    pub output_vault: Pubkey,
    pub bonding_curve_vault: Pubkey,
    pub bonding_curve_wsol_vault: Pubkey,
    ///token_0 mint, the key must smaller than token_1 mint
    pub output_token_mint: Pubkey,
    ///token_1 mint, the key must greater than token_0 mint
    pub input_token_mint: Pubkey,
    ///input_token_mint and output_token_mint have the same token program
    pub token_program: Pubkey,
    pub cp_swap_program: Pubkey,
    pub observation_state: Pubkey,
}
impl From<SwapSolForTokensOnRaydiumAccounts<'_, '_>> for SwapSolForTokensOnRaydiumKeys {
    fn from(accounts: SwapSolForTokensOnRaydiumAccounts) -> Self {
        Self {
            config: *accounts.config.key,
            bonding_curve: *accounts.bonding_curve.key,
            amm_config: *accounts.amm_config.key,
            operator: *accounts.operator.key,
            vault_authority: *accounts.vault_authority.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            input_vault: *accounts.input_vault.key,
            output_vault: *accounts.output_vault.key,
            bonding_curve_vault: *accounts.bonding_curve_vault.key,
            bonding_curve_wsol_vault: *accounts.bonding_curve_wsol_vault.key,
            output_token_mint: *accounts.output_token_mint.key,
            input_token_mint: *accounts.input_token_mint.key,
            token_program: *accounts.token_program.key,
            cp_swap_program: *accounts.cp_swap_program.key,
            observation_state: *accounts.observation_state.key,
        }
    }
}
impl From<SwapSolForTokensOnRaydiumKeys>
    for [AccountMeta; SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN]
{
    fn from(keys: SwapSolForTokensOnRaydiumKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.bonding_curve,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.operator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.input_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.output_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bonding_curve_wsol_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.output_token_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.input_token_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.cp_swap_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.observation_state,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN]>
    for SwapSolForTokensOnRaydiumKeys
{
    fn from(pubkeys: [Pubkey; SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            config: pubkeys[0],
            bonding_curve: pubkeys[1],
            amm_config: pubkeys[2],
            operator: pubkeys[3],
            vault_authority: pubkeys[4],
            authority: pubkeys[5],
            pool_state: pubkeys[6],
            input_vault: pubkeys[7],
            output_vault: pubkeys[8],
            bonding_curve_vault: pubkeys[9],
            bonding_curve_wsol_vault: pubkeys[10],
            output_token_mint: pubkeys[11],
            input_token_mint: pubkeys[12],
            token_program: pubkeys[13],
            cp_swap_program: pubkeys[14],
            observation_state: pubkeys[15],
        }
    }
}
impl From<&[String]> for SwapSolForTokensOnRaydiumKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            config: pubkeys[0].parse().unwrap(),
            bonding_curve: pubkeys[1].parse().unwrap(),
            amm_config: pubkeys[2].parse().unwrap(),
            operator: pubkeys[3].parse().unwrap(),
            vault_authority: pubkeys[4].parse().unwrap(),
            authority: pubkeys[5].parse().unwrap(),
            pool_state: pubkeys[6].parse().unwrap(),
            input_vault: pubkeys[7].parse().unwrap(),
            output_vault: pubkeys[8].parse().unwrap(),
            bonding_curve_vault: pubkeys[9].parse().unwrap(),
            bonding_curve_wsol_vault: pubkeys[10].parse().unwrap(),
            output_token_mint: pubkeys[11].parse().unwrap(),
            input_token_mint: pubkeys[12].parse().unwrap(),
            token_program: pubkeys[13].parse().unwrap(),
            cp_swap_program: pubkeys[14].parse().unwrap(),
            observation_state: pubkeys[15].parse().unwrap(),
        }
    }
}
impl<'info> From<SwapSolForTokensOnRaydiumAccounts<'_, 'info>>
    for [AccountInfo<'info>; SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN]
{
    fn from(accounts: SwapSolForTokensOnRaydiumAccounts<'_, 'info>) -> Self {
        [
            accounts.config.clone(),
            accounts.bonding_curve.clone(),
            accounts.amm_config.clone(),
            accounts.operator.clone(),
            accounts.vault_authority.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.input_vault.clone(),
            accounts.output_vault.clone(),
            accounts.bonding_curve_vault.clone(),
            accounts.bonding_curve_wsol_vault.clone(),
            accounts.output_token_mint.clone(),
            accounts.input_token_mint.clone(),
            accounts.token_program.clone(),
            accounts.cp_swap_program.clone(),
            accounts.observation_state.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN]>
    for SwapSolForTokensOnRaydiumAccounts<'me, 'info>
{
    fn from(
        arr: &'me [AccountInfo<'info>; SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN],
    ) -> Self {
        Self {
            config: &arr[0],
            bonding_curve: &arr[1],
            amm_config: &arr[2],
            operator: &arr[3],
            vault_authority: &arr[4],
            authority: &arr[5],
            pool_state: &arr[6],
            input_vault: &arr[7],
            output_vault: &arr[8],
            bonding_curve_vault: &arr[9],
            bonding_curve_wsol_vault: &arr[10],
            output_token_mint: &arr[11],
            input_token_mint: &arr[12],
            token_program: &arr[13],
            cp_swap_program: &arr[14],
            observation_state: &arr[15],
        }
    }
}
pub const SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_DISCM: [u8; 8] = [107, 248, 131, 239, 152, 234, 54, 35];
///Arguments for the swap_sol_for_tokens_on_raydium instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapSolForTokensOnRaydiumIxArgs {
    pub discriminator: [u8; 8],
    pub amount_in: u64,
    pub minimum_amount_out: u64,
}
impl Default for SwapSolForTokensOnRaydiumIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [107u8, 248u8, 131u8, 239u8, 152u8, 234u8, 54u8, 35u8],
            amount_in: Default::default(),
            minimum_amount_out: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct SwapSolForTokensOnRaydiumIxData(pub SwapSolForTokensOnRaydiumIxArgs);
impl From<SwapSolForTokensOnRaydiumIxArgs> for SwapSolForTokensOnRaydiumIxData {
    fn from(args: SwapSolForTokensOnRaydiumIxArgs) -> Self {
        Self(args)
    }
}
impl SwapSolForTokensOnRaydiumIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(SwapSolForTokensOnRaydiumIxArgs::deserialize(
            &mut reader,
        )?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn swap_sol_for_tokens_on_raydium_ix_with_program_id(
    program_id: Pubkey,
    keys: SwapSolForTokensOnRaydiumKeys,
    args: SwapSolForTokensOnRaydiumIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SWAP_SOL_FOR_TOKENS_ON_RAYDIUM_IX_ACCOUNTS_LEN] = keys.into();
    let data: SwapSolForTokensOnRaydiumIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn swap_sol_for_tokens_on_raydium_ix(
    keys: SwapSolForTokensOnRaydiumKeys,
    args: SwapSolForTokensOnRaydiumIxArgs,
) -> std::io::Result<Instruction> {
    swap_sol_for_tokens_on_raydium_ix_with_program_id(crate::ID, keys, args)
}
pub fn swap_sol_for_tokens_on_raydium_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SwapSolForTokensOnRaydiumAccounts<'_, '_>,
    args: SwapSolForTokensOnRaydiumIxArgs,
) -> ProgramResult {
    let keys: SwapSolForTokensOnRaydiumKeys = accounts.into();
    let ix = swap_sol_for_tokens_on_raydium_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn swap_sol_for_tokens_on_raydium_invoke(
    accounts: SwapSolForTokensOnRaydiumAccounts<'_, '_>,
    args: SwapSolForTokensOnRaydiumIxArgs,
) -> ProgramResult {
    swap_sol_for_tokens_on_raydium_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn swap_sol_for_tokens_on_raydium_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SwapSolForTokensOnRaydiumAccounts<'_, '_>,
    args: SwapSolForTokensOnRaydiumIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SwapSolForTokensOnRaydiumKeys = accounts.into();
    let ix = swap_sol_for_tokens_on_raydium_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn swap_sol_for_tokens_on_raydium_invoke_signed(
    accounts: SwapSolForTokensOnRaydiumAccounts<'_, '_>,
    args: SwapSolForTokensOnRaydiumIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    swap_sol_for_tokens_on_raydium_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn swap_sol_for_tokens_on_raydium_verify_account_keys(
    accounts: SwapSolForTokensOnRaydiumAccounts<'_, '_>,
    keys: SwapSolForTokensOnRaydiumKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.config.key, keys.config),
        (*accounts.bonding_curve.key, keys.bonding_curve),
        (*accounts.amm_config.key, keys.amm_config),
        (*accounts.operator.key, keys.operator),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.input_vault.key, keys.input_vault),
        (*accounts.output_vault.key, keys.output_vault),
        (*accounts.bonding_curve_vault.key, keys.bonding_curve_vault),
        (
            *accounts.bonding_curve_wsol_vault.key,
            keys.bonding_curve_wsol_vault,
        ),
        (*accounts.output_token_mint.key, keys.output_token_mint),
        (*accounts.input_token_mint.key, keys.input_token_mint),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.cp_swap_program.key, keys.cp_swap_program),
        (*accounts.observation_state.key, keys.observation_state),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
///BONDING_CURVE_SEED_0 seed for bonding_curve PDA: "bonding_curve"
pub const BONDING_CURVE_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8,
];
///VAULT_AUTHORITY_SEED seed for vault_authority PDA: "vault_authority"
pub const VAULT_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8,
    121u8,
];
///AUTHORITY_SEED seed for authority PDA: "vault_and_lp_mint_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 110u8, 100u8, 95u8, 108u8, 112u8, 95u8, 109u8,
    105u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///POOL_STATE_SEED_0 seed for pool_state PDA: "pool"
pub const POOL_STATE_SEED_0: &[u8] = &[112u8, 111u8, 111u8, 108u8];
///INPUT_VAULT_SEED_0 seed for input_vault PDA: "pool_vault"
pub const INPUT_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///OUTPUT_VAULT_SEED_0 seed for output_vault PDA: "pool_vault"
pub const OUTPUT_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///BONDING_CURVE_VAULT_SEED_0 seed for bonding_curve_vault PDA: "bonding_curve_vault"
pub const BONDING_CURVE_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    118u8, 97u8, 117u8, 108u8, 116u8,
];
///BONDING_CURVE_WSOL_VAULT_SEED_0 seed for bonding_curve_wsol_vault PDA: "bonding_curve_wsol_vault"
pub const BONDING_CURVE_WSOL_VAULT_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 95u8, 99u8, 117u8, 114u8, 118u8, 101u8, 95u8,
    119u8, 115u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///OBSERVATION_STATE_SEED_0 seed for observation_state PDA: "observation"
pub const OBSERVATION_STATE_SEED_0: &[u8] = &[
    111u8, 98u8, 115u8, 101u8, 114u8, 118u8, 97u8, 116u8, 105u8, 111u8, 110u8,
];
impl SwapSolForTokensOnRaydiumKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
    ///Derive the bonding_curve PDA
    pub fn derive_bonding_curve_pda(
        program_id: &Pubkey,
        output_token_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_SEED_0, output_token_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the vault_authority PDA
    pub fn derive_vault_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], program_id)
    }
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the pool_state PDA
    pub fn derive_pool_state_pda(
        program_id: &Pubkey,
        amm_config: &Pubkey,
        output_token_mint: &Pubkey,
        input_token_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                POOL_STATE_SEED_0,
                amm_config.as_ref(),
                output_token_mint.as_ref(),
                input_token_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the input_vault PDA
    pub fn derive_input_vault_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        input_token_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                INPUT_VAULT_SEED_0,
                pool_state.as_ref(),
                input_token_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the output_vault PDA
    pub fn derive_output_vault_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        output_token_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                OUTPUT_VAULT_SEED_0,
                pool_state.as_ref(),
                output_token_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the bonding_curve_vault PDA
    pub fn derive_bonding_curve_vault_pda(
        program_id: &Pubkey,
        output_token_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_VAULT_SEED_0, output_token_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the bonding_curve_wsol_vault PDA
    pub fn derive_bonding_curve_wsol_vault_pda(
        program_id: &Pubkey,
        output_token_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BONDING_CURVE_WSOL_VAULT_SEED_0, output_token_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the observation_state PDA
    pub fn derive_observation_state_pda(program_id: &Pubkey, pool_state: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[OBSERVATION_STATE_SEED_0, pool_state.as_ref()], program_id)
    }
}
///input_token_mint program address
pub const INPUT_TOKEN_MINT_ADDRESS: &str = "So11111111111111111111111111111111111111112";
///cp_swap_program program address
pub const CP_SWAP_PROGRAM_ADDRESS: &str = "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C";
impl SwapSolForTokensOnRaydiumIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<SwapSolForTokensOnRaydiumIxArgs> for BoopProgramIx {
    fn from(args: SwapSolForTokensOnRaydiumIxArgs) -> Self {
        Self::SwapSolForTokensOnRaydium(args)
    }
}
