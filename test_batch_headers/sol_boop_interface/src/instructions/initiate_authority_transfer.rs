//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN: usize = 3;
///Accounts struct for the initiate_authority_transfer instruction
#[derive(Copy, Clone, Debug)]
pub struct InitiateAuthorityTransferAccounts<'me, 'info> {
    ///Relations: config
    pub authority: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the initiate_authority_transfer instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitiateAuthorityTransferKeys {
    ///Relations: config
    pub authority: Pubkey,
    pub config: Pubkey,
    pub system_program: Pubkey,
}
impl From<InitiateAuthorityTransferAccounts<'_, '_>> for InitiateAuthorityTransferKeys {
    fn from(accounts: InitiateAuthorityTransferAccounts) -> Self {
        Self {
            authority: *accounts.authority.key,
            config: *accounts.config.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<InitiateAuthorityTransferKeys>
    for [AccountMeta; INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitiateAuthorityTransferKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]> for InitiateAuthorityTransferKeys {
    fn from(pubkeys: [Pubkey; INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            authority: pubkeys[0],
            config: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl From<&[String]> for InitiateAuthorityTransferKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            authority: pubkeys[0].parse().unwrap(),
            config: pubkeys[1].parse().unwrap(),
            system_program: pubkeys[2].parse().unwrap(),
        }
    }
}
impl<'info> From<InitiateAuthorityTransferAccounts<'_, 'info>>
    for [AccountInfo<'info>; INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]
{
    fn from(accounts: InitiateAuthorityTransferAccounts<'_, 'info>) -> Self {
        [
            accounts.authority.clone(),
            accounts.config.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]>
    for InitiateAuthorityTransferAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            authority: &arr[0],
            config: &arr[1],
            system_program: &arr[2],
        }
    }
}
pub const INITIATE_AUTHORITY_TRANSFER_IX_DISCM: [u8; 8] = [210, 43, 101, 215, 119, 140, 106, 218];
///Arguments for the initiate_authority_transfer instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitiateAuthorityTransferIxArgs {
    pub discriminator: [u8; 8],
    pub new_authority: Pubkey,
}
impl Default for InitiateAuthorityTransferIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [210u8, 43u8, 101u8, 215u8, 119u8, 140u8, 106u8, 218u8],
            new_authority: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct InitiateAuthorityTransferIxData(pub InitiateAuthorityTransferIxArgs);
impl From<InitiateAuthorityTransferIxArgs> for InitiateAuthorityTransferIxData {
    fn from(args: InitiateAuthorityTransferIxArgs) -> Self {
        Self(args)
    }
}
impl InitiateAuthorityTransferIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != INITIATE_AUTHORITY_TRANSFER_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    INITIATE_AUTHORITY_TRANSFER_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(InitiateAuthorityTransferIxArgs::deserialize(
            &mut reader,
        )?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&INITIATE_AUTHORITY_TRANSFER_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initiate_authority_transfer_ix_with_program_id(
    program_id: Pubkey,
    keys: InitiateAuthorityTransferKeys,
    args: InitiateAuthorityTransferIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIATE_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN] = keys.into();
    let data: InitiateAuthorityTransferIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn initiate_authority_transfer_ix(
    keys: InitiateAuthorityTransferKeys,
    args: InitiateAuthorityTransferIxArgs,
) -> std::io::Result<Instruction> {
    initiate_authority_transfer_ix_with_program_id(crate::ID, keys, args)
}
pub fn initiate_authority_transfer_invoke_with_program_id(
    program_id: Pubkey,
    accounts: InitiateAuthorityTransferAccounts<'_, '_>,
    args: InitiateAuthorityTransferIxArgs,
) -> ProgramResult {
    let keys: InitiateAuthorityTransferKeys = accounts.into();
    let ix = initiate_authority_transfer_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn initiate_authority_transfer_invoke(
    accounts: InitiateAuthorityTransferAccounts<'_, '_>,
    args: InitiateAuthorityTransferIxArgs,
) -> ProgramResult {
    initiate_authority_transfer_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn initiate_authority_transfer_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: InitiateAuthorityTransferAccounts<'_, '_>,
    args: InitiateAuthorityTransferIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: InitiateAuthorityTransferKeys = accounts.into();
    let ix = initiate_authority_transfer_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initiate_authority_transfer_invoke_signed(
    accounts: InitiateAuthorityTransferAccounts<'_, '_>,
    args: InitiateAuthorityTransferIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initiate_authority_transfer_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn initiate_authority_transfer_verify_account_keys(
    accounts: InitiateAuthorityTransferAccounts<'_, '_>,
    keys: InitiateAuthorityTransferKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.authority.key, keys.authority),
        (*accounts.config.key, keys.config),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
impl InitiateAuthorityTransferKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
impl InitiateAuthorityTransferIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<InitiateAuthorityTransferIxArgs> for BoopProgramIx {
    fn from(args: InitiateAuthorityTransferIxArgs) -> Self {
        Self::InitiateAuthorityTransfer(args)
    }
}
