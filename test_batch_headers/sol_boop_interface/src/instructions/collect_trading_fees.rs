//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN: usize = 24;
///Accounts struct for the collect_trading_fees instruction
#[derive(Copy, Clone, Debug)]
pub struct CollectTradingFeesAccounts<'me, 'info> {
    pub operator: &'me AccountInfo<'info>,
    ///Relations: config
    pub protocol_fee_recipient: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    pub lock_program: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub authority: &'me AccountInfo<'info>,
    ///Fee token account
    pub fee_nft_account: &'me AccountInfo<'info>,
    ///Store the locked the information of liquidity
    pub locked_liquidity: &'me AccountInfo<'info>,
    pub cpmm_program: &'me AccountInfo<'info>,
    pub cp_authority: &'me AccountInfo<'info>,
    pub pool_state: &'me AccountInfo<'info>,
    ///lp mint
    ///address = pool_state.lp_mint
    pub lp_mint: &'me AccountInfo<'info>,
    ///The token account for receive token_0
    pub recipient_token_0_account: &'me AccountInfo<'info>,
    ///The token account for receive token_1
    pub recipient_token_1_account: &'me AccountInfo<'info>,
    ///The address that holds pool tokens for token_0
    pub token_0_vault: &'me AccountInfo<'info>,
    ///The address that holds pool tokens for token_1
    pub token_1_vault: &'me AccountInfo<'info>,
    ///The mint of token_0 vault
    pub vault_0_mint: &'me AccountInfo<'info>,
    ///The mint of token_1 vault
    pub vault_1_mint: &'me AccountInfo<'info>,
    ///locked lp token account
    pub locked_lp_vault: &'me AccountInfo<'info>,
    ///System program
    pub system_program: &'me AccountInfo<'info>,
    ///Associated token program
    pub associated_token_program: &'me AccountInfo<'info>,
    ///token Program
    pub token_program: &'me AccountInfo<'info>,
    ///Token program 2022
    pub token_program_2022: &'me AccountInfo<'info>,
    ///memo program
    pub memo_program: &'me AccountInfo<'info>,
}
///Public keys struct for the collect_trading_fees instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CollectTradingFeesKeys {
    pub operator: Pubkey,
    ///Relations: config
    pub protocol_fee_recipient: Pubkey,
    pub config: Pubkey,
    pub lock_program: Pubkey,
    pub vault_authority: Pubkey,
    pub authority: Pubkey,
    ///Fee token account
    pub fee_nft_account: Pubkey,
    ///Store the locked the information of liquidity
    pub locked_liquidity: Pubkey,
    pub cpmm_program: Pubkey,
    pub cp_authority: Pubkey,
    pub pool_state: Pubkey,
    ///lp mint
    ///address = pool_state.lp_mint
    pub lp_mint: Pubkey,
    ///The token account for receive token_0
    pub recipient_token_0_account: Pubkey,
    ///The token account for receive token_1
    pub recipient_token_1_account: Pubkey,
    ///The address that holds pool tokens for token_0
    pub token_0_vault: Pubkey,
    ///The address that holds pool tokens for token_1
    pub token_1_vault: Pubkey,
    ///The mint of token_0 vault
    pub vault_0_mint: Pubkey,
    ///The mint of token_1 vault
    pub vault_1_mint: Pubkey,
    ///locked lp token account
    pub locked_lp_vault: Pubkey,
    ///System program
    pub system_program: Pubkey,
    ///Associated token program
    pub associated_token_program: Pubkey,
    ///token Program
    pub token_program: Pubkey,
    ///Token program 2022
    pub token_program_2022: Pubkey,
    ///memo program
    pub memo_program: Pubkey,
}
impl From<CollectTradingFeesAccounts<'_, '_>> for CollectTradingFeesKeys {
    fn from(accounts: CollectTradingFeesAccounts) -> Self {
        Self {
            operator: *accounts.operator.key,
            protocol_fee_recipient: *accounts.protocol_fee_recipient.key,
            config: *accounts.config.key,
            lock_program: *accounts.lock_program.key,
            vault_authority: *accounts.vault_authority.key,
            authority: *accounts.authority.key,
            fee_nft_account: *accounts.fee_nft_account.key,
            locked_liquidity: *accounts.locked_liquidity.key,
            cpmm_program: *accounts.cpmm_program.key,
            cp_authority: *accounts.cp_authority.key,
            pool_state: *accounts.pool_state.key,
            lp_mint: *accounts.lp_mint.key,
            recipient_token_0_account: *accounts.recipient_token_0_account.key,
            recipient_token_1_account: *accounts.recipient_token_1_account.key,
            token_0_vault: *accounts.token_0_vault.key,
            token_1_vault: *accounts.token_1_vault.key,
            vault_0_mint: *accounts.vault_0_mint.key,
            vault_1_mint: *accounts.vault_1_mint.key,
            locked_lp_vault: *accounts.locked_lp_vault.key,
            system_program: *accounts.system_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            token_program: *accounts.token_program.key,
            token_program_2022: *accounts.token_program_2022.key,
            memo_program: *accounts.memo_program.key,
        }
    }
}
impl From<CollectTradingFeesKeys> for [AccountMeta; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN] {
    fn from(keys: CollectTradingFeesKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.operator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.protocol_fee_recipient,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.lock_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.fee_nft_account,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.locked_liquidity,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.cpmm_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.cp_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.recipient_token_0_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.recipient_token_1_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_0_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_1_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vault_0_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_1_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.locked_lp_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program_2022,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.memo_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN]> for CollectTradingFeesKeys {
    fn from(pubkeys: [Pubkey; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            operator: pubkeys[0],
            protocol_fee_recipient: pubkeys[1],
            config: pubkeys[2],
            lock_program: pubkeys[3],
            vault_authority: pubkeys[4],
            authority: pubkeys[5],
            fee_nft_account: pubkeys[6],
            locked_liquidity: pubkeys[7],
            cpmm_program: pubkeys[8],
            cp_authority: pubkeys[9],
            pool_state: pubkeys[10],
            lp_mint: pubkeys[11],
            recipient_token_0_account: pubkeys[12],
            recipient_token_1_account: pubkeys[13],
            token_0_vault: pubkeys[14],
            token_1_vault: pubkeys[15],
            vault_0_mint: pubkeys[16],
            vault_1_mint: pubkeys[17],
            locked_lp_vault: pubkeys[18],
            system_program: pubkeys[19],
            associated_token_program: pubkeys[20],
            token_program: pubkeys[21],
            token_program_2022: pubkeys[22],
            memo_program: pubkeys[23],
        }
    }
}
impl From<&[String]> for CollectTradingFeesKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            operator: pubkeys[0].parse().unwrap(),
            protocol_fee_recipient: pubkeys[1].parse().unwrap(),
            config: pubkeys[2].parse().unwrap(),
            lock_program: pubkeys[3].parse().unwrap(),
            vault_authority: pubkeys[4].parse().unwrap(),
            authority: pubkeys[5].parse().unwrap(),
            fee_nft_account: pubkeys[6].parse().unwrap(),
            locked_liquidity: pubkeys[7].parse().unwrap(),
            cpmm_program: pubkeys[8].parse().unwrap(),
            cp_authority: pubkeys[9].parse().unwrap(),
            pool_state: pubkeys[10].parse().unwrap(),
            lp_mint: pubkeys[11].parse().unwrap(),
            recipient_token_0_account: pubkeys[12].parse().unwrap(),
            recipient_token_1_account: pubkeys[13].parse().unwrap(),
            token_0_vault: pubkeys[14].parse().unwrap(),
            token_1_vault: pubkeys[15].parse().unwrap(),
            vault_0_mint: pubkeys[16].parse().unwrap(),
            vault_1_mint: pubkeys[17].parse().unwrap(),
            locked_lp_vault: pubkeys[18].parse().unwrap(),
            system_program: pubkeys[19].parse().unwrap(),
            associated_token_program: pubkeys[20].parse().unwrap(),
            token_program: pubkeys[21].parse().unwrap(),
            token_program_2022: pubkeys[22].parse().unwrap(),
            memo_program: pubkeys[23].parse().unwrap(),
        }
    }
}
impl<'info> From<CollectTradingFeesAccounts<'_, 'info>>
    for [AccountInfo<'info>; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CollectTradingFeesAccounts<'_, 'info>) -> Self {
        [
            accounts.operator.clone(),
            accounts.protocol_fee_recipient.clone(),
            accounts.config.clone(),
            accounts.lock_program.clone(),
            accounts.vault_authority.clone(),
            accounts.authority.clone(),
            accounts.fee_nft_account.clone(),
            accounts.locked_liquidity.clone(),
            accounts.cpmm_program.clone(),
            accounts.cp_authority.clone(),
            accounts.pool_state.clone(),
            accounts.lp_mint.clone(),
            accounts.recipient_token_0_account.clone(),
            accounts.recipient_token_1_account.clone(),
            accounts.token_0_vault.clone(),
            accounts.token_1_vault.clone(),
            accounts.vault_0_mint.clone(),
            accounts.vault_1_mint.clone(),
            accounts.locked_lp_vault.clone(),
            accounts.system_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.token_program.clone(),
            accounts.token_program_2022.clone(),
            accounts.memo_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN]>
    for CollectTradingFeesAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            operator: &arr[0],
            protocol_fee_recipient: &arr[1],
            config: &arr[2],
            lock_program: &arr[3],
            vault_authority: &arr[4],
            authority: &arr[5],
            fee_nft_account: &arr[6],
            locked_liquidity: &arr[7],
            cpmm_program: &arr[8],
            cp_authority: &arr[9],
            pool_state: &arr[10],
            lp_mint: &arr[11],
            recipient_token_0_account: &arr[12],
            recipient_token_1_account: &arr[13],
            token_0_vault: &arr[14],
            token_1_vault: &arr[15],
            vault_0_mint: &arr[16],
            vault_1_mint: &arr[17],
            locked_lp_vault: &arr[18],
            system_program: &arr[19],
            associated_token_program: &arr[20],
            token_program: &arr[21],
            token_program_2022: &arr[22],
            memo_program: &arr[23],
        }
    }
}
pub const COLLECT_TRADING_FEES_IX_DISCM: [u8; 8] = [189, 38, 205, 234, 81, 77, 25, 1];
#[derive(Clone, Debug, PartialEq)]
pub struct CollectTradingFeesIxData;
impl CollectTradingFeesIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != COLLECT_TRADING_FEES_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    COLLECT_TRADING_FEES_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&COLLECT_TRADING_FEES_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn collect_trading_fees_ix_with_program_id(
    program_id: Pubkey,
    keys: CollectTradingFeesKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; COLLECT_TRADING_FEES_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CollectTradingFeesIxData.try_to_vec()?,
    })
}
pub fn collect_trading_fees_ix(keys: CollectTradingFeesKeys) -> std::io::Result<Instruction> {
    collect_trading_fees_ix_with_program_id(crate::ID, keys)
}
pub fn collect_trading_fees_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CollectTradingFeesAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CollectTradingFeesKeys = accounts.into();
    let ix = collect_trading_fees_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn collect_trading_fees_invoke(accounts: CollectTradingFeesAccounts<'_, '_>) -> ProgramResult {
    collect_trading_fees_invoke_with_program_id(crate::ID, accounts)
}
pub fn collect_trading_fees_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CollectTradingFeesAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CollectTradingFeesKeys = accounts.into();
    let ix = collect_trading_fees_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn collect_trading_fees_invoke_signed(
    accounts: CollectTradingFeesAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    collect_trading_fees_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn collect_trading_fees_verify_account_keys(
    accounts: CollectTradingFeesAccounts<'_, '_>,
    keys: CollectTradingFeesKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.operator.key, keys.operator),
        (
            *accounts.protocol_fee_recipient.key,
            keys.protocol_fee_recipient,
        ),
        (*accounts.config.key, keys.config),
        (*accounts.lock_program.key, keys.lock_program),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.authority.key, keys.authority),
        (*accounts.fee_nft_account.key, keys.fee_nft_account),
        (*accounts.locked_liquidity.key, keys.locked_liquidity),
        (*accounts.cpmm_program.key, keys.cpmm_program),
        (*accounts.cp_authority.key, keys.cp_authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.lp_mint.key, keys.lp_mint),
        (
            *accounts.recipient_token_0_account.key,
            keys.recipient_token_0_account,
        ),
        (
            *accounts.recipient_token_1_account.key,
            keys.recipient_token_1_account,
        ),
        (*accounts.token_0_vault.key, keys.token_0_vault),
        (*accounts.token_1_vault.key, keys.token_1_vault),
        (*accounts.vault_0_mint.key, keys.vault_0_mint),
        (*accounts.vault_1_mint.key, keys.vault_1_mint),
        (*accounts.locked_lp_vault.key, keys.locked_lp_vault),
        (*accounts.system_program.key, keys.system_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.token_program_2022.key, keys.token_program_2022),
        (*accounts.memo_program.key, keys.memo_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
///VAULT_AUTHORITY_SEED seed for vault_authority PDA: "vault_authority"
pub const VAULT_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8,
    121u8,
];
///AUTHORITY_SEED seed for authority PDA: "lock_cp_authority_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    108u8, 111u8, 99u8, 107u8, 95u8, 99u8, 112u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///CP_AUTHORITY_SEED seed for cp_authority PDA: "vault_and_lp_mint_auth_seed"
pub const CP_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 110u8, 100u8, 95u8, 108u8, 112u8, 95u8, 109u8,
    105u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///RECIPIENT_TOKEN_0_ACCOUNT_SEED_1 seed for recipient_token_0_account PDA
pub const RECIPIENT_TOKEN_0_ACCOUNT_SEED_1: &[u8] = &[
    6u8, 221u8, 246u8, 225u8, 215u8, 101u8, 161u8, 147u8, 217u8, 203u8, 225u8, 70u8, 206u8, 235u8,
    121u8, 172u8, 28u8, 180u8, 133u8, 237u8, 95u8, 91u8, 55u8, 145u8, 58u8, 140u8, 245u8, 133u8,
    126u8, 255u8, 0u8, 169u8,
];
///RECIPIENT_TOKEN_1_ACCOUNT_SEED_0 seed for recipient_token_1_account PDA: "trading_fees_vault"
pub const RECIPIENT_TOKEN_1_ACCOUNT_SEED_0: &[u8] = &[
    116u8, 114u8, 97u8, 100u8, 105u8, 110u8, 103u8, 95u8, 102u8, 101u8, 101u8, 115u8, 95u8, 118u8,
    97u8, 117u8, 108u8, 116u8,
];
///LOCKED_LP_VAULT_SEED_1 seed for locked_lp_vault PDA
pub const LOCKED_LP_VAULT_SEED_1: &[u8] = &[
    6u8, 221u8, 246u8, 225u8, 215u8, 101u8, 161u8, 147u8, 217u8, 203u8, 225u8, 70u8, 206u8, 235u8,
    121u8, 172u8, 28u8, 180u8, 133u8, 237u8, 95u8, 91u8, 55u8, 145u8, 58u8, 140u8, 245u8, 133u8,
    126u8, 255u8, 0u8, 169u8,
];
impl CollectTradingFeesKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
    ///Derive the vault_authority PDA
    pub fn derive_vault_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[VAULT_AUTHORITY_SEED], program_id)
    }
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the cp_authority PDA
    pub fn derive_cp_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CP_AUTHORITY_SEED], program_id)
    }
    ///Derive the recipient_token_0_account PDA
    pub fn derive_recipient_token_0_account_pda(
        program_id: &Pubkey,
        protocol_fee_recipient: &Pubkey,
        vault_0_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                protocol_fee_recipient.as_ref(),
                RECIPIENT_TOKEN_0_ACCOUNT_SEED_1,
                vault_0_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the recipient_token_1_account PDA
    pub fn derive_recipient_token_1_account_pda(
        program_id: &Pubkey,
        token_0_vault_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                RECIPIENT_TOKEN_1_ACCOUNT_SEED_0,
                token_0_vault_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the locked_lp_vault PDA
    pub fn derive_locked_lp_vault_pda(
        program_id: &Pubkey,
        authority: &Pubkey,
        lp_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[authority.as_ref(), LOCKED_LP_VAULT_SEED_1, lp_mint.as_ref()],
            program_id,
        )
    }
}
///lock_program program address
pub const LOCK_PROGRAM_ADDRESS: &str = "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE";
///cpmm_program program address
pub const CPMM_PROGRAM_ADDRESS: &str = "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///token_program_2022 program address
pub const TOKEN_PROGRAM_2022_ADDRESS: &str = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
///memo_program program address
pub const MEMO_PROGRAM_ADDRESS: &str = "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr";
