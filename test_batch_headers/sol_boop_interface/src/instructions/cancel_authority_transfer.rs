//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN: usize = 3;
///Accounts struct for the cancel_authority_transfer instruction
#[derive(Copy, Clone, Debug)]
pub struct CancelAuthorityTransferAccounts<'me, 'info> {
    ///Relations: config
    pub authority: &'me AccountInfo<'info>,
    pub config: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the cancel_authority_transfer instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CancelAuthorityTransferKeys {
    ///Relations: config
    pub authority: Pubkey,
    pub config: Pubkey,
    pub system_program: Pubkey,
}
impl From<CancelAuthorityTransferAccounts<'_, '_>> for CancelAuthorityTransferKeys {
    fn from(accounts: CancelAuthorityTransferAccounts) -> Self {
        Self {
            authority: *accounts.authority.key,
            config: *accounts.config.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<CancelAuthorityTransferKeys>
    for [AccountMeta; CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]
{
    fn from(keys: CancelAuthorityTransferKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]> for CancelAuthorityTransferKeys {
    fn from(pubkeys: [Pubkey; CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            authority: pubkeys[0],
            config: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl From<&[String]> for CancelAuthorityTransferKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            authority: pubkeys[0].parse().unwrap(),
            config: pubkeys[1].parse().unwrap(),
            system_program: pubkeys[2].parse().unwrap(),
        }
    }
}
impl<'info> From<CancelAuthorityTransferAccounts<'_, 'info>>
    for [AccountInfo<'info>; CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CancelAuthorityTransferAccounts<'_, 'info>) -> Self {
        [
            accounts.authority.clone(),
            accounts.config.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]>
    for CancelAuthorityTransferAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            authority: &arr[0],
            config: &arr[1],
            system_program: &arr[2],
        }
    }
}
pub const CANCEL_AUTHORITY_TRANSFER_IX_DISCM: [u8; 8] = [94, 131, 125, 184, 183, 24, 125, 229];
#[derive(Clone, Debug, PartialEq)]
pub struct CancelAuthorityTransferIxData;
impl CancelAuthorityTransferIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CANCEL_AUTHORITY_TRANSFER_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CANCEL_AUTHORITY_TRANSFER_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CANCEL_AUTHORITY_TRANSFER_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn cancel_authority_transfer_ix_with_program_id(
    program_id: Pubkey,
    keys: CancelAuthorityTransferKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CANCEL_AUTHORITY_TRANSFER_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CancelAuthorityTransferIxData.try_to_vec()?,
    })
}
pub fn cancel_authority_transfer_ix(
    keys: CancelAuthorityTransferKeys,
) -> std::io::Result<Instruction> {
    cancel_authority_transfer_ix_with_program_id(crate::ID, keys)
}
pub fn cancel_authority_transfer_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CancelAuthorityTransferAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CancelAuthorityTransferKeys = accounts.into();
    let ix = cancel_authority_transfer_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn cancel_authority_transfer_invoke(
    accounts: CancelAuthorityTransferAccounts<'_, '_>,
) -> ProgramResult {
    cancel_authority_transfer_invoke_with_program_id(crate::ID, accounts)
}
pub fn cancel_authority_transfer_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CancelAuthorityTransferAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CancelAuthorityTransferKeys = accounts.into();
    let ix = cancel_authority_transfer_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn cancel_authority_transfer_invoke_signed(
    accounts: CancelAuthorityTransferAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    cancel_authority_transfer_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn cancel_authority_transfer_verify_account_keys(
    accounts: CancelAuthorityTransferAccounts<'_, '_>,
    keys: CancelAuthorityTransferKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.authority.key, keys.authority),
        (*accounts.config.key, keys.config),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CONFIG_SEED seed for config PDA: "config"
pub const CONFIG_SEED: &[u8] = &[99u8, 111u8, 110u8, 102u8, 105u8, 103u8];
impl CancelAuthorityTransferKeys {
    ///Derive the config PDA
    pub fn derive_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CONFIG_SEED], program_id)
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
