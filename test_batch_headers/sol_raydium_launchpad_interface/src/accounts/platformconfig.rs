//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const PLATFORM_CONFIG_ACCOUNT_DISCM: [u8; 8] = [160, 78, 128, 0, 248, 83, 230, 160];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PlatformConfig {
    pub discriminator: [u8; 8],
    ///The epoch for update interval
    pub epoch: u64,
    ///The platform fee wallet
    pub platform_fee_wallet: Pubkey,
    ///The platform nft wallet to receive the platform NFT after migration if platform_scale is not 0(Only support MigrateType::CPSWAP)
    pub platform_nft_wallet: Pubkey,
    ///Scale of the platform liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
    pub platform_scale: u64,
    ///Scale of the token creator liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
    pub creator_scale: u64,
    ///Scale of liquidity directly to burn
    pub burn_scale: u64,
    ///The platform fee rate
    pub fee_rate: u64,
    ///The platform name
    pub name: [u8; 64],
    ///The platform website
    pub web: [u8; 256],
    ///The platform img link
    pub img: [u8; 256],
    ///padding for future updates
    pub padding: [u8; 256],
}
impl Default for PlatformConfig {
    fn default() -> Self {
        Self {
            discriminator: PLATFORM_CONFIG_ACCOUNT_DISCM,
            epoch: Default::default(),
            platform_fee_wallet: Default::default(),
            platform_nft_wallet: Default::default(),
            platform_scale: Default::default(),
            creator_scale: Default::default(),
            burn_scale: Default::default(),
            fee_rate: Default::default(),
            name: [0u8; 64],
            web: [0u8; 256],
            img: [0u8; 256],
            padding: [0u8; 256],
        }
    }
}
impl PlatformConfig {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != PLATFORM_CONFIG_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    PLATFORM_CONFIG_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
