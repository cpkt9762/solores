//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const GLOBAL_CONFIG_ACCOUNT_DISCM: [u8; 8] = [149, 8, 156, 202, 160, 252, 176, 217];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GlobalConfig {
    pub discriminator: [u8; 8],
    ///Account update epoch
    pub epoch: u64,
    ///0: Constant Product Curve
    ///1: Fixed Price Curve
    ///2: Linear Price Curve
    pub curve_type: u8,
    ///Config index
    pub index: u16,
    ///The fee of migrate to amm
    pub migrate_fee: u64,
    ///The trade fee rate, denominated in hundredths of a bip (10^-6)
    pub trade_fee_rate: u64,
    ///The maximum share fee rate, denominated in hundredths of a bip (10^-6)
    pub max_share_fee_rate: u64,
    ///The minimum base supply, the value without decimals
    pub min_base_supply: u64,
    ///The maximum lock rate, denominated in hundredths of a bip (10^-6)
    pub max_lock_rate: u64,
    ///The minimum base sell rate, denominated in hundredths of a bip (10^-6)
    pub min_base_sell_rate: u64,
    ///The minimum base migrate rate, denominated in hundredths of a bip (10^-6)
    pub min_base_migrate_rate: u64,
    ///The minimum quote fund raising, the value with decimals
    pub min_quote_fund_raising: u64,
    ///Mint information for quote token
    pub quote_mint: Pubkey,
    ///Protocol Fee owner
    pub protocol_fee_owner: Pubkey,
    ///Migrate Fee owner
    pub migrate_fee_owner: Pubkey,
    ///Migrate to amm control wallet
    pub migrate_to_amm_wallet: Pubkey,
    ///Migrate to cpswap wallet
    pub migrate_to_cpswap_wallet: Pubkey,
    ///padding for future updates
    pub padding: [u64; 16],
}
impl Default for GlobalConfig {
    fn default() -> Self {
        Self {
            discriminator: GLOBAL_CONFIG_ACCOUNT_DISCM,
            epoch: Default::default(),
            curve_type: Default::default(),
            index: Default::default(),
            migrate_fee: Default::default(),
            trade_fee_rate: Default::default(),
            max_share_fee_rate: Default::default(),
            min_base_supply: Default::default(),
            max_lock_rate: Default::default(),
            min_base_sell_rate: Default::default(),
            min_base_migrate_rate: Default::default(),
            min_quote_fund_raising: Default::default(),
            quote_mint: Default::default(),
            protocol_fee_owner: Default::default(),
            migrate_fee_owner: Default::default(),
            migrate_to_amm_wallet: Default::default(),
            migrate_to_cpswap_wallet: Default::default(),
            padding: [0u64; 16],
        }
    }
}
impl GlobalConfig {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != GLOBAL_CONFIG_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    GLOBAL_CONFIG_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
