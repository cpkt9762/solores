//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const VESTING_RECORD_ACCOUNT_DISCM: [u8; 8] = [106, 243, 221, 205, 230, 126, 85, 83];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct VestingRecord {
    pub discriminator: [u8; 8],
    ///Account update epoch
    pub epoch: u64,
    ///The pool state account
    pub pool: Pubkey,
    ///The beneficiary of the vesting account
    pub beneficiary: Pubkey,
    ///The amount of tokens claimed
    pub claimed_amount: u64,
    ///The share amount of the token to be vested
    pub token_share_amount: u64,
    ///padding for future updates
    pub padding: [u64; 8],
}
impl Default for VestingRecord {
    fn default() -> Self {
        Self {
            discriminator: VESTING_RECORD_ACCOUNT_DISCM,
            epoch: Default::default(),
            pool: Default::default(),
            beneficiary: Default::default(),
            claimed_amount: Default::default(),
            token_share_amount: Default::default(),
            padding: [0u64; 8],
        }
    }
}
impl VestingRecord {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != VESTING_RECORD_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    VESTING_RECORD_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
