//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Updates configuration parameters
///# Arguments
///* `ctx` - The context of accounts
///* `param` - Parameter to update:
///- 0: Update trade_fee_rate
///- 1: Update fee owner
///* `value` - New value for the selected parameter
pub const UPDATE_CONFIG_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the update_config instruction
#[derive(Copy, Clone, Debug)]
pub struct UpdateConfigAccounts<'me, 'info> {
    ///The global config owner or admin
    pub owner: &'me AccountInfo<'info>,
    ///Global config account to be changed
    pub global_config: &'me AccountInfo<'info>,
}
///Public keys struct for the update_config instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct UpdateConfigKeys {
    ///The global config owner or admin
    pub owner: Pubkey,
    ///Global config account to be changed
    pub global_config: Pubkey,
}
impl From<UpdateConfigAccounts<'_, '_>> for UpdateConfigKeys {
    fn from(accounts: UpdateConfigAccounts) -> Self {
        Self {
            owner: *accounts.owner.key,
            global_config: *accounts.global_config.key,
        }
    }
}
impl From<UpdateConfigKeys> for [AccountMeta; UPDATE_CONFIG_IX_ACCOUNTS_LEN] {
    fn from(keys: UpdateConfigKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; UPDATE_CONFIG_IX_ACCOUNTS_LEN]> for UpdateConfigKeys {
    fn from(pubkeys: [Pubkey; UPDATE_CONFIG_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: pubkeys[0],
            global_config: pubkeys[1],
        }
    }
}
impl From<&[String]> for UpdateConfigKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            owner: pubkeys[0].parse().unwrap(),
            global_config: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<UpdateConfigAccounts<'_, 'info>>
    for [AccountInfo<'info>; UPDATE_CONFIG_IX_ACCOUNTS_LEN]
{
    fn from(accounts: UpdateConfigAccounts<'_, 'info>) -> Self {
        [accounts.owner.clone(), accounts.global_config.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; UPDATE_CONFIG_IX_ACCOUNTS_LEN]>
    for UpdateConfigAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; UPDATE_CONFIG_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: &arr[0],
            global_config: &arr[1],
        }
    }
}
pub const UPDATE_CONFIG_IX_DISCM: [u8; 8] = [29, 158, 252, 191, 10, 83, 219, 99];
///Updates configuration parameters
///# Arguments
///* `ctx` - The context of accounts
///* `param` - Parameter to update:
///- 0: Update trade_fee_rate
///- 1: Update fee owner
///* `value` - New value for the selected parameter
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigIxArgs {
    pub discriminator: [u8; 8],
    pub param: u8,
    pub value: u64,
}
impl Default for UpdateConfigIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [29u8, 158u8, 252u8, 191u8, 10u8, 83u8, 219u8, 99u8],
            param: Default::default(),
            value: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct UpdateConfigIxData(pub UpdateConfigIxArgs);
impl From<UpdateConfigIxArgs> for UpdateConfigIxData {
    fn from(args: UpdateConfigIxArgs) -> Self {
        Self(args)
    }
}
impl UpdateConfigIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != UPDATE_CONFIG_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    UPDATE_CONFIG_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(UpdateConfigIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&UPDATE_CONFIG_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn update_config_ix_with_program_id(
    program_id: Pubkey,
    keys: UpdateConfigKeys,
    args: UpdateConfigIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; UPDATE_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    let data: UpdateConfigIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn update_config_ix(
    keys: UpdateConfigKeys,
    args: UpdateConfigIxArgs,
) -> std::io::Result<Instruction> {
    update_config_ix_with_program_id(crate::ID, keys, args)
}
pub fn update_config_invoke_with_program_id(
    program_id: Pubkey,
    accounts: UpdateConfigAccounts<'_, '_>,
    args: UpdateConfigIxArgs,
) -> ProgramResult {
    let keys: UpdateConfigKeys = accounts.into();
    let ix = update_config_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn update_config_invoke(
    accounts: UpdateConfigAccounts<'_, '_>,
    args: UpdateConfigIxArgs,
) -> ProgramResult {
    update_config_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn update_config_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: UpdateConfigAccounts<'_, '_>,
    args: UpdateConfigIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: UpdateConfigKeys = accounts.into();
    let ix = update_config_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn update_config_invoke_signed(
    accounts: UpdateConfigAccounts<'_, '_>,
    args: UpdateConfigIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    update_config_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn update_config_verify_account_keys(
    accounts: UpdateConfigAccounts<'_, '_>,
    keys: UpdateConfigKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.owner.key, keys.owner),
        (*accounts.global_config.key, keys.global_config),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///owner program address
pub const OWNER_ADDRESS: &str = "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ";
impl UpdateConfigIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<UpdateConfigIxArgs> for RaydiumLaunchpadProgramIx {
    fn from(args: UpdateConfigIxArgs) -> Self {
        Self::UpdateConfig(args)
    }
}
