//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///# Arguments
///* `ctx` - The context of accounts
pub const MIGRATE_TO_AMM_IX_ACCOUNTS_LEN: usize = 32;
///Accounts struct for the migrate_to_amm instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrateToAmmAccounts<'me, 'info> {
    ///Only migrate_to_amm_wallet can migrate to cpswap pool
    ///This signer must match the migrate_to_amm_wallet saved in global_config
    pub payer: &'me AccountInfo<'info>,
    ///The mint for the base token (token being sold)
    pub base_mint: &'me AccountInfo<'info>,
    ///The mint for the quote token (token used to buy)
    pub quote_mint: &'me AccountInfo<'info>,
    pub openbook_program: &'me AccountInfo<'info>,
    ///Account created and asigned to openbook_program but not been initialized
    pub market: &'me AccountInfo<'info>,
    ///Account created and asigned to openbook_program but not been initialized
    pub request_queue: &'me AccountInfo<'info>,
    ///Account created and asigned to openbook_program but not been initialized
    pub event_queue: &'me AccountInfo<'info>,
    ///Account created and asigned to openbook_program but not been initialized
    pub bids: &'me AccountInfo<'info>,
    ///Account created and asigned to openbook_program but not been initialized
    pub asks: &'me AccountInfo<'info>,
    pub market_vault_signer: &'me AccountInfo<'info>,
    ///Token account that holds the market's base tokens
    pub market_base_vault: &'me AccountInfo<'info>,
    ///Token account that holds the market's quote tokens
    pub market_quote_vault: &'me AccountInfo<'info>,
    pub amm_program: &'me AccountInfo<'info>,
    pub amm_pool: &'me AccountInfo<'info>,
    pub amm_authority: &'me AccountInfo<'info>,
    pub amm_open_orders: &'me AccountInfo<'info>,
    pub amm_lp_mint: &'me AccountInfo<'info>,
    pub amm_base_vault: &'me AccountInfo<'info>,
    pub amm_quote_vault: &'me AccountInfo<'info>,
    pub amm_target_orders: &'me AccountInfo<'info>,
    pub amm_config: &'me AccountInfo<'info>,
    pub amm_create_fee_destination: &'me AccountInfo<'info>,
    ///PDA that acts as the authority for pool vault operations
    ///Generated using AUTH_SEED
    pub authority: &'me AccountInfo<'info>,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: &'me AccountInfo<'info>,
    ///Global config account stores owner
    pub global_config: &'me AccountInfo<'info>,
    ///The pool's vault for base tokens
    ///Will be fully drained during migration
    pub base_vault: &'me AccountInfo<'info>,
    ///The pool's vault for quote tokens
    ///Will be fully drained during migration
    pub quote_vault: &'me AccountInfo<'info>,
    pub pool_lp_token: &'me AccountInfo<'info>,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub spl_token_program: &'me AccountInfo<'info>,
    ///Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'me AccountInfo<'info>,
    ///Required for account creation
    pub system_program: &'me AccountInfo<'info>,
    ///Required for rent exempt calculations
    pub rent_program: &'me AccountInfo<'info>,
}
///Public keys struct for the migrate_to_amm instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateToAmmKeys {
    ///Only migrate_to_amm_wallet can migrate to cpswap pool
    ///This signer must match the migrate_to_amm_wallet saved in global_config
    pub payer: Pubkey,
    ///The mint for the base token (token being sold)
    pub base_mint: Pubkey,
    ///The mint for the quote token (token used to buy)
    pub quote_mint: Pubkey,
    pub openbook_program: Pubkey,
    ///Account created and asigned to openbook_program but not been initialized
    pub market: Pubkey,
    ///Account created and asigned to openbook_program but not been initialized
    pub request_queue: Pubkey,
    ///Account created and asigned to openbook_program but not been initialized
    pub event_queue: Pubkey,
    ///Account created and asigned to openbook_program but not been initialized
    pub bids: Pubkey,
    ///Account created and asigned to openbook_program but not been initialized
    pub asks: Pubkey,
    pub market_vault_signer: Pubkey,
    ///Token account that holds the market's base tokens
    pub market_base_vault: Pubkey,
    ///Token account that holds the market's quote tokens
    pub market_quote_vault: Pubkey,
    pub amm_program: Pubkey,
    pub amm_pool: Pubkey,
    pub amm_authority: Pubkey,
    pub amm_open_orders: Pubkey,
    pub amm_lp_mint: Pubkey,
    pub amm_base_vault: Pubkey,
    pub amm_quote_vault: Pubkey,
    pub amm_target_orders: Pubkey,
    pub amm_config: Pubkey,
    pub amm_create_fee_destination: Pubkey,
    ///PDA that acts as the authority for pool vault operations
    ///Generated using AUTH_SEED
    pub authority: Pubkey,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: Pubkey,
    ///Global config account stores owner
    pub global_config: Pubkey,
    ///The pool's vault for base tokens
    ///Will be fully drained during migration
    pub base_vault: Pubkey,
    ///The pool's vault for quote tokens
    ///Will be fully drained during migration
    pub quote_vault: Pubkey,
    pub pool_lp_token: Pubkey,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub spl_token_program: Pubkey,
    ///Program to create an ATA for receiving fee NFT
    pub associated_token_program: Pubkey,
    ///Required for account creation
    pub system_program: Pubkey,
    ///Required for rent exempt calculations
    pub rent_program: Pubkey,
}
impl From<MigrateToAmmAccounts<'_, '_>> for MigrateToAmmKeys {
    fn from(accounts: MigrateToAmmAccounts) -> Self {
        Self {
            payer: *accounts.payer.key,
            base_mint: *accounts.base_mint.key,
            quote_mint: *accounts.quote_mint.key,
            openbook_program: *accounts.openbook_program.key,
            market: *accounts.market.key,
            request_queue: *accounts.request_queue.key,
            event_queue: *accounts.event_queue.key,
            bids: *accounts.bids.key,
            asks: *accounts.asks.key,
            market_vault_signer: *accounts.market_vault_signer.key,
            market_base_vault: *accounts.market_base_vault.key,
            market_quote_vault: *accounts.market_quote_vault.key,
            amm_program: *accounts.amm_program.key,
            amm_pool: *accounts.amm_pool.key,
            amm_authority: *accounts.amm_authority.key,
            amm_open_orders: *accounts.amm_open_orders.key,
            amm_lp_mint: *accounts.amm_lp_mint.key,
            amm_base_vault: *accounts.amm_base_vault.key,
            amm_quote_vault: *accounts.amm_quote_vault.key,
            amm_target_orders: *accounts.amm_target_orders.key,
            amm_config: *accounts.amm_config.key,
            amm_create_fee_destination: *accounts.amm_create_fee_destination.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            global_config: *accounts.global_config.key,
            base_vault: *accounts.base_vault.key,
            quote_vault: *accounts.quote_vault.key,
            pool_lp_token: *accounts.pool_lp_token.key,
            spl_token_program: *accounts.spl_token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            system_program: *accounts.system_program.key,
            rent_program: *accounts.rent_program.key,
        }
    }
}
impl From<MigrateToAmmKeys> for [AccountMeta; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrateToAmmKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.openbook_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.request_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.event_queue,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bids,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.asks,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.market_vault_signer,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.market_base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.market_quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_open_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_target_orders,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.amm_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.amm_create_fee_destination,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_lp_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.spl_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN]> for MigrateToAmmKeys {
    fn from(pubkeys: [Pubkey; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: pubkeys[0],
            base_mint: pubkeys[1],
            quote_mint: pubkeys[2],
            openbook_program: pubkeys[3],
            market: pubkeys[4],
            request_queue: pubkeys[5],
            event_queue: pubkeys[6],
            bids: pubkeys[7],
            asks: pubkeys[8],
            market_vault_signer: pubkeys[9],
            market_base_vault: pubkeys[10],
            market_quote_vault: pubkeys[11],
            amm_program: pubkeys[12],
            amm_pool: pubkeys[13],
            amm_authority: pubkeys[14],
            amm_open_orders: pubkeys[15],
            amm_lp_mint: pubkeys[16],
            amm_base_vault: pubkeys[17],
            amm_quote_vault: pubkeys[18],
            amm_target_orders: pubkeys[19],
            amm_config: pubkeys[20],
            amm_create_fee_destination: pubkeys[21],
            authority: pubkeys[22],
            pool_state: pubkeys[23],
            global_config: pubkeys[24],
            base_vault: pubkeys[25],
            quote_vault: pubkeys[26],
            pool_lp_token: pubkeys[27],
            spl_token_program: pubkeys[28],
            associated_token_program: pubkeys[29],
            system_program: pubkeys[30],
            rent_program: pubkeys[31],
        }
    }
}
impl From<&[String]> for MigrateToAmmKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            payer: pubkeys[0].parse().unwrap(),
            base_mint: pubkeys[1].parse().unwrap(),
            quote_mint: pubkeys[2].parse().unwrap(),
            openbook_program: pubkeys[3].parse().unwrap(),
            market: pubkeys[4].parse().unwrap(),
            request_queue: pubkeys[5].parse().unwrap(),
            event_queue: pubkeys[6].parse().unwrap(),
            bids: pubkeys[7].parse().unwrap(),
            asks: pubkeys[8].parse().unwrap(),
            market_vault_signer: pubkeys[9].parse().unwrap(),
            market_base_vault: pubkeys[10].parse().unwrap(),
            market_quote_vault: pubkeys[11].parse().unwrap(),
            amm_program: pubkeys[12].parse().unwrap(),
            amm_pool: pubkeys[13].parse().unwrap(),
            amm_authority: pubkeys[14].parse().unwrap(),
            amm_open_orders: pubkeys[15].parse().unwrap(),
            amm_lp_mint: pubkeys[16].parse().unwrap(),
            amm_base_vault: pubkeys[17].parse().unwrap(),
            amm_quote_vault: pubkeys[18].parse().unwrap(),
            amm_target_orders: pubkeys[19].parse().unwrap(),
            amm_config: pubkeys[20].parse().unwrap(),
            amm_create_fee_destination: pubkeys[21].parse().unwrap(),
            authority: pubkeys[22].parse().unwrap(),
            pool_state: pubkeys[23].parse().unwrap(),
            global_config: pubkeys[24].parse().unwrap(),
            base_vault: pubkeys[25].parse().unwrap(),
            quote_vault: pubkeys[26].parse().unwrap(),
            pool_lp_token: pubkeys[27].parse().unwrap(),
            spl_token_program: pubkeys[28].parse().unwrap(),
            associated_token_program: pubkeys[29].parse().unwrap(),
            system_program: pubkeys[30].parse().unwrap(),
            rent_program: pubkeys[31].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrateToAmmAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrateToAmmAccounts<'_, 'info>) -> Self {
        [
            accounts.payer.clone(),
            accounts.base_mint.clone(),
            accounts.quote_mint.clone(),
            accounts.openbook_program.clone(),
            accounts.market.clone(),
            accounts.request_queue.clone(),
            accounts.event_queue.clone(),
            accounts.bids.clone(),
            accounts.asks.clone(),
            accounts.market_vault_signer.clone(),
            accounts.market_base_vault.clone(),
            accounts.market_quote_vault.clone(),
            accounts.amm_program.clone(),
            accounts.amm_pool.clone(),
            accounts.amm_authority.clone(),
            accounts.amm_open_orders.clone(),
            accounts.amm_lp_mint.clone(),
            accounts.amm_base_vault.clone(),
            accounts.amm_quote_vault.clone(),
            accounts.amm_target_orders.clone(),
            accounts.amm_config.clone(),
            accounts.amm_create_fee_destination.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.global_config.clone(),
            accounts.base_vault.clone(),
            accounts.quote_vault.clone(),
            accounts.pool_lp_token.clone(),
            accounts.spl_token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.system_program.clone(),
            accounts.rent_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN]>
    for MigrateToAmmAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: &arr[0],
            base_mint: &arr[1],
            quote_mint: &arr[2],
            openbook_program: &arr[3],
            market: &arr[4],
            request_queue: &arr[5],
            event_queue: &arr[6],
            bids: &arr[7],
            asks: &arr[8],
            market_vault_signer: &arr[9],
            market_base_vault: &arr[10],
            market_quote_vault: &arr[11],
            amm_program: &arr[12],
            amm_pool: &arr[13],
            amm_authority: &arr[14],
            amm_open_orders: &arr[15],
            amm_lp_mint: &arr[16],
            amm_base_vault: &arr[17],
            amm_quote_vault: &arr[18],
            amm_target_orders: &arr[19],
            amm_config: &arr[20],
            amm_create_fee_destination: &arr[21],
            authority: &arr[22],
            pool_state: &arr[23],
            global_config: &arr[24],
            base_vault: &arr[25],
            quote_vault: &arr[26],
            pool_lp_token: &arr[27],
            spl_token_program: &arr[28],
            associated_token_program: &arr[29],
            system_program: &arr[30],
            rent_program: &arr[31],
        }
    }
}
pub const MIGRATE_TO_AMM_IX_DISCM: [u8; 8] = [207, 82, 192, 145, 254, 207, 145, 223];
///# Arguments
///* `ctx` - The context of accounts
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateToAmmIxArgs {
    pub discriminator: [u8; 8],
    pub base_lot_size: u64,
    pub quote_lot_size: u64,
    pub market_vault_signer_nonce: u8,
}
impl Default for MigrateToAmmIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [207u8, 82u8, 192u8, 145u8, 254u8, 207u8, 145u8, 223u8],
            base_lot_size: Default::default(),
            quote_lot_size: Default::default(),
            market_vault_signer_nonce: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct MigrateToAmmIxData(pub MigrateToAmmIxArgs);
impl From<MigrateToAmmIxArgs> for MigrateToAmmIxData {
    fn from(args: MigrateToAmmIxArgs) -> Self {
        Self(args)
    }
}
impl MigrateToAmmIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != MIGRATE_TO_AMM_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    MIGRATE_TO_AMM_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(MigrateToAmmIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&MIGRATE_TO_AMM_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migrate_to_amm_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateToAmmKeys,
    args: MigrateToAmmIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATE_TO_AMM_IX_ACCOUNTS_LEN] = keys.into();
    let data: MigrateToAmmIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn migrate_to_amm_ix(
    keys: MigrateToAmmKeys,
    args: MigrateToAmmIxArgs,
) -> std::io::Result<Instruction> {
    migrate_to_amm_ix_with_program_id(crate::ID, keys, args)
}
pub fn migrate_to_amm_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrateToAmmAccounts<'_, '_>,
    args: MigrateToAmmIxArgs,
) -> ProgramResult {
    let keys: MigrateToAmmKeys = accounts.into();
    let ix = migrate_to_amm_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn migrate_to_amm_invoke(
    accounts: MigrateToAmmAccounts<'_, '_>,
    args: MigrateToAmmIxArgs,
) -> ProgramResult {
    migrate_to_amm_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn migrate_to_amm_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrateToAmmAccounts<'_, '_>,
    args: MigrateToAmmIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrateToAmmKeys = accounts.into();
    let ix = migrate_to_amm_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migrate_to_amm_invoke_signed(
    accounts: MigrateToAmmAccounts<'_, '_>,
    args: MigrateToAmmIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migrate_to_amm_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn migrate_to_amm_verify_account_keys(
    accounts: MigrateToAmmAccounts<'_, '_>,
    keys: MigrateToAmmKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.payer.key, keys.payer),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.openbook_program.key, keys.openbook_program),
        (*accounts.market.key, keys.market),
        (*accounts.request_queue.key, keys.request_queue),
        (*accounts.event_queue.key, keys.event_queue),
        (*accounts.bids.key, keys.bids),
        (*accounts.asks.key, keys.asks),
        (*accounts.market_vault_signer.key, keys.market_vault_signer),
        (*accounts.market_base_vault.key, keys.market_base_vault),
        (*accounts.market_quote_vault.key, keys.market_quote_vault),
        (*accounts.amm_program.key, keys.amm_program),
        (*accounts.amm_pool.key, keys.amm_pool),
        (*accounts.amm_authority.key, keys.amm_authority),
        (*accounts.amm_open_orders.key, keys.amm_open_orders),
        (*accounts.amm_lp_mint.key, keys.amm_lp_mint),
        (*accounts.amm_base_vault.key, keys.amm_base_vault),
        (*accounts.amm_quote_vault.key, keys.amm_quote_vault),
        (*accounts.amm_target_orders.key, keys.amm_target_orders),
        (*accounts.amm_config.key, keys.amm_config),
        (
            *accounts.amm_create_fee_destination.key,
            keys.amm_create_fee_destination,
        ),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.pool_lp_token.key, keys.pool_lp_token),
        (*accounts.spl_token_program.key, keys.spl_token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent_program.key, keys.rent_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///AMM_POOL_SEED_2 seed for amm_pool PDA: "amm_associated_seed"
pub const AMM_POOL_SEED_2: &[u8] = &[
    97u8, 109u8, 109u8, 95u8, 97u8, 115u8, 115u8, 111u8, 99u8, 105u8, 97u8, 116u8, 101u8, 100u8,
    95u8, 115u8, 101u8, 101u8, 100u8,
];
///AMM_AUTHORITY_SEED seed for amm_authority PDA: "amm authority"
pub const AMM_AUTHORITY_SEED: &[u8] = &[
    97u8, 109u8, 109u8, 32u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8, 105u8, 116u8, 121u8,
];
///AMM_OPEN_ORDERS_SEED_2 seed for amm_open_orders PDA: "open_order_associated_seed"
pub const AMM_OPEN_ORDERS_SEED_2: &[u8] = &[
    111u8, 112u8, 101u8, 110u8, 95u8, 111u8, 114u8, 100u8, 101u8, 114u8, 95u8, 97u8, 115u8, 115u8,
    111u8, 99u8, 105u8, 97u8, 116u8, 101u8, 100u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///AMM_LP_MINT_SEED_2 seed for amm_lp_mint PDA: "lp_mint_associated_seed"
pub const AMM_LP_MINT_SEED_2: &[u8] = &[
    108u8, 112u8, 95u8, 109u8, 105u8, 110u8, 116u8, 95u8, 97u8, 115u8, 115u8, 111u8, 99u8, 105u8,
    97u8, 116u8, 101u8, 100u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///AMM_BASE_VAULT_SEED_2 seed for amm_base_vault PDA: "coin_vault_associated_seed"
pub const AMM_BASE_VAULT_SEED_2: &[u8] = &[
    99u8, 111u8, 105u8, 110u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 115u8, 115u8,
    111u8, 99u8, 105u8, 97u8, 116u8, 101u8, 100u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///AMM_QUOTE_VAULT_SEED_2 seed for amm_quote_vault PDA: "pc_vault_associated_seed"
pub const AMM_QUOTE_VAULT_SEED_2: &[u8] = &[
    112u8, 99u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 115u8, 115u8, 111u8, 99u8,
    105u8, 97u8, 116u8, 101u8, 100u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///AMM_TARGET_ORDERS_SEED_2 seed for amm_target_orders PDA: "target_associated_seed"
pub const AMM_TARGET_ORDERS_SEED_2: &[u8] = &[
    116u8, 97u8, 114u8, 103u8, 101u8, 116u8, 95u8, 97u8, 115u8, 115u8, 111u8, 99u8, 105u8, 97u8,
    116u8, 101u8, 100u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///AMM_CONFIG_SEED seed for amm_config PDA: "amm_config_account_seed"
pub const AMM_CONFIG_SEED: &[u8] = &[
    97u8, 109u8, 109u8, 95u8, 99u8, 111u8, 110u8, 102u8, 105u8, 103u8, 95u8, 97u8, 99u8, 99u8,
    111u8, 117u8, 110u8, 116u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///AUTHORITY_SEED seed for authority PDA: "vault_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8,
    100u8,
];
///POOL_STATE_SEED_0 seed for pool_state PDA: "pool"
pub const POOL_STATE_SEED_0: &[u8] = &[112u8, 111u8, 111u8, 108u8];
impl MigrateToAmmKeys {
    ///Derive the amm_pool PDA
    pub fn derive_amm_pool_pda(
        program_id: &Pubkey,
        amm_program: &Pubkey,
        market: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[amm_program.as_ref(), market.as_ref(), AMM_POOL_SEED_2],
            program_id,
        )
    }
    ///Derive the amm_authority PDA
    pub fn derive_amm_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AMM_AUTHORITY_SEED], program_id)
    }
    ///Derive the amm_open_orders PDA
    pub fn derive_amm_open_orders_pda(
        program_id: &Pubkey,
        amm_program: &Pubkey,
        market: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                amm_program.as_ref(),
                market.as_ref(),
                AMM_OPEN_ORDERS_SEED_2,
            ],
            program_id,
        )
    }
    ///Derive the amm_lp_mint PDA
    pub fn derive_amm_lp_mint_pda(
        program_id: &Pubkey,
        amm_program: &Pubkey,
        market: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[amm_program.as_ref(), market.as_ref(), AMM_LP_MINT_SEED_2],
            program_id,
        )
    }
    ///Derive the amm_base_vault PDA
    pub fn derive_amm_base_vault_pda(
        program_id: &Pubkey,
        amm_program: &Pubkey,
        market: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[amm_program.as_ref(), market.as_ref(), AMM_BASE_VAULT_SEED_2],
            program_id,
        )
    }
    ///Derive the amm_quote_vault PDA
    pub fn derive_amm_quote_vault_pda(
        program_id: &Pubkey,
        amm_program: &Pubkey,
        market: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                amm_program.as_ref(),
                market.as_ref(),
                AMM_QUOTE_VAULT_SEED_2,
            ],
            program_id,
        )
    }
    ///Derive the amm_target_orders PDA
    pub fn derive_amm_target_orders_pda(
        program_id: &Pubkey,
        amm_program: &Pubkey,
        market: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                amm_program.as_ref(),
                market.as_ref(),
                AMM_TARGET_ORDERS_SEED_2,
            ],
            program_id,
        )
    }
    ///Derive the amm_config PDA
    pub fn derive_amm_config_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AMM_CONFIG_SEED], program_id)
    }
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the pool_state PDA
    pub fn derive_pool_state_pda(
        program_id: &Pubkey,
        base_mint: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[POOL_STATE_SEED_0, base_mint.as_ref(), quote_mint.as_ref()],
            program_id,
        )
    }
}
///openbook_program program address
pub const OPENBOOK_PROGRAM_ADDRESS: &str = "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX";
///amm_program program address
pub const AMM_PROGRAM_ADDRESS: &str = "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8";
///spl_token_program program address
pub const SPL_TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///rent_program program address
pub const RENT_PROGRAM_ADDRESS: &str = "SysvarRent111111111111111111111111111111111";
impl MigrateToAmmIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<MigrateToAmmIxArgs> for RaydiumLaunchpadProgramIx {
    fn from(args: MigrateToAmmIxArgs) -> Self {
        Self::MigrateToAmm(args)
    }
}
