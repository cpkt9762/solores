//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///# Arguments
///* `ctx` - The context of accounts
pub const MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN: usize = 28;
///Accounts struct for the migrate_to_cpswap instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrateToCpswapAccounts<'me, 'info> {
    ///Only migrate_to_cpswap_wallet can migrate to cpswap pool
    ///This signer must match the migrate_to_cpswap_wallet saved in global_config
    pub payer: &'me AccountInfo<'info>,
    ///The mint for the base token (token being sold)
    pub base_mint: &'me AccountInfo<'info>,
    ///The mint for the quote token (token used to buy)
    pub quote_mint: &'me AccountInfo<'info>,
    ///Platform configuration account containing platform-wide settings
    ///Used to read platform fee rate
    pub platform_config: &'me AccountInfo<'info>,
    pub cpswap_program: &'me AccountInfo<'info>,
    ///PDA account:
    ///seeds = [
    ///b"pool",
    ///cpswap_config.key().as_ref(),
    ///token_0_mint.key().as_ref(),
    ///token_1_mint.key().as_ref(),
    ///],
    ///seeds::program = cpswap_program,
    ///Or random account: must be signed by cli
    pub cpswap_pool: &'me AccountInfo<'info>,
    pub cpswap_authority: &'me AccountInfo<'info>,
    pub cpswap_lp_mint: &'me AccountInfo<'info>,
    pub cpswap_base_vault: &'me AccountInfo<'info>,
    pub cpswap_quote_vault: &'me AccountInfo<'info>,
    pub cpswap_config: &'me AccountInfo<'info>,
    pub cpswap_create_pool_fee: &'me AccountInfo<'info>,
    pub cpswap_observation: &'me AccountInfo<'info>,
    pub lock_program: &'me AccountInfo<'info>,
    pub lock_authority: &'me AccountInfo<'info>,
    pub lock_lp_vault: &'me AccountInfo<'info>,
    ///PDA that acts as the authority for pool vault operations
    ///Generated using AUTH_SEED
    pub authority: &'me AccountInfo<'info>,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: &'me AccountInfo<'info>,
    ///Global config account stores owner
    pub global_config: &'me AccountInfo<'info>,
    ///The pool's vault for base tokens
    ///Will be fully drained during migration
    pub base_vault: &'me AccountInfo<'info>,
    ///The pool's vault for quote tokens
    ///Will be fully drained during migration
    pub quote_vault: &'me AccountInfo<'info>,
    pub pool_lp_token: &'me AccountInfo<'info>,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub base_token_program: &'me AccountInfo<'info>,
    ///SPL Token program for the quote token
    pub quote_token_program: &'me AccountInfo<'info>,
    ///Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'me AccountInfo<'info>,
    ///Required for account creation
    pub system_program: &'me AccountInfo<'info>,
    ///Required for rent exempt calculations
    pub rent_program: &'me AccountInfo<'info>,
    ///Program to create NFT metadata accunt
    pub metadata_program: &'me AccountInfo<'info>,
}
///Public keys struct for the migrate_to_cpswap instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateToCpswapKeys {
    ///Only migrate_to_cpswap_wallet can migrate to cpswap pool
    ///This signer must match the migrate_to_cpswap_wallet saved in global_config
    pub payer: Pubkey,
    ///The mint for the base token (token being sold)
    pub base_mint: Pubkey,
    ///The mint for the quote token (token used to buy)
    pub quote_mint: Pubkey,
    ///Platform configuration account containing platform-wide settings
    ///Used to read platform fee rate
    pub platform_config: Pubkey,
    pub cpswap_program: Pubkey,
    ///PDA account:
    ///seeds = [
    ///b"pool",
    ///cpswap_config.key().as_ref(),
    ///token_0_mint.key().as_ref(),
    ///token_1_mint.key().as_ref(),
    ///],
    ///seeds::program = cpswap_program,
    ///Or random account: must be signed by cli
    pub cpswap_pool: Pubkey,
    pub cpswap_authority: Pubkey,
    pub cpswap_lp_mint: Pubkey,
    pub cpswap_base_vault: Pubkey,
    pub cpswap_quote_vault: Pubkey,
    pub cpswap_config: Pubkey,
    pub cpswap_create_pool_fee: Pubkey,
    pub cpswap_observation: Pubkey,
    pub lock_program: Pubkey,
    pub lock_authority: Pubkey,
    pub lock_lp_vault: Pubkey,
    ///PDA that acts as the authority for pool vault operations
    ///Generated using AUTH_SEED
    pub authority: Pubkey,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: Pubkey,
    ///Global config account stores owner
    pub global_config: Pubkey,
    ///The pool's vault for base tokens
    ///Will be fully drained during migration
    pub base_vault: Pubkey,
    ///The pool's vault for quote tokens
    ///Will be fully drained during migration
    pub quote_vault: Pubkey,
    pub pool_lp_token: Pubkey,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub base_token_program: Pubkey,
    ///SPL Token program for the quote token
    pub quote_token_program: Pubkey,
    ///Program to create an ATA for receiving fee NFT
    pub associated_token_program: Pubkey,
    ///Required for account creation
    pub system_program: Pubkey,
    ///Required for rent exempt calculations
    pub rent_program: Pubkey,
    ///Program to create NFT metadata accunt
    pub metadata_program: Pubkey,
}
impl From<MigrateToCpswapAccounts<'_, '_>> for MigrateToCpswapKeys {
    fn from(accounts: MigrateToCpswapAccounts) -> Self {
        Self {
            payer: *accounts.payer.key,
            base_mint: *accounts.base_mint.key,
            quote_mint: *accounts.quote_mint.key,
            platform_config: *accounts.platform_config.key,
            cpswap_program: *accounts.cpswap_program.key,
            cpswap_pool: *accounts.cpswap_pool.key,
            cpswap_authority: *accounts.cpswap_authority.key,
            cpswap_lp_mint: *accounts.cpswap_lp_mint.key,
            cpswap_base_vault: *accounts.cpswap_base_vault.key,
            cpswap_quote_vault: *accounts.cpswap_quote_vault.key,
            cpswap_config: *accounts.cpswap_config.key,
            cpswap_create_pool_fee: *accounts.cpswap_create_pool_fee.key,
            cpswap_observation: *accounts.cpswap_observation.key,
            lock_program: *accounts.lock_program.key,
            lock_authority: *accounts.lock_authority.key,
            lock_lp_vault: *accounts.lock_lp_vault.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            global_config: *accounts.global_config.key,
            base_vault: *accounts.base_vault.key,
            quote_vault: *accounts.quote_vault.key,
            pool_lp_token: *accounts.pool_lp_token.key,
            base_token_program: *accounts.base_token_program.key,
            quote_token_program: *accounts.quote_token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            system_program: *accounts.system_program.key,
            rent_program: *accounts.rent_program.key,
            metadata_program: *accounts.metadata_program.key,
        }
    }
}
impl From<MigrateToCpswapKeys> for [AccountMeta; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrateToCpswapKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.platform_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.cpswap_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.cpswap_pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.cpswap_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.cpswap_lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.cpswap_base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.cpswap_quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.cpswap_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.cpswap_create_pool_fee,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.cpswap_observation,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.lock_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.lock_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.lock_lp_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_lp_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.metadata_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN]> for MigrateToCpswapKeys {
    fn from(pubkeys: [Pubkey; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: pubkeys[0],
            base_mint: pubkeys[1],
            quote_mint: pubkeys[2],
            platform_config: pubkeys[3],
            cpswap_program: pubkeys[4],
            cpswap_pool: pubkeys[5],
            cpswap_authority: pubkeys[6],
            cpswap_lp_mint: pubkeys[7],
            cpswap_base_vault: pubkeys[8],
            cpswap_quote_vault: pubkeys[9],
            cpswap_config: pubkeys[10],
            cpswap_create_pool_fee: pubkeys[11],
            cpswap_observation: pubkeys[12],
            lock_program: pubkeys[13],
            lock_authority: pubkeys[14],
            lock_lp_vault: pubkeys[15],
            authority: pubkeys[16],
            pool_state: pubkeys[17],
            global_config: pubkeys[18],
            base_vault: pubkeys[19],
            quote_vault: pubkeys[20],
            pool_lp_token: pubkeys[21],
            base_token_program: pubkeys[22],
            quote_token_program: pubkeys[23],
            associated_token_program: pubkeys[24],
            system_program: pubkeys[25],
            rent_program: pubkeys[26],
            metadata_program: pubkeys[27],
        }
    }
}
impl From<&[String]> for MigrateToCpswapKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            payer: pubkeys[0].parse().unwrap(),
            base_mint: pubkeys[1].parse().unwrap(),
            quote_mint: pubkeys[2].parse().unwrap(),
            platform_config: pubkeys[3].parse().unwrap(),
            cpswap_program: pubkeys[4].parse().unwrap(),
            cpswap_pool: pubkeys[5].parse().unwrap(),
            cpswap_authority: pubkeys[6].parse().unwrap(),
            cpswap_lp_mint: pubkeys[7].parse().unwrap(),
            cpswap_base_vault: pubkeys[8].parse().unwrap(),
            cpswap_quote_vault: pubkeys[9].parse().unwrap(),
            cpswap_config: pubkeys[10].parse().unwrap(),
            cpswap_create_pool_fee: pubkeys[11].parse().unwrap(),
            cpswap_observation: pubkeys[12].parse().unwrap(),
            lock_program: pubkeys[13].parse().unwrap(),
            lock_authority: pubkeys[14].parse().unwrap(),
            lock_lp_vault: pubkeys[15].parse().unwrap(),
            authority: pubkeys[16].parse().unwrap(),
            pool_state: pubkeys[17].parse().unwrap(),
            global_config: pubkeys[18].parse().unwrap(),
            base_vault: pubkeys[19].parse().unwrap(),
            quote_vault: pubkeys[20].parse().unwrap(),
            pool_lp_token: pubkeys[21].parse().unwrap(),
            base_token_program: pubkeys[22].parse().unwrap(),
            quote_token_program: pubkeys[23].parse().unwrap(),
            associated_token_program: pubkeys[24].parse().unwrap(),
            system_program: pubkeys[25].parse().unwrap(),
            rent_program: pubkeys[26].parse().unwrap(),
            metadata_program: pubkeys[27].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrateToCpswapAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrateToCpswapAccounts<'_, 'info>) -> Self {
        [
            accounts.payer.clone(),
            accounts.base_mint.clone(),
            accounts.quote_mint.clone(),
            accounts.platform_config.clone(),
            accounts.cpswap_program.clone(),
            accounts.cpswap_pool.clone(),
            accounts.cpswap_authority.clone(),
            accounts.cpswap_lp_mint.clone(),
            accounts.cpswap_base_vault.clone(),
            accounts.cpswap_quote_vault.clone(),
            accounts.cpswap_config.clone(),
            accounts.cpswap_create_pool_fee.clone(),
            accounts.cpswap_observation.clone(),
            accounts.lock_program.clone(),
            accounts.lock_authority.clone(),
            accounts.lock_lp_vault.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.global_config.clone(),
            accounts.base_vault.clone(),
            accounts.quote_vault.clone(),
            accounts.pool_lp_token.clone(),
            accounts.base_token_program.clone(),
            accounts.quote_token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.system_program.clone(),
            accounts.rent_program.clone(),
            accounts.metadata_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN]>
    for MigrateToCpswapAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: &arr[0],
            base_mint: &arr[1],
            quote_mint: &arr[2],
            platform_config: &arr[3],
            cpswap_program: &arr[4],
            cpswap_pool: &arr[5],
            cpswap_authority: &arr[6],
            cpswap_lp_mint: &arr[7],
            cpswap_base_vault: &arr[8],
            cpswap_quote_vault: &arr[9],
            cpswap_config: &arr[10],
            cpswap_create_pool_fee: &arr[11],
            cpswap_observation: &arr[12],
            lock_program: &arr[13],
            lock_authority: &arr[14],
            lock_lp_vault: &arr[15],
            authority: &arr[16],
            pool_state: &arr[17],
            global_config: &arr[18],
            base_vault: &arr[19],
            quote_vault: &arr[20],
            pool_lp_token: &arr[21],
            base_token_program: &arr[22],
            quote_token_program: &arr[23],
            associated_token_program: &arr[24],
            system_program: &arr[25],
            rent_program: &arr[26],
            metadata_program: &arr[27],
        }
    }
}
pub const MIGRATE_TO_CPSWAP_IX_DISCM: [u8; 8] = [136, 92, 200, 103, 28, 218, 144, 140];
#[derive(Clone, Debug, PartialEq)]
pub struct MigrateToCpswapIxData;
impl MigrateToCpswapIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != MIGRATE_TO_CPSWAP_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    MIGRATE_TO_CPSWAP_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&MIGRATE_TO_CPSWAP_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migrate_to_cpswap_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateToCpswapKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATE_TO_CPSWAP_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrateToCpswapIxData.try_to_vec()?,
    })
}
pub fn migrate_to_cpswap_ix(keys: MigrateToCpswapKeys) -> std::io::Result<Instruction> {
    migrate_to_cpswap_ix_with_program_id(crate::ID, keys)
}
pub fn migrate_to_cpswap_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrateToCpswapAccounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrateToCpswapKeys = accounts.into();
    let ix = migrate_to_cpswap_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migrate_to_cpswap_invoke(accounts: MigrateToCpswapAccounts<'_, '_>) -> ProgramResult {
    migrate_to_cpswap_invoke_with_program_id(crate::ID, accounts)
}
pub fn migrate_to_cpswap_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrateToCpswapAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrateToCpswapKeys = accounts.into();
    let ix = migrate_to_cpswap_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migrate_to_cpswap_invoke_signed(
    accounts: MigrateToCpswapAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migrate_to_cpswap_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migrate_to_cpswap_verify_account_keys(
    accounts: MigrateToCpswapAccounts<'_, '_>,
    keys: MigrateToCpswapKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.payer.key, keys.payer),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.platform_config.key, keys.platform_config),
        (*accounts.cpswap_program.key, keys.cpswap_program),
        (*accounts.cpswap_pool.key, keys.cpswap_pool),
        (*accounts.cpswap_authority.key, keys.cpswap_authority),
        (*accounts.cpswap_lp_mint.key, keys.cpswap_lp_mint),
        (*accounts.cpswap_base_vault.key, keys.cpswap_base_vault),
        (*accounts.cpswap_quote_vault.key, keys.cpswap_quote_vault),
        (*accounts.cpswap_config.key, keys.cpswap_config),
        (
            *accounts.cpswap_create_pool_fee.key,
            keys.cpswap_create_pool_fee,
        ),
        (*accounts.cpswap_observation.key, keys.cpswap_observation),
        (*accounts.lock_program.key, keys.lock_program),
        (*accounts.lock_authority.key, keys.lock_authority),
        (*accounts.lock_lp_vault.key, keys.lock_lp_vault),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.pool_lp_token.key, keys.pool_lp_token),
        (*accounts.base_token_program.key, keys.base_token_program),
        (*accounts.quote_token_program.key, keys.quote_token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent_program.key, keys.rent_program),
        (*accounts.metadata_program.key, keys.metadata_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///CPSWAP_AUTHORITY_SEED seed for cpswap_authority PDA: "vault_and_lp_mint_auth_seed"
pub const CPSWAP_AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 110u8, 100u8, 95u8, 108u8, 112u8, 95u8, 109u8,
    105u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///CPSWAP_LP_MINT_SEED_0 seed for cpswap_lp_mint PDA: "pool_lp_mint"
pub const CPSWAP_LP_MINT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 108u8, 112u8, 95u8, 109u8, 105u8, 110u8, 116u8,
];
///CPSWAP_BASE_VAULT_SEED_0 seed for cpswap_base_vault PDA: "pool_vault"
pub const CPSWAP_BASE_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///CPSWAP_QUOTE_VAULT_SEED_0 seed for cpswap_quote_vault PDA: "pool_vault"
pub const CPSWAP_QUOTE_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///CPSWAP_OBSERVATION_SEED_0 seed for cpswap_observation PDA: "observation"
pub const CPSWAP_OBSERVATION_SEED_0: &[u8] = &[
    111u8, 98u8, 115u8, 101u8, 114u8, 118u8, 97u8, 116u8, 105u8, 111u8, 110u8,
];
///LOCK_AUTHORITY_SEED seed for lock_authority PDA: "lock_cp_authority_seed"
pub const LOCK_AUTHORITY_SEED: &[u8] = &[
    108u8, 111u8, 99u8, 107u8, 95u8, 99u8, 112u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8, 95u8, 115u8, 101u8, 101u8, 100u8,
];
///AUTHORITY_SEED seed for authority PDA: "vault_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8,
    100u8,
];
///POOL_STATE_SEED_0 seed for pool_state PDA: "pool"
pub const POOL_STATE_SEED_0: &[u8] = &[112u8, 111u8, 111u8, 108u8];
impl MigrateToCpswapKeys {
    ///Derive the cpswap_authority PDA
    pub fn derive_cpswap_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CPSWAP_AUTHORITY_SEED], program_id)
    }
    ///Derive the cpswap_lp_mint PDA
    pub fn derive_cpswap_lp_mint_pda(program_id: &Pubkey, cpswap_pool: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[CPSWAP_LP_MINT_SEED_0, cpswap_pool.as_ref()], program_id)
    }
    ///Derive the cpswap_base_vault PDA
    pub fn derive_cpswap_base_vault_pda(
        program_id: &Pubkey,
        cpswap_pool: &Pubkey,
        base_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                CPSWAP_BASE_VAULT_SEED_0,
                cpswap_pool.as_ref(),
                base_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the cpswap_quote_vault PDA
    pub fn derive_cpswap_quote_vault_pda(
        program_id: &Pubkey,
        cpswap_pool: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                CPSWAP_QUOTE_VAULT_SEED_0,
                cpswap_pool.as_ref(),
                quote_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the cpswap_observation PDA
    pub fn derive_cpswap_observation_pda(
        program_id: &Pubkey,
        cpswap_pool: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[CPSWAP_OBSERVATION_SEED_0, cpswap_pool.as_ref()],
            program_id,
        )
    }
    ///Derive the lock_authority PDA
    pub fn derive_lock_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[LOCK_AUTHORITY_SEED], program_id)
    }
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the pool_state PDA
    pub fn derive_pool_state_pda(
        program_id: &Pubkey,
        base_mint: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[POOL_STATE_SEED_0, base_mint.as_ref(), quote_mint.as_ref()],
            program_id,
        )
    }
}
///cpswap_program program address
pub const CPSWAP_PROGRAM_ADDRESS: &str = "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C";
///lock_program program address
pub const LOCK_PROGRAM_ADDRESS: &str = "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE";
///base_token_program program address
pub const BASE_TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///quote_token_program program address
pub const QUOTE_TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///rent_program program address
pub const RENT_PROGRAM_ADDRESS: &str = "SysvarRent111111111111111111111111111111111";
///metadata_program program address
pub const METADATA_PROGRAM_ADDRESS: &str = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
