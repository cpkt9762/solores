//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Create platform config account
///# Arguments
///* `ctx` - The context of accounts
///# Fields
///* `fee_rate` - Fee rate of the platform
///* `name` - Name of the platform
///* `web` - Website of the platform
///* `img` - Image link of the platform
pub const CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN: usize = 5;
///Accounts struct for the create_platform_config instruction
#[derive(Copy, Clone, Debug)]
pub struct CreatePlatformConfigAccounts<'me, 'info> {
    ///The account paying for the initialization costs
    pub platform_admin: &'me AccountInfo<'info>,
    pub platform_fee_wallet: &'me AccountInfo<'info>,
    pub platform_nft_wallet: &'me AccountInfo<'info>,
    ///The platform config account
    pub platform_config: &'me AccountInfo<'info>,
    ///Required for account creation
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the create_platform_config instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreatePlatformConfigKeys {
    ///The account paying for the initialization costs
    pub platform_admin: Pubkey,
    pub platform_fee_wallet: Pubkey,
    pub platform_nft_wallet: Pubkey,
    ///The platform config account
    pub platform_config: Pubkey,
    ///Required for account creation
    pub system_program: Pubkey,
}
impl From<CreatePlatformConfigAccounts<'_, '_>> for CreatePlatformConfigKeys {
    fn from(accounts: CreatePlatformConfigAccounts) -> Self {
        Self {
            platform_admin: *accounts.platform_admin.key,
            platform_fee_wallet: *accounts.platform_fee_wallet.key,
            platform_nft_wallet: *accounts.platform_nft_wallet.key,
            platform_config: *accounts.platform_config.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<CreatePlatformConfigKeys> for [AccountMeta; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN] {
    fn from(keys: CreatePlatformConfigKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.platform_admin,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.platform_fee_wallet,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.platform_nft_wallet,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.platform_config,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]> for CreatePlatformConfigKeys {
    fn from(pubkeys: [Pubkey; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            platform_admin: pubkeys[0],
            platform_fee_wallet: pubkeys[1],
            platform_nft_wallet: pubkeys[2],
            platform_config: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl From<&[String]> for CreatePlatformConfigKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            platform_admin: pubkeys[0].parse().unwrap(),
            platform_fee_wallet: pubkeys[1].parse().unwrap(),
            platform_nft_wallet: pubkeys[2].parse().unwrap(),
            platform_config: pubkeys[3].parse().unwrap(),
            system_program: pubkeys[4].parse().unwrap(),
        }
    }
}
impl<'info> From<CreatePlatformConfigAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreatePlatformConfigAccounts<'_, 'info>) -> Self {
        [
            accounts.platform_admin.clone(),
            accounts.platform_fee_wallet.clone(),
            accounts.platform_nft_wallet.clone(),
            accounts.platform_config.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]>
    for CreatePlatformConfigAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            platform_admin: &arr[0],
            platform_fee_wallet: &arr[1],
            platform_nft_wallet: &arr[2],
            platform_config: &arr[3],
            system_program: &arr[4],
        }
    }
}
pub const CREATE_PLATFORM_CONFIG_IX_DISCM: [u8; 8] = [176, 90, 196, 175, 253, 113, 220, 20];
///Create platform config account
///# Arguments
///* `ctx` - The context of accounts
///# Fields
///* `fee_rate` - Fee rate of the platform
///* `name` - Name of the platform
///* `web` - Website of the platform
///* `img` - Image link of the platform
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePlatformConfigIxArgs {
    pub discriminator: [u8; 8],
    pub platform_params: PlatformParams,
}
impl Default for CreatePlatformConfigIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [176u8, 90u8, 196u8, 175u8, 253u8, 113u8, 220u8, 20u8],
            platform_params: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CreatePlatformConfigIxData(pub CreatePlatformConfigIxArgs);
impl From<CreatePlatformConfigIxArgs> for CreatePlatformConfigIxData {
    fn from(args: CreatePlatformConfigIxArgs) -> Self {
        Self(args)
    }
}
impl CreatePlatformConfigIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_PLATFORM_CONFIG_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_PLATFORM_CONFIG_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(CreatePlatformConfigIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_PLATFORM_CONFIG_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_platform_config_ix_with_program_id(
    program_id: Pubkey,
    keys: CreatePlatformConfigKeys,
    args: CreatePlatformConfigIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    let data: CreatePlatformConfigIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn create_platform_config_ix(
    keys: CreatePlatformConfigKeys,
    args: CreatePlatformConfigIxArgs,
) -> std::io::Result<Instruction> {
    create_platform_config_ix_with_program_id(crate::ID, keys, args)
}
pub fn create_platform_config_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreatePlatformConfigAccounts<'_, '_>,
    args: CreatePlatformConfigIxArgs,
) -> ProgramResult {
    let keys: CreatePlatformConfigKeys = accounts.into();
    let ix = create_platform_config_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_platform_config_invoke(
    accounts: CreatePlatformConfigAccounts<'_, '_>,
    args: CreatePlatformConfigIxArgs,
) -> ProgramResult {
    create_platform_config_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn create_platform_config_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreatePlatformConfigAccounts<'_, '_>,
    args: CreatePlatformConfigIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreatePlatformConfigKeys = accounts.into();
    let ix = create_platform_config_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_platform_config_invoke_signed(
    accounts: CreatePlatformConfigAccounts<'_, '_>,
    args: CreatePlatformConfigIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_platform_config_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn create_platform_config_verify_account_keys(
    accounts: CreatePlatformConfigAccounts<'_, '_>,
    keys: CreatePlatformConfigKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.platform_admin.key, keys.platform_admin),
        (*accounts.platform_fee_wallet.key, keys.platform_fee_wallet),
        (*accounts.platform_nft_wallet.key, keys.platform_nft_wallet),
        (*accounts.platform_config.key, keys.platform_config),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///PLATFORM_CONFIG_SEED_0 seed for platform_config PDA: "platform_config"
pub const PLATFORM_CONFIG_SEED_0: &[u8] = &[
    112u8, 108u8, 97u8, 116u8, 102u8, 111u8, 114u8, 109u8, 95u8, 99u8, 111u8, 110u8, 102u8, 105u8,
    103u8,
];
impl CreatePlatformConfigKeys {
    ///Derive the platform_config PDA
    pub fn derive_platform_config_pda(
        program_id: &Pubkey,
        platform_admin: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[PLATFORM_CONFIG_SEED_0, platform_admin.as_ref()],
            program_id,
        )
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
impl CreatePlatformConfigIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CreatePlatformConfigIxArgs> for RaydiumLaunchpadProgramIx {
    fn from(args: CreatePlatformConfigIxArgs) -> Self {
        Self::CreatePlatformConfig(args)
    }
}
