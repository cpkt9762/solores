//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
use std::io::Read;
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod buy_exact_in;
pub use buy_exact_in::*;
pub mod buy_exact_out;
pub use buy_exact_out::*;
pub mod claim_platform_fee;
pub use claim_platform_fee::*;
pub mod claim_vested_token;
pub use claim_vested_token::*;
pub mod collect_fee;
pub use collect_fee::*;
pub mod collect_migrate_fee;
pub use collect_migrate_fee::*;
pub mod create_config;
pub use create_config::*;
pub mod create_platform_config;
pub use create_platform_config::*;
pub mod create_vesting_account;
pub use create_vesting_account::*;
pub mod initialize;
pub use initialize::*;
pub mod migrate_to_amm;
pub use migrate_to_amm::*;
pub mod migrate_to_cpswap;
pub use migrate_to_cpswap::*;
pub mod sell_exact_in;
pub use sell_exact_in::*;
pub mod sell_exact_out;
pub use sell_exact_out::*;
pub mod update_config;
pub use update_config::*;
pub mod update_platform_config;
pub use update_platform_config::*;
#[derive(Clone, Debug, PartialEq)]
pub enum RaydiumLaunchpadProgramIx {
    BuyExactIn(BuyExactInIxArgs),
    BuyExactOut(BuyExactOutIxArgs),
    ClaimPlatformFee,
    ClaimVestedToken,
    CollectFee,
    CollectMigrateFee,
    CreateConfig(CreateConfigIxArgs),
    CreatePlatformConfig(CreatePlatformConfigIxArgs),
    CreateVestingAccount(CreateVestingAccountIxArgs),
    Initialize(InitializeIxArgs),
    MigrateToAmm(MigrateToAmmIxArgs),
    MigrateToCpswap,
    SellExactIn(SellExactInIxArgs),
    SellExactOut(SellExactOutIxArgs),
    UpdateConfig(UpdateConfigIxArgs),
    UpdatePlatformConfig(UpdatePlatformConfigIxArgs),
}
impl RaydiumLaunchpadProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        match maybe_discm {
            BUY_EXACT_IN_IX_DISCM => Ok(Self::BuyExactIn(BuyExactInIxArgs::deserialize(
                &mut reader,
            )?)),
            BUY_EXACT_OUT_IX_DISCM => Ok(Self::BuyExactOut(BuyExactOutIxArgs::deserialize(
                &mut reader,
            )?)),
            CLAIM_PLATFORM_FEE_IX_DISCM => Ok(Self::ClaimPlatformFee),
            CLAIM_VESTED_TOKEN_IX_DISCM => Ok(Self::ClaimVestedToken),
            COLLECT_FEE_IX_DISCM => Ok(Self::CollectFee),
            COLLECT_MIGRATE_FEE_IX_DISCM => Ok(Self::CollectMigrateFee),
            CREATE_CONFIG_IX_DISCM => Ok(Self::CreateConfig(CreateConfigIxArgs::deserialize(
                &mut reader,
            )?)),
            CREATE_PLATFORM_CONFIG_IX_DISCM => Ok(Self::CreatePlatformConfig(
                CreatePlatformConfigIxArgs::deserialize(&mut reader)?,
            )),
            CREATE_VESTING_ACCOUNT_IX_DISCM => Ok(Self::CreateVestingAccount(
                CreateVestingAccountIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_IX_DISCM => Ok(Self::Initialize(InitializeIxArgs::deserialize(
                &mut reader,
            )?)),
            MIGRATE_TO_AMM_IX_DISCM => Ok(Self::MigrateToAmm(MigrateToAmmIxArgs::deserialize(
                &mut reader,
            )?)),
            MIGRATE_TO_CPSWAP_IX_DISCM => Ok(Self::MigrateToCpswap),
            SELL_EXACT_IN_IX_DISCM => Ok(Self::SellExactIn(SellExactInIxArgs::deserialize(
                &mut reader,
            )?)),
            SELL_EXACT_OUT_IX_DISCM => Ok(Self::SellExactOut(SellExactOutIxArgs::deserialize(
                &mut reader,
            )?)),
            UPDATE_CONFIG_IX_DISCM => Ok(Self::UpdateConfig(UpdateConfigIxArgs::deserialize(
                &mut reader,
            )?)),
            UPDATE_PLATFORM_CONFIG_IX_DISCM => Ok(Self::UpdatePlatformConfig(
                UpdatePlatformConfigIxArgs::deserialize(&mut reader)?,
            )),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {:?} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::BuyExactIn(args) => {
                writer.write_all(&BUY_EXACT_IN_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::BuyExactOut(args) => {
                writer.write_all(&BUY_EXACT_OUT_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::ClaimPlatformFee => writer.write_all(&CLAIM_PLATFORM_FEE_IX_DISCM),
            Self::ClaimVestedToken => writer.write_all(&CLAIM_VESTED_TOKEN_IX_DISCM),
            Self::CollectFee => writer.write_all(&COLLECT_FEE_IX_DISCM),
            Self::CollectMigrateFee => writer.write_all(&COLLECT_MIGRATE_FEE_IX_DISCM),
            Self::CreateConfig(args) => {
                writer.write_all(&CREATE_CONFIG_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CreatePlatformConfig(args) => {
                writer.write_all(&CREATE_PLATFORM_CONFIG_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CreateVestingAccount(args) => {
                writer.write_all(&CREATE_VESTING_ACCOUNT_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::Initialize(args) => {
                writer.write_all(&INITIALIZE_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::MigrateToAmm(args) => {
                writer.write_all(&MIGRATE_TO_AMM_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::MigrateToCpswap => writer.write_all(&MIGRATE_TO_CPSWAP_IX_DISCM),
            Self::SellExactIn(args) => {
                writer.write_all(&SELL_EXACT_IN_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::SellExactOut(args) => {
                writer.write_all(&SELL_EXACT_OUT_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::UpdateConfig(args) => {
                writer.write_all(&UPDATE_CONFIG_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::UpdatePlatformConfig(args) => {
                writer.write_all(&UPDATE_PLATFORM_CONFIG_IX_DISCM)?;
                args.serialize(&mut writer)
            }
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
