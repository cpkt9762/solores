//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Claim vested token
///# Arguments
pub const CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN: usize = 10;
///Accounts struct for the claim_vested_token instruction
#[derive(Copy, Clone, Debug)]
pub struct ClaimVestedTokenAccounts<'me, 'info> {
    ///The beneficiary of the vesting account
    pub beneficiary: &'me AccountInfo<'info>,
    ///PDA that acts as the authority for pool vault and mint operations
    ///Generated using AUTH_SEED
    pub authority: &'me AccountInfo<'info>,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: &'me AccountInfo<'info>,
    ///The vesting record account
    pub vesting_record: &'me AccountInfo<'info>,
    ///The pool's vault for base tokens
    ///Will be debited to send tokens to the user
    pub base_vault: &'me AccountInfo<'info>,
    pub user_base_token: &'me AccountInfo<'info>,
    ///The mint for the base token (token being sold)
    ///Created in this instruction with specified decimals
    pub base_token_mint: &'me AccountInfo<'info>,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub base_token_program: &'me AccountInfo<'info>,
    ///Required for account creation
    pub system_program: &'me AccountInfo<'info>,
    ///Required for associated token program
    pub associated_token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the claim_vested_token instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ClaimVestedTokenKeys {
    ///The beneficiary of the vesting account
    pub beneficiary: Pubkey,
    ///PDA that acts as the authority for pool vault and mint operations
    ///Generated using AUTH_SEED
    pub authority: Pubkey,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: Pubkey,
    ///The vesting record account
    pub vesting_record: Pubkey,
    ///The pool's vault for base tokens
    ///Will be debited to send tokens to the user
    pub base_vault: Pubkey,
    pub user_base_token: Pubkey,
    ///The mint for the base token (token being sold)
    ///Created in this instruction with specified decimals
    pub base_token_mint: Pubkey,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub base_token_program: Pubkey,
    ///Required for account creation
    pub system_program: Pubkey,
    ///Required for associated token program
    pub associated_token_program: Pubkey,
}
impl From<ClaimVestedTokenAccounts<'_, '_>> for ClaimVestedTokenKeys {
    fn from(accounts: ClaimVestedTokenAccounts) -> Self {
        Self {
            beneficiary: *accounts.beneficiary.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            vesting_record: *accounts.vesting_record.key,
            base_vault: *accounts.base_vault.key,
            user_base_token: *accounts.user_base_token.key,
            base_token_mint: *accounts.base_token_mint.key,
            base_token_program: *accounts.base_token_program.key,
            system_program: *accounts.system_program.key,
            associated_token_program: *accounts.associated_token_program.key,
        }
    }
}
impl From<ClaimVestedTokenKeys> for [AccountMeta; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN] {
    fn from(keys: ClaimVestedTokenKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.beneficiary,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vesting_record,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_base_token,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_token_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN]> for ClaimVestedTokenKeys {
    fn from(pubkeys: [Pubkey; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            beneficiary: pubkeys[0],
            authority: pubkeys[1],
            pool_state: pubkeys[2],
            vesting_record: pubkeys[3],
            base_vault: pubkeys[4],
            user_base_token: pubkeys[5],
            base_token_mint: pubkeys[6],
            base_token_program: pubkeys[7],
            system_program: pubkeys[8],
            associated_token_program: pubkeys[9],
        }
    }
}
impl From<&[String]> for ClaimVestedTokenKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            beneficiary: pubkeys[0].parse().unwrap(),
            authority: pubkeys[1].parse().unwrap(),
            pool_state: pubkeys[2].parse().unwrap(),
            vesting_record: pubkeys[3].parse().unwrap(),
            base_vault: pubkeys[4].parse().unwrap(),
            user_base_token: pubkeys[5].parse().unwrap(),
            base_token_mint: pubkeys[6].parse().unwrap(),
            base_token_program: pubkeys[7].parse().unwrap(),
            system_program: pubkeys[8].parse().unwrap(),
            associated_token_program: pubkeys[9].parse().unwrap(),
        }
    }
}
impl<'info> From<ClaimVestedTokenAccounts<'_, 'info>>
    for [AccountInfo<'info>; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ClaimVestedTokenAccounts<'_, 'info>) -> Self {
        [
            accounts.beneficiary.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.vesting_record.clone(),
            accounts.base_vault.clone(),
            accounts.user_base_token.clone(),
            accounts.base_token_mint.clone(),
            accounts.base_token_program.clone(),
            accounts.system_program.clone(),
            accounts.associated_token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN]>
    for ClaimVestedTokenAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            beneficiary: &arr[0],
            authority: &arr[1],
            pool_state: &arr[2],
            vesting_record: &arr[3],
            base_vault: &arr[4],
            user_base_token: &arr[5],
            base_token_mint: &arr[6],
            base_token_program: &arr[7],
            system_program: &arr[8],
            associated_token_program: &arr[9],
        }
    }
}
pub const CLAIM_VESTED_TOKEN_IX_DISCM: [u8; 8] = [49, 33, 104, 30, 189, 157, 79, 35];
#[derive(Clone, Debug, PartialEq)]
pub struct ClaimVestedTokenIxData;
impl ClaimVestedTokenIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CLAIM_VESTED_TOKEN_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CLAIM_VESTED_TOKEN_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CLAIM_VESTED_TOKEN_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn claim_vested_token_ix_with_program_id(
    program_id: Pubkey,
    keys: ClaimVestedTokenKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CLAIM_VESTED_TOKEN_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: ClaimVestedTokenIxData.try_to_vec()?,
    })
}
pub fn claim_vested_token_ix(keys: ClaimVestedTokenKeys) -> std::io::Result<Instruction> {
    claim_vested_token_ix_with_program_id(crate::ID, keys)
}
pub fn claim_vested_token_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ClaimVestedTokenAccounts<'_, '_>,
) -> ProgramResult {
    let keys: ClaimVestedTokenKeys = accounts.into();
    let ix = claim_vested_token_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn claim_vested_token_invoke(accounts: ClaimVestedTokenAccounts<'_, '_>) -> ProgramResult {
    claim_vested_token_invoke_with_program_id(crate::ID, accounts)
}
pub fn claim_vested_token_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ClaimVestedTokenAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ClaimVestedTokenKeys = accounts.into();
    let ix = claim_vested_token_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn claim_vested_token_invoke_signed(
    accounts: ClaimVestedTokenAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    claim_vested_token_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn claim_vested_token_verify_account_keys(
    accounts: ClaimVestedTokenAccounts<'_, '_>,
    keys: ClaimVestedTokenKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.beneficiary.key, keys.beneficiary),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.vesting_record.key, keys.vesting_record),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.user_base_token.key, keys.user_base_token),
        (*accounts.base_token_mint.key, keys.base_token_mint),
        (*accounts.base_token_program.key, keys.base_token_program),
        (*accounts.system_program.key, keys.system_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///AUTHORITY_SEED seed for authority PDA: "vault_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8,
    100u8,
];
///VESTING_RECORD_SEED_0 seed for vesting_record PDA: "pool_vesting"
pub const VESTING_RECORD_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 101u8, 115u8, 116u8, 105u8, 110u8, 103u8,
];
impl ClaimVestedTokenKeys {
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the vesting_record PDA
    pub fn derive_vesting_record_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        beneficiary: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                VESTING_RECORD_SEED_0,
                pool_state.as_ref(),
                beneficiary.as_ref(),
            ],
            program_id,
        )
    }
}
///base_token_program program address
pub const BASE_TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
