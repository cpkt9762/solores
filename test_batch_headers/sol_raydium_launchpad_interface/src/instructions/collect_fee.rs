//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Collects accumulated fees from the pool
///# Arguments
///* `ctx` - The context of accounts
pub const COLLECT_FEE_IX_ACCOUNTS_LEN: usize = 8;
///Accounts struct for the collect_fee instruction
#[derive(Copy, Clone, Debug)]
pub struct CollectFeeAccounts<'me, 'info> {
    ///Only protocol_fee_owner saved in global_config can collect protocol fee now
    pub owner: &'me AccountInfo<'info>,
    pub authority: &'me AccountInfo<'info>,
    ///Pool state stores accumulated protocol fee amount
    pub pool_state: &'me AccountInfo<'info>,
    ///Global config account stores owner
    pub global_config: &'me AccountInfo<'info>,
    ///The address that holds pool tokens for quote token
    pub quote_vault: &'me AccountInfo<'info>,
    ///The mint of quote token vault
    pub quote_mint: &'me AccountInfo<'info>,
    ///The address that receives the collected quote token fees
    pub recipient_token_account: &'me AccountInfo<'info>,
    ///SPL program for input token transfers
    pub token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the collect_fee instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CollectFeeKeys {
    ///Only protocol_fee_owner saved in global_config can collect protocol fee now
    pub owner: Pubkey,
    pub authority: Pubkey,
    ///Pool state stores accumulated protocol fee amount
    pub pool_state: Pubkey,
    ///Global config account stores owner
    pub global_config: Pubkey,
    ///The address that holds pool tokens for quote token
    pub quote_vault: Pubkey,
    ///The mint of quote token vault
    pub quote_mint: Pubkey,
    ///The address that receives the collected quote token fees
    pub recipient_token_account: Pubkey,
    ///SPL program for input token transfers
    pub token_program: Pubkey,
}
impl From<CollectFeeAccounts<'_, '_>> for CollectFeeKeys {
    fn from(accounts: CollectFeeAccounts) -> Self {
        Self {
            owner: *accounts.owner.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            global_config: *accounts.global_config.key,
            quote_vault: *accounts.quote_vault.key,
            quote_mint: *accounts.quote_mint.key,
            recipient_token_account: *accounts.recipient_token_account.key,
            token_program: *accounts.token_program.key,
        }
    }
}
impl From<CollectFeeKeys> for [AccountMeta; COLLECT_FEE_IX_ACCOUNTS_LEN] {
    fn from(keys: CollectFeeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.recipient_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; COLLECT_FEE_IX_ACCOUNTS_LEN]> for CollectFeeKeys {
    fn from(pubkeys: [Pubkey; COLLECT_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: pubkeys[0],
            authority: pubkeys[1],
            pool_state: pubkeys[2],
            global_config: pubkeys[3],
            quote_vault: pubkeys[4],
            quote_mint: pubkeys[5],
            recipient_token_account: pubkeys[6],
            token_program: pubkeys[7],
        }
    }
}
impl From<&[String]> for CollectFeeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            owner: pubkeys[0].parse().unwrap(),
            authority: pubkeys[1].parse().unwrap(),
            pool_state: pubkeys[2].parse().unwrap(),
            global_config: pubkeys[3].parse().unwrap(),
            quote_vault: pubkeys[4].parse().unwrap(),
            quote_mint: pubkeys[5].parse().unwrap(),
            recipient_token_account: pubkeys[6].parse().unwrap(),
            token_program: pubkeys[7].parse().unwrap(),
        }
    }
}
impl<'info> From<CollectFeeAccounts<'_, 'info>>
    for [AccountInfo<'info>; COLLECT_FEE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CollectFeeAccounts<'_, 'info>) -> Self {
        [
            accounts.owner.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.global_config.clone(),
            accounts.quote_vault.clone(),
            accounts.quote_mint.clone(),
            accounts.recipient_token_account.clone(),
            accounts.token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; COLLECT_FEE_IX_ACCOUNTS_LEN]>
    for CollectFeeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; COLLECT_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: &arr[0],
            authority: &arr[1],
            pool_state: &arr[2],
            global_config: &arr[3],
            quote_vault: &arr[4],
            quote_mint: &arr[5],
            recipient_token_account: &arr[6],
            token_program: &arr[7],
        }
    }
}
pub const COLLECT_FEE_IX_DISCM: [u8; 8] = [60, 173, 247, 103, 4, 93, 130, 48];
#[derive(Clone, Debug, PartialEq)]
pub struct CollectFeeIxData;
impl CollectFeeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != COLLECT_FEE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    COLLECT_FEE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&COLLECT_FEE_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn collect_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: CollectFeeKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; COLLECT_FEE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CollectFeeIxData.try_to_vec()?,
    })
}
pub fn collect_fee_ix(keys: CollectFeeKeys) -> std::io::Result<Instruction> {
    collect_fee_ix_with_program_id(crate::ID, keys)
}
pub fn collect_fee_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CollectFeeAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CollectFeeKeys = accounts.into();
    let ix = collect_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn collect_fee_invoke(accounts: CollectFeeAccounts<'_, '_>) -> ProgramResult {
    collect_fee_invoke_with_program_id(crate::ID, accounts)
}
pub fn collect_fee_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CollectFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CollectFeeKeys = accounts.into();
    let ix = collect_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn collect_fee_invoke_signed(
    accounts: CollectFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    collect_fee_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn collect_fee_verify_account_keys(
    accounts: CollectFeeAccounts<'_, '_>,
    keys: CollectFeeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.owner.key, keys.owner),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.quote_mint.key, keys.quote_mint),
        (
            *accounts.recipient_token_account.key,
            keys.recipient_token_account,
        ),
        (*accounts.token_program.key, keys.token_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///AUTHORITY_SEED seed for authority PDA: "vault_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8,
    100u8,
];
impl CollectFeeKeys {
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
}
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
