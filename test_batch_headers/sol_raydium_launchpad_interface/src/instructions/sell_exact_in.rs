//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Use the given amount of base tokens to sell for quote tokens.
///# Arguments
///* `ctx` - The context of accounts
///* `amount_in` - Amount of base token to sell
///* `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection)
///* `share_fee_rate` - Fee rate for the share
pub const SELL_EXACT_IN_IX_ACCOUNTS_LEN: usize = 15;
///Accounts struct for the sell_exact_in instruction
#[derive(Copy, Clone, Debug)]
pub struct SellExactInAccounts<'me, 'info> {
    ///The user performing the swap operation
    ///Must sign the transaction and pay for fees
    pub payer: &'me AccountInfo<'info>,
    ///PDA that acts as the authority for pool vault operations
    ///Generated using AUTH_SEED
    pub authority: &'me AccountInfo<'info>,
    ///Global configuration account containing protocol-wide settings
    ///Used to read protocol fee rates and curve type
    pub global_config: &'me AccountInfo<'info>,
    ///Platform configuration account containing platform-wide settings
    ///Used to read platform fee rate
    pub platform_config: &'me AccountInfo<'info>,
    ///The pool state account where the swap will be performed
    ///Contains current pool parameters and balances
    pub pool_state: &'me AccountInfo<'info>,
    ///The user's token account for base tokens (tokens being bought)
    ///Will receive the output tokens after the swap
    pub user_base_token: &'me AccountInfo<'info>,
    ///The user's token account for quote tokens (tokens being sold)
    ///Will be debited for the input amount
    pub user_quote_token: &'me AccountInfo<'info>,
    ///The pool's vault for base tokens
    ///Will be debited to send tokens to the user
    pub base_vault: &'me AccountInfo<'info>,
    ///The pool's vault for quote tokens
    ///Will receive the input tokens from the user
    pub quote_vault: &'me AccountInfo<'info>,
    ///The mint of the base token
    ///Used for transfer fee calculations if applicable
    pub base_token_mint: &'me AccountInfo<'info>,
    ///The mint of the quote token
    pub quote_token_mint: &'me AccountInfo<'info>,
    ///SPL Token program for base token transfers
    pub base_token_program: &'me AccountInfo<'info>,
    ///SPL Token program for quote token transfers
    pub quote_token_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the sell_exact_in instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SellExactInKeys {
    ///The user performing the swap operation
    ///Must sign the transaction and pay for fees
    pub payer: Pubkey,
    ///PDA that acts as the authority for pool vault operations
    ///Generated using AUTH_SEED
    pub authority: Pubkey,
    ///Global configuration account containing protocol-wide settings
    ///Used to read protocol fee rates and curve type
    pub global_config: Pubkey,
    ///Platform configuration account containing platform-wide settings
    ///Used to read platform fee rate
    pub platform_config: Pubkey,
    ///The pool state account where the swap will be performed
    ///Contains current pool parameters and balances
    pub pool_state: Pubkey,
    ///The user's token account for base tokens (tokens being bought)
    ///Will receive the output tokens after the swap
    pub user_base_token: Pubkey,
    ///The user's token account for quote tokens (tokens being sold)
    ///Will be debited for the input amount
    pub user_quote_token: Pubkey,
    ///The pool's vault for base tokens
    ///Will be debited to send tokens to the user
    pub base_vault: Pubkey,
    ///The pool's vault for quote tokens
    ///Will receive the input tokens from the user
    pub quote_vault: Pubkey,
    ///The mint of the base token
    ///Used for transfer fee calculations if applicable
    pub base_token_mint: Pubkey,
    ///The mint of the quote token
    pub quote_token_mint: Pubkey,
    ///SPL Token program for base token transfers
    pub base_token_program: Pubkey,
    ///SPL Token program for quote token transfers
    pub quote_token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<SellExactInAccounts<'_, '_>> for SellExactInKeys {
    fn from(accounts: SellExactInAccounts) -> Self {
        Self {
            payer: *accounts.payer.key,
            authority: *accounts.authority.key,
            global_config: *accounts.global_config.key,
            platform_config: *accounts.platform_config.key,
            pool_state: *accounts.pool_state.key,
            user_base_token: *accounts.user_base_token.key,
            user_quote_token: *accounts.user_quote_token.key,
            base_vault: *accounts.base_vault.key,
            quote_vault: *accounts.quote_vault.key,
            base_token_mint: *accounts.base_token_mint.key,
            quote_token_mint: *accounts.quote_token_mint.key,
            base_token_program: *accounts.base_token_program.key,
            quote_token_program: *accounts.quote_token_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<SellExactInKeys> for [AccountMeta; SELL_EXACT_IN_IX_ACCOUNTS_LEN] {
    fn from(keys: SellExactInKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.platform_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_base_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_quote_token,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_token_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_token_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; SELL_EXACT_IN_IX_ACCOUNTS_LEN]> for SellExactInKeys {
    fn from(pubkeys: [Pubkey; SELL_EXACT_IN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: pubkeys[0],
            authority: pubkeys[1],
            global_config: pubkeys[2],
            platform_config: pubkeys[3],
            pool_state: pubkeys[4],
            user_base_token: pubkeys[5],
            user_quote_token: pubkeys[6],
            base_vault: pubkeys[7],
            quote_vault: pubkeys[8],
            base_token_mint: pubkeys[9],
            quote_token_mint: pubkeys[10],
            base_token_program: pubkeys[11],
            quote_token_program: pubkeys[12],
            event_authority: pubkeys[13],
            program: pubkeys[14],
        }
    }
}
impl From<&[String]> for SellExactInKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            payer: pubkeys[0].parse().unwrap(),
            authority: pubkeys[1].parse().unwrap(),
            global_config: pubkeys[2].parse().unwrap(),
            platform_config: pubkeys[3].parse().unwrap(),
            pool_state: pubkeys[4].parse().unwrap(),
            user_base_token: pubkeys[5].parse().unwrap(),
            user_quote_token: pubkeys[6].parse().unwrap(),
            base_vault: pubkeys[7].parse().unwrap(),
            quote_vault: pubkeys[8].parse().unwrap(),
            base_token_mint: pubkeys[9].parse().unwrap(),
            quote_token_mint: pubkeys[10].parse().unwrap(),
            base_token_program: pubkeys[11].parse().unwrap(),
            quote_token_program: pubkeys[12].parse().unwrap(),
            event_authority: pubkeys[13].parse().unwrap(),
            program: pubkeys[14].parse().unwrap(),
        }
    }
}
impl<'info> From<SellExactInAccounts<'_, 'info>>
    for [AccountInfo<'info>; SELL_EXACT_IN_IX_ACCOUNTS_LEN]
{
    fn from(accounts: SellExactInAccounts<'_, 'info>) -> Self {
        [
            accounts.payer.clone(),
            accounts.authority.clone(),
            accounts.global_config.clone(),
            accounts.platform_config.clone(),
            accounts.pool_state.clone(),
            accounts.user_base_token.clone(),
            accounts.user_quote_token.clone(),
            accounts.base_vault.clone(),
            accounts.quote_vault.clone(),
            accounts.base_token_mint.clone(),
            accounts.quote_token_mint.clone(),
            accounts.base_token_program.clone(),
            accounts.quote_token_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SELL_EXACT_IN_IX_ACCOUNTS_LEN]>
    for SellExactInAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; SELL_EXACT_IN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: &arr[0],
            authority: &arr[1],
            global_config: &arr[2],
            platform_config: &arr[3],
            pool_state: &arr[4],
            user_base_token: &arr[5],
            user_quote_token: &arr[6],
            base_vault: &arr[7],
            quote_vault: &arr[8],
            base_token_mint: &arr[9],
            quote_token_mint: &arr[10],
            base_token_program: &arr[11],
            quote_token_program: &arr[12],
            event_authority: &arr[13],
            program: &arr[14],
        }
    }
}
pub const SELL_EXACT_IN_IX_DISCM: [u8; 8] = [149, 39, 222, 155, 211, 124, 152, 26];
///Use the given amount of base tokens to sell for quote tokens.
///# Arguments
///* `ctx` - The context of accounts
///* `amount_in` - Amount of base token to sell
///* `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection)
///* `share_fee_rate` - Fee rate for the share
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellExactInIxArgs {
    pub discriminator: [u8; 8],
    pub amount_in: u64,
    pub minimum_amount_out: u64,
    pub share_fee_rate: u64,
}
impl Default for SellExactInIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [149u8, 39u8, 222u8, 155u8, 211u8, 124u8, 152u8, 26u8],
            amount_in: Default::default(),
            minimum_amount_out: Default::default(),
            share_fee_rate: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct SellExactInIxData(pub SellExactInIxArgs);
impl From<SellExactInIxArgs> for SellExactInIxData {
    fn from(args: SellExactInIxArgs) -> Self {
        Self(args)
    }
}
impl SellExactInIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != SELL_EXACT_IN_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    SELL_EXACT_IN_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(SellExactInIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&SELL_EXACT_IN_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn sell_exact_in_ix_with_program_id(
    program_id: Pubkey,
    keys: SellExactInKeys,
    args: SellExactInIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SELL_EXACT_IN_IX_ACCOUNTS_LEN] = keys.into();
    let data: SellExactInIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn sell_exact_in_ix(
    keys: SellExactInKeys,
    args: SellExactInIxArgs,
) -> std::io::Result<Instruction> {
    sell_exact_in_ix_with_program_id(crate::ID, keys, args)
}
pub fn sell_exact_in_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SellExactInAccounts<'_, '_>,
    args: SellExactInIxArgs,
) -> ProgramResult {
    let keys: SellExactInKeys = accounts.into();
    let ix = sell_exact_in_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn sell_exact_in_invoke(
    accounts: SellExactInAccounts<'_, '_>,
    args: SellExactInIxArgs,
) -> ProgramResult {
    sell_exact_in_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn sell_exact_in_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SellExactInAccounts<'_, '_>,
    args: SellExactInIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SellExactInKeys = accounts.into();
    let ix = sell_exact_in_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn sell_exact_in_invoke_signed(
    accounts: SellExactInAccounts<'_, '_>,
    args: SellExactInIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    sell_exact_in_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn sell_exact_in_verify_account_keys(
    accounts: SellExactInAccounts<'_, '_>,
    keys: SellExactInKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.payer.key, keys.payer),
        (*accounts.authority.key, keys.authority),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.platform_config.key, keys.platform_config),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.user_base_token.key, keys.user_base_token),
        (*accounts.user_quote_token.key, keys.user_quote_token),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.base_token_mint.key, keys.base_token_mint),
        (*accounts.quote_token_mint.key, keys.quote_token_mint),
        (*accounts.base_token_program.key, keys.base_token_program),
        (*accounts.quote_token_program.key, keys.quote_token_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///AUTHORITY_SEED seed for authority PDA: "vault_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8,
    100u8,
];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl SellExactInKeys {
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
///quote_token_program program address
pub const QUOTE_TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
impl SellExactInIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<SellExactInIxArgs> for RaydiumLaunchpadProgramIx {
    fn from(args: SellExactInIxArgs) -> Self {
        Self::SellExactIn(args)
    }
}
