//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Initializes a new trading pool
///# Arguments
///* `ctx` - The context of accounts containing pool and token information
pub const INITIALIZE_IX_ACCOUNTS_LEN: usize = 18;
///Accounts struct for the initialize instruction
#[derive(Copy, Clone, Debug)]
pub struct InitializeAccounts<'me, 'info> {
    ///The account paying for the initialization costs
    ///This can be any account with sufficient SOL to cover the transaction
    pub payer: &'me AccountInfo<'info>,
    pub creator: &'me AccountInfo<'info>,
    ///Global configuration account containing protocol-wide settings
    ///Includes settings like quote token mint and fee parameters
    pub global_config: &'me AccountInfo<'info>,
    ///Platform configuration account containing platform info
    ///Includes settings like the fee_rate, name, web, img of the platform
    pub platform_config: &'me AccountInfo<'info>,
    ///PDA that acts as the authority for pool vault and mint operations
    ///Generated using AUTH_SEED
    pub authority: &'me AccountInfo<'info>,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: &'me AccountInfo<'info>,
    ///The mint for the base token (token being sold)
    ///Created in this instruction with specified decimals
    pub base_mint: &'me AccountInfo<'info>,
    ///The mint for the quote token (token used to buy)
    ///Must match the quote_mint specified in global config
    pub quote_mint: &'me AccountInfo<'info>,
    ///Token account that holds the pool's base tokens
    ///PDA generated using POOL_VAULT_SEED
    pub base_vault: &'me AccountInfo<'info>,
    ///Token account that holds the pool's quote tokens
    ///PDA generated using POOL_VAULT_SEED
    pub quote_vault: &'me AccountInfo<'info>,
    ///Account to store the base token's metadata
    ///Created using Metaplex metadata program
    pub metadata_account: &'me AccountInfo<'info>,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub base_token_program: &'me AccountInfo<'info>,
    ///SPL Token program for the quote token
    pub quote_token_program: &'me AccountInfo<'info>,
    ///Metaplex Token Metadata program
    ///Used to create metadata for the base token
    pub metadata_program: &'me AccountInfo<'info>,
    ///Required for account creation
    pub system_program: &'me AccountInfo<'info>,
    ///Required for rent exempt calculations
    pub rent_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the initialize instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitializeKeys {
    ///The account paying for the initialization costs
    ///This can be any account with sufficient SOL to cover the transaction
    pub payer: Pubkey,
    pub creator: Pubkey,
    ///Global configuration account containing protocol-wide settings
    ///Includes settings like quote token mint and fee parameters
    pub global_config: Pubkey,
    ///Platform configuration account containing platform info
    ///Includes settings like the fee_rate, name, web, img of the platform
    pub platform_config: Pubkey,
    ///PDA that acts as the authority for pool vault and mint operations
    ///Generated using AUTH_SEED
    pub authority: Pubkey,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: Pubkey,
    ///The mint for the base token (token being sold)
    ///Created in this instruction with specified decimals
    pub base_mint: Pubkey,
    ///The mint for the quote token (token used to buy)
    ///Must match the quote_mint specified in global config
    pub quote_mint: Pubkey,
    ///Token account that holds the pool's base tokens
    ///PDA generated using POOL_VAULT_SEED
    pub base_vault: Pubkey,
    ///Token account that holds the pool's quote tokens
    ///PDA generated using POOL_VAULT_SEED
    pub quote_vault: Pubkey,
    ///Account to store the base token's metadata
    ///Created using Metaplex metadata program
    pub metadata_account: Pubkey,
    ///SPL Token program for the base token
    ///Must be the standard Token program
    pub base_token_program: Pubkey,
    ///SPL Token program for the quote token
    pub quote_token_program: Pubkey,
    ///Metaplex Token Metadata program
    ///Used to create metadata for the base token
    pub metadata_program: Pubkey,
    ///Required for account creation
    pub system_program: Pubkey,
    ///Required for rent exempt calculations
    pub rent_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<InitializeAccounts<'_, '_>> for InitializeKeys {
    fn from(accounts: InitializeAccounts) -> Self {
        Self {
            payer: *accounts.payer.key,
            creator: *accounts.creator.key,
            global_config: *accounts.global_config.key,
            platform_config: *accounts.platform_config.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            base_mint: *accounts.base_mint.key,
            quote_mint: *accounts.quote_mint.key,
            base_vault: *accounts.base_vault.key,
            quote_vault: *accounts.quote_vault.key,
            metadata_account: *accounts.metadata_account.key,
            base_token_program: *accounts.base_token_program.key,
            quote_token_program: *accounts.quote_token_program.key,
            metadata_program: *accounts.metadata_program.key,
            system_program: *accounts.system_program.key,
            rent_program: *accounts.rent_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<InitializeKeys> for [AccountMeta; INITIALIZE_IX_ACCOUNTS_LEN] {
    fn from(keys: InitializeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.creator,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.platform_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.metadata_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.metadata_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; INITIALIZE_IX_ACCOUNTS_LEN]> for InitializeKeys {
    fn from(pubkeys: [Pubkey; INITIALIZE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: pubkeys[0],
            creator: pubkeys[1],
            global_config: pubkeys[2],
            platform_config: pubkeys[3],
            authority: pubkeys[4],
            pool_state: pubkeys[5],
            base_mint: pubkeys[6],
            quote_mint: pubkeys[7],
            base_vault: pubkeys[8],
            quote_vault: pubkeys[9],
            metadata_account: pubkeys[10],
            base_token_program: pubkeys[11],
            quote_token_program: pubkeys[12],
            metadata_program: pubkeys[13],
            system_program: pubkeys[14],
            rent_program: pubkeys[15],
            event_authority: pubkeys[16],
            program: pubkeys[17],
        }
    }
}
impl From<&[String]> for InitializeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            payer: pubkeys[0].parse().unwrap(),
            creator: pubkeys[1].parse().unwrap(),
            global_config: pubkeys[2].parse().unwrap(),
            platform_config: pubkeys[3].parse().unwrap(),
            authority: pubkeys[4].parse().unwrap(),
            pool_state: pubkeys[5].parse().unwrap(),
            base_mint: pubkeys[6].parse().unwrap(),
            quote_mint: pubkeys[7].parse().unwrap(),
            base_vault: pubkeys[8].parse().unwrap(),
            quote_vault: pubkeys[9].parse().unwrap(),
            metadata_account: pubkeys[10].parse().unwrap(),
            base_token_program: pubkeys[11].parse().unwrap(),
            quote_token_program: pubkeys[12].parse().unwrap(),
            metadata_program: pubkeys[13].parse().unwrap(),
            system_program: pubkeys[14].parse().unwrap(),
            rent_program: pubkeys[15].parse().unwrap(),
            event_authority: pubkeys[16].parse().unwrap(),
            program: pubkeys[17].parse().unwrap(),
        }
    }
}
impl<'info> From<InitializeAccounts<'_, 'info>>
    for [AccountInfo<'info>; INITIALIZE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: InitializeAccounts<'_, 'info>) -> Self {
        [
            accounts.payer.clone(),
            accounts.creator.clone(),
            accounts.global_config.clone(),
            accounts.platform_config.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.base_mint.clone(),
            accounts.quote_mint.clone(),
            accounts.base_vault.clone(),
            accounts.quote_vault.clone(),
            accounts.metadata_account.clone(),
            accounts.base_token_program.clone(),
            accounts.quote_token_program.clone(),
            accounts.metadata_program.clone(),
            accounts.system_program.clone(),
            accounts.rent_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; INITIALIZE_IX_ACCOUNTS_LEN]>
    for InitializeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; INITIALIZE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: &arr[0],
            creator: &arr[1],
            global_config: &arr[2],
            platform_config: &arr[3],
            authority: &arr[4],
            pool_state: &arr[5],
            base_mint: &arr[6],
            quote_mint: &arr[7],
            base_vault: &arr[8],
            quote_vault: &arr[9],
            metadata_account: &arr[10],
            base_token_program: &arr[11],
            quote_token_program: &arr[12],
            metadata_program: &arr[13],
            system_program: &arr[14],
            rent_program: &arr[15],
            event_authority: &arr[16],
            program: &arr[17],
        }
    }
}
pub const INITIALIZE_IX_DISCM: [u8; 8] = [175, 175, 109, 31, 13, 152, 155, 237];
///Initializes a new trading pool
///# Arguments
///* `ctx` - The context of accounts containing pool and token information
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeIxArgs {
    pub discriminator: [u8; 8],
    pub base_mint_param: MintParams,
    pub curve_param: CurveParams,
    pub vesting_param: VestingParams,
}
impl Default for InitializeIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [175u8, 175u8, 109u8, 31u8, 13u8, 152u8, 155u8, 237u8],
            base_mint_param: Default::default(),
            curve_param: Default::default(),
            vesting_param: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct InitializeIxData(pub InitializeIxArgs);
impl From<InitializeIxArgs> for InitializeIxData {
    fn from(args: InitializeIxArgs) -> Self {
        Self(args)
    }
}
impl InitializeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != INITIALIZE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    INITIALIZE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(InitializeIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&INITIALIZE_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initialize_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeKeys,
    args: InitializeIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIALIZE_IX_ACCOUNTS_LEN] = keys.into();
    let data: InitializeIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn initialize_ix(keys: InitializeKeys, args: InitializeIxArgs) -> std::io::Result<Instruction> {
    initialize_ix_with_program_id(crate::ID, keys, args)
}
pub fn initialize_invoke_with_program_id(
    program_id: Pubkey,
    accounts: InitializeAccounts<'_, '_>,
    args: InitializeIxArgs,
) -> ProgramResult {
    let keys: InitializeKeys = accounts.into();
    let ix = initialize_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn initialize_invoke(
    accounts: InitializeAccounts<'_, '_>,
    args: InitializeIxArgs,
) -> ProgramResult {
    initialize_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn initialize_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: InitializeAccounts<'_, '_>,
    args: InitializeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: InitializeKeys = accounts.into();
    let ix = initialize_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initialize_invoke_signed(
    accounts: InitializeAccounts<'_, '_>,
    args: InitializeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initialize_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn initialize_verify_account_keys(
    accounts: InitializeAccounts<'_, '_>,
    keys: InitializeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.payer.key, keys.payer),
        (*accounts.creator.key, keys.creator),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.platform_config.key, keys.platform_config),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.base_vault.key, keys.base_vault),
        (*accounts.quote_vault.key, keys.quote_vault),
        (*accounts.metadata_account.key, keys.metadata_account),
        (*accounts.base_token_program.key, keys.base_token_program),
        (*accounts.quote_token_program.key, keys.quote_token_program),
        (*accounts.metadata_program.key, keys.metadata_program),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent_program.key, keys.rent_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///AUTHORITY_SEED seed for authority PDA: "vault_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8,
    100u8,
];
///POOL_STATE_SEED_0 seed for pool_state PDA: "pool"
pub const POOL_STATE_SEED_0: &[u8] = &[112u8, 111u8, 111u8, 108u8];
///BASE_VAULT_SEED_0 seed for base_vault PDA: "pool_vault"
pub const BASE_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///QUOTE_VAULT_SEED_0 seed for quote_vault PDA: "pool_vault"
pub const QUOTE_VAULT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl InitializeKeys {
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the pool_state PDA
    pub fn derive_pool_state_pda(
        program_id: &Pubkey,
        base_mint: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[POOL_STATE_SEED_0, base_mint.as_ref(), quote_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the base_vault PDA
    pub fn derive_base_vault_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        base_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[BASE_VAULT_SEED_0, pool_state.as_ref(), base_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the quote_vault PDA
    pub fn derive_quote_vault_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[QUOTE_VAULT_SEED_0, pool_state.as_ref(), quote_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
///base_token_program program address
pub const BASE_TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///quote_token_program program address
pub const QUOTE_TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///metadata_program program address
pub const METADATA_PROGRAM_ADDRESS: &str = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///rent_program program address
pub const RENT_PROGRAM_ADDRESS: &str = "SysvarRent111111111111111111111111111111111";
impl InitializeIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<InitializeIxArgs> for RaydiumLaunchpadProgramIx {
    fn from(args: InitializeIxArgs) -> Self {
        Self::Initialize(args)
    }
}
