//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Claim platform fee
///# Arguments
///* `ctx` - The context of accounts
pub const CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN: usize = 10;
///Accounts struct for the claim_platform_fee instruction
#[derive(Copy, Clone, Debug)]
pub struct ClaimPlatformFeeAccounts<'me, 'info> {
    ///Only the wallet stored in platform_config can collect platform fees
    pub platform_fee_wallet: &'me AccountInfo<'info>,
    ///PDA that acts as the authority for pool vault and mint operations
    ///Generated using AUTH_SEED
    pub authority: &'me AccountInfo<'info>,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: &'me AccountInfo<'info>,
    ///The platform config account
    pub platform_config: &'me AccountInfo<'info>,
    pub quote_vault: &'me AccountInfo<'info>,
    ///The address that receives the collected quote token fees
    pub recipient_token_account: &'me AccountInfo<'info>,
    ///The mint of quote token vault
    pub quote_mint: &'me AccountInfo<'info>,
    ///SPL program for input token transfers
    pub token_program: &'me AccountInfo<'info>,
    ///Required for account creation
    pub system_program: &'me AccountInfo<'info>,
    ///Required for associated token program
    pub associated_token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the claim_platform_fee instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ClaimPlatformFeeKeys {
    ///Only the wallet stored in platform_config can collect platform fees
    pub platform_fee_wallet: Pubkey,
    ///PDA that acts as the authority for pool vault and mint operations
    ///Generated using AUTH_SEED
    pub authority: Pubkey,
    ///Account that stores the pool's state and parameters
    ///PDA generated using POOL_SEED and both token mints
    pub pool_state: Pubkey,
    ///The platform config account
    pub platform_config: Pubkey,
    pub quote_vault: Pubkey,
    ///The address that receives the collected quote token fees
    pub recipient_token_account: Pubkey,
    ///The mint of quote token vault
    pub quote_mint: Pubkey,
    ///SPL program for input token transfers
    pub token_program: Pubkey,
    ///Required for account creation
    pub system_program: Pubkey,
    ///Required for associated token program
    pub associated_token_program: Pubkey,
}
impl From<ClaimPlatformFeeAccounts<'_, '_>> for ClaimPlatformFeeKeys {
    fn from(accounts: ClaimPlatformFeeAccounts) -> Self {
        Self {
            platform_fee_wallet: *accounts.platform_fee_wallet.key,
            authority: *accounts.authority.key,
            pool_state: *accounts.pool_state.key,
            platform_config: *accounts.platform_config.key,
            quote_vault: *accounts.quote_vault.key,
            recipient_token_account: *accounts.recipient_token_account.key,
            quote_mint: *accounts.quote_mint.key,
            token_program: *accounts.token_program.key,
            system_program: *accounts.system_program.key,
            associated_token_program: *accounts.associated_token_program.key,
        }
    }
}
impl From<ClaimPlatformFeeKeys> for [AccountMeta; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN] {
    fn from(keys: ClaimPlatformFeeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.platform_fee_wallet,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.platform_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.recipient_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN]> for ClaimPlatformFeeKeys {
    fn from(pubkeys: [Pubkey; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            platform_fee_wallet: pubkeys[0],
            authority: pubkeys[1],
            pool_state: pubkeys[2],
            platform_config: pubkeys[3],
            quote_vault: pubkeys[4],
            recipient_token_account: pubkeys[5],
            quote_mint: pubkeys[6],
            token_program: pubkeys[7],
            system_program: pubkeys[8],
            associated_token_program: pubkeys[9],
        }
    }
}
impl From<&[String]> for ClaimPlatformFeeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            platform_fee_wallet: pubkeys[0].parse().unwrap(),
            authority: pubkeys[1].parse().unwrap(),
            pool_state: pubkeys[2].parse().unwrap(),
            platform_config: pubkeys[3].parse().unwrap(),
            quote_vault: pubkeys[4].parse().unwrap(),
            recipient_token_account: pubkeys[5].parse().unwrap(),
            quote_mint: pubkeys[6].parse().unwrap(),
            token_program: pubkeys[7].parse().unwrap(),
            system_program: pubkeys[8].parse().unwrap(),
            associated_token_program: pubkeys[9].parse().unwrap(),
        }
    }
}
impl<'info> From<ClaimPlatformFeeAccounts<'_, 'info>>
    for [AccountInfo<'info>; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ClaimPlatformFeeAccounts<'_, 'info>) -> Self {
        [
            accounts.platform_fee_wallet.clone(),
            accounts.authority.clone(),
            accounts.pool_state.clone(),
            accounts.platform_config.clone(),
            accounts.quote_vault.clone(),
            accounts.recipient_token_account.clone(),
            accounts.quote_mint.clone(),
            accounts.token_program.clone(),
            accounts.system_program.clone(),
            accounts.associated_token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN]>
    for ClaimPlatformFeeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            platform_fee_wallet: &arr[0],
            authority: &arr[1],
            pool_state: &arr[2],
            platform_config: &arr[3],
            quote_vault: &arr[4],
            recipient_token_account: &arr[5],
            quote_mint: &arr[6],
            token_program: &arr[7],
            system_program: &arr[8],
            associated_token_program: &arr[9],
        }
    }
}
pub const CLAIM_PLATFORM_FEE_IX_DISCM: [u8; 8] = [156, 39, 208, 135, 76, 237, 61, 72];
#[derive(Clone, Debug, PartialEq)]
pub struct ClaimPlatformFeeIxData;
impl ClaimPlatformFeeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CLAIM_PLATFORM_FEE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CLAIM_PLATFORM_FEE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CLAIM_PLATFORM_FEE_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn claim_platform_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: ClaimPlatformFeeKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CLAIM_PLATFORM_FEE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: ClaimPlatformFeeIxData.try_to_vec()?,
    })
}
pub fn claim_platform_fee_ix(keys: ClaimPlatformFeeKeys) -> std::io::Result<Instruction> {
    claim_platform_fee_ix_with_program_id(crate::ID, keys)
}
pub fn claim_platform_fee_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ClaimPlatformFeeAccounts<'_, '_>,
) -> ProgramResult {
    let keys: ClaimPlatformFeeKeys = accounts.into();
    let ix = claim_platform_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn claim_platform_fee_invoke(accounts: ClaimPlatformFeeAccounts<'_, '_>) -> ProgramResult {
    claim_platform_fee_invoke_with_program_id(crate::ID, accounts)
}
pub fn claim_platform_fee_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ClaimPlatformFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ClaimPlatformFeeKeys = accounts.into();
    let ix = claim_platform_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn claim_platform_fee_invoke_signed(
    accounts: ClaimPlatformFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    claim_platform_fee_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn claim_platform_fee_verify_account_keys(
    accounts: ClaimPlatformFeeAccounts<'_, '_>,
    keys: ClaimPlatformFeeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.platform_fee_wallet.key, keys.platform_fee_wallet),
        (*accounts.authority.key, keys.authority),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.platform_config.key, keys.platform_config),
        (*accounts.quote_vault.key, keys.quote_vault),
        (
            *accounts.recipient_token_account.key,
            keys.recipient_token_account,
        ),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.system_program.key, keys.system_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///AUTHORITY_SEED seed for authority PDA: "vault_auth_seed"
pub const AUTHORITY_SEED: &[u8] = &[
    118u8, 97u8, 117u8, 108u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 95u8, 115u8, 101u8, 101u8,
    100u8,
];
///RECIPIENT_TOKEN_ACCOUNT_SEED_1 seed for recipient_token_account PDA
pub const RECIPIENT_TOKEN_ACCOUNT_SEED_1: &[u8] = &[
    6u8, 221u8, 246u8, 225u8, 215u8, 101u8, 161u8, 147u8, 217u8, 203u8, 225u8, 70u8, 206u8, 235u8,
    121u8, 172u8, 28u8, 180u8, 133u8, 237u8, 95u8, 91u8, 55u8, 145u8, 58u8, 140u8, 245u8, 133u8,
    126u8, 255u8, 0u8, 169u8,
];
impl ClaimPlatformFeeKeys {
    ///Derive the authority PDA
    pub fn derive_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[AUTHORITY_SEED], program_id)
    }
    ///Derive the recipient_token_account PDA
    pub fn derive_recipient_token_account_pda(
        program_id: &Pubkey,
        platform_fee_wallet: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                platform_fee_wallet.as_ref(),
                RECIPIENT_TOKEN_ACCOUNT_SEED_1,
                quote_mint.as_ref(),
            ],
            program_id,
        )
    }
}
///token_program program address
pub const TOKEN_PROGRAM_ADDRESS: &str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
