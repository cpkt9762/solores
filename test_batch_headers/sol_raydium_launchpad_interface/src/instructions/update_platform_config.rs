//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Update platform config
///# Arguments
///* `ctx` - The context of accounts
///* `param` - Parameter to update
pub const UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the update_platform_config instruction
#[derive(Copy, Clone, Debug)]
pub struct UpdatePlatformConfigAccounts<'me, 'info> {
    ///The account paying for the initialization costs
    pub platform_admin: &'me AccountInfo<'info>,
    ///Platform config account to be changed
    pub platform_config: &'me AccountInfo<'info>,
}
///Public keys struct for the update_platform_config instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct UpdatePlatformConfigKeys {
    ///The account paying for the initialization costs
    pub platform_admin: Pubkey,
    ///Platform config account to be changed
    pub platform_config: Pubkey,
}
impl From<UpdatePlatformConfigAccounts<'_, '_>> for UpdatePlatformConfigKeys {
    fn from(accounts: UpdatePlatformConfigAccounts) -> Self {
        Self {
            platform_admin: *accounts.platform_admin.key,
            platform_config: *accounts.platform_config.key,
        }
    }
}
impl From<UpdatePlatformConfigKeys> for [AccountMeta; UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN] {
    fn from(keys: UpdatePlatformConfigKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.platform_admin,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.platform_config,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]> for UpdatePlatformConfigKeys {
    fn from(pubkeys: [Pubkey; UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            platform_admin: pubkeys[0],
            platform_config: pubkeys[1],
        }
    }
}
impl From<&[String]> for UpdatePlatformConfigKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            platform_admin: pubkeys[0].parse().unwrap(),
            platform_config: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<UpdatePlatformConfigAccounts<'_, 'info>>
    for [AccountInfo<'info>; UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]
{
    fn from(accounts: UpdatePlatformConfigAccounts<'_, 'info>) -> Self {
        [
            accounts.platform_admin.clone(),
            accounts.platform_config.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]>
    for UpdatePlatformConfigAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            platform_admin: &arr[0],
            platform_config: &arr[1],
        }
    }
}
pub const UPDATE_PLATFORM_CONFIG_IX_DISCM: [u8; 8] = [195, 60, 76, 129, 146, 45, 67, 143];
///Update platform config
///# Arguments
///* `ctx` - The context of accounts
///* `param` - Parameter to update
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdatePlatformConfigIxArgs {
    pub discriminator: [u8; 8],
    pub param: PlatformConfigParam,
}
impl Default for UpdatePlatformConfigIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [195u8, 60u8, 76u8, 129u8, 146u8, 45u8, 67u8, 143u8],
            param: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct UpdatePlatformConfigIxData(pub UpdatePlatformConfigIxArgs);
impl From<UpdatePlatformConfigIxArgs> for UpdatePlatformConfigIxData {
    fn from(args: UpdatePlatformConfigIxArgs) -> Self {
        Self(args)
    }
}
impl UpdatePlatformConfigIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != UPDATE_PLATFORM_CONFIG_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    UPDATE_PLATFORM_CONFIG_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(UpdatePlatformConfigIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&UPDATE_PLATFORM_CONFIG_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn update_platform_config_ix_with_program_id(
    program_id: Pubkey,
    keys: UpdatePlatformConfigKeys,
    args: UpdatePlatformConfigIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; UPDATE_PLATFORM_CONFIG_IX_ACCOUNTS_LEN] = keys.into();
    let data: UpdatePlatformConfigIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn update_platform_config_ix(
    keys: UpdatePlatformConfigKeys,
    args: UpdatePlatformConfigIxArgs,
) -> std::io::Result<Instruction> {
    update_platform_config_ix_with_program_id(crate::ID, keys, args)
}
pub fn update_platform_config_invoke_with_program_id(
    program_id: Pubkey,
    accounts: UpdatePlatformConfigAccounts<'_, '_>,
    args: UpdatePlatformConfigIxArgs,
) -> ProgramResult {
    let keys: UpdatePlatformConfigKeys = accounts.into();
    let ix = update_platform_config_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn update_platform_config_invoke(
    accounts: UpdatePlatformConfigAccounts<'_, '_>,
    args: UpdatePlatformConfigIxArgs,
) -> ProgramResult {
    update_platform_config_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn update_platform_config_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: UpdatePlatformConfigAccounts<'_, '_>,
    args: UpdatePlatformConfigIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: UpdatePlatformConfigKeys = accounts.into();
    let ix = update_platform_config_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn update_platform_config_invoke_signed(
    accounts: UpdatePlatformConfigAccounts<'_, '_>,
    args: UpdatePlatformConfigIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    update_platform_config_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn update_platform_config_verify_account_keys(
    accounts: UpdatePlatformConfigAccounts<'_, '_>,
    keys: UpdatePlatformConfigKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.platform_admin.key, keys.platform_admin),
        (*accounts.platform_config.key, keys.platform_config),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///PLATFORM_CONFIG_SEED_0 seed for platform_config PDA: "platform_config"
pub const PLATFORM_CONFIG_SEED_0: &[u8] = &[
    112u8, 108u8, 97u8, 116u8, 102u8, 111u8, 114u8, 109u8, 95u8, 99u8, 111u8, 110u8, 102u8, 105u8,
    103u8,
];
impl UpdatePlatformConfigKeys {
    ///Derive the platform_config PDA
    pub fn derive_platform_config_pda(
        program_id: &Pubkey,
        platform_admin: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[PLATFORM_CONFIG_SEED_0, platform_admin.as_ref()],
            program_id,
        )
    }
}
impl UpdatePlatformConfigIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<UpdatePlatformConfigIxArgs> for RaydiumLaunchpadProgramIx {
    fn from(args: UpdatePlatformConfigIxArgs) -> Self {
        Self::UpdatePlatformConfig(args)
    }
}
