//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Create vesting account
///# Arguments
///* `ctx` - The context of accounts
///* `share` - The share amount of base token to be vested
pub const CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN: usize = 5;
///Accounts struct for the create_vesting_account instruction
#[derive(Copy, Clone, Debug)]
pub struct CreateVestingAccountAccounts<'me, 'info> {
    ///The account paying for the initialization costs
    ///This can be any account with sufficient SOL to cover the transaction
    pub creator: &'me AccountInfo<'info>,
    pub beneficiary: &'me AccountInfo<'info>,
    ///The pool state account
    pub pool_state: &'me AccountInfo<'info>,
    ///The vesting record account
    pub vesting_record: &'me AccountInfo<'info>,
    ///Required for account creation
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the create_vesting_account instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateVestingAccountKeys {
    ///The account paying for the initialization costs
    ///This can be any account with sufficient SOL to cover the transaction
    pub creator: Pubkey,
    pub beneficiary: Pubkey,
    ///The pool state account
    pub pool_state: Pubkey,
    ///The vesting record account
    pub vesting_record: Pubkey,
    ///Required for account creation
    pub system_program: Pubkey,
}
impl From<CreateVestingAccountAccounts<'_, '_>> for CreateVestingAccountKeys {
    fn from(accounts: CreateVestingAccountAccounts) -> Self {
        Self {
            creator: *accounts.creator.key,
            beneficiary: *accounts.beneficiary.key,
            pool_state: *accounts.pool_state.key,
            vesting_record: *accounts.vesting_record.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<CreateVestingAccountKeys> for [AccountMeta; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateVestingAccountKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.creator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.beneficiary,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_state,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vesting_record,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN]> for CreateVestingAccountKeys {
    fn from(pubkeys: [Pubkey; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            creator: pubkeys[0],
            beneficiary: pubkeys[1],
            pool_state: pubkeys[2],
            vesting_record: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl From<&[String]> for CreateVestingAccountKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            creator: pubkeys[0].parse().unwrap(),
            beneficiary: pubkeys[1].parse().unwrap(),
            pool_state: pubkeys[2].parse().unwrap(),
            vesting_record: pubkeys[3].parse().unwrap(),
            system_program: pubkeys[4].parse().unwrap(),
        }
    }
}
impl<'info> From<CreateVestingAccountAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreateVestingAccountAccounts<'_, 'info>) -> Self {
        [
            accounts.creator.clone(),
            accounts.beneficiary.clone(),
            accounts.pool_state.clone(),
            accounts.vesting_record.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN]>
    for CreateVestingAccountAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            creator: &arr[0],
            beneficiary: &arr[1],
            pool_state: &arr[2],
            vesting_record: &arr[3],
            system_program: &arr[4],
        }
    }
}
pub const CREATE_VESTING_ACCOUNT_IX_DISCM: [u8; 8] = [129, 178, 2, 13, 217, 172, 230, 218];
///Create vesting account
///# Arguments
///* `ctx` - The context of accounts
///* `share` - The share amount of base token to be vested
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateVestingAccountIxArgs {
    pub discriminator: [u8; 8],
    pub share_amount: u64,
}
impl Default for CreateVestingAccountIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [129u8, 178u8, 2u8, 13u8, 217u8, 172u8, 230u8, 218u8],
            share_amount: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CreateVestingAccountIxData(pub CreateVestingAccountIxArgs);
impl From<CreateVestingAccountIxArgs> for CreateVestingAccountIxData {
    fn from(args: CreateVestingAccountIxArgs) -> Self {
        Self(args)
    }
}
impl CreateVestingAccountIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_VESTING_ACCOUNT_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_VESTING_ACCOUNT_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(CreateVestingAccountIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_VESTING_ACCOUNT_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_vesting_account_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateVestingAccountKeys,
    args: CreateVestingAccountIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_VESTING_ACCOUNT_IX_ACCOUNTS_LEN] = keys.into();
    let data: CreateVestingAccountIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn create_vesting_account_ix(
    keys: CreateVestingAccountKeys,
    args: CreateVestingAccountIxArgs,
) -> std::io::Result<Instruction> {
    create_vesting_account_ix_with_program_id(crate::ID, keys, args)
}
pub fn create_vesting_account_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreateVestingAccountAccounts<'_, '_>,
    args: CreateVestingAccountIxArgs,
) -> ProgramResult {
    let keys: CreateVestingAccountKeys = accounts.into();
    let ix = create_vesting_account_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_vesting_account_invoke(
    accounts: CreateVestingAccountAccounts<'_, '_>,
    args: CreateVestingAccountIxArgs,
) -> ProgramResult {
    create_vesting_account_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn create_vesting_account_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreateVestingAccountAccounts<'_, '_>,
    args: CreateVestingAccountIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreateVestingAccountKeys = accounts.into();
    let ix = create_vesting_account_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_vesting_account_invoke_signed(
    accounts: CreateVestingAccountAccounts<'_, '_>,
    args: CreateVestingAccountIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_vesting_account_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn create_vesting_account_verify_account_keys(
    accounts: CreateVestingAccountAccounts<'_, '_>,
    keys: CreateVestingAccountKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.creator.key, keys.creator),
        (*accounts.beneficiary.key, keys.beneficiary),
        (*accounts.pool_state.key, keys.pool_state),
        (*accounts.vesting_record.key, keys.vesting_record),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///VESTING_RECORD_SEED_0 seed for vesting_record PDA: "pool_vesting"
pub const VESTING_RECORD_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 118u8, 101u8, 115u8, 116u8, 105u8, 110u8, 103u8,
];
impl CreateVestingAccountKeys {
    ///Derive the vesting_record PDA
    pub fn derive_vesting_record_pda(
        program_id: &Pubkey,
        pool_state: &Pubkey,
        beneficiary: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                VESTING_RECORD_SEED_0,
                pool_state.as_ref(),
                beneficiary.as_ref(),
            ],
            program_id,
        )
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
impl CreateVestingAccountIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CreateVestingAccountIxArgs> for RaydiumLaunchpadProgramIx {
    fn from(args: CreateVestingAccountIxArgs) -> Self {
        Self::CreateVestingAccount(args)
    }
}
