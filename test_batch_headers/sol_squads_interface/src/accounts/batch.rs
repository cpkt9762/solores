//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Stores data required for serial execution of a batch of multisig vault transactions.
///Vault transaction is a transaction that's executed on behalf of the multisig vault PDA
///and wraps arbitrary Solana instructions, typically calling into other Solana programs.
///The transactions themselves are stored in separate PDAs associated with the this account.
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Batch {
    ///The multisig this belongs to.
    pub multisig: Pubkey,
    ///Member of the Multisig who submitted the batch.
    pub creator: Pubkey,
    ///Index of this batch within the multisig transactions.
    pub index: u64,
    ///PDA bump.
    pub bump: u8,
    ///Index of the vault this batch belongs to.
    pub vault_index: u8,
    ///Derivation bump of the vault PDA this batch belongs to.
    pub vault_bump: u8,
    ///Number of transactions in the batch.
    pub size: u32,
    ///Index of the last executed transaction within the batch.
    ///0 means that no transactions have been executed yet.
    pub executed_transaction_index: u32,
}
impl Default for Batch {
    fn default() -> Self {
        Self {
            multisig: Pubkey::default(),
            creator: Pubkey::default(),
            index: Default::default(),
            bump: Default::default(),
            vault_index: Default::default(),
            vault_bump: Default::default(),
            size: Default::default(),
            executed_transaction_index: Default::default(),
        }
    }
}
impl Batch {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
