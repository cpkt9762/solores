//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Stores data required for execution of one transaction from a batch.
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct VaultBatchTransaction {
    ///PDA bump.
    pub bump: u8,
    ///Derivation bumps for additional signers.
    ///Some transactions require multiple signers. Often these additional signers are "ephemeral" keypairs
    ///that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.
    ///When wrapping such transactions into multisig ones, we replace these "ephemeral" signing keypairs
    ///with PDAs derived from the transaction's `transaction_index` and controlled by the Multisig Program;
    ///during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,
    ///thus "signing" on behalf of these PDAs.
    pub ephemeral_signer_bumps: Vec<u8>,
    ///data required for executing the transaction.
    pub message: VaultTransactionMessage,
}
impl Default for VaultBatchTransaction {
    fn default() -> Self {
        Self {
            bump: Default::default(),
            ephemeral_signer_bumps: Default::default(),
            message: Default::default(),
        }
    }
}
impl VaultBatchTransaction {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
