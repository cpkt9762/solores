//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Multisig {
    ///Key that is used to seed the multisig PDA.
    pub create_key: Pubkey,
    ///The authority that can change the multisig config.
    ///This is a very important parameter as this authority can change the members and threshold.
    ///The convention is to set this to `Pubkey::default()`.
    ///In this case, the multisig becomes autonomous, so every config change goes through
    ///the normal process of voting by the members.
    ///However, if this parameter is set to any other key, all the config changes for this multisig
    ///will need to be signed by the `config_authority`. We call such a multisig a "controlled multisig".
    pub config_authority: Pubkey,
    ///Threshold for signatures.
    pub threshold: u16,
    ///How many seconds must pass between transaction voting settlement and execution.
    pub time_lock: u32,
    ///Last transaction index. 0 means no transactions have been created.
    pub transaction_index: u64,
    ///Last stale transaction index. All transactions up until this index are stale.
    ///This index is updated when multisig config (members/threshold/time_lock) changes.
    pub stale_transaction_index: u64,
    ///The address where the rent for the accounts related to executed, rejected, or cancelled
    ///transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
    pub rent_collector: Option<Pubkey>,
    ///Bump for the multisig PDA seed.
    pub bump: u8,
    ///Members of the multisig.
    pub members: Vec<Member>,
}
impl Default for Multisig {
    fn default() -> Self {
        Self {
            create_key: Pubkey::default(),
            config_authority: Pubkey::default(),
            threshold: Default::default(),
            time_lock: Default::default(),
            transaction_index: Default::default(),
            stale_transaction_index: Default::default(),
            rent_collector: None,
            bump: Default::default(),
            members: Vec::new(),
        }
    }
}
impl Multisig {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
