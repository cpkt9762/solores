//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SpendingLimit {
    ///The multisig this belongs to.
    pub multisig: Pubkey,
    ///Key that is used to seed the SpendingLimit PDA.
    pub create_key: Pubkey,
    ///The index of the vault that the spending limit is for.
    pub vault_index: u8,
    ///The token mint the spending limit is for.
    ///Pubkey::default() means SOL.
    ///use NATIVE_MINT for Wrapped SOL.
    pub mint: Pubkey,
    ///The amount of tokens that can be spent in a period.
    ///This amount is in decimals of the mint,
    ///so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
    pub amount: u64,
    ///The reset period of the spending limit.
    ///When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
    pub period: Period,
    ///The remaining amount of tokens that can be spent in the current period.
    ///When reaches 0, the spending limit cannot be used anymore until the period reset.
    pub remaining_amount: u64,
    ///Unix timestamp marking the last time the spending limit was reset (or created).
    pub last_reset: i64,
    ///PDA bump.
    pub bump: u8,
    ///Members of the multisig that can use the spending limit.
    ///In case a member is removed from the multisig, the spending limit will remain existent
    ///(until explicitly deleted), but the removed member will not be able to use it anymore.
    pub members: Vec<Pubkey>,
    ///The destination addresses the spending limit is allowed to sent funds to.
    ///If empty, funds can be sent to any address.
    pub destinations: Vec<Pubkey>,
}
impl Default for SpendingLimit {
    fn default() -> Self {
        Self {
            multisig: Pubkey::default(),
            create_key: Pubkey::default(),
            vault_index: Default::default(),
            mint: Pubkey::default(),
            amount: Default::default(),
            period: Default::default(),
            remaining_amount: Default::default(),
            last_reset: Default::default(),
            bump: Default::default(),
            members: Vec::new(),
            destinations: Vec::new(),
        }
    }
}
impl SpendingLimit {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
