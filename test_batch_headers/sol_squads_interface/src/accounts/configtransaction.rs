//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Stores data required for execution of a multisig configuration transaction.
///Config transaction can perform a predefined set of actions on the Multisig PDA, such as adding/removing members,
///changing the threshold, etc.
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigTransaction {
    ///The multisig this belongs to.
    pub multisig: Pubkey,
    ///Member of the Multisig who submitted the transaction.
    pub creator: Pubkey,
    ///Index of this transaction within the multisig.
    pub index: u64,
    ///bump for the transaction seeds.
    pub bump: u8,
    ///Action to be performed on the multisig.
    pub actions: Vec<ConfigAction>,
}
impl Default for ConfigTransaction {
    fn default() -> Self {
        Self {
            multisig: Pubkey::default(),
            creator: Pubkey::default(),
            index: Default::default(),
            bump: Default::default(),
            actions: Vec::new(),
        }
    }
}
impl ConfigTransaction {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
