//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Stores the data required for tracking the status of a multisig proposal.
///Each `Proposal` has a 1:1 association with a transaction account, e.g. a `VaultTransaction` or a `ConfigTransaction`;
///the latter can be executed only after the `Proposal` has been approved and its time lock is released.
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Proposal {
    ///The multisig this belongs to.
    pub multisig: Pubkey,
    ///Index of the multisig transaction this proposal is associated with.
    pub transaction_index: u64,
    ///The status of the transaction.
    pub status: ProposalStatus,
    ///PDA bump.
    pub bump: u8,
    ///Keys that have approved/signed.
    pub approved: Vec<Pubkey>,
    ///Keys that have rejected.
    pub rejected: Vec<Pubkey>,
    ///Keys that have cancelled (Approved only).
    pub cancelled: Vec<Pubkey>,
}
impl Default for Proposal {
    fn default() -> Self {
        Self {
            multisig: Pubkey::default(),
            transaction_index: Default::default(),
            status: Default::default(),
            bump: Default::default(),
            approved: Vec::new(),
            rejected: Vec::new(),
            cancelled: Vec::new(),
        }
    }
}
impl Proposal {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
