//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::Member;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MultisigCreateArgs {
    ///The authority that can configure the multisig: add/remove members, change the threshold, etc.
    ///Should be set to `None` for autonomous multisigs.
    pub config_authority: Option<Pubkey>,
    ///The number of signatures required to execute a transaction.
    pub threshold: u16,
    ///The members of the multisig.
    pub members: Vec<Member>,
    ///How many seconds must pass between transaction voting, settlement, and execution.
    pub time_lock: u32,
    ///Memo is used for indexing only.
    pub memo: Option<String>,
}
impl Default for MultisigCreateArgs {
    fn default() -> Self {
        Self {
            config_authority: None,
            threshold: Default::default(),
            members: Vec::new(),
            time_lock: Default::default(),
            memo: None,
        }
    }
}
