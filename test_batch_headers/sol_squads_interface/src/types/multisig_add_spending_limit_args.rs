//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::Period;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MultisigAddSpendingLimitArgs {
    ///Key that is used to seed the SpendingLimit PDA.
    pub create_key: Pubkey,
    ///The index of the vault that the spending limit is for.
    pub vault_index: u8,
    ///The token mint the spending limit is for.
    pub mint: Pubkey,
    ///The amount of tokens that can be spent in a period.
    ///This amount is in decimals of the mint,
    ///so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
    pub amount: u64,
    ///The reset period of the spending limit.
    ///When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
    pub period: Period,
    ///Members of the multisig that can use the spending limit.
    ///In case a member is removed from the multisig, the spending limit will remain existent
    ///(until explicitly deleted), but the removed member will not be able to use it anymore.
    pub members: Vec<Pubkey>,
    ///The destination addresses the spending limit is allowed to sent funds to.
    ///If empty, funds can be sent to any address.
    pub destinations: Vec<Pubkey>,
    ///Memo is used for indexing only.
    pub memo: Option<String>,
}
impl Default for MultisigAddSpendingLimitArgs {
    fn default() -> Self {
        Self {
            create_key: Pubkey::default(),
            vault_index: Default::default(),
            mint: Pubkey::default(),
            amount: Default::default(),
            period: Default::default(),
            members: Vec::new(),
            destinations: Vec::new(),
            memo: None,
        }
    }
}
