//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Create a new vault transaction.
pub const VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN: usize = 5;
///Accounts struct for the vaultTransactionCreate instruction
#[derive(Copy, Clone, Debug)]
pub struct VaultTransactionCreateAccounts<'me, 'info> {
    pub multisig: &'me AccountInfo<'info>,
    pub transaction: &'me AccountInfo<'info>,
    ///The member of the multisig that is creating the transaction.
    pub creator: &'me AccountInfo<'info>,
    ///The payer for the transaction account rent.
    pub rent_payer: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the vaultTransactionCreate instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct VaultTransactionCreateKeys {
    pub multisig: Pubkey,
    pub transaction: Pubkey,
    ///The member of the multisig that is creating the transaction.
    pub creator: Pubkey,
    ///The payer for the transaction account rent.
    pub rent_payer: Pubkey,
    pub system_program: Pubkey,
}
impl From<VaultTransactionCreateAccounts<'_, '_>> for VaultTransactionCreateKeys {
    fn from(accounts: VaultTransactionCreateAccounts) -> Self {
        Self {
            multisig: *accounts.multisig.key,
            transaction: *accounts.transaction.key,
            creator: *accounts.creator.key,
            rent_payer: *accounts.rent_payer.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<VaultTransactionCreateKeys> for [AccountMeta; VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN] {
    fn from(keys: VaultTransactionCreateKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.multisig,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.transaction,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.creator,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent_payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN]> for VaultTransactionCreateKeys {
    fn from(pubkeys: [Pubkey; VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            multisig: pubkeys[0],
            transaction: pubkeys[1],
            creator: pubkeys[2],
            rent_payer: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl From<&[String]> for VaultTransactionCreateKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            multisig: pubkeys[0].parse().unwrap(),
            transaction: pubkeys[1].parse().unwrap(),
            creator: pubkeys[2].parse().unwrap(),
            rent_payer: pubkeys[3].parse().unwrap(),
            system_program: pubkeys[4].parse().unwrap(),
        }
    }
}
impl<'info> From<VaultTransactionCreateAccounts<'_, 'info>>
    for [AccountInfo<'info>; VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: VaultTransactionCreateAccounts<'_, 'info>) -> Self {
        [
            accounts.multisig.clone(),
            accounts.transaction.clone(),
            accounts.creator.clone(),
            accounts.rent_payer.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN]>
    for VaultTransactionCreateAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            multisig: &arr[0],
            transaction: &arr[1],
            creator: &arr[2],
            rent_payer: &arr[3],
            system_program: &arr[4],
        }
    }
}
pub const VAULT_TRANSACTION_CREATE_IX_DISCM: u8 = 16u8;
///Create a new vault transaction.
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct VaultTransactionCreateIxArgs {
    pub discriminator: u8,
    pub args: VaultTransactionCreateArgs,
}
impl Default for VaultTransactionCreateIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 16u8,
            args: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct VaultTransactionCreateIxData(pub VaultTransactionCreateIxArgs);
impl From<VaultTransactionCreateIxArgs> for VaultTransactionCreateIxData {
    fn from(args: VaultTransactionCreateIxArgs) -> Self {
        Self(args)
    }
}
impl VaultTransactionCreateIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != VAULT_TRANSACTION_CREATE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    VAULT_TRANSACTION_CREATE_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(VaultTransactionCreateIxArgs::deserialize(
            &mut reader,
        )?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[VAULT_TRANSACTION_CREATE_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn vault_transaction_create_ix_with_program_id(
    program_id: Pubkey,
    keys: VaultTransactionCreateKeys,
    args: VaultTransactionCreateIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; VAULT_TRANSACTION_CREATE_IX_ACCOUNTS_LEN] = keys.into();
    let data: VaultTransactionCreateIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn vault_transaction_create_ix(
    keys: VaultTransactionCreateKeys,
    args: VaultTransactionCreateIxArgs,
) -> std::io::Result<Instruction> {
    vault_transaction_create_ix_with_program_id(crate::ID, keys, args)
}
pub fn vault_transaction_create_invoke_with_program_id(
    program_id: Pubkey,
    accounts: VaultTransactionCreateAccounts<'_, '_>,
    args: VaultTransactionCreateIxArgs,
) -> ProgramResult {
    let keys: VaultTransactionCreateKeys = accounts.into();
    let ix = vault_transaction_create_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn vault_transaction_create_invoke(
    accounts: VaultTransactionCreateAccounts<'_, '_>,
    args: VaultTransactionCreateIxArgs,
) -> ProgramResult {
    vault_transaction_create_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn vault_transaction_create_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: VaultTransactionCreateAccounts<'_, '_>,
    args: VaultTransactionCreateIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: VaultTransactionCreateKeys = accounts.into();
    let ix = vault_transaction_create_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn vault_transaction_create_invoke_signed(
    accounts: VaultTransactionCreateAccounts<'_, '_>,
    args: VaultTransactionCreateIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    vault_transaction_create_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn vault_transaction_create_verify_account_keys(
    accounts: VaultTransactionCreateAccounts<'_, '_>,
    keys: VaultTransactionCreateKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.multisig.key, keys.multisig),
        (*accounts.transaction.key, keys.transaction),
        (*accounts.creator.key, keys.creator),
        (*accounts.rent_payer.key, keys.rent_payer),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl VaultTransactionCreateIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<VaultTransactionCreateIxArgs> for SquadsProgramIx {
    fn from(args: VaultTransactionCreateIxArgs) -> Self {
        Self::VaultTransactionCreate(args)
    }
}
