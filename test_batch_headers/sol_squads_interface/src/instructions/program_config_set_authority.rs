//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Set the `authority` parameter of the program config.
pub const PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the programConfigSetAuthority instruction
#[derive(Copy, Clone, Debug)]
pub struct ProgramConfigSetAuthorityAccounts<'me, 'info> {
    pub program_config: &'me AccountInfo<'info>,
    pub authority: &'me AccountInfo<'info>,
}
///Public keys struct for the programConfigSetAuthority instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ProgramConfigSetAuthorityKeys {
    pub program_config: Pubkey,
    pub authority: Pubkey,
}
impl From<ProgramConfigSetAuthorityAccounts<'_, '_>> for ProgramConfigSetAuthorityKeys {
    fn from(accounts: ProgramConfigSetAuthorityAccounts) -> Self {
        Self {
            program_config: *accounts.program_config.key,
            authority: *accounts.authority.key,
        }
    }
}
impl From<ProgramConfigSetAuthorityKeys>
    for [AccountMeta; PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN]
{
    fn from(keys: ProgramConfigSetAuthorityKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.program_config,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: true,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN]>
    for ProgramConfigSetAuthorityKeys
{
    fn from(pubkeys: [Pubkey; PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            program_config: pubkeys[0],
            authority: pubkeys[1],
        }
    }
}
impl From<&[String]> for ProgramConfigSetAuthorityKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            program_config: pubkeys[0].parse().unwrap(),
            authority: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<ProgramConfigSetAuthorityAccounts<'_, 'info>>
    for [AccountInfo<'info>; PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ProgramConfigSetAuthorityAccounts<'_, 'info>) -> Self {
        [accounts.program_config.clone(), accounts.authority.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN]>
    for ProgramConfigSetAuthorityAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            program_config: &arr[0],
            authority: &arr[1],
        }
    }
}
pub const PROGRAM_CONFIG_SET_AUTHORITY_IX_DISCM: u8 = 1u8;
///Set the `authority` parameter of the program config.
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ProgramConfigSetAuthorityIxArgs {
    pub discriminator: u8,
    pub args: ProgramConfigSetAuthorityArgs,
}
impl Default for ProgramConfigSetAuthorityIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 1u8,
            args: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct ProgramConfigSetAuthorityIxData(pub ProgramConfigSetAuthorityIxArgs);
impl From<ProgramConfigSetAuthorityIxArgs> for ProgramConfigSetAuthorityIxData {
    fn from(args: ProgramConfigSetAuthorityIxArgs) -> Self {
        Self(args)
    }
}
impl ProgramConfigSetAuthorityIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != PROGRAM_CONFIG_SET_AUTHORITY_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    PROGRAM_CONFIG_SET_AUTHORITY_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(ProgramConfigSetAuthorityIxArgs::deserialize(
            &mut reader,
        )?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[PROGRAM_CONFIG_SET_AUTHORITY_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn program_config_set_authority_ix_with_program_id(
    program_id: Pubkey,
    keys: ProgramConfigSetAuthorityKeys,
    args: ProgramConfigSetAuthorityIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; PROGRAM_CONFIG_SET_AUTHORITY_IX_ACCOUNTS_LEN] = keys.into();
    let data: ProgramConfigSetAuthorityIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn program_config_set_authority_ix(
    keys: ProgramConfigSetAuthorityKeys,
    args: ProgramConfigSetAuthorityIxArgs,
) -> std::io::Result<Instruction> {
    program_config_set_authority_ix_with_program_id(crate::ID, keys, args)
}
pub fn program_config_set_authority_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ProgramConfigSetAuthorityAccounts<'_, '_>,
    args: ProgramConfigSetAuthorityIxArgs,
) -> ProgramResult {
    let keys: ProgramConfigSetAuthorityKeys = accounts.into();
    let ix = program_config_set_authority_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn program_config_set_authority_invoke(
    accounts: ProgramConfigSetAuthorityAccounts<'_, '_>,
    args: ProgramConfigSetAuthorityIxArgs,
) -> ProgramResult {
    program_config_set_authority_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn program_config_set_authority_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ProgramConfigSetAuthorityAccounts<'_, '_>,
    args: ProgramConfigSetAuthorityIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ProgramConfigSetAuthorityKeys = accounts.into();
    let ix = program_config_set_authority_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn program_config_set_authority_invoke_signed(
    accounts: ProgramConfigSetAuthorityAccounts<'_, '_>,
    args: ProgramConfigSetAuthorityIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    program_config_set_authority_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn program_config_set_authority_verify_account_keys(
    accounts: ProgramConfigSetAuthorityAccounts<'_, '_>,
    keys: ProgramConfigSetAuthorityKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.program_config.key, keys.program_config),
        (*accounts.authority.key, keys.authority),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl ProgramConfigSetAuthorityIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<ProgramConfigSetAuthorityIxArgs> for SquadsProgramIx {
    fn from(args: ProgramConfigSetAuthorityIxArgs) -> Self {
        Self::ProgramConfigSetAuthority(args)
    }
}
