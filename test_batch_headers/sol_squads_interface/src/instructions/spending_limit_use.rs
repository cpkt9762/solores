//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Use a spending limit to transfer tokens from a multisig vault to a destination account.
pub const SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN: usize = 10;
///Accounts struct for the spendingLimitUse instruction
#[derive(Copy, Clone, Debug)]
pub struct SpendingLimitUseAccounts<'me, 'info> {
    ///The multisig account the `spending_limit` is for.
    pub multisig: &'me AccountInfo<'info>,
    pub member: &'me AccountInfo<'info>,
    ///The SpendingLimit account to use.
    pub spending_limit: &'me AccountInfo<'info>,
    ///Multisig vault account to transfer tokens from.
    pub vault: &'me AccountInfo<'info>,
    ///Destination account to transfer tokens to.
    pub destination: &'me AccountInfo<'info>,
    ///In case `spending_limit.mint` is SOL.
    pub system_program: &'me AccountInfo<'info>,
    ///The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.
    pub mint: &'me AccountInfo<'info>,
    ///Multisig vault token account to transfer tokens from in case `spending_limit.mint` is an SPL token.
    pub vault_token_account: &'me AccountInfo<'info>,
    ///Destination token account in case `spending_limit.mint` is an SPL token.
    pub destination_token_account: &'me AccountInfo<'info>,
    ///In case `spending_limit.mint` is an SPL token.
    pub token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the spendingLimitUse instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SpendingLimitUseKeys {
    ///The multisig account the `spending_limit` is for.
    pub multisig: Pubkey,
    pub member: Pubkey,
    ///The SpendingLimit account to use.
    pub spending_limit: Pubkey,
    ///Multisig vault account to transfer tokens from.
    pub vault: Pubkey,
    ///Destination account to transfer tokens to.
    pub destination: Pubkey,
    ///In case `spending_limit.mint` is SOL.
    pub system_program: Pubkey,
    ///The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.
    pub mint: Pubkey,
    ///Multisig vault token account to transfer tokens from in case `spending_limit.mint` is an SPL token.
    pub vault_token_account: Pubkey,
    ///Destination token account in case `spending_limit.mint` is an SPL token.
    pub destination_token_account: Pubkey,
    ///In case `spending_limit.mint` is an SPL token.
    pub token_program: Pubkey,
}
impl From<SpendingLimitUseAccounts<'_, '_>> for SpendingLimitUseKeys {
    fn from(accounts: SpendingLimitUseAccounts) -> Self {
        Self {
            multisig: *accounts.multisig.key,
            member: *accounts.member.key,
            spending_limit: *accounts.spending_limit.key,
            vault: *accounts.vault.key,
            destination: *accounts.destination.key,
            system_program: *accounts.system_program.key,
            mint: *accounts.mint.key,
            vault_token_account: *accounts.vault_token_account.key,
            destination_token_account: *accounts.destination_token_account.key,
            token_program: *accounts.token_program.key,
        }
    }
}
impl From<SpendingLimitUseKeys> for [AccountMeta; SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN] {
    fn from(keys: SpendingLimitUseKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.multisig,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.member,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.spending_limit,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vault,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.destination,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.destination_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN]> for SpendingLimitUseKeys {
    fn from(pubkeys: [Pubkey; SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            multisig: pubkeys[0],
            member: pubkeys[1],
            spending_limit: pubkeys[2],
            vault: pubkeys[3],
            destination: pubkeys[4],
            system_program: pubkeys[5],
            mint: pubkeys[6],
            vault_token_account: pubkeys[7],
            destination_token_account: pubkeys[8],
            token_program: pubkeys[9],
        }
    }
}
impl From<&[String]> for SpendingLimitUseKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            multisig: pubkeys[0].parse().unwrap(),
            member: pubkeys[1].parse().unwrap(),
            spending_limit: pubkeys[2].parse().unwrap(),
            vault: pubkeys[3].parse().unwrap(),
            destination: pubkeys[4].parse().unwrap(),
            system_program: pubkeys[5].parse().unwrap(),
            mint: pubkeys[6].parse().unwrap(),
            vault_token_account: pubkeys[7].parse().unwrap(),
            destination_token_account: pubkeys[8].parse().unwrap(),
            token_program: pubkeys[9].parse().unwrap(),
        }
    }
}
impl<'info> From<SpendingLimitUseAccounts<'_, 'info>>
    for [AccountInfo<'info>; SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: SpendingLimitUseAccounts<'_, 'info>) -> Self {
        [
            accounts.multisig.clone(),
            accounts.member.clone(),
            accounts.spending_limit.clone(),
            accounts.vault.clone(),
            accounts.destination.clone(),
            accounts.system_program.clone(),
            accounts.mint.clone(),
            accounts.vault_token_account.clone(),
            accounts.destination_token_account.clone(),
            accounts.token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN]>
    for SpendingLimitUseAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            multisig: &arr[0],
            member: &arr[1],
            spending_limit: &arr[2],
            vault: &arr[3],
            destination: &arr[4],
            system_program: &arr[5],
            mint: &arr[6],
            vault_token_account: &arr[7],
            destination_token_account: &arr[8],
            token_program: &arr[9],
        }
    }
}
pub const SPENDING_LIMIT_USE_IX_DISCM: u8 = 26u8;
///Use a spending limit to transfer tokens from a multisig vault to a destination account.
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SpendingLimitUseIxArgs {
    pub discriminator: u8,
    pub args: SpendingLimitUseArgs,
}
impl Default for SpendingLimitUseIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 26u8,
            args: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct SpendingLimitUseIxData(pub SpendingLimitUseIxArgs);
impl From<SpendingLimitUseIxArgs> for SpendingLimitUseIxData {
    fn from(args: SpendingLimitUseIxArgs) -> Self {
        Self(args)
    }
}
impl SpendingLimitUseIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != SPENDING_LIMIT_USE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    SPENDING_LIMIT_USE_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(SpendingLimitUseIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[SPENDING_LIMIT_USE_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn spending_limit_use_ix_with_program_id(
    program_id: Pubkey,
    keys: SpendingLimitUseKeys,
    args: SpendingLimitUseIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SPENDING_LIMIT_USE_IX_ACCOUNTS_LEN] = keys.into();
    let data: SpendingLimitUseIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn spending_limit_use_ix(
    keys: SpendingLimitUseKeys,
    args: SpendingLimitUseIxArgs,
) -> std::io::Result<Instruction> {
    spending_limit_use_ix_with_program_id(crate::ID, keys, args)
}
pub fn spending_limit_use_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SpendingLimitUseAccounts<'_, '_>,
    args: SpendingLimitUseIxArgs,
) -> ProgramResult {
    let keys: SpendingLimitUseKeys = accounts.into();
    let ix = spending_limit_use_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn spending_limit_use_invoke(
    accounts: SpendingLimitUseAccounts<'_, '_>,
    args: SpendingLimitUseIxArgs,
) -> ProgramResult {
    spending_limit_use_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn spending_limit_use_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SpendingLimitUseAccounts<'_, '_>,
    args: SpendingLimitUseIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SpendingLimitUseKeys = accounts.into();
    let ix = spending_limit_use_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn spending_limit_use_invoke_signed(
    accounts: SpendingLimitUseAccounts<'_, '_>,
    args: SpendingLimitUseIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    spending_limit_use_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn spending_limit_use_verify_account_keys(
    accounts: SpendingLimitUseAccounts<'_, '_>,
    keys: SpendingLimitUseKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.multisig.key, keys.multisig),
        (*accounts.member.key, keys.member),
        (*accounts.spending_limit.key, keys.spending_limit),
        (*accounts.vault.key, keys.vault),
        (*accounts.destination.key, keys.destination),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.mint.key, keys.mint),
        (*accounts.vault_token_account.key, keys.vault_token_account),
        (
            *accounts.destination_token_account.key,
            keys.destination_token_account,
        ),
        (*accounts.token_program.key, keys.token_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl SpendingLimitUseIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<SpendingLimitUseIxArgs> for SquadsProgramIx {
    fn from(args: SpendingLimitUseIxArgs) -> Self {
        Self::SpendingLimitUse(args)
    }
}
