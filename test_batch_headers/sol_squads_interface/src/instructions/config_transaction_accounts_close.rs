//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Closes a `ConfigTransaction` and the corresponding `Proposal`.
///`transaction` can be closed if either:
///- the `proposal` is in a terminal state: `Executed`, `Rejected`, or `Cancelled`.
///- the `proposal` is stale.
pub const CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN: usize = 5;
///Accounts struct for the configTransactionAccountsClose instruction
#[derive(Copy, Clone, Debug)]
pub struct ConfigTransactionAccountsCloseAccounts<'me, 'info> {
    pub multisig: &'me AccountInfo<'info>,
    pub proposal: &'me AccountInfo<'info>,
    ///ConfigTransaction corresponding to the `proposal`.
    pub transaction: &'me AccountInfo<'info>,
    ///The rent collector.
    pub rent_collector: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the configTransactionAccountsClose instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ConfigTransactionAccountsCloseKeys {
    pub multisig: Pubkey,
    pub proposal: Pubkey,
    ///ConfigTransaction corresponding to the `proposal`.
    pub transaction: Pubkey,
    ///The rent collector.
    pub rent_collector: Pubkey,
    pub system_program: Pubkey,
}
impl From<ConfigTransactionAccountsCloseAccounts<'_, '_>> for ConfigTransactionAccountsCloseKeys {
    fn from(accounts: ConfigTransactionAccountsCloseAccounts) -> Self {
        Self {
            multisig: *accounts.multisig.key,
            proposal: *accounts.proposal.key,
            transaction: *accounts.transaction.key,
            rent_collector: *accounts.rent_collector.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<ConfigTransactionAccountsCloseKeys>
    for [AccountMeta; CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN]
{
    fn from(keys: ConfigTransactionAccountsCloseKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.multisig,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.proposal,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.transaction,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.rent_collector,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN]>
    for ConfigTransactionAccountsCloseKeys
{
    fn from(pubkeys: [Pubkey; CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            multisig: pubkeys[0],
            proposal: pubkeys[1],
            transaction: pubkeys[2],
            rent_collector: pubkeys[3],
            system_program: pubkeys[4],
        }
    }
}
impl From<&[String]> for ConfigTransactionAccountsCloseKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            multisig: pubkeys[0].parse().unwrap(),
            proposal: pubkeys[1].parse().unwrap(),
            transaction: pubkeys[2].parse().unwrap(),
            rent_collector: pubkeys[3].parse().unwrap(),
            system_program: pubkeys[4].parse().unwrap(),
        }
    }
}
impl<'info> From<ConfigTransactionAccountsCloseAccounts<'_, 'info>>
    for [AccountInfo<'info>; CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ConfigTransactionAccountsCloseAccounts<'_, 'info>) -> Self {
        [
            accounts.multisig.clone(),
            accounts.proposal.clone(),
            accounts.transaction.clone(),
            accounts.rent_collector.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN]>
    for ConfigTransactionAccountsCloseAccounts<'me, 'info>
{
    fn from(
        arr: &'me [AccountInfo<'info>; CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN],
    ) -> Self {
        Self {
            multisig: &arr[0],
            proposal: &arr[1],
            transaction: &arr[2],
            rent_collector: &arr[3],
            system_program: &arr[4],
        }
    }
}
pub const CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_DISCM: u8 = 27u8;
#[derive(Clone, Debug, PartialEq)]
pub struct ConfigTransactionAccountsCloseIxData;
impl ConfigTransactionAccountsCloseIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn config_transaction_accounts_close_ix_with_program_id(
    program_id: Pubkey,
    keys: ConfigTransactionAccountsCloseKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CONFIG_TRANSACTION_ACCOUNTS_CLOSE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: ConfigTransactionAccountsCloseIxData.try_to_vec()?,
    })
}
pub fn config_transaction_accounts_close_ix(
    keys: ConfigTransactionAccountsCloseKeys,
) -> std::io::Result<Instruction> {
    config_transaction_accounts_close_ix_with_program_id(crate::ID, keys)
}
pub fn config_transaction_accounts_close_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ConfigTransactionAccountsCloseAccounts<'_, '_>,
) -> ProgramResult {
    let keys: ConfigTransactionAccountsCloseKeys = accounts.into();
    let ix = config_transaction_accounts_close_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn config_transaction_accounts_close_invoke(
    accounts: ConfigTransactionAccountsCloseAccounts<'_, '_>,
) -> ProgramResult {
    config_transaction_accounts_close_invoke_with_program_id(crate::ID, accounts)
}
pub fn config_transaction_accounts_close_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ConfigTransactionAccountsCloseAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ConfigTransactionAccountsCloseKeys = accounts.into();
    let ix = config_transaction_accounts_close_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn config_transaction_accounts_close_invoke_signed(
    accounts: ConfigTransactionAccountsCloseAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    config_transaction_accounts_close_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn config_transaction_accounts_close_verify_account_keys(
    accounts: ConfigTransactionAccountsCloseAccounts<'_, '_>,
    keys: ConfigTransactionAccountsCloseKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.multisig.key, keys.multisig),
        (*accounts.proposal.key, keys.proposal),
        (*accounts.transaction.key, keys.transaction),
        (*accounts.rent_collector.key, keys.rent_collector),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
