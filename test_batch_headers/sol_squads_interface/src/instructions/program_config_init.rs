//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Initialize the program config.
pub const PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN: usize = 3;
///Accounts struct for the programConfigInit instruction
#[derive(Copy, Clone, Debug)]
pub struct ProgramConfigInitAccounts<'me, 'info> {
    pub program_config: &'me AccountInfo<'info>,
    ///The hard-coded account that is used to initialize the program config once.
    pub initializer: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the programConfigInit instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ProgramConfigInitKeys {
    pub program_config: Pubkey,
    ///The hard-coded account that is used to initialize the program config once.
    pub initializer: Pubkey,
    pub system_program: Pubkey,
}
impl From<ProgramConfigInitAccounts<'_, '_>> for ProgramConfigInitKeys {
    fn from(accounts: ProgramConfigInitAccounts) -> Self {
        Self {
            program_config: *accounts.program_config.key,
            initializer: *accounts.initializer.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<ProgramConfigInitKeys> for [AccountMeta; PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN] {
    fn from(keys: ProgramConfigInitKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.program_config,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.initializer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN]> for ProgramConfigInitKeys {
    fn from(pubkeys: [Pubkey; PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            program_config: pubkeys[0],
            initializer: pubkeys[1],
            system_program: pubkeys[2],
        }
    }
}
impl From<&[String]> for ProgramConfigInitKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            program_config: pubkeys[0].parse().unwrap(),
            initializer: pubkeys[1].parse().unwrap(),
            system_program: pubkeys[2].parse().unwrap(),
        }
    }
}
impl<'info> From<ProgramConfigInitAccounts<'_, 'info>>
    for [AccountInfo<'info>; PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ProgramConfigInitAccounts<'_, 'info>) -> Self {
        [
            accounts.program_config.clone(),
            accounts.initializer.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN]>
    for ProgramConfigInitAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            program_config: &arr[0],
            initializer: &arr[1],
            system_program: &arr[2],
        }
    }
}
pub const PROGRAM_CONFIG_INIT_IX_DISCM: u8 = 0u8;
///Initialize the program config.
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ProgramConfigInitIxArgs {
    pub discriminator: u8,
    pub args: ProgramConfigInitArgs,
}
impl Default for ProgramConfigInitIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 0u8,
            args: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct ProgramConfigInitIxData(pub ProgramConfigInitIxArgs);
impl From<ProgramConfigInitIxArgs> for ProgramConfigInitIxData {
    fn from(args: ProgramConfigInitIxArgs) -> Self {
        Self(args)
    }
}
impl ProgramConfigInitIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != PROGRAM_CONFIG_INIT_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    PROGRAM_CONFIG_INIT_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(ProgramConfigInitIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[PROGRAM_CONFIG_INIT_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn program_config_init_ix_with_program_id(
    program_id: Pubkey,
    keys: ProgramConfigInitKeys,
    args: ProgramConfigInitIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; PROGRAM_CONFIG_INIT_IX_ACCOUNTS_LEN] = keys.into();
    let data: ProgramConfigInitIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn program_config_init_ix(
    keys: ProgramConfigInitKeys,
    args: ProgramConfigInitIxArgs,
) -> std::io::Result<Instruction> {
    program_config_init_ix_with_program_id(crate::ID, keys, args)
}
pub fn program_config_init_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ProgramConfigInitAccounts<'_, '_>,
    args: ProgramConfigInitIxArgs,
) -> ProgramResult {
    let keys: ProgramConfigInitKeys = accounts.into();
    let ix = program_config_init_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn program_config_init_invoke(
    accounts: ProgramConfigInitAccounts<'_, '_>,
    args: ProgramConfigInitIxArgs,
) -> ProgramResult {
    program_config_init_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn program_config_init_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ProgramConfigInitAccounts<'_, '_>,
    args: ProgramConfigInitIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ProgramConfigInitKeys = accounts.into();
    let ix = program_config_init_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn program_config_init_invoke_signed(
    accounts: ProgramConfigInitAccounts<'_, '_>,
    args: ProgramConfigInitIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    program_config_init_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn program_config_init_verify_account_keys(
    accounts: ProgramConfigInitAccounts<'_, '_>,
    keys: ProgramConfigInitKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.program_config.key, keys.program_config),
        (*accounts.initializer.key, keys.initializer),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl ProgramConfigInitIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<ProgramConfigInitIxArgs> for SquadsProgramIx {
    fn from(args: ProgramConfigInitIxArgs) -> Self {
        Self::ProgramConfigInit(args)
    }
}
