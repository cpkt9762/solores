//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use borsh::{BorshDeserialize, BorshSerialize};
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Bin {
    ///Amount of token X in the bin. This already excluded protocol fees.
    pub amount_x: u64,
    ///Amount of token Y in the bin. This already excluded protocol fees.
    pub amount_y: u64,
    ///Bin price
    pub price: u128,
    ///Liquidities of the bin. This is the same as LP mint supply. q-number
    pub liquidity_supply: u128,
    ///reward_a_per_token_stored
    pub reward_per_token_stored: [u128; 2],
    ///Swap fee amount of token X per liquidity deposited.
    pub fee_amount_x_per_token_stored: u128,
    ///Swap fee amount of token Y per liquidity deposited.
    pub fee_amount_y_per_token_stored: u128,
    ///Total token X swap into the bin. Only used for tracking purpose.
    pub amount_x_in: u128,
    ///Total token Y swap into he bin. Only used for tracking purpose.
    pub amount_y_in: u128,
}
impl Default for Bin {
    fn default() -> Self {
        Self {
            amount_x: Default::default(),
            amount_y: Default::default(),
            price: Default::default(),
            liquidity_supply: Default::default(),
            reward_per_token_stored: core::array::from_fn(|_| Default::default()),
            fee_amount_x_per_token_stored: Default::default(),
            fee_amount_y_per_token_stored: Default::default(),
            amount_x_in: Default::default(),
            amount_y_in: Default::default(),
        }
    }
}
