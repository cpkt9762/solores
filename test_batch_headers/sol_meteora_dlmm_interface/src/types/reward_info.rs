//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;
///Stores the state relevant for tracking liquidity mining rewards
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RewardInfo {
    ///Reward token mint.
    pub mint: Pubkey,
    ///Reward vault token account.
    pub vault: Pubkey,
    ///Authority account that allows to fund rewards
    pub funder: Pubkey,
    ///TODO check whether we need to store it in pool
    pub reward_duration: u64,
    ///TODO check whether we need to store it in pool
    pub reward_duration_end: u64,
    ///TODO check whether we need to store it in pool
    pub reward_rate: u128,
    ///The last time reward states were updated.
    pub last_update_time: u64,
    ///Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window.
    pub cumulative_seconds_with_empty_liquidity_reward: u64,
}
impl Default for RewardInfo {
    fn default() -> Self {
        Self {
            mint: Pubkey::default(),
            vault: Pubkey::default(),
            funder: Pubkey::default(),
            reward_duration: Default::default(),
            reward_duration_end: Default::default(),
            reward_rate: Default::default(),
            last_update_time: Default::default(),
            cumulative_seconds_with_empty_liquidity_reward: Default::default(),
        }
    }
}
