//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LbPair {
    pub parameters: StaticParameters,
    pub v_parameters: VariableParameters,
    pub bump_seed: [u8; 1],
    ///Bin step signer seed
    pub bin_step_seed: [u8; 2],
    ///Type of the pair
    pub pair_type: u8,
    ///Active bin id
    pub active_id: i32,
    ///Bin step. Represent the price increment / decrement.
    pub bin_step: u16,
    ///Status of the pair. Check PairStatus enum.
    pub status: u8,
    ///Require base factor seed
    pub require_base_factor_seed: u8,
    ///Base factor seed
    pub base_factor_seed: [u8; 2],
    ///Activation type
    pub activation_type: u8,
    ///padding 0
    pub padding0: u8,
    ///Token X mint
    pub token_x_mint: Pubkey,
    ///Token Y mint
    pub token_y_mint: Pubkey,
    ///LB token X vault
    pub reserve_x: Pubkey,
    ///LB token Y vault
    pub reserve_y: Pubkey,
    ///Uncollected protocol fee
    pub protocol_fee: ProtocolFee,
    ///_padding_1, previous Fee owner, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    pub padding1: [u8; 32],
    ///Farming reward information
    pub reward_infos: [RewardInfo; 2],
    ///Oracle pubkey
    pub oracle: Pubkey,
    ///Packed initialized bin array state
    pub bin_array_bitmap: [u64; 16],
    ///Last time the pool fee parameter was updated
    pub last_updated_at: i64,
    ///_padding_2, previous whitelisted_wallet, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    pub padding2: [u8; 32],
    ///Address allowed to swap when the current point is greater than or equal to the pre-activation point. The pre-activation point is calculated as `activation_point - pre_activation_duration`.
    pub pre_activation_swap_address: Pubkey,
    ///Base keypair. Only required for permission pair
    pub base_key: Pubkey,
    ///Time point to enable the pair. Only applicable for permission pair.
    pub activation_point: u64,
    ///Duration before activation activation_point. Used to calculate pre-activation time point for pre_activation_swap_address
    pub pre_activation_duration: u64,
    ///_padding 3 is reclaimed free space from swap_cap_deactivate_point and swap_cap_amount before, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    pub padding3: [u8; 8],
    ///_padding_4, previous lock_duration, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
    pub padding4: u64,
    ///Pool creator
    pub creator: Pubkey,
    ///Reserved space for future use
    pub reserved: [u8; 24],
}
impl Default for LbPair {
    fn default() -> Self {
        Self {
            parameters: Default::default(),
            v_parameters: Default::default(),
            bump_seed: [Default::default(); 1],
            bin_step_seed: [Default::default(); 2],
            pair_type: Default::default(),
            active_id: Default::default(),
            bin_step: Default::default(),
            status: Default::default(),
            require_base_factor_seed: Default::default(),
            base_factor_seed: [Default::default(); 2],
            activation_type: Default::default(),
            padding0: Default::default(),
            token_x_mint: Pubkey::default(),
            token_y_mint: Pubkey::default(),
            reserve_x: Pubkey::default(),
            reserve_y: Pubkey::default(),
            protocol_fee: Default::default(),
            padding1: [Default::default(); 32],
            reward_infos: core::array::from_fn(|_| Default::default()),
            oracle: Pubkey::default(),
            bin_array_bitmap: [Default::default(); 16],
            last_updated_at: Default::default(),
            padding2: [Default::default(); 32],
            pre_activation_swap_address: Pubkey::default(),
            base_key: Pubkey::default(),
            activation_point: Default::default(),
            pre_activation_duration: Default::default(),
            padding3: [Default::default(); 8],
            padding4: Default::default(),
            creator: Pubkey::default(),
            reserved: [Default::default(); 24],
        }
    }
}
impl LbPair {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
