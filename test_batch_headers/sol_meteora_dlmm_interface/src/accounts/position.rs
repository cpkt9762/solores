//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Position {
    ///The LB pair of this position
    pub lb_pair: Pubkey,
    ///Owner of the position. Client rely on this to to fetch their positions.
    pub owner: Pubkey,
    ///Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
    pub liquidity_shares: [u64; 70],
    ///Farming reward information
    pub reward_infos: [UserRewardInfo; 70],
    ///Swap fee to claim information
    pub fee_infos: [FeeInfo; 70],
    ///Lower bin ID
    pub lower_bin_id: i32,
    ///Upper bin ID
    pub upper_bin_id: i32,
    ///Last updated timestamp
    pub last_updated_at: i64,
    ///Total claimed token fee X
    pub total_claimed_fee_x_amount: u64,
    ///Total claimed token fee Y
    pub total_claimed_fee_y_amount: u64,
    ///Total claimed rewards
    pub total_claimed_rewards: [u64; 2],
    ///Reserved space for future use
    pub reserved: [u8; 160],
}
impl Default for Position {
    fn default() -> Self {
        Self {
            lb_pair: Pubkey::default(),
            owner: Pubkey::default(),
            liquidity_shares: [Default::default(); 70],
            reward_infos: core::array::from_fn(|_| Default::default()),
            fee_infos: core::array::from_fn(|_| Default::default()),
            lower_bin_id: Default::default(),
            upper_bin_id: Default::default(),
            last_updated_at: Default::default(),
            total_claimed_fee_x_amount: Default::default(),
            total_claimed_fee_y_amount: Default::default(),
            total_claimed_rewards: [Default::default(); 2],
            reserved: [Default::default(); 160],
        }
    }
}
impl Position {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
