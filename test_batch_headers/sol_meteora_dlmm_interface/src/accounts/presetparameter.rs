//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq, Default)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PresetParameter {
    ///Bin step. Represent the price increment / decrement.
    pub bin_step: u16,
    ///Used for base fee calculation. base_fee_rate = base_factor * bin_step
    pub base_factor: u16,
    ///Filter period determine high frequency trading time window.
    pub filter_period: u16,
    ///Decay period determine when the volatile fee start decay / decrease.
    pub decay_period: u16,
    ///Reduction factor controls the volatile fee rate decrement rate.
    pub reduction_factor: u16,
    ///Used to scale the variable fee component depending on the dynamic of the market
    pub variable_fee_control: u32,
    ///Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
    pub max_volatility_accumulator: u32,
    ///Min bin id supported by the pool based on the configured bin step.
    pub min_bin_id: i32,
    ///Max bin id supported by the pool based on the configured bin step.
    pub max_bin_id: i32,
    ///Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
    pub protocol_share: u16,
}
impl PresetParameter {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
