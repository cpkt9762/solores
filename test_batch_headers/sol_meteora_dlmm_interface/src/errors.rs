//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use solana_program::program_error::ProgramError;
use thiserror::Error;
///Custom errors for the meteora_dlmm program
#[derive(Clone, Copy, Debug, Eq, Error, num_derive::FromPrimitive, PartialEq)]
pub enum MeteoraDlmmError {
    ///6000 - Invalid start bin index
    #[error("Invalid start bin index")]
    InvalidStartBinIndex = 6000,
    ///6001 - Invalid bin id
    #[error("Invalid bin id")]
    InvalidBinId = 6001,
    ///6002 - Invalid input data
    #[error("Invalid input data")]
    InvalidInput = 6002,
    ///6003 - Exceeded amount slippage tolerance
    #[error("Exceeded amount slippage tolerance")]
    ExceededAmountSlippageTolerance = 6003,
    ///6004 - Exceeded bin slippage tolerance
    #[error("Exceeded bin slippage tolerance")]
    ExceededBinSlippageTolerance = 6004,
    ///6005 - Composition factor flawed
    #[error("Composition factor flawed")]
    CompositionFactorFlawed = 6005,
    ///6006 - Non preset bin step
    #[error("Non preset bin step")]
    NonPresetBinStep = 6006,
    ///6007 - Zero liquidity
    #[error("Zero liquidity")]
    ZeroLiquidity = 6007,
    ///6008 - Invalid position
    #[error("Invalid position")]
    InvalidPosition = 6008,
    ///6009 - Bin array not found
    #[error("Bin array not found")]
    BinArrayNotFound = 6009,
    ///6010 - Invalid token mint
    #[error("Invalid token mint")]
    InvalidTokenMint = 6010,
    ///6011 - Invalid account for single deposit
    #[error("Invalid account for single deposit")]
    InvalidAccountForSingleDeposit = 6011,
    ///6012 - Pair insufficient liquidity
    #[error("Pair insufficient liquidity")]
    PairInsufficientLiquidity = 6012,
    ///6013 - Invalid fee owner
    #[error("Invalid fee owner")]
    InvalidFeeOwner = 6013,
    ///6014 - Invalid fee withdraw amount
    #[error("Invalid fee withdraw amount")]
    InvalidFeeWithdrawAmount = 6014,
    ///6015 - Invalid admin
    #[error("Invalid admin")]
    InvalidAdmin = 6015,
    ///6016 - Identical fee owner
    #[error("Identical fee owner")]
    IdenticalFeeOwner = 6016,
    ///6017 - Invalid basis point
    #[error("Invalid basis point")]
    InvalidBps = 6017,
    ///6018 - Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow = 6018,
    ///6019 - Type cast error
    #[error("Type cast error")]
    TypeCastFailed = 6019,
    ///6020 - Invalid reward index
    #[error("Invalid reward index")]
    InvalidRewardIndex = 6020,
    ///6021 - Invalid reward duration
    #[error("Invalid reward duration")]
    InvalidRewardDuration = 6021,
    ///6022 - Reward already initialized
    #[error("Reward already initialized")]
    RewardInitialized = 6022,
    ///6023 - Reward not initialized
    #[error("Reward not initialized")]
    RewardUninitialized = 6023,
    ///6024 - Identical funder
    #[error("Identical funder")]
    IdenticalFunder = 6024,
    ///6025 - Reward campaign in progress
    #[error("Reward campaign in progress")]
    RewardCampaignInProgress = 6025,
    ///6026 - Reward duration is the same
    #[error("Reward duration is the same")]
    IdenticalRewardDuration = 6026,
    ///6027 - Invalid bin array
    #[error("Invalid bin array")]
    InvalidBinArray = 6027,
    ///6028 - Bin arrays must be continuous
    #[error("Bin arrays must be continuous")]
    NonContinuousBinArrays = 6028,
    ///6029 - Invalid reward vault
    #[error("Invalid reward vault")]
    InvalidRewardVault = 6029,
    ///6030 - Position is not empty
    #[error("Position is not empty")]
    NonEmptyPosition = 6030,
    ///6031 - Unauthorized access
    #[error("Unauthorized access")]
    UnauthorizedAccess = 6031,
    ///6032 - Invalid fee parameter
    #[error("Invalid fee parameter")]
    InvalidFeeParameter = 6032,
    ///6033 - Missing oracle account
    #[error("Missing oracle account")]
    MissingOracle = 6033,
    ///6034 - Insufficient observation sample
    #[error("Insufficient observation sample")]
    InsufficientSample = 6034,
    ///6035 - Invalid lookup timestamp
    #[error("Invalid lookup timestamp")]
    InvalidLookupTimestamp = 6035,
    ///6036 - Bitmap extension account is not provided
    #[error("Bitmap extension account is not provided")]
    BitmapExtensionAccountIsNotProvided = 6036,
    ///6037 - Cannot find non-zero liquidity binArrayId
    #[error("Cannot find non-zero liquidity binArrayId")]
    CannotFindNonZeroLiquidityBinArrayId = 6037,
    ///6038 - Bin id out of bound
    #[error("Bin id out of bound")]
    BinIdOutOfBound = 6038,
    ///6039 - Insufficient amount in for minimum out
    #[error("Insufficient amount in for minimum out")]
    InsufficientOutAmount = 6039,
    ///6040 - Invalid position width
    #[error("Invalid position width")]
    InvalidPositionWidth = 6040,
    ///6041 - Excessive fee update
    #[error("Excessive fee update")]
    ExcessiveFeeUpdate = 6041,
    ///6042 - Pool disabled
    #[error("Pool disabled")]
    PoolDisabled = 6042,
    ///6043 - Invalid pool type
    #[error("Invalid pool type")]
    InvalidPoolType = 6043,
    ///6044 - Whitelist for wallet is full
    #[error("Whitelist for wallet is full")]
    ExceedMaxWhitelist = 6044,
    ///6045 - Invalid index
    #[error("Invalid index")]
    InvalidIndex = 6045,
    ///6046 - Reward not ended
    #[error("Reward not ended")]
    RewardNotEnded = 6046,
    ///6047 - Must withdraw ineligible reward
    #[error("Must withdraw ineligible reward")]
    MustWithdrawnIneligibleReward = 6047,
    ///6048 - Unauthorized address
    #[error("Unauthorized address")]
    UnauthorizedAddress = 6048,
    ///6049 - Cannot update because operators are the same
    #[error("Cannot update because operators are the same")]
    OperatorsAreTheSame = 6049,
    ///6050 - Withdraw to wrong token account
    #[error("Withdraw to wrong token account")]
    WithdrawToWrongTokenAccount = 6050,
    ///6051 - Wrong rent receiver
    #[error("Wrong rent receiver")]
    WrongRentReceiver = 6051,
    ///6052 - Already activated
    #[error("Already activated")]
    AlreadyPassActivationPoint = 6052,
    ///6053 - Swapped amount is exceeded max swapped amount
    #[error("Swapped amount is exceeded max swapped amount")]
    ExceedMaxSwappedAmount = 6053,
    ///6054 - Invalid strategy parameters
    #[error("Invalid strategy parameters")]
    InvalidStrategyParameters = 6054,
    ///6055 - Liquidity locked
    #[error("Liquidity locked")]
    LiquidityLocked = 6055,
    ///6056 - Bin range is not empty
    #[error("Bin range is not empty")]
    BinRangeIsNotEmpty = 6056,
    ///6057 - Amount out is not matched with exact amount out
    #[error("Amount out is not matched with exact amount out")]
    NotExactAmountOut = 6057,
    ///6058 - Invalid activation type
    #[error("Invalid activation type")]
    InvalidActivationType = 6058,
    ///6059 - Invalid activation duration
    #[error("Invalid activation duration")]
    InvalidActivationDuration = 6059,
    ///6060 - Missing token amount as token launch owner proof
    #[error("Missing token amount as token launch owner proof")]
    MissingTokenAmountAsTokenLaunchProof = 6060,
    ///6061 - Quote token must be SOL or USDC
    #[error("Quote token must be SOL or USDC")]
    InvalidQuoteToken = 6061,
    ///6062 - Invalid bin step
    #[error("Invalid bin step")]
    InvalidBinStep = 6062,
    ///6063 - Invalid base fee
    #[error("Invalid base fee")]
    InvalidBaseFee = 6063,
    ///6064 - Invalid pre-activation duration
    #[error("Invalid pre-activation duration")]
    InvalidPreActivationDuration = 6064,
    ///6065 - Already pass pre-activation swap point
    #[error("Already pass pre-activation swap point")]
    AlreadyPassPreActivationSwapPoint = 6065,
}
impl From<MeteoraDlmmError> for ProgramError {
    fn from(e: MeteoraDlmmError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
