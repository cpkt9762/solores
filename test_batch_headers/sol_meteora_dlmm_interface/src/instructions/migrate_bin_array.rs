//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN: usize = 1;
///Accounts struct for the migrateBinArray instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrateBinArrayAccounts<'me, 'info> {
    pub lb_pair: &'me AccountInfo<'info>,
}
///Public keys struct for the migrateBinArray instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateBinArrayKeys {
    pub lb_pair: Pubkey,
}
impl From<MigrateBinArrayAccounts<'_, '_>> for MigrateBinArrayKeys {
    fn from(accounts: MigrateBinArrayAccounts) -> Self {
        Self {
            lb_pair: *accounts.lb_pair.key,
        }
    }
}
impl From<MigrateBinArrayKeys> for [AccountMeta; MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrateBinArrayKeys) -> Self {
        [AccountMeta {
            pubkey: keys.lb_pair,
            is_signer: false,
            is_writable: false,
        }]
    }
}
impl From<[Pubkey; MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN]> for MigrateBinArrayKeys {
    fn from(pubkeys: [Pubkey; MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: pubkeys[0],
        }
    }
}
impl From<&[String]> for MigrateBinArrayKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            lb_pair: pubkeys[0].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrateBinArrayAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrateBinArrayAccounts<'_, 'info>) -> Self {
        [accounts.lb_pair.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN]>
    for MigrateBinArrayAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN]) -> Self {
        Self { lb_pair: &arr[0] }
    }
}
pub const MIGRATE_BIN_ARRAY_IX_DISCM: u8 = 33u8;
#[derive(Clone, Debug, PartialEq)]
pub struct MigrateBinArrayIxData;
impl MigrateBinArrayIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != MIGRATE_BIN_ARRAY_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    MIGRATE_BIN_ARRAY_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[MIGRATE_BIN_ARRAY_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migrate_bin_array_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateBinArrayKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATE_BIN_ARRAY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrateBinArrayIxData.try_to_vec()?,
    })
}
pub fn migrate_bin_array_ix(keys: MigrateBinArrayKeys) -> std::io::Result<Instruction> {
    migrate_bin_array_ix_with_program_id(crate::ID, keys)
}
pub fn migrate_bin_array_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrateBinArrayAccounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrateBinArrayKeys = accounts.into();
    let ix = migrate_bin_array_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migrate_bin_array_invoke(accounts: MigrateBinArrayAccounts<'_, '_>) -> ProgramResult {
    migrate_bin_array_invoke_with_program_id(crate::ID, accounts)
}
pub fn migrate_bin_array_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrateBinArrayAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrateBinArrayKeys = accounts.into();
    let ix = migrate_bin_array_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migrate_bin_array_invoke_signed(
    accounts: MigrateBinArrayAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migrate_bin_array_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migrate_bin_array_verify_account_keys(
    accounts: MigrateBinArrayAccounts<'_, '_>,
    keys: MigrateBinArrayKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [(*accounts.lb_pair.key, keys.lb_pair)] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
