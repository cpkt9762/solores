//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const GO_TO_A_BIN_IX_ACCOUNTS_LEN: usize = 6;
///Accounts struct for the goToABin instruction
#[derive(Copy, Clone, Debug)]
pub struct GoToABinAccounts<'me, 'info> {
    pub lb_pair: &'me AccountInfo<'info>,
    pub bin_array_bitmap_extension: &'me AccountInfo<'info>,
    pub from_bin_array: &'me AccountInfo<'info>,
    pub to_bin_array: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the goToABin instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct GoToABinKeys {
    pub lb_pair: Pubkey,
    pub bin_array_bitmap_extension: Pubkey,
    pub from_bin_array: Pubkey,
    pub to_bin_array: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<GoToABinAccounts<'_, '_>> for GoToABinKeys {
    fn from(accounts: GoToABinAccounts) -> Self {
        Self {
            lb_pair: *accounts.lb_pair.key,
            bin_array_bitmap_extension: *accounts.bin_array_bitmap_extension.key,
            from_bin_array: *accounts.from_bin_array.key,
            to_bin_array: *accounts.to_bin_array.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<GoToABinKeys> for [AccountMeta; GO_TO_A_BIN_IX_ACCOUNTS_LEN] {
    fn from(keys: GoToABinKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.lb_pair,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bin_array_bitmap_extension,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.from_bin_array,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.to_bin_array,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; GO_TO_A_BIN_IX_ACCOUNTS_LEN]> for GoToABinKeys {
    fn from(pubkeys: [Pubkey; GO_TO_A_BIN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            bin_array_bitmap_extension: pubkeys[1],
            from_bin_array: pubkeys[2],
            to_bin_array: pubkeys[3],
            event_authority: pubkeys[4],
            program: pubkeys[5],
        }
    }
}
impl From<&[String]> for GoToABinKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            lb_pair: pubkeys[0].parse().unwrap(),
            bin_array_bitmap_extension: pubkeys[1].parse().unwrap(),
            from_bin_array: pubkeys[2].parse().unwrap(),
            to_bin_array: pubkeys[3].parse().unwrap(),
            event_authority: pubkeys[4].parse().unwrap(),
            program: pubkeys[5].parse().unwrap(),
        }
    }
}
impl<'info> From<GoToABinAccounts<'_, 'info>>
    for [AccountInfo<'info>; GO_TO_A_BIN_IX_ACCOUNTS_LEN]
{
    fn from(accounts: GoToABinAccounts<'_, 'info>) -> Self {
        [
            accounts.lb_pair.clone(),
            accounts.bin_array_bitmap_extension.clone(),
            accounts.from_bin_array.clone(),
            accounts.to_bin_array.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; GO_TO_A_BIN_IX_ACCOUNTS_LEN]>
    for GoToABinAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; GO_TO_A_BIN_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: &arr[0],
            bin_array_bitmap_extension: &arr[1],
            from_bin_array: &arr[2],
            to_bin_array: &arr[3],
            event_authority: &arr[4],
            program: &arr[5],
        }
    }
}
pub const GO_TO_A_BIN_IX_DISCM: u8 = 39u8;
///Arguments for the goToABin instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GoToABinIxArgs {
    pub discriminator: u8,
    pub bin_id: i32,
}
impl Default for GoToABinIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 39u8,
            bin_id: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct GoToABinIxData(pub GoToABinIxArgs);
impl From<GoToABinIxArgs> for GoToABinIxData {
    fn from(args: GoToABinIxArgs) -> Self {
        Self(args)
    }
}
impl GoToABinIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != GO_TO_A_BIN_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    GO_TO_A_BIN_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(GoToABinIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[GO_TO_A_BIN_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn go_to_a_bin_ix_with_program_id(
    program_id: Pubkey,
    keys: GoToABinKeys,
    args: GoToABinIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; GO_TO_A_BIN_IX_ACCOUNTS_LEN] = keys.into();
    let data: GoToABinIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn go_to_a_bin_ix(keys: GoToABinKeys, args: GoToABinIxArgs) -> std::io::Result<Instruction> {
    go_to_a_bin_ix_with_program_id(crate::ID, keys, args)
}
pub fn go_to_a_bin_invoke_with_program_id(
    program_id: Pubkey,
    accounts: GoToABinAccounts<'_, '_>,
    args: GoToABinIxArgs,
) -> ProgramResult {
    let keys: GoToABinKeys = accounts.into();
    let ix = go_to_a_bin_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn go_to_a_bin_invoke(
    accounts: GoToABinAccounts<'_, '_>,
    args: GoToABinIxArgs,
) -> ProgramResult {
    go_to_a_bin_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn go_to_a_bin_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: GoToABinAccounts<'_, '_>,
    args: GoToABinIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: GoToABinKeys = accounts.into();
    let ix = go_to_a_bin_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn go_to_a_bin_invoke_signed(
    accounts: GoToABinAccounts<'_, '_>,
    args: GoToABinIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    go_to_a_bin_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn go_to_a_bin_verify_account_keys(
    accounts: GoToABinAccounts<'_, '_>,
    keys: GoToABinKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.lb_pair.key, keys.lb_pair),
        (
            *accounts.bin_array_bitmap_extension.key,
            keys.bin_array_bitmap_extension,
        ),
        (*accounts.from_bin_array.key, keys.from_bin_array),
        (*accounts.to_bin_array.key, keys.to_bin_array),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl GoToABinIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<GoToABinIxArgs> for MeteoraDlmmProgramIx {
    fn from(args: GoToABinIxArgs) -> Self {
        Self::GoToABin(args)
    }
}
