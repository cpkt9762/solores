//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod initialize_lb_pair;
pub use initialize_lb_pair::*;
pub mod initialize_permission_lb_pair;
pub use initialize_permission_lb_pair::*;
pub mod initialize_customizable_permissionless_lb_pair;
pub use initialize_customizable_permissionless_lb_pair::*;
pub mod initialize_bin_array_bitmap_extension;
pub use initialize_bin_array_bitmap_extension::*;
pub mod initialize_bin_array;
pub use initialize_bin_array::*;
pub mod add_liquidity;
pub use add_liquidity::*;
pub mod add_liquidity_by_weight;
pub use add_liquidity_by_weight::*;
pub mod add_liquidity_by_strategy;
pub use add_liquidity_by_strategy::*;
pub mod add_liquidity_by_strategy_one_side;
pub use add_liquidity_by_strategy_one_side::*;
pub mod add_liquidity_one_side;
pub use add_liquidity_one_side::*;
pub mod remove_liquidity;
pub use remove_liquidity::*;
pub mod initialize_position;
pub use initialize_position::*;
pub mod initialize_position_pda;
pub use initialize_position_pda::*;
pub mod initialize_position_by_operator;
pub use initialize_position_by_operator::*;
pub mod update_position_operator;
pub use update_position_operator::*;
pub mod swap;
pub use swap::*;
pub mod swap_exact_out;
pub use swap_exact_out::*;
pub mod swap_with_price_impact;
pub use swap_with_price_impact::*;
pub mod withdraw_protocol_fee;
pub use withdraw_protocol_fee::*;
pub mod initialize_reward;
pub use initialize_reward::*;
pub mod fund_reward;
pub use fund_reward::*;
pub mod update_reward_funder;
pub use update_reward_funder::*;
pub mod update_reward_duration;
pub use update_reward_duration::*;
pub mod claim_reward;
pub use claim_reward::*;
pub mod claim_fee;
pub use claim_fee::*;
pub mod close_position;
pub use close_position::*;
pub mod update_fee_parameters;
pub use update_fee_parameters::*;
pub mod increase_oracle_length;
pub use increase_oracle_length::*;
pub mod initialize_preset_parameter;
pub use initialize_preset_parameter::*;
pub mod close_preset_parameter;
pub use close_preset_parameter::*;
pub mod remove_all_liquidity;
pub use remove_all_liquidity::*;
pub mod toggle_pair_status;
pub use toggle_pair_status::*;
pub mod migrate_position;
pub use migrate_position::*;
pub mod migrate_bin_array;
pub use migrate_bin_array::*;
pub mod update_fees_and_rewards;
pub use update_fees_and_rewards::*;
pub mod withdraw_ineligible_reward;
pub use withdraw_ineligible_reward::*;
pub mod set_activation_point;
pub use set_activation_point::*;
pub mod remove_liquidity_by_range;
pub use remove_liquidity_by_range::*;
pub mod add_liquidity_one_side_precise;
pub use add_liquidity_one_side_precise::*;
pub mod go_to_a_bin;
pub use go_to_a_bin::*;
pub mod set_pre_activation_duration;
pub use set_pre_activation_duration::*;
pub mod set_pre_activation_swap_address;
pub use set_pre_activation_swap_address::*;
#[derive(Clone, Debug, PartialEq)]
pub enum MeteoraDlmmProgramIx {
    InitializeLbPair(InitializeLbPairIxArgs),
    InitializePermissionLbPair(InitializePermissionLbPairIxArgs),
    InitializeCustomizablePermissionlessLbPair(InitializeCustomizablePermissionlessLbPairIxArgs),
    InitializeBinArrayBitmapExtension,
    InitializeBinArray(InitializeBinArrayIxArgs),
    AddLiquidity(AddLiquidityIxArgs),
    AddLiquidityByWeight(AddLiquidityByWeightIxArgs),
    AddLiquidityByStrategy(AddLiquidityByStrategyIxArgs),
    AddLiquidityByStrategyOneSide(AddLiquidityByStrategyOneSideIxArgs),
    AddLiquidityOneSide(AddLiquidityOneSideIxArgs),
    RemoveLiquidity(RemoveLiquidityIxArgs),
    InitializePosition(InitializePositionIxArgs),
    InitializePositionPda(InitializePositionPdaIxArgs),
    InitializePositionByOperator(InitializePositionByOperatorIxArgs),
    UpdatePositionOperator(UpdatePositionOperatorIxArgs),
    Swap(SwapIxArgs),
    SwapExactOut(SwapExactOutIxArgs),
    SwapWithPriceImpact(SwapWithPriceImpactIxArgs),
    WithdrawProtocolFee(WithdrawProtocolFeeIxArgs),
    InitializeReward(InitializeRewardIxArgs),
    FundReward(FundRewardIxArgs),
    UpdateRewardFunder(UpdateRewardFunderIxArgs),
    UpdateRewardDuration(UpdateRewardDurationIxArgs),
    ClaimReward(ClaimRewardIxArgs),
    ClaimFee,
    ClosePosition,
    UpdateFeeParameters(UpdateFeeParametersIxArgs),
    IncreaseOracleLength(IncreaseOracleLengthIxArgs),
    InitializePresetParameter(InitializePresetParameterIxArgs),
    ClosePresetParameter,
    RemoveAllLiquidity,
    TogglePairStatus,
    MigratePosition,
    MigrateBinArray,
    UpdateFeesAndRewards,
    WithdrawIneligibleReward(WithdrawIneligibleRewardIxArgs),
    SetActivationPoint(SetActivationPointIxArgs),
    RemoveLiquidityByRange(RemoveLiquidityByRangeIxArgs),
    AddLiquidityOneSidePrecise(AddLiquidityOneSidePreciseIxArgs),
    GoToABin(GoToABinIxArgs),
    SetPreActivationDuration(SetPreActivationDurationIxArgs),
    SetPreActivationSwapAddress(SetPreActivationSwapAddressIxArgs),
}
impl MeteoraDlmmProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        let mut reader = &buf[1..];
        match maybe_discm {
            INITIALIZE_LB_PAIR_IX_DISCM => Ok(Self::InitializeLbPair(
                InitializeLbPairIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_PERMISSION_LB_PAIR_IX_DISCM => Ok(Self::InitializePermissionLbPair(
                InitializePermissionLbPairIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_IX_DISCM => {
                Ok(Self::InitializeCustomizablePermissionlessLbPair(
                    InitializeCustomizablePermissionlessLbPairIxArgs::deserialize(&mut reader)?,
                ))
            }
            INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_DISCM => {
                Ok(Self::InitializeBinArrayBitmapExtension)
            }
            INITIALIZE_BIN_ARRAY_IX_DISCM => Ok(Self::InitializeBinArray(
                InitializeBinArrayIxArgs::deserialize(&mut reader)?,
            )),
            ADD_LIQUIDITY_IX_DISCM => Ok(Self::AddLiquidity(AddLiquidityIxArgs::deserialize(
                &mut reader,
            )?)),
            ADD_LIQUIDITY_BY_WEIGHT_IX_DISCM => Ok(Self::AddLiquidityByWeight(
                AddLiquidityByWeightIxArgs::deserialize(&mut reader)?,
            )),
            ADD_LIQUIDITY_BY_STRATEGY_IX_DISCM => Ok(Self::AddLiquidityByStrategy(
                AddLiquidityByStrategyIxArgs::deserialize(&mut reader)?,
            )),
            ADD_LIQUIDITY_BY_STRATEGY_ONE_SIDE_IX_DISCM => Ok(Self::AddLiquidityByStrategyOneSide(
                AddLiquidityByStrategyOneSideIxArgs::deserialize(&mut reader)?,
            )),
            ADD_LIQUIDITY_ONE_SIDE_IX_DISCM => Ok(Self::AddLiquidityOneSide(
                AddLiquidityOneSideIxArgs::deserialize(&mut reader)?,
            )),
            REMOVE_LIQUIDITY_IX_DISCM => Ok(Self::RemoveLiquidity(
                RemoveLiquidityIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_POSITION_IX_DISCM => Ok(Self::InitializePosition(
                InitializePositionIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_POSITION_PDA_IX_DISCM => Ok(Self::InitializePositionPda(
                InitializePositionPdaIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_POSITION_BY_OPERATOR_IX_DISCM => Ok(Self::InitializePositionByOperator(
                InitializePositionByOperatorIxArgs::deserialize(&mut reader)?,
            )),
            UPDATE_POSITION_OPERATOR_IX_DISCM => Ok(Self::UpdatePositionOperator(
                UpdatePositionOperatorIxArgs::deserialize(&mut reader)?,
            )),
            SWAP_IX_DISCM => Ok(Self::Swap(SwapIxArgs::deserialize(&mut reader)?)),
            SWAP_EXACT_OUT_IX_DISCM => Ok(Self::SwapExactOut(SwapExactOutIxArgs::deserialize(
                &mut reader,
            )?)),
            SWAP_WITH_PRICE_IMPACT_IX_DISCM => Ok(Self::SwapWithPriceImpact(
                SwapWithPriceImpactIxArgs::deserialize(&mut reader)?,
            )),
            WITHDRAW_PROTOCOL_FEE_IX_DISCM => Ok(Self::WithdrawProtocolFee(
                WithdrawProtocolFeeIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_REWARD_IX_DISCM => Ok(Self::InitializeReward(
                InitializeRewardIxArgs::deserialize(&mut reader)?,
            )),
            FUND_REWARD_IX_DISCM => Ok(Self::FundReward(FundRewardIxArgs::deserialize(
                &mut reader,
            )?)),
            UPDATE_REWARD_FUNDER_IX_DISCM => Ok(Self::UpdateRewardFunder(
                UpdateRewardFunderIxArgs::deserialize(&mut reader)?,
            )),
            UPDATE_REWARD_DURATION_IX_DISCM => Ok(Self::UpdateRewardDuration(
                UpdateRewardDurationIxArgs::deserialize(&mut reader)?,
            )),
            CLAIM_REWARD_IX_DISCM => Ok(Self::ClaimReward(ClaimRewardIxArgs::deserialize(
                &mut reader,
            )?)),
            CLAIM_FEE_IX_DISCM => Ok(Self::ClaimFee),
            CLOSE_POSITION_IX_DISCM => Ok(Self::ClosePosition),
            UPDATE_FEE_PARAMETERS_IX_DISCM => Ok(Self::UpdateFeeParameters(
                UpdateFeeParametersIxArgs::deserialize(&mut reader)?,
            )),
            INCREASE_ORACLE_LENGTH_IX_DISCM => Ok(Self::IncreaseOracleLength(
                IncreaseOracleLengthIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_PRESET_PARAMETER_IX_DISCM => Ok(Self::InitializePresetParameter(
                InitializePresetParameterIxArgs::deserialize(&mut reader)?,
            )),
            CLOSE_PRESET_PARAMETER_IX_DISCM => Ok(Self::ClosePresetParameter),
            REMOVE_ALL_LIQUIDITY_IX_DISCM => Ok(Self::RemoveAllLiquidity),
            TOGGLE_PAIR_STATUS_IX_DISCM => Ok(Self::TogglePairStatus),
            MIGRATE_POSITION_IX_DISCM => Ok(Self::MigratePosition),
            MIGRATE_BIN_ARRAY_IX_DISCM => Ok(Self::MigrateBinArray),
            UPDATE_FEES_AND_REWARDS_IX_DISCM => Ok(Self::UpdateFeesAndRewards),
            WITHDRAW_INELIGIBLE_REWARD_IX_DISCM => Ok(Self::WithdrawIneligibleReward(
                WithdrawIneligibleRewardIxArgs::deserialize(&mut reader)?,
            )),
            SET_ACTIVATION_POINT_IX_DISCM => Ok(Self::SetActivationPoint(
                SetActivationPointIxArgs::deserialize(&mut reader)?,
            )),
            REMOVE_LIQUIDITY_BY_RANGE_IX_DISCM => Ok(Self::RemoveLiquidityByRange(
                RemoveLiquidityByRangeIxArgs::deserialize(&mut reader)?,
            )),
            ADD_LIQUIDITY_ONE_SIDE_PRECISE_IX_DISCM => Ok(Self::AddLiquidityOneSidePrecise(
                AddLiquidityOneSidePreciseIxArgs::deserialize(&mut reader)?,
            )),
            GO_TO_A_BIN_IX_DISCM => Ok(Self::GoToABin(GoToABinIxArgs::deserialize(&mut reader)?)),
            SET_PRE_ACTIVATION_DURATION_IX_DISCM => Ok(Self::SetPreActivationDuration(
                SetPreActivationDurationIxArgs::deserialize(&mut reader)?,
            )),
            SET_PRE_ACTIVATION_SWAP_ADDRESS_IX_DISCM => Ok(Self::SetPreActivationSwapAddress(
                SetPreActivationSwapAddressIxArgs::deserialize(&mut reader)?,
            )),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::InitializeLbPair(args) => {
                writer.write_all(&[INITIALIZE_LB_PAIR_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePermissionLbPair(args) => {
                writer.write_all(&[INITIALIZE_PERMISSION_LB_PAIR_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeCustomizablePermissionlessLbPair(args) => {
                writer.write_all(&[INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeBinArrayBitmapExtension => {
                writer.write_all(&[INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_IX_DISCM])
            }
            Self::InitializeBinArray(args) => {
                writer.write_all(&[INITIALIZE_BIN_ARRAY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::AddLiquidity(args) => {
                writer.write_all(&[ADD_LIQUIDITY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::AddLiquidityByWeight(args) => {
                writer.write_all(&[ADD_LIQUIDITY_BY_WEIGHT_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::AddLiquidityByStrategy(args) => {
                writer.write_all(&[ADD_LIQUIDITY_BY_STRATEGY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::AddLiquidityByStrategyOneSide(args) => {
                writer.write_all(&[ADD_LIQUIDITY_BY_STRATEGY_ONE_SIDE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::AddLiquidityOneSide(args) => {
                writer.write_all(&[ADD_LIQUIDITY_ONE_SIDE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::RemoveLiquidity(args) => {
                writer.write_all(&[REMOVE_LIQUIDITY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePosition(args) => {
                writer.write_all(&[INITIALIZE_POSITION_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePositionPda(args) => {
                writer.write_all(&[INITIALIZE_POSITION_PDA_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePositionByOperator(args) => {
                writer.write_all(&[INITIALIZE_POSITION_BY_OPERATOR_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::UpdatePositionOperator(args) => {
                writer.write_all(&[UPDATE_POSITION_OPERATOR_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::Swap(args) => {
                writer.write_all(&[SWAP_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SwapExactOut(args) => {
                writer.write_all(&[SWAP_EXACT_OUT_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SwapWithPriceImpact(args) => {
                writer.write_all(&[SWAP_WITH_PRICE_IMPACT_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::WithdrawProtocolFee(args) => {
                writer.write_all(&[WITHDRAW_PROTOCOL_FEE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeReward(args) => {
                writer.write_all(&[INITIALIZE_REWARD_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::FundReward(args) => {
                writer.write_all(&[FUND_REWARD_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::UpdateRewardFunder(args) => {
                writer.write_all(&[UPDATE_REWARD_FUNDER_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::UpdateRewardDuration(args) => {
                writer.write_all(&[UPDATE_REWARD_DURATION_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ClaimReward(args) => {
                writer.write_all(&[CLAIM_REWARD_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ClaimFee => writer.write_all(&[CLAIM_FEE_IX_DISCM]),
            Self::ClosePosition => writer.write_all(&[CLOSE_POSITION_IX_DISCM]),
            Self::UpdateFeeParameters(args) => {
                writer.write_all(&[UPDATE_FEE_PARAMETERS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::IncreaseOracleLength(args) => {
                writer.write_all(&[INCREASE_ORACLE_LENGTH_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePresetParameter(args) => {
                writer.write_all(&[INITIALIZE_PRESET_PARAMETER_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ClosePresetParameter => writer.write_all(&[CLOSE_PRESET_PARAMETER_IX_DISCM]),
            Self::RemoveAllLiquidity => writer.write_all(&[REMOVE_ALL_LIQUIDITY_IX_DISCM]),
            Self::TogglePairStatus => writer.write_all(&[TOGGLE_PAIR_STATUS_IX_DISCM]),
            Self::MigratePosition => writer.write_all(&[MIGRATE_POSITION_IX_DISCM]),
            Self::MigrateBinArray => writer.write_all(&[MIGRATE_BIN_ARRAY_IX_DISCM]),
            Self::UpdateFeesAndRewards => writer.write_all(&[UPDATE_FEES_AND_REWARDS_IX_DISCM]),
            Self::WithdrawIneligibleReward(args) => {
                writer.write_all(&[WITHDRAW_INELIGIBLE_REWARD_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetActivationPoint(args) => {
                writer.write_all(&[SET_ACTIVATION_POINT_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::RemoveLiquidityByRange(args) => {
                writer.write_all(&[REMOVE_LIQUIDITY_BY_RANGE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::AddLiquidityOneSidePrecise(args) => {
                writer.write_all(&[ADD_LIQUIDITY_ONE_SIDE_PRECISE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::GoToABin(args) => {
                writer.write_all(&[GO_TO_A_BIN_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetPreActivationDuration(args) => {
                writer.write_all(&[SET_PRE_ACTIVATION_DURATION_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetPreActivationSwapAddress(args) => {
                writer.write_all(&[SET_PRE_ACTIVATION_SWAP_ADDRESS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
