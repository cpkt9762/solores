//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CLAIM_FEE_IX_ACCOUNTS_LEN: usize = 14;
///Accounts struct for the claimFee instruction
#[derive(Copy, Clone, Debug)]
pub struct ClaimFeeAccounts<'me, 'info> {
    pub lb_pair: &'me AccountInfo<'info>,
    pub position: &'me AccountInfo<'info>,
    pub bin_array_lower: &'me AccountInfo<'info>,
    pub bin_array_upper: &'me AccountInfo<'info>,
    pub sender: &'me AccountInfo<'info>,
    pub reserve_x: &'me AccountInfo<'info>,
    pub reserve_y: &'me AccountInfo<'info>,
    pub user_token_x: &'me AccountInfo<'info>,
    pub user_token_y: &'me AccountInfo<'info>,
    pub token_x_mint: &'me AccountInfo<'info>,
    pub token_y_mint: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the claimFee instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ClaimFeeKeys {
    pub lb_pair: Pubkey,
    pub position: Pubkey,
    pub bin_array_lower: Pubkey,
    pub bin_array_upper: Pubkey,
    pub sender: Pubkey,
    pub reserve_x: Pubkey,
    pub reserve_y: Pubkey,
    pub user_token_x: Pubkey,
    pub user_token_y: Pubkey,
    pub token_x_mint: Pubkey,
    pub token_y_mint: Pubkey,
    pub token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<ClaimFeeAccounts<'_, '_>> for ClaimFeeKeys {
    fn from(accounts: ClaimFeeAccounts) -> Self {
        Self {
            lb_pair: *accounts.lb_pair.key,
            position: *accounts.position.key,
            bin_array_lower: *accounts.bin_array_lower.key,
            bin_array_upper: *accounts.bin_array_upper.key,
            sender: *accounts.sender.key,
            reserve_x: *accounts.reserve_x.key,
            reserve_y: *accounts.reserve_y.key,
            user_token_x: *accounts.user_token_x.key,
            user_token_y: *accounts.user_token_y.key,
            token_x_mint: *accounts.token_x_mint.key,
            token_y_mint: *accounts.token_y_mint.key,
            token_program: *accounts.token_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<ClaimFeeKeys> for [AccountMeta; CLAIM_FEE_IX_ACCOUNTS_LEN] {
    fn from(keys: ClaimFeeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.lb_pair,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bin_array_lower,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.bin_array_upper,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.sender,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.reserve_x,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.reserve_y,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_token_x,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_token_y,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_x_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_y_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CLAIM_FEE_IX_ACCOUNTS_LEN]> for ClaimFeeKeys {
    fn from(pubkeys: [Pubkey; CLAIM_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            position: pubkeys[1],
            bin_array_lower: pubkeys[2],
            bin_array_upper: pubkeys[3],
            sender: pubkeys[4],
            reserve_x: pubkeys[5],
            reserve_y: pubkeys[6],
            user_token_x: pubkeys[7],
            user_token_y: pubkeys[8],
            token_x_mint: pubkeys[9],
            token_y_mint: pubkeys[10],
            token_program: pubkeys[11],
            event_authority: pubkeys[12],
            program: pubkeys[13],
        }
    }
}
impl From<&[String]> for ClaimFeeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            lb_pair: pubkeys[0].parse().unwrap(),
            position: pubkeys[1].parse().unwrap(),
            bin_array_lower: pubkeys[2].parse().unwrap(),
            bin_array_upper: pubkeys[3].parse().unwrap(),
            sender: pubkeys[4].parse().unwrap(),
            reserve_x: pubkeys[5].parse().unwrap(),
            reserve_y: pubkeys[6].parse().unwrap(),
            user_token_x: pubkeys[7].parse().unwrap(),
            user_token_y: pubkeys[8].parse().unwrap(),
            token_x_mint: pubkeys[9].parse().unwrap(),
            token_y_mint: pubkeys[10].parse().unwrap(),
            token_program: pubkeys[11].parse().unwrap(),
            event_authority: pubkeys[12].parse().unwrap(),
            program: pubkeys[13].parse().unwrap(),
        }
    }
}
impl<'info> From<ClaimFeeAccounts<'_, 'info>> for [AccountInfo<'info>; CLAIM_FEE_IX_ACCOUNTS_LEN] {
    fn from(accounts: ClaimFeeAccounts<'_, 'info>) -> Self {
        [
            accounts.lb_pair.clone(),
            accounts.position.clone(),
            accounts.bin_array_lower.clone(),
            accounts.bin_array_upper.clone(),
            accounts.sender.clone(),
            accounts.reserve_x.clone(),
            accounts.reserve_y.clone(),
            accounts.user_token_x.clone(),
            accounts.user_token_y.clone(),
            accounts.token_x_mint.clone(),
            accounts.token_y_mint.clone(),
            accounts.token_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CLAIM_FEE_IX_ACCOUNTS_LEN]>
    for ClaimFeeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CLAIM_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: &arr[0],
            position: &arr[1],
            bin_array_lower: &arr[2],
            bin_array_upper: &arr[3],
            sender: &arr[4],
            reserve_x: &arr[5],
            reserve_y: &arr[6],
            user_token_x: &arr[7],
            user_token_y: &arr[8],
            token_x_mint: &arr[9],
            token_y_mint: &arr[10],
            token_program: &arr[11],
            event_authority: &arr[12],
            program: &arr[13],
        }
    }
}
pub const CLAIM_FEE_IX_DISCM: u8 = 24u8;
#[derive(Clone, Debug, PartialEq)]
pub struct ClaimFeeIxData;
impl ClaimFeeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != CLAIM_FEE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    CLAIM_FEE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[CLAIM_FEE_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn claim_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: ClaimFeeKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CLAIM_FEE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: ClaimFeeIxData.try_to_vec()?,
    })
}
pub fn claim_fee_ix(keys: ClaimFeeKeys) -> std::io::Result<Instruction> {
    claim_fee_ix_with_program_id(crate::ID, keys)
}
pub fn claim_fee_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ClaimFeeAccounts<'_, '_>,
) -> ProgramResult {
    let keys: ClaimFeeKeys = accounts.into();
    let ix = claim_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn claim_fee_invoke(accounts: ClaimFeeAccounts<'_, '_>) -> ProgramResult {
    claim_fee_invoke_with_program_id(crate::ID, accounts)
}
pub fn claim_fee_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ClaimFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ClaimFeeKeys = accounts.into();
    let ix = claim_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn claim_fee_invoke_signed(
    accounts: ClaimFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    claim_fee_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn claim_fee_verify_account_keys(
    accounts: ClaimFeeAccounts<'_, '_>,
    keys: ClaimFeeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.lb_pair.key, keys.lb_pair),
        (*accounts.position.key, keys.position),
        (*accounts.bin_array_lower.key, keys.bin_array_lower),
        (*accounts.bin_array_upper.key, keys.bin_array_upper),
        (*accounts.sender.key, keys.sender),
        (*accounts.reserve_x.key, keys.reserve_x),
        (*accounts.reserve_y.key, keys.reserve_y),
        (*accounts.user_token_x.key, keys.user_token_x),
        (*accounts.user_token_y.key, keys.user_token_y),
        (*accounts.token_x_mint.key, keys.token_x_mint),
        (*accounts.token_y_mint.key, keys.token_y_mint),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
