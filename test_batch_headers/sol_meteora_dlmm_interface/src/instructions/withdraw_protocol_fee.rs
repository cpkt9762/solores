//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN: usize = 9;
///Accounts struct for the withdrawProtocolFee instruction
#[derive(Copy, Clone, Debug)]
pub struct WithdrawProtocolFeeAccounts<'me, 'info> {
    pub lb_pair: &'me AccountInfo<'info>,
    pub reserve_x: &'me AccountInfo<'info>,
    pub reserve_y: &'me AccountInfo<'info>,
    pub token_x_mint: &'me AccountInfo<'info>,
    pub token_y_mint: &'me AccountInfo<'info>,
    pub receiver_token_x: &'me AccountInfo<'info>,
    pub receiver_token_y: &'me AccountInfo<'info>,
    pub token_x_program: &'me AccountInfo<'info>,
    pub token_y_program: &'me AccountInfo<'info>,
}
///Public keys struct for the withdrawProtocolFee instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct WithdrawProtocolFeeKeys {
    pub lb_pair: Pubkey,
    pub reserve_x: Pubkey,
    pub reserve_y: Pubkey,
    pub token_x_mint: Pubkey,
    pub token_y_mint: Pubkey,
    pub receiver_token_x: Pubkey,
    pub receiver_token_y: Pubkey,
    pub token_x_program: Pubkey,
    pub token_y_program: Pubkey,
}
impl From<WithdrawProtocolFeeAccounts<'_, '_>> for WithdrawProtocolFeeKeys {
    fn from(accounts: WithdrawProtocolFeeAccounts) -> Self {
        Self {
            lb_pair: *accounts.lb_pair.key,
            reserve_x: *accounts.reserve_x.key,
            reserve_y: *accounts.reserve_y.key,
            token_x_mint: *accounts.token_x_mint.key,
            token_y_mint: *accounts.token_y_mint.key,
            receiver_token_x: *accounts.receiver_token_x.key,
            receiver_token_y: *accounts.receiver_token_y.key,
            token_x_program: *accounts.token_x_program.key,
            token_y_program: *accounts.token_y_program.key,
        }
    }
}
impl From<WithdrawProtocolFeeKeys> for [AccountMeta; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN] {
    fn from(keys: WithdrawProtocolFeeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.lb_pair,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.reserve_x,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.reserve_y,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_x_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_y_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.receiver_token_x,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.receiver_token_y,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_x_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_y_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN]> for WithdrawProtocolFeeKeys {
    fn from(pubkeys: [Pubkey; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            reserve_x: pubkeys[1],
            reserve_y: pubkeys[2],
            token_x_mint: pubkeys[3],
            token_y_mint: pubkeys[4],
            receiver_token_x: pubkeys[5],
            receiver_token_y: pubkeys[6],
            token_x_program: pubkeys[7],
            token_y_program: pubkeys[8],
        }
    }
}
impl From<&[String]> for WithdrawProtocolFeeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            lb_pair: pubkeys[0].parse().unwrap(),
            reserve_x: pubkeys[1].parse().unwrap(),
            reserve_y: pubkeys[2].parse().unwrap(),
            token_x_mint: pubkeys[3].parse().unwrap(),
            token_y_mint: pubkeys[4].parse().unwrap(),
            receiver_token_x: pubkeys[5].parse().unwrap(),
            receiver_token_y: pubkeys[6].parse().unwrap(),
            token_x_program: pubkeys[7].parse().unwrap(),
            token_y_program: pubkeys[8].parse().unwrap(),
        }
    }
}
impl<'info> From<WithdrawProtocolFeeAccounts<'_, 'info>>
    for [AccountInfo<'info>; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: WithdrawProtocolFeeAccounts<'_, 'info>) -> Self {
        [
            accounts.lb_pair.clone(),
            accounts.reserve_x.clone(),
            accounts.reserve_y.clone(),
            accounts.token_x_mint.clone(),
            accounts.token_y_mint.clone(),
            accounts.receiver_token_x.clone(),
            accounts.receiver_token_y.clone(),
            accounts.token_x_program.clone(),
            accounts.token_y_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN]>
    for WithdrawProtocolFeeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: &arr[0],
            reserve_x: &arr[1],
            reserve_y: &arr[2],
            token_x_mint: &arr[3],
            token_y_mint: &arr[4],
            receiver_token_x: &arr[5],
            receiver_token_y: &arr[6],
            token_x_program: &arr[7],
            token_y_program: &arr[8],
        }
    }
}
pub const WITHDRAW_PROTOCOL_FEE_IX_DISCM: u8 = 18u8;
///Arguments for the withdrawProtocolFee instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawProtocolFeeIxArgs {
    pub discriminator: u8,
    pub amount_x: u64,
    pub amount_y: u64,
}
impl Default for WithdrawProtocolFeeIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 18u8,
            amount_x: Default::default(),
            amount_y: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct WithdrawProtocolFeeIxData(pub WithdrawProtocolFeeIxArgs);
impl From<WithdrawProtocolFeeIxArgs> for WithdrawProtocolFeeIxData {
    fn from(args: WithdrawProtocolFeeIxArgs) -> Self {
        Self(args)
    }
}
impl WithdrawProtocolFeeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != WITHDRAW_PROTOCOL_FEE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    WITHDRAW_PROTOCOL_FEE_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(WithdrawProtocolFeeIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[WITHDRAW_PROTOCOL_FEE_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn withdraw_protocol_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: WithdrawProtocolFeeKeys,
    args: WithdrawProtocolFeeIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; WITHDRAW_PROTOCOL_FEE_IX_ACCOUNTS_LEN] = keys.into();
    let data: WithdrawProtocolFeeIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn withdraw_protocol_fee_ix(
    keys: WithdrawProtocolFeeKeys,
    args: WithdrawProtocolFeeIxArgs,
) -> std::io::Result<Instruction> {
    withdraw_protocol_fee_ix_with_program_id(crate::ID, keys, args)
}
pub fn withdraw_protocol_fee_invoke_with_program_id(
    program_id: Pubkey,
    accounts: WithdrawProtocolFeeAccounts<'_, '_>,
    args: WithdrawProtocolFeeIxArgs,
) -> ProgramResult {
    let keys: WithdrawProtocolFeeKeys = accounts.into();
    let ix = withdraw_protocol_fee_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn withdraw_protocol_fee_invoke(
    accounts: WithdrawProtocolFeeAccounts<'_, '_>,
    args: WithdrawProtocolFeeIxArgs,
) -> ProgramResult {
    withdraw_protocol_fee_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn withdraw_protocol_fee_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: WithdrawProtocolFeeAccounts<'_, '_>,
    args: WithdrawProtocolFeeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: WithdrawProtocolFeeKeys = accounts.into();
    let ix = withdraw_protocol_fee_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn withdraw_protocol_fee_invoke_signed(
    accounts: WithdrawProtocolFeeAccounts<'_, '_>,
    args: WithdrawProtocolFeeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    withdraw_protocol_fee_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn withdraw_protocol_fee_verify_account_keys(
    accounts: WithdrawProtocolFeeAccounts<'_, '_>,
    keys: WithdrawProtocolFeeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.lb_pair.key, keys.lb_pair),
        (*accounts.reserve_x.key, keys.reserve_x),
        (*accounts.reserve_y.key, keys.reserve_y),
        (*accounts.token_x_mint.key, keys.token_x_mint),
        (*accounts.token_y_mint.key, keys.token_y_mint),
        (*accounts.receiver_token_x.key, keys.receiver_token_x),
        (*accounts.receiver_token_y.key, keys.receiver_token_y),
        (*accounts.token_x_program.key, keys.token_x_program),
        (*accounts.token_y_program.key, keys.token_y_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl WithdrawProtocolFeeIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<WithdrawProtocolFeeIxArgs> for MeteoraDlmmProgramIx {
    fn from(args: WithdrawProtocolFeeIxArgs) -> Self {
        Self::WithdrawProtocolFee(args)
    }
}
