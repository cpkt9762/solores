//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the togglePairStatus instruction
#[derive(Copy, Clone, Debug)]
pub struct TogglePairStatusAccounts<'me, 'info> {
    pub lb_pair: &'me AccountInfo<'info>,
    pub admin: &'me AccountInfo<'info>,
}
///Public keys struct for the togglePairStatus instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct TogglePairStatusKeys {
    pub lb_pair: Pubkey,
    pub admin: Pubkey,
}
impl From<TogglePairStatusAccounts<'_, '_>> for TogglePairStatusKeys {
    fn from(accounts: TogglePairStatusAccounts) -> Self {
        Self {
            lb_pair: *accounts.lb_pair.key,
            admin: *accounts.admin.key,
        }
    }
}
impl From<TogglePairStatusKeys> for [AccountMeta; TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN] {
    fn from(keys: TogglePairStatusKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.lb_pair,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.admin,
                is_signer: true,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN]> for TogglePairStatusKeys {
    fn from(pubkeys: [Pubkey; TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: pubkeys[0],
            admin: pubkeys[1],
        }
    }
}
impl From<&[String]> for TogglePairStatusKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            lb_pair: pubkeys[0].parse().unwrap(),
            admin: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<TogglePairStatusAccounts<'_, 'info>>
    for [AccountInfo<'info>; TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN]
{
    fn from(accounts: TogglePairStatusAccounts<'_, 'info>) -> Self {
        [accounts.lb_pair.clone(), accounts.admin.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN]>
    for TogglePairStatusAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            lb_pair: &arr[0],
            admin: &arr[1],
        }
    }
}
pub const TOGGLE_PAIR_STATUS_IX_DISCM: u8 = 31u8;
#[derive(Clone, Debug, PartialEq)]
pub struct TogglePairStatusIxData;
impl TogglePairStatusIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != TOGGLE_PAIR_STATUS_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    TOGGLE_PAIR_STATUS_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[TOGGLE_PAIR_STATUS_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn toggle_pair_status_ix_with_program_id(
    program_id: Pubkey,
    keys: TogglePairStatusKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; TOGGLE_PAIR_STATUS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: TogglePairStatusIxData.try_to_vec()?,
    })
}
pub fn toggle_pair_status_ix(keys: TogglePairStatusKeys) -> std::io::Result<Instruction> {
    toggle_pair_status_ix_with_program_id(crate::ID, keys)
}
pub fn toggle_pair_status_invoke_with_program_id(
    program_id: Pubkey,
    accounts: TogglePairStatusAccounts<'_, '_>,
) -> ProgramResult {
    let keys: TogglePairStatusKeys = accounts.into();
    let ix = toggle_pair_status_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn toggle_pair_status_invoke(accounts: TogglePairStatusAccounts<'_, '_>) -> ProgramResult {
    toggle_pair_status_invoke_with_program_id(crate::ID, accounts)
}
pub fn toggle_pair_status_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: TogglePairStatusAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: TogglePairStatusKeys = accounts.into();
    let ix = toggle_pair_status_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn toggle_pair_status_invoke_signed(
    accounts: TogglePairStatusAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    toggle_pair_status_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn toggle_pair_status_verify_account_keys(
    accounts: TogglePairStatusAccounts<'_, '_>,
    keys: TogglePairStatusKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.lb_pair.key, keys.lb_pair),
        (*accounts.admin.key, keys.admin),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
