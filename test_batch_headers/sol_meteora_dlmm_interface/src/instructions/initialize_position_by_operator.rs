//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN: usize = 11;
///Accounts struct for the initializePositionByOperator instruction
#[derive(Copy, Clone, Debug)]
pub struct InitializePositionByOperatorAccounts<'me, 'info> {
    pub payer: &'me AccountInfo<'info>,
    pub base: &'me AccountInfo<'info>,
    pub position: &'me AccountInfo<'info>,
    pub lb_pair: &'me AccountInfo<'info>,
    pub owner: &'me AccountInfo<'info>,
    ///operator
    pub operator: &'me AccountInfo<'info>,
    pub operator_token_x: &'me AccountInfo<'info>,
    pub owner_token_x: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the initializePositionByOperator instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitializePositionByOperatorKeys {
    pub payer: Pubkey,
    pub base: Pubkey,
    pub position: Pubkey,
    pub lb_pair: Pubkey,
    pub owner: Pubkey,
    ///operator
    pub operator: Pubkey,
    pub operator_token_x: Pubkey,
    pub owner_token_x: Pubkey,
    pub system_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<InitializePositionByOperatorAccounts<'_, '_>> for InitializePositionByOperatorKeys {
    fn from(accounts: InitializePositionByOperatorAccounts) -> Self {
        Self {
            payer: *accounts.payer.key,
            base: *accounts.base.key,
            position: *accounts.position.key,
            lb_pair: *accounts.lb_pair.key,
            owner: *accounts.owner.key,
            operator: *accounts.operator.key,
            operator_token_x: *accounts.operator_token_x.key,
            owner_token_x: *accounts.owner_token_x.key,
            system_program: *accounts.system_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<InitializePositionByOperatorKeys>
    for [AccountMeta; INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializePositionByOperatorKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.lb_pair,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.owner,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.operator,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.operator_token_x,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.owner_token_x,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN]>
    for InitializePositionByOperatorKeys
{
    fn from(pubkeys: [Pubkey; INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            payer: pubkeys[0],
            base: pubkeys[1],
            position: pubkeys[2],
            lb_pair: pubkeys[3],
            owner: pubkeys[4],
            operator: pubkeys[5],
            operator_token_x: pubkeys[6],
            owner_token_x: pubkeys[7],
            system_program: pubkeys[8],
            event_authority: pubkeys[9],
            program: pubkeys[10],
        }
    }
}
impl From<&[String]> for InitializePositionByOperatorKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            payer: pubkeys[0].parse().unwrap(),
            base: pubkeys[1].parse().unwrap(),
            position: pubkeys[2].parse().unwrap(),
            lb_pair: pubkeys[3].parse().unwrap(),
            owner: pubkeys[4].parse().unwrap(),
            operator: pubkeys[5].parse().unwrap(),
            operator_token_x: pubkeys[6].parse().unwrap(),
            owner_token_x: pubkeys[7].parse().unwrap(),
            system_program: pubkeys[8].parse().unwrap(),
            event_authority: pubkeys[9].parse().unwrap(),
            program: pubkeys[10].parse().unwrap(),
        }
    }
}
impl<'info> From<InitializePositionByOperatorAccounts<'_, 'info>>
    for [AccountInfo<'info>; INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN]
{
    fn from(accounts: InitializePositionByOperatorAccounts<'_, 'info>) -> Self {
        [
            accounts.payer.clone(),
            accounts.base.clone(),
            accounts.position.clone(),
            accounts.lb_pair.clone(),
            accounts.owner.clone(),
            accounts.operator.clone(),
            accounts.operator_token_x.clone(),
            accounts.owner_token_x.clone(),
            accounts.system_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN]>
    for InitializePositionByOperatorAccounts<'me, 'info>
{
    fn from(
        arr: &'me [AccountInfo<'info>; INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN],
    ) -> Self {
        Self {
            payer: &arr[0],
            base: &arr[1],
            position: &arr[2],
            lb_pair: &arr[3],
            owner: &arr[4],
            operator: &arr[5],
            operator_token_x: &arr[6],
            owner_token_x: &arr[7],
            system_program: &arr[8],
            event_authority: &arr[9],
            program: &arr[10],
        }
    }
}
pub const INITIALIZE_POSITION_BY_OPERATOR_IX_DISCM: u8 = 13u8;
///Arguments for the initializePositionByOperator instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePositionByOperatorIxArgs {
    pub discriminator: u8,
    pub lower_bin_id: i32,
    pub width: i32,
    pub fee_owner: Pubkey,
    pub lock_release_point: u64,
}
impl Default for InitializePositionByOperatorIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 13u8,
            lower_bin_id: Default::default(),
            width: Default::default(),
            fee_owner: Default::default(),
            lock_release_point: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct InitializePositionByOperatorIxData(pub InitializePositionByOperatorIxArgs);
impl From<InitializePositionByOperatorIxArgs> for InitializePositionByOperatorIxData {
    fn from(args: InitializePositionByOperatorIxArgs) -> Self {
        Self(args)
    }
}
impl InitializePositionByOperatorIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != INITIALIZE_POSITION_BY_OPERATOR_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    INITIALIZE_POSITION_BY_OPERATOR_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(InitializePositionByOperatorIxArgs::deserialize(
            &mut reader,
        )?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[INITIALIZE_POSITION_BY_OPERATOR_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initialize_position_by_operator_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializePositionByOperatorKeys,
    args: InitializePositionByOperatorIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIALIZE_POSITION_BY_OPERATOR_IX_ACCOUNTS_LEN] = keys.into();
    let data: InitializePositionByOperatorIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn initialize_position_by_operator_ix(
    keys: InitializePositionByOperatorKeys,
    args: InitializePositionByOperatorIxArgs,
) -> std::io::Result<Instruction> {
    initialize_position_by_operator_ix_with_program_id(crate::ID, keys, args)
}
pub fn initialize_position_by_operator_invoke_with_program_id(
    program_id: Pubkey,
    accounts: InitializePositionByOperatorAccounts<'_, '_>,
    args: InitializePositionByOperatorIxArgs,
) -> ProgramResult {
    let keys: InitializePositionByOperatorKeys = accounts.into();
    let ix = initialize_position_by_operator_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn initialize_position_by_operator_invoke(
    accounts: InitializePositionByOperatorAccounts<'_, '_>,
    args: InitializePositionByOperatorIxArgs,
) -> ProgramResult {
    initialize_position_by_operator_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn initialize_position_by_operator_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: InitializePositionByOperatorAccounts<'_, '_>,
    args: InitializePositionByOperatorIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: InitializePositionByOperatorKeys = accounts.into();
    let ix = initialize_position_by_operator_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initialize_position_by_operator_invoke_signed(
    accounts: InitializePositionByOperatorAccounts<'_, '_>,
    args: InitializePositionByOperatorIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initialize_position_by_operator_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn initialize_position_by_operator_verify_account_keys(
    accounts: InitializePositionByOperatorAccounts<'_, '_>,
    keys: InitializePositionByOperatorKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.payer.key, keys.payer),
        (*accounts.base.key, keys.base),
        (*accounts.position.key, keys.position),
        (*accounts.lb_pair.key, keys.lb_pair),
        (*accounts.owner.key, keys.owner),
        (*accounts.operator.key, keys.operator),
        (*accounts.operator_token_x.key, keys.operator_token_x),
        (*accounts.owner_token_x.key, keys.owner_token_x),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl InitializePositionByOperatorIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<InitializePositionByOperatorIxArgs> for MeteoraDlmmProgramIx {
    fn from(args: InitializePositionByOperatorIxArgs) -> Self {
        Self::InitializePositionByOperator(args)
    }
}
