//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const NAME_SUCCESSOR_IX_ACCOUNTS_LEN: usize = 4;
///Accounts struct for the NameSuccessor instruction
#[derive(Copy, Clone, Debug)]
pub struct NameSuccessorAccounts<'me, 'info> {
    pub phoenix_program: &'me AccountInfo<'info>,
    pub log_authority: &'me AccountInfo<'info>,
    pub market: &'me AccountInfo<'info>,
    pub market_authority: &'me AccountInfo<'info>,
}
///Public keys struct for the NameSuccessor instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct NameSuccessorKeys {
    pub phoenix_program: Pubkey,
    pub log_authority: Pubkey,
    pub market: Pubkey,
    pub market_authority: Pubkey,
}
impl From<NameSuccessorAccounts<'_, '_>> for NameSuccessorKeys {
    fn from(accounts: NameSuccessorAccounts) -> Self {
        Self {
            phoenix_program: *accounts.phoenix_program.key,
            log_authority: *accounts.log_authority.key,
            market: *accounts.market.key,
            market_authority: *accounts.market_authority.key,
        }
    }
}
impl From<NameSuccessorKeys> for [AccountMeta; NAME_SUCCESSOR_IX_ACCOUNTS_LEN] {
    fn from(keys: NameSuccessorKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.phoenix_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.log_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.market_authority,
                is_signer: true,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; NAME_SUCCESSOR_IX_ACCOUNTS_LEN]> for NameSuccessorKeys {
    fn from(pubkeys: [Pubkey; NAME_SUCCESSOR_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            phoenix_program: pubkeys[0],
            log_authority: pubkeys[1],
            market: pubkeys[2],
            market_authority: pubkeys[3],
        }
    }
}
impl From<&[String]> for NameSuccessorKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            phoenix_program: pubkeys[0].parse().unwrap(),
            log_authority: pubkeys[1].parse().unwrap(),
            market: pubkeys[2].parse().unwrap(),
            market_authority: pubkeys[3].parse().unwrap(),
        }
    }
}
impl<'info> From<NameSuccessorAccounts<'_, 'info>>
    for [AccountInfo<'info>; NAME_SUCCESSOR_IX_ACCOUNTS_LEN]
{
    fn from(accounts: NameSuccessorAccounts<'_, 'info>) -> Self {
        [
            accounts.phoenix_program.clone(),
            accounts.log_authority.clone(),
            accounts.market.clone(),
            accounts.market_authority.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; NAME_SUCCESSOR_IX_ACCOUNTS_LEN]>
    for NameSuccessorAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; NAME_SUCCESSOR_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            phoenix_program: &arr[0],
            log_authority: &arr[1],
            market: &arr[2],
            market_authority: &arr[3],
        }
    }
}
pub const NAME_SUCCESSOR_IX_DISCM: u8 = 20u8;
///Arguments for the NameSuccessor instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NameSuccessorIxArgs {
    pub discriminator: u8,
    pub successor: Pubkey,
}
impl Default for NameSuccessorIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 102u8,
            successor: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct NameSuccessorIxData(pub NameSuccessorIxArgs);
impl From<NameSuccessorIxArgs> for NameSuccessorIxData {
    fn from(args: NameSuccessorIxArgs) -> Self {
        Self(args)
    }
}
impl NameSuccessorIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != NAME_SUCCESSOR_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    NAME_SUCCESSOR_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(NameSuccessorIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[NAME_SUCCESSOR_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn name_successor_ix_with_program_id(
    program_id: Pubkey,
    keys: NameSuccessorKeys,
    args: NameSuccessorIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; NAME_SUCCESSOR_IX_ACCOUNTS_LEN] = keys.into();
    let data: NameSuccessorIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn name_successor_ix(
    keys: NameSuccessorKeys,
    args: NameSuccessorIxArgs,
) -> std::io::Result<Instruction> {
    name_successor_ix_with_program_id(crate::ID, keys, args)
}
pub fn name_successor_invoke_with_program_id(
    program_id: Pubkey,
    accounts: NameSuccessorAccounts<'_, '_>,
    args: NameSuccessorIxArgs,
) -> ProgramResult {
    let keys: NameSuccessorKeys = accounts.into();
    let ix = name_successor_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn name_successor_invoke(
    accounts: NameSuccessorAccounts<'_, '_>,
    args: NameSuccessorIxArgs,
) -> ProgramResult {
    name_successor_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn name_successor_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: NameSuccessorAccounts<'_, '_>,
    args: NameSuccessorIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: NameSuccessorKeys = accounts.into();
    let ix = name_successor_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn name_successor_invoke_signed(
    accounts: NameSuccessorAccounts<'_, '_>,
    args: NameSuccessorIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    name_successor_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn name_successor_verify_account_keys(
    accounts: NameSuccessorAccounts<'_, '_>,
    keys: NameSuccessorKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.phoenix_program.key, keys.phoenix_program),
        (*accounts.log_authority.key, keys.log_authority),
        (*accounts.market.key, keys.market),
        (*accounts.market_authority.key, keys.market_authority),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl NameSuccessorIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<NameSuccessorIxArgs> for PhoenixProgramIx {
    fn from(args: NameSuccessorIxArgs) -> Self {
        Self::NameSuccessor(args)
    }
}
