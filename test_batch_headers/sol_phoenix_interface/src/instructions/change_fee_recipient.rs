//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN: usize = 5;
///Accounts struct for the ChangeFeeRecipient instruction
#[derive(Copy, Clone, Debug)]
pub struct ChangeFeeRecipientAccounts<'me, 'info> {
    pub phoenix_program: &'me AccountInfo<'info>,
    pub log_authority: &'me AccountInfo<'info>,
    pub market: &'me AccountInfo<'info>,
    pub market_authority: &'me AccountInfo<'info>,
    pub new_fee_recipient: &'me AccountInfo<'info>,
}
///Public keys struct for the ChangeFeeRecipient instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ChangeFeeRecipientKeys {
    pub phoenix_program: Pubkey,
    pub log_authority: Pubkey,
    pub market: Pubkey,
    pub market_authority: Pubkey,
    pub new_fee_recipient: Pubkey,
}
impl From<ChangeFeeRecipientAccounts<'_, '_>> for ChangeFeeRecipientKeys {
    fn from(accounts: ChangeFeeRecipientAccounts) -> Self {
        Self {
            phoenix_program: *accounts.phoenix_program.key,
            log_authority: *accounts.log_authority.key,
            market: *accounts.market.key,
            market_authority: *accounts.market_authority.key,
            new_fee_recipient: *accounts.new_fee_recipient.key,
        }
    }
}
impl From<ChangeFeeRecipientKeys> for [AccountMeta; CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN] {
    fn from(keys: ChangeFeeRecipientKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.phoenix_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.log_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.market_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.new_fee_recipient,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN]> for ChangeFeeRecipientKeys {
    fn from(pubkeys: [Pubkey; CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            phoenix_program: pubkeys[0],
            log_authority: pubkeys[1],
            market: pubkeys[2],
            market_authority: pubkeys[3],
            new_fee_recipient: pubkeys[4],
        }
    }
}
impl From<&[String]> for ChangeFeeRecipientKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            phoenix_program: pubkeys[0].parse().unwrap(),
            log_authority: pubkeys[1].parse().unwrap(),
            market: pubkeys[2].parse().unwrap(),
            market_authority: pubkeys[3].parse().unwrap(),
            new_fee_recipient: pubkeys[4].parse().unwrap(),
        }
    }
}
impl<'info> From<ChangeFeeRecipientAccounts<'_, 'info>>
    for [AccountInfo<'info>; CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ChangeFeeRecipientAccounts<'_, 'info>) -> Self {
        [
            accounts.phoenix_program.clone(),
            accounts.log_authority.clone(),
            accounts.market.clone(),
            accounts.market_authority.clone(),
            accounts.new_fee_recipient.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN]>
    for ChangeFeeRecipientAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            phoenix_program: &arr[0],
            log_authority: &arr[1],
            market: &arr[2],
            market_authority: &arr[3],
            new_fee_recipient: &arr[4],
        }
    }
}
pub const CHANGE_FEE_RECIPIENT_IX_DISCM: u8 = 27u8;
#[derive(Clone, Debug, PartialEq)]
pub struct ChangeFeeRecipientIxData;
impl ChangeFeeRecipientIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != CHANGE_FEE_RECIPIENT_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    CHANGE_FEE_RECIPIENT_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[CHANGE_FEE_RECIPIENT_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn change_fee_recipient_ix_with_program_id(
    program_id: Pubkey,
    keys: ChangeFeeRecipientKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CHANGE_FEE_RECIPIENT_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: ChangeFeeRecipientIxData.try_to_vec()?,
    })
}
pub fn change_fee_recipient_ix(keys: ChangeFeeRecipientKeys) -> std::io::Result<Instruction> {
    change_fee_recipient_ix_with_program_id(crate::ID, keys)
}
pub fn change_fee_recipient_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ChangeFeeRecipientAccounts<'_, '_>,
) -> ProgramResult {
    let keys: ChangeFeeRecipientKeys = accounts.into();
    let ix = change_fee_recipient_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn change_fee_recipient_invoke(accounts: ChangeFeeRecipientAccounts<'_, '_>) -> ProgramResult {
    change_fee_recipient_invoke_with_program_id(crate::ID, accounts)
}
pub fn change_fee_recipient_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ChangeFeeRecipientAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ChangeFeeRecipientKeys = accounts.into();
    let ix = change_fee_recipient_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn change_fee_recipient_invoke_signed(
    accounts: ChangeFeeRecipientAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    change_fee_recipient_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn change_fee_recipient_verify_account_keys(
    accounts: ChangeFeeRecipientAccounts<'_, '_>,
    keys: ChangeFeeRecipientKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.phoenix_program.key, keys.phoenix_program),
        (*accounts.log_authority.key, keys.log_authority),
        (*accounts.market.key, keys.market),
        (*accounts.market_authority.key, keys.market_authority),
        (*accounts.new_fee_recipient.key, keys.new_fee_recipient),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
