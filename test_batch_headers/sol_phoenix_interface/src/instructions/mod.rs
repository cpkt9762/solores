//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod swap;
pub use swap::*;
pub mod swap_with_free_funds;
pub use swap_with_free_funds::*;
pub mod place_limit_order;
pub use place_limit_order::*;
pub mod place_limit_order_with_free_funds;
pub use place_limit_order_with_free_funds::*;
pub mod reduce_order;
pub use reduce_order::*;
pub mod reduce_order_with_free_funds;
pub use reduce_order_with_free_funds::*;
pub mod cancel_all_orders;
pub use cancel_all_orders::*;
pub mod cancel_all_orders_with_free_funds;
pub use cancel_all_orders_with_free_funds::*;
pub mod cancel_up_to;
pub use cancel_up_to::*;
pub mod cancel_up_to_with_free_funds;
pub use cancel_up_to_with_free_funds::*;
pub mod cancel_multiple_orders_by_id;
pub use cancel_multiple_orders_by_id::*;
pub mod cancel_multiple_orders_by_id_with_free_funds;
pub use cancel_multiple_orders_by_id_with_free_funds::*;
pub mod withdraw_funds;
pub use withdraw_funds::*;
pub mod deposit_funds;
pub use deposit_funds::*;
pub mod request_seat;
pub use request_seat::*;
pub mod log;
pub use log::*;
pub mod place_multiple_post_only_orders;
pub use place_multiple_post_only_orders::*;
pub mod place_multiple_post_only_orders_with_free_funds;
pub use place_multiple_post_only_orders_with_free_funds::*;
pub mod initialize_market;
pub use initialize_market::*;
pub mod claim_authority;
pub use claim_authority::*;
pub mod name_successor;
pub use name_successor::*;
pub mod change_market_status;
pub use change_market_status::*;
pub mod change_seat_status;
pub use change_seat_status::*;
pub mod request_seat_authorized;
pub use request_seat_authorized::*;
pub mod evict_seat;
pub use evict_seat::*;
pub mod force_cancel_orders;
pub use force_cancel_orders::*;
pub mod collect_fees;
pub use collect_fees::*;
pub mod change_fee_recipient;
pub use change_fee_recipient::*;
#[derive(Clone, Debug, PartialEq)]
pub enum PhoenixProgramIx {
    Swap(SwapIxArgs),
    SwapWithFreeFunds(SwapWithFreeFundsIxArgs),
    PlaceLimitOrder(PlaceLimitOrderIxArgs),
    PlaceLimitOrderWithFreeFunds(PlaceLimitOrderWithFreeFundsIxArgs),
    ReduceOrder(ReduceOrderIxArgs),
    ReduceOrderWithFreeFunds(ReduceOrderWithFreeFundsIxArgs),
    CancelAllOrders,
    CancelAllOrdersWithFreeFunds,
    CancelUpTo(CancelUpToIxArgs),
    CancelUpToWithFreeFunds(CancelUpToWithFreeFundsIxArgs),
    CancelMultipleOrdersById(CancelMultipleOrdersByIdIxArgs),
    CancelMultipleOrdersByIdWithFreeFunds(CancelMultipleOrdersByIdWithFreeFundsIxArgs),
    WithdrawFunds(WithdrawFundsIxArgs),
    DepositFunds(DepositFundsIxArgs),
    RequestSeat,
    Log,
    PlaceMultiplePostOnlyOrders(PlaceMultiplePostOnlyOrdersIxArgs),
    PlaceMultiplePostOnlyOrdersWithFreeFunds(PlaceMultiplePostOnlyOrdersWithFreeFundsIxArgs),
    InitializeMarket(InitializeMarketIxArgs),
    ClaimAuthority,
    NameSuccessor(NameSuccessorIxArgs),
    ChangeMarketStatus(ChangeMarketStatusIxArgs),
    ChangeSeatStatus(ChangeSeatStatusIxArgs),
    RequestSeatAuthorized,
    EvictSeat,
    ForceCancelOrders(ForceCancelOrdersIxArgs),
    CollectFees,
    ChangeFeeRecipient,
}
impl PhoenixProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        let mut reader = &buf[1..];
        match maybe_discm {
            SWAP_IX_DISCM => Ok(Self::Swap(SwapIxArgs::deserialize(&mut reader)?)),
            SWAP_WITH_FREE_FUNDS_IX_DISCM => Ok(Self::SwapWithFreeFunds(
                SwapWithFreeFundsIxArgs::deserialize(&mut reader)?,
            )),
            PLACE_LIMIT_ORDER_IX_DISCM => Ok(Self::PlaceLimitOrder(
                PlaceLimitOrderIxArgs::deserialize(&mut reader)?,
            )),
            PLACE_LIMIT_ORDER_WITH_FREE_FUNDS_IX_DISCM => Ok(Self::PlaceLimitOrderWithFreeFunds(
                PlaceLimitOrderWithFreeFundsIxArgs::deserialize(&mut reader)?,
            )),
            REDUCE_ORDER_IX_DISCM => Ok(Self::ReduceOrder(ReduceOrderIxArgs::deserialize(
                &mut reader,
            )?)),
            REDUCE_ORDER_WITH_FREE_FUNDS_IX_DISCM => Ok(Self::ReduceOrderWithFreeFunds(
                ReduceOrderWithFreeFundsIxArgs::deserialize(&mut reader)?,
            )),
            CANCEL_ALL_ORDERS_IX_DISCM => Ok(Self::CancelAllOrders),
            CANCEL_ALL_ORDERS_WITH_FREE_FUNDS_IX_DISCM => Ok(Self::CancelAllOrdersWithFreeFunds),
            CANCEL_UP_TO_IX_DISCM => Ok(Self::CancelUpTo(CancelUpToIxArgs::deserialize(
                &mut reader,
            )?)),
            CANCEL_UP_TO_WITH_FREE_FUNDS_IX_DISCM => Ok(Self::CancelUpToWithFreeFunds(
                CancelUpToWithFreeFundsIxArgs::deserialize(&mut reader)?,
            )),
            CANCEL_MULTIPLE_ORDERS_BY_ID_IX_DISCM => Ok(Self::CancelMultipleOrdersById(
                CancelMultipleOrdersByIdIxArgs::deserialize(&mut reader)?,
            )),
            CANCEL_MULTIPLE_ORDERS_BY_ID_WITH_FREE_FUNDS_IX_DISCM => {
                Ok(Self::CancelMultipleOrdersByIdWithFreeFunds(
                    CancelMultipleOrdersByIdWithFreeFundsIxArgs::deserialize(&mut reader)?,
                ))
            }
            WITHDRAW_FUNDS_IX_DISCM => Ok(Self::WithdrawFunds(WithdrawFundsIxArgs::deserialize(
                &mut reader,
            )?)),
            DEPOSIT_FUNDS_IX_DISCM => Ok(Self::DepositFunds(DepositFundsIxArgs::deserialize(
                &mut reader,
            )?)),
            REQUEST_SEAT_IX_DISCM => Ok(Self::RequestSeat),
            LOG_IX_DISCM => Ok(Self::Log),
            PLACE_MULTIPLE_POST_ONLY_ORDERS_IX_DISCM => Ok(Self::PlaceMultiplePostOnlyOrders(
                PlaceMultiplePostOnlyOrdersIxArgs::deserialize(&mut reader)?,
            )),
            PLACE_MULTIPLE_POST_ONLY_ORDERS_WITH_FREE_FUNDS_IX_DISCM => {
                Ok(Self::PlaceMultiplePostOnlyOrdersWithFreeFunds(
                    PlaceMultiplePostOnlyOrdersWithFreeFundsIxArgs::deserialize(&mut reader)?,
                ))
            }
            INITIALIZE_MARKET_IX_DISCM => Ok(Self::InitializeMarket(
                InitializeMarketIxArgs::deserialize(&mut reader)?,
            )),
            CLAIM_AUTHORITY_IX_DISCM => Ok(Self::ClaimAuthority),
            NAME_SUCCESSOR_IX_DISCM => Ok(Self::NameSuccessor(NameSuccessorIxArgs::deserialize(
                &mut reader,
            )?)),
            CHANGE_MARKET_STATUS_IX_DISCM => Ok(Self::ChangeMarketStatus(
                ChangeMarketStatusIxArgs::deserialize(&mut reader)?,
            )),
            CHANGE_SEAT_STATUS_IX_DISCM => Ok(Self::ChangeSeatStatus(
                ChangeSeatStatusIxArgs::deserialize(&mut reader)?,
            )),
            REQUEST_SEAT_AUTHORIZED_IX_DISCM => Ok(Self::RequestSeatAuthorized),
            EVICT_SEAT_IX_DISCM => Ok(Self::EvictSeat),
            FORCE_CANCEL_ORDERS_IX_DISCM => Ok(Self::ForceCancelOrders(
                ForceCancelOrdersIxArgs::deserialize(&mut reader)?,
            )),
            COLLECT_FEES_IX_DISCM => Ok(Self::CollectFees),
            CHANGE_FEE_RECIPIENT_IX_DISCM => Ok(Self::ChangeFeeRecipient),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::Swap(args) => {
                writer.write_all(&[SWAP_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SwapWithFreeFunds(args) => {
                writer.write_all(&[SWAP_WITH_FREE_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::PlaceLimitOrder(args) => {
                writer.write_all(&[PLACE_LIMIT_ORDER_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::PlaceLimitOrderWithFreeFunds(args) => {
                writer.write_all(&[PLACE_LIMIT_ORDER_WITH_FREE_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ReduceOrder(args) => {
                writer.write_all(&[REDUCE_ORDER_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ReduceOrderWithFreeFunds(args) => {
                writer.write_all(&[REDUCE_ORDER_WITH_FREE_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CancelAllOrders => writer.write_all(&[CANCEL_ALL_ORDERS_IX_DISCM]),
            Self::CancelAllOrdersWithFreeFunds => {
                writer.write_all(&[CANCEL_ALL_ORDERS_WITH_FREE_FUNDS_IX_DISCM])
            }
            Self::CancelUpTo(args) => {
                writer.write_all(&[CANCEL_UP_TO_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CancelUpToWithFreeFunds(args) => {
                writer.write_all(&[CANCEL_UP_TO_WITH_FREE_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CancelMultipleOrdersById(args) => {
                writer.write_all(&[CANCEL_MULTIPLE_ORDERS_BY_ID_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CancelMultipleOrdersByIdWithFreeFunds(args) => {
                writer.write_all(&[CANCEL_MULTIPLE_ORDERS_BY_ID_WITH_FREE_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::WithdrawFunds(args) => {
                writer.write_all(&[WITHDRAW_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::DepositFunds(args) => {
                writer.write_all(&[DEPOSIT_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::RequestSeat => writer.write_all(&[REQUEST_SEAT_IX_DISCM]),
            Self::Log => writer.write_all(&[LOG_IX_DISCM]),
            Self::PlaceMultiplePostOnlyOrders(args) => {
                writer.write_all(&[PLACE_MULTIPLE_POST_ONLY_ORDERS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::PlaceMultiplePostOnlyOrdersWithFreeFunds(args) => {
                writer.write_all(&[PLACE_MULTIPLE_POST_ONLY_ORDERS_WITH_FREE_FUNDS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeMarket(args) => {
                writer.write_all(&[INITIALIZE_MARKET_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ClaimAuthority => writer.write_all(&[CLAIM_AUTHORITY_IX_DISCM]),
            Self::NameSuccessor(args) => {
                writer.write_all(&[NAME_SUCCESSOR_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ChangeMarketStatus(args) => {
                writer.write_all(&[CHANGE_MARKET_STATUS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ChangeSeatStatus(args) => {
                writer.write_all(&[CHANGE_SEAT_STATUS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::RequestSeatAuthorized => writer.write_all(&[REQUEST_SEAT_AUTHORIZED_IX_DISCM]),
            Self::EvictSeat => writer.write_all(&[EVICT_SEAT_IX_DISCM]),
            Self::ForceCancelOrders(args) => {
                writer.write_all(&[FORCE_CANCEL_ORDERS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CollectFees => writer.write_all(&[COLLECT_FEES_IX_DISCM]),
            Self::ChangeFeeRecipient => writer.write_all(&[CHANGE_FEE_RECIPIENT_IX_DISCM]),
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
