//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN: usize = 8;
///Accounts struct for the RequestSeatAuthorized instruction
#[derive(Copy, Clone, Debug)]
pub struct RequestSeatAuthorizedAccounts<'me, 'info> {
    pub phoenix_program: &'me AccountInfo<'info>,
    pub log_authority: &'me AccountInfo<'info>,
    pub market: &'me AccountInfo<'info>,
    pub market_authority: &'me AccountInfo<'info>,
    pub payer: &'me AccountInfo<'info>,
    pub trader: &'me AccountInfo<'info>,
    pub seat: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the RequestSeatAuthorized instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct RequestSeatAuthorizedKeys {
    pub phoenix_program: Pubkey,
    pub log_authority: Pubkey,
    pub market: Pubkey,
    pub market_authority: Pubkey,
    pub payer: Pubkey,
    pub trader: Pubkey,
    pub seat: Pubkey,
    pub system_program: Pubkey,
}
impl From<RequestSeatAuthorizedAccounts<'_, '_>> for RequestSeatAuthorizedKeys {
    fn from(accounts: RequestSeatAuthorizedAccounts) -> Self {
        Self {
            phoenix_program: *accounts.phoenix_program.key,
            log_authority: *accounts.log_authority.key,
            market: *accounts.market.key,
            market_authority: *accounts.market_authority.key,
            payer: *accounts.payer.key,
            trader: *accounts.trader.key,
            seat: *accounts.seat.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<RequestSeatAuthorizedKeys> for [AccountMeta; REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN] {
    fn from(keys: RequestSeatAuthorizedKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.phoenix_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.log_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.market,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.market_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.payer,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.trader,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.seat,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN]> for RequestSeatAuthorizedKeys {
    fn from(pubkeys: [Pubkey; REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            phoenix_program: pubkeys[0],
            log_authority: pubkeys[1],
            market: pubkeys[2],
            market_authority: pubkeys[3],
            payer: pubkeys[4],
            trader: pubkeys[5],
            seat: pubkeys[6],
            system_program: pubkeys[7],
        }
    }
}
impl From<&[String]> for RequestSeatAuthorizedKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            phoenix_program: pubkeys[0].parse().unwrap(),
            log_authority: pubkeys[1].parse().unwrap(),
            market: pubkeys[2].parse().unwrap(),
            market_authority: pubkeys[3].parse().unwrap(),
            payer: pubkeys[4].parse().unwrap(),
            trader: pubkeys[5].parse().unwrap(),
            seat: pubkeys[6].parse().unwrap(),
            system_program: pubkeys[7].parse().unwrap(),
        }
    }
}
impl<'info> From<RequestSeatAuthorizedAccounts<'_, 'info>>
    for [AccountInfo<'info>; REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN]
{
    fn from(accounts: RequestSeatAuthorizedAccounts<'_, 'info>) -> Self {
        [
            accounts.phoenix_program.clone(),
            accounts.log_authority.clone(),
            accounts.market.clone(),
            accounts.market_authority.clone(),
            accounts.payer.clone(),
            accounts.trader.clone(),
            accounts.seat.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN]>
    for RequestSeatAuthorizedAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            phoenix_program: &arr[0],
            log_authority: &arr[1],
            market: &arr[2],
            market_authority: &arr[3],
            payer: &arr[4],
            trader: &arr[5],
            seat: &arr[6],
            system_program: &arr[7],
        }
    }
}
pub const REQUEST_SEAT_AUTHORIZED_IX_DISCM: u8 = 23u8;
#[derive(Clone, Debug, PartialEq)]
pub struct RequestSeatAuthorizedIxData;
impl RequestSeatAuthorizedIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != REQUEST_SEAT_AUTHORIZED_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    REQUEST_SEAT_AUTHORIZED_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[REQUEST_SEAT_AUTHORIZED_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn request_seat_authorized_ix_with_program_id(
    program_id: Pubkey,
    keys: RequestSeatAuthorizedKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; REQUEST_SEAT_AUTHORIZED_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: RequestSeatAuthorizedIxData.try_to_vec()?,
    })
}
pub fn request_seat_authorized_ix(keys: RequestSeatAuthorizedKeys) -> std::io::Result<Instruction> {
    request_seat_authorized_ix_with_program_id(crate::ID, keys)
}
pub fn request_seat_authorized_invoke_with_program_id(
    program_id: Pubkey,
    accounts: RequestSeatAuthorizedAccounts<'_, '_>,
) -> ProgramResult {
    let keys: RequestSeatAuthorizedKeys = accounts.into();
    let ix = request_seat_authorized_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn request_seat_authorized_invoke(
    accounts: RequestSeatAuthorizedAccounts<'_, '_>,
) -> ProgramResult {
    request_seat_authorized_invoke_with_program_id(crate::ID, accounts)
}
pub fn request_seat_authorized_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: RequestSeatAuthorizedAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: RequestSeatAuthorizedKeys = accounts.into();
    let ix = request_seat_authorized_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn request_seat_authorized_invoke_signed(
    accounts: RequestSeatAuthorizedAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    request_seat_authorized_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn request_seat_authorized_verify_account_keys(
    accounts: RequestSeatAuthorizedAccounts<'_, '_>,
    keys: RequestSeatAuthorizedKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.phoenix_program.key, keys.phoenix_program),
        (*accounts.log_authority.key, keys.log_authority),
        (*accounts.market.key, keys.market),
        (*accounts.market_authority.key, keys.market_authority),
        (*accounts.payer.key, keys.payer),
        (*accounts.trader.key, keys.trader),
        (*accounts.seat.key, keys.seat),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
