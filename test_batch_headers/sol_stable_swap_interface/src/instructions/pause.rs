//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const PAUSE_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the pause instruction
#[derive(Copy, Clone, Debug)]
pub struct PauseAccounts<'me, 'info> {
    pub owner: &'me AccountInfo<'info>,
    pub pool: &'me AccountInfo<'info>,
}
///Public keys struct for the pause instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct PauseKeys {
    pub owner: Pubkey,
    pub pool: Pubkey,
}
impl From<PauseAccounts<'_, '_>> for PauseKeys {
    fn from(accounts: PauseAccounts) -> Self {
        Self {
            owner: *accounts.owner.key,
            pool: *accounts.pool.key,
        }
    }
}
impl From<PauseKeys> for [AccountMeta; PAUSE_IX_ACCOUNTS_LEN] {
    fn from(keys: PauseKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; PAUSE_IX_ACCOUNTS_LEN]> for PauseKeys {
    fn from(pubkeys: [Pubkey; PAUSE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: pubkeys[0],
            pool: pubkeys[1],
        }
    }
}
impl From<&[String]> for PauseKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            owner: pubkeys[0].parse().unwrap(),
            pool: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<PauseAccounts<'_, 'info>> for [AccountInfo<'info>; PAUSE_IX_ACCOUNTS_LEN] {
    fn from(accounts: PauseAccounts<'_, 'info>) -> Self {
        [accounts.owner.clone(), accounts.pool.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; PAUSE_IX_ACCOUNTS_LEN]>
    for PauseAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; PAUSE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: &arr[0],
            pool: &arr[1],
        }
    }
}
pub const PAUSE_IX_DISCM: [u8; 8] = [211, 22, 221, 251, 74, 121, 193, 47];
#[derive(Clone, Debug, PartialEq)]
pub struct PauseIxData;
impl PauseIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != PAUSE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    PAUSE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&PAUSE_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn pause_ix_with_program_id(
    program_id: Pubkey,
    keys: PauseKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; PAUSE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: PauseIxData.try_to_vec()?,
    })
}
pub fn pause_ix(keys: PauseKeys) -> std::io::Result<Instruction> {
    pause_ix_with_program_id(crate::ID, keys)
}
pub fn pause_invoke_with_program_id(
    program_id: Pubkey,
    accounts: PauseAccounts<'_, '_>,
) -> ProgramResult {
    let keys: PauseKeys = accounts.into();
    let ix = pause_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn pause_invoke(accounts: PauseAccounts<'_, '_>) -> ProgramResult {
    pause_invoke_with_program_id(crate::ID, accounts)
}
pub fn pause_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: PauseAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: PauseKeys = accounts.into();
    let ix = pause_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn pause_invoke_signed(accounts: PauseAccounts<'_, '_>, seeds: &[&[&[u8]]]) -> ProgramResult {
    pause_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn pause_verify_account_keys(
    accounts: PauseAccounts<'_, '_>,
    keys: PauseKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.owner.key, keys.owner),
        (*accounts.pool.key, keys.pool),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
