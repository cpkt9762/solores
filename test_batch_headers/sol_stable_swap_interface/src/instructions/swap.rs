//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///swap
pub const SWAP_IX_ACCOUNTS_LEN: usize = 12;
///Accounts struct for the swap instruction
#[derive(Copy, Clone, Debug)]
pub struct SwapAccounts<'me, 'info> {
    pub user: &'me AccountInfo<'info>,
    pub user_token_in: &'me AccountInfo<'info>,
    pub user_token_out: &'me AccountInfo<'info>,
    pub vault_token_in: &'me AccountInfo<'info>,
    pub vault_token_out: &'me AccountInfo<'info>,
    pub beneficiary_token_out: &'me AccountInfo<'info>,
    pub pool: &'me AccountInfo<'info>,
    pub withdraw_authority: &'me AccountInfo<'info>,
    pub vault: &'me AccountInfo<'info>,
    pub vault_authority: &'me AccountInfo<'info>,
    pub vault_program: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the swap instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SwapKeys {
    pub user: Pubkey,
    pub user_token_in: Pubkey,
    pub user_token_out: Pubkey,
    pub vault_token_in: Pubkey,
    pub vault_token_out: Pubkey,
    pub beneficiary_token_out: Pubkey,
    pub pool: Pubkey,
    pub withdraw_authority: Pubkey,
    pub vault: Pubkey,
    pub vault_authority: Pubkey,
    pub vault_program: Pubkey,
    pub token_program: Pubkey,
}
impl From<SwapAccounts<'_, '_>> for SwapKeys {
    fn from(accounts: SwapAccounts) -> Self {
        Self {
            user: *accounts.user.key,
            user_token_in: *accounts.user_token_in.key,
            user_token_out: *accounts.user_token_out.key,
            vault_token_in: *accounts.vault_token_in.key,
            vault_token_out: *accounts.vault_token_out.key,
            beneficiary_token_out: *accounts.beneficiary_token_out.key,
            pool: *accounts.pool.key,
            withdraw_authority: *accounts.withdraw_authority.key,
            vault: *accounts.vault.key,
            vault_authority: *accounts.vault_authority.key,
            vault_program: *accounts.vault_program.key,
            token_program: *accounts.token_program.key,
        }
    }
}
impl From<SwapKeys> for [AccountMeta; SWAP_IX_ACCOUNTS_LEN] {
    fn from(keys: SwapKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.user,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.user_token_in,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_token_out,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vault_token_in,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.vault_token_out,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.beneficiary_token_out,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.withdraw_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.vault_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; SWAP_IX_ACCOUNTS_LEN]> for SwapKeys {
    fn from(pubkeys: [Pubkey; SWAP_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            user: pubkeys[0],
            user_token_in: pubkeys[1],
            user_token_out: pubkeys[2],
            vault_token_in: pubkeys[3],
            vault_token_out: pubkeys[4],
            beneficiary_token_out: pubkeys[5],
            pool: pubkeys[6],
            withdraw_authority: pubkeys[7],
            vault: pubkeys[8],
            vault_authority: pubkeys[9],
            vault_program: pubkeys[10],
            token_program: pubkeys[11],
        }
    }
}
impl From<&[String]> for SwapKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            user: pubkeys[0].parse().unwrap(),
            user_token_in: pubkeys[1].parse().unwrap(),
            user_token_out: pubkeys[2].parse().unwrap(),
            vault_token_in: pubkeys[3].parse().unwrap(),
            vault_token_out: pubkeys[4].parse().unwrap(),
            beneficiary_token_out: pubkeys[5].parse().unwrap(),
            pool: pubkeys[6].parse().unwrap(),
            withdraw_authority: pubkeys[7].parse().unwrap(),
            vault: pubkeys[8].parse().unwrap(),
            vault_authority: pubkeys[9].parse().unwrap(),
            vault_program: pubkeys[10].parse().unwrap(),
            token_program: pubkeys[11].parse().unwrap(),
        }
    }
}
impl<'info> From<SwapAccounts<'_, 'info>> for [AccountInfo<'info>; SWAP_IX_ACCOUNTS_LEN] {
    fn from(accounts: SwapAccounts<'_, 'info>) -> Self {
        [
            accounts.user.clone(),
            accounts.user_token_in.clone(),
            accounts.user_token_out.clone(),
            accounts.vault_token_in.clone(),
            accounts.vault_token_out.clone(),
            accounts.beneficiary_token_out.clone(),
            accounts.pool.clone(),
            accounts.withdraw_authority.clone(),
            accounts.vault.clone(),
            accounts.vault_authority.clone(),
            accounts.vault_program.clone(),
            accounts.token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SWAP_IX_ACCOUNTS_LEN]>
    for SwapAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; SWAP_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            user: &arr[0],
            user_token_in: &arr[1],
            user_token_out: &arr[2],
            vault_token_in: &arr[3],
            vault_token_out: &arr[4],
            beneficiary_token_out: &arr[5],
            pool: &arr[6],
            withdraw_authority: &arr[7],
            vault: &arr[8],
            vault_authority: &arr[9],
            vault_program: &arr[10],
            token_program: &arr[11],
        }
    }
}
pub const SWAP_IX_DISCM: [u8; 8] = [248, 198, 158, 145, 225, 117, 135, 200];
///swap
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapIxArgs {
    pub discriminator: [u8; 8],
    pub amount_in: Option<u64>,
    pub minimum_amount_out: u64,
}
impl Default for SwapIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [248u8, 198u8, 158u8, 145u8, 225u8, 117u8, 135u8, 200u8],
            amount_in: Default::default(),
            minimum_amount_out: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct SwapIxData(pub SwapIxArgs);
impl From<SwapIxArgs> for SwapIxData {
    fn from(args: SwapIxArgs) -> Self {
        Self(args)
    }
}
impl SwapIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != SWAP_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    SWAP_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(SwapIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&SWAP_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn swap_ix_with_program_id(
    program_id: Pubkey,
    keys: SwapKeys,
    args: SwapIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SWAP_IX_ACCOUNTS_LEN] = keys.into();
    let data: SwapIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn swap_ix(keys: SwapKeys, args: SwapIxArgs) -> std::io::Result<Instruction> {
    swap_ix_with_program_id(crate::ID, keys, args)
}
pub fn swap_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SwapAccounts<'_, '_>,
    args: SwapIxArgs,
) -> ProgramResult {
    let keys: SwapKeys = accounts.into();
    let ix = swap_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn swap_invoke(accounts: SwapAccounts<'_, '_>, args: SwapIxArgs) -> ProgramResult {
    swap_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn swap_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SwapAccounts<'_, '_>,
    args: SwapIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SwapKeys = accounts.into();
    let ix = swap_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn swap_invoke_signed(
    accounts: SwapAccounts<'_, '_>,
    args: SwapIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    swap_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn swap_verify_account_keys(
    accounts: SwapAccounts<'_, '_>,
    keys: SwapKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.user.key, keys.user),
        (*accounts.user_token_in.key, keys.user_token_in),
        (*accounts.user_token_out.key, keys.user_token_out),
        (*accounts.vault_token_in.key, keys.vault_token_in),
        (*accounts.vault_token_out.key, keys.vault_token_out),
        (
            *accounts.beneficiary_token_out.key,
            keys.beneficiary_token_out,
        ),
        (*accounts.pool.key, keys.pool),
        (*accounts.withdraw_authority.key, keys.withdraw_authority),
        (*accounts.vault.key, keys.vault),
        (*accounts.vault_authority.key, keys.vault_authority),
        (*accounts.vault_program.key, keys.vault_program),
        (*accounts.token_program.key, keys.token_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl SwapIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<SwapIxArgs> for StableSwapProgramIx {
    fn from(args: SwapIxArgs) -> Self {
        Self::Swap(args)
    }
}
