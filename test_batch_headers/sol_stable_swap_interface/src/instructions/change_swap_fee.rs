//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the change_swap_fee instruction
#[derive(Copy, Clone, Debug)]
pub struct ChangeSwapFeeAccounts<'me, 'info> {
    pub owner: &'me AccountInfo<'info>,
    pub pool: &'me AccountInfo<'info>,
}
///Public keys struct for the change_swap_fee instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ChangeSwapFeeKeys {
    pub owner: Pubkey,
    pub pool: Pubkey,
}
impl From<ChangeSwapFeeAccounts<'_, '_>> for ChangeSwapFeeKeys {
    fn from(accounts: ChangeSwapFeeAccounts) -> Self {
        Self {
            owner: *accounts.owner.key,
            pool: *accounts.pool.key,
        }
    }
}
impl From<ChangeSwapFeeKeys> for [AccountMeta; CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN] {
    fn from(keys: ChangeSwapFeeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.owner,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN]> for ChangeSwapFeeKeys {
    fn from(pubkeys: [Pubkey; CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: pubkeys[0],
            pool: pubkeys[1],
        }
    }
}
impl From<&[String]> for ChangeSwapFeeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            owner: pubkeys[0].parse().unwrap(),
            pool: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<ChangeSwapFeeAccounts<'_, 'info>>
    for [AccountInfo<'info>; CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ChangeSwapFeeAccounts<'_, 'info>) -> Self {
        [accounts.owner.clone(), accounts.pool.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN]>
    for ChangeSwapFeeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner: &arr[0],
            pool: &arr[1],
        }
    }
}
pub const CHANGE_SWAP_FEE_IX_DISCM: [u8; 8] = [231, 15, 132, 51, 132, 165, 64, 170];
///Arguments for the change_swap_fee instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChangeSwapFeeIxArgs {
    pub discriminator: [u8; 8],
    pub new_swap_fee: u64,
}
impl Default for ChangeSwapFeeIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [231u8, 15u8, 132u8, 51u8, 132u8, 165u8, 64u8, 170u8],
            new_swap_fee: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct ChangeSwapFeeIxData(pub ChangeSwapFeeIxArgs);
impl From<ChangeSwapFeeIxArgs> for ChangeSwapFeeIxData {
    fn from(args: ChangeSwapFeeIxArgs) -> Self {
        Self(args)
    }
}
impl ChangeSwapFeeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CHANGE_SWAP_FEE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CHANGE_SWAP_FEE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(ChangeSwapFeeIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CHANGE_SWAP_FEE_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn change_swap_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: ChangeSwapFeeKeys,
    args: ChangeSwapFeeIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CHANGE_SWAP_FEE_IX_ACCOUNTS_LEN] = keys.into();
    let data: ChangeSwapFeeIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn change_swap_fee_ix(
    keys: ChangeSwapFeeKeys,
    args: ChangeSwapFeeIxArgs,
) -> std::io::Result<Instruction> {
    change_swap_fee_ix_with_program_id(crate::ID, keys, args)
}
pub fn change_swap_fee_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ChangeSwapFeeAccounts<'_, '_>,
    args: ChangeSwapFeeIxArgs,
) -> ProgramResult {
    let keys: ChangeSwapFeeKeys = accounts.into();
    let ix = change_swap_fee_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn change_swap_fee_invoke(
    accounts: ChangeSwapFeeAccounts<'_, '_>,
    args: ChangeSwapFeeIxArgs,
) -> ProgramResult {
    change_swap_fee_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn change_swap_fee_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ChangeSwapFeeAccounts<'_, '_>,
    args: ChangeSwapFeeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ChangeSwapFeeKeys = accounts.into();
    let ix = change_swap_fee_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn change_swap_fee_invoke_signed(
    accounts: ChangeSwapFeeAccounts<'_, '_>,
    args: ChangeSwapFeeIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    change_swap_fee_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn change_swap_fee_verify_account_keys(
    accounts: ChangeSwapFeeAccounts<'_, '_>,
    keys: ChangeSwapFeeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.owner.key, keys.owner),
        (*accounts.pool.key, keys.pool),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl ChangeSwapFeeIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<ChangeSwapFeeIxArgs> for StableSwapProgramIx {
    fn from(args: ChangeSwapFeeIxArgs) -> Self {
        Self::ChangeSwapFee(args)
    }
}
