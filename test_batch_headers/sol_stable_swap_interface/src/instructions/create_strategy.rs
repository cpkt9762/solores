//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CREATE_STRATEGY_IX_ACCOUNTS_LEN: usize = 2;
///Accounts struct for the create_strategy instruction
#[derive(Copy, Clone, Debug)]
pub struct CreateStrategyAccounts<'me, 'info> {
    pub owner_only: &'me AccountInfo<'info>,
    pub strategy: &'me AccountInfo<'info>,
}
///Public keys struct for the create_strategy instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreateStrategyKeys {
    pub owner_only: Pubkey,
    pub strategy: Pubkey,
}
impl From<CreateStrategyAccounts<'_, '_>> for CreateStrategyKeys {
    fn from(accounts: CreateStrategyAccounts) -> Self {
        Self {
            owner_only: *accounts.owner_only.key,
            strategy: *accounts.strategy.key,
        }
    }
}
impl From<CreateStrategyKeys> for [AccountMeta; CREATE_STRATEGY_IX_ACCOUNTS_LEN] {
    fn from(keys: CreateStrategyKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.owner_only,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.strategy,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_STRATEGY_IX_ACCOUNTS_LEN]> for CreateStrategyKeys {
    fn from(pubkeys: [Pubkey; CREATE_STRATEGY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner_only: pubkeys[0],
            strategy: pubkeys[1],
        }
    }
}
impl From<&[String]> for CreateStrategyKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            owner_only: pubkeys[0].parse().unwrap(),
            strategy: pubkeys[1].parse().unwrap(),
        }
    }
}
impl<'info> From<CreateStrategyAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_STRATEGY_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreateStrategyAccounts<'_, 'info>) -> Self {
        [accounts.owner_only.clone(), accounts.strategy.clone()]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_STRATEGY_IX_ACCOUNTS_LEN]>
    for CreateStrategyAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_STRATEGY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            owner_only: &arr[0],
            strategy: &arr[1],
        }
    }
}
pub const CREATE_STRATEGY_IX_DISCM: [u8; 8] = [152, 160, 107, 148, 245, 190, 127, 224];
///Arguments for the create_strategy instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateStrategyIxArgs {
    pub discriminator: [u8; 8],
    pub amp_min_factor: u16,
    pub amp_max_factor: u16,
    pub ramp_min_step: u16,
    pub ramp_max_step: u16,
    pub ramp_min_duration: u32,
    pub ramp_max_duration: u32,
}
impl Default for CreateStrategyIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [152u8, 160u8, 107u8, 148u8, 245u8, 190u8, 127u8, 224u8],
            amp_min_factor: Default::default(),
            amp_max_factor: Default::default(),
            ramp_min_step: Default::default(),
            ramp_max_step: Default::default(),
            ramp_min_duration: Default::default(),
            ramp_max_duration: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CreateStrategyIxData(pub CreateStrategyIxArgs);
impl From<CreateStrategyIxArgs> for CreateStrategyIxData {
    fn from(args: CreateStrategyIxArgs) -> Self {
        Self(args)
    }
}
impl CreateStrategyIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_STRATEGY_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_STRATEGY_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(CreateStrategyIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_STRATEGY_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_strategy_ix_with_program_id(
    program_id: Pubkey,
    keys: CreateStrategyKeys,
    args: CreateStrategyIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_STRATEGY_IX_ACCOUNTS_LEN] = keys.into();
    let data: CreateStrategyIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn create_strategy_ix(
    keys: CreateStrategyKeys,
    args: CreateStrategyIxArgs,
) -> std::io::Result<Instruction> {
    create_strategy_ix_with_program_id(crate::ID, keys, args)
}
pub fn create_strategy_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreateStrategyAccounts<'_, '_>,
    args: CreateStrategyIxArgs,
) -> ProgramResult {
    let keys: CreateStrategyKeys = accounts.into();
    let ix = create_strategy_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_strategy_invoke(
    accounts: CreateStrategyAccounts<'_, '_>,
    args: CreateStrategyIxArgs,
) -> ProgramResult {
    create_strategy_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn create_strategy_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreateStrategyAccounts<'_, '_>,
    args: CreateStrategyIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreateStrategyKeys = accounts.into();
    let ix = create_strategy_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_strategy_invoke_signed(
    accounts: CreateStrategyAccounts<'_, '_>,
    args: CreateStrategyIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_strategy_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn create_strategy_verify_account_keys(
    accounts: CreateStrategyAccounts<'_, '_>,
    keys: CreateStrategyKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.owner_only.key, keys.owner_only),
        (*accounts.strategy.key, keys.strategy),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl CreateStrategyIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CreateStrategyIxArgs> for StableSwapProgramIx {
    fn from(args: CreateStrategyIxArgs) -> Self {
        Self::CreateStrategy(args)
    }
}
