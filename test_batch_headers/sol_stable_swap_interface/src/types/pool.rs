//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::PoolToken;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Pool {
    pub owner: Pubkey,
    pub vault: Pubkey,
    pub mint: Pubkey,
    pub authority_bump: u8,
    pub is_active: bool,
    pub amp_initial_factor: u16,
    pub amp_target_factor: u16,
    pub ramp_start_ts: i64,
    pub ramp_stop_ts: i64,
    pub swap_fee: u64,
    pub tokens: Vec<PoolToken>,
    pub pending_owner: Option<Pubkey>,
    pub max_supply: u64,
}
impl Default for Pool {
    fn default() -> Self {
        Self {
            owner: Default::default(),
            vault: Default::default(),
            mint: Default::default(),
            authority_bump: Default::default(),
            is_active: Default::default(),
            amp_initial_factor: Default::default(),
            amp_target_factor: Default::default(),
            ramp_start_ts: Default::default(),
            ramp_stop_ts: Default::default(),
            swap_fee: Default::default(),
            tokens: Vec::new(),
            pending_owner: None,
            max_supply: Default::default(),
        }
    }
}
