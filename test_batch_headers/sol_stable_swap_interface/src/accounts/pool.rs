//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const POOL_ACCOUNT_DISCM: [u8; 8] = [241, 154, 109, 4, 17, 177, 109, 188];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Pool {
    pub discriminator: [u8; 8],
    pub owner: Pubkey,
    pub vault: Pubkey,
    pub mint: Pubkey,
    pub authority_bump: u8,
    pub is_active: bool,
    pub amp_initial_factor: u16,
    pub amp_target_factor: u16,
    pub ramp_start_ts: i64,
    pub ramp_stop_ts: i64,
    pub swap_fee: u64,
    pub tokens: Vec<PoolToken>,
    pub pending_owner: Option<Pubkey>,
    pub max_supply: u64,
}
impl Default for Pool {
    fn default() -> Self {
        Self {
            discriminator: POOL_ACCOUNT_DISCM,
            owner: Default::default(),
            vault: Default::default(),
            mint: Default::default(),
            authority_bump: Default::default(),
            is_active: Default::default(),
            amp_initial_factor: Default::default(),
            amp_target_factor: Default::default(),
            ramp_start_ts: Default::default(),
            ramp_stop_ts: Default::default(),
            swap_fee: Default::default(),
            tokens: Default::default(),
            pending_owner: Default::default(),
            max_supply: Default::default(),
        }
    }
}
impl Pool {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != POOL_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    POOL_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
