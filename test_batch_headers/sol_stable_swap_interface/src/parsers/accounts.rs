//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::accounts::*;
/// Program account types
#[derive(Clone, Debug, PartialEq)]
pub enum StableSwapAccount {
    Pool(Pool),
    Strategy(Strategy),
    Vault(Vault),
}
/// Parse account data based on discriminator (Anchor contracts)
pub fn try_unpack_account(data: &[u8]) -> Result<StableSwapAccount, std::io::Error> {
    if data.len() < 8 {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Account data too short for discriminator",
        ));
    }
    let discriminator: [u8; 8] = data[0..8].try_into().map_err(|_| {
        std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Failed to read discriminator",
        )
    })?;
    match discriminator {
        [241u8, 154u8, 109u8, 4u8, 17u8, 177u8, 109u8, 188u8] => {
            Ok(StableSwapAccount::Pool(Pool::from_bytes(data)?))
        }
        [174u8, 110u8, 39u8, 119u8, 82u8, 106u8, 169u8, 102u8] => {
            Ok(StableSwapAccount::Strategy(Strategy::from_bytes(data)?))
        }
        [211u8, 8u8, 232u8, 43u8, 2u8, 152u8, 117u8, 119u8] => {
            Ok(StableSwapAccount::Vault(Vault::from_bytes(data)?))
        }
        _ => Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            format!("Unknown account discriminator: {:?}", discriminator),
        )),
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    use borsh::{BorshDeserialize, BorshSerialize};
    #[test]
    fn test_pool_consistency() {
        let expected_first_field = Default::default();
        let test_account = Pool {
            owner: expected_first_field,
            ..Default::default()
        };
        let test_data = test_account.try_to_vec().unwrap();
        match try_unpack_account(&test_data) {
            Ok(StableSwapAccount::Pool(account)) => {
                assert_eq!(
                    account.owner, expected_first_field,
                    "First field value should match expected value"
                );
                assert_eq!(
                    account.discriminator,
                    [241u8, 154u8, 109u8, 4u8, 17u8, 177u8, 109u8, 188u8],
                    "Discriminator field should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong account type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Pool)
                );
            }
        }
    }
    #[test]
    fn test_strategy_consistency() {
        let expected_first_field = Default::default();
        let test_account = Strategy {
            pool: expected_first_field,
            ..Default::default()
        };
        let test_data = test_account.try_to_vec().unwrap();
        match try_unpack_account(&test_data) {
            Ok(StableSwapAccount::Strategy(account)) => {
                assert_eq!(
                    account.pool, expected_first_field,
                    "First field value should match expected value"
                );
                assert_eq!(
                    account.discriminator,
                    [174u8, 110u8, 39u8, 119u8, 82u8, 106u8, 169u8, 102u8],
                    "Discriminator field should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong account type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Strategy)
                );
            }
        }
    }
    #[test]
    fn test_vault_consistency() {
        let expected_first_field = Default::default();
        let test_account = Vault {
            admin: expected_first_field,
            ..Default::default()
        };
        let test_data = test_account.try_to_vec().unwrap();
        match try_unpack_account(&test_data) {
            Ok(StableSwapAccount::Vault(account)) => {
                assert_eq!(
                    account.admin, expected_first_field,
                    "First field value should match expected value"
                );
                assert_eq!(
                    account.discriminator,
                    [211u8, 8u8, 232u8, 43u8, 2u8, 152u8, 117u8, 119u8],
                    "Discriminator field should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong account type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Vault)
                );
            }
        }
    }
    #[test]
    fn test_discriminator_recognition() {
        let test_account = Pool::default();
        let test_data = test_account.try_to_vec().unwrap();
        assert!(
            test_data.len() >= 8,
            "Test data should have at least 8 bytes for discriminator"
        );
        let result = try_unpack_account(&test_data);
        match result {
            Ok(_) => {}
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for account {}",
                    stringify!(Pool)
                );
            }
        }
        let test_account = Strategy::default();
        let test_data = test_account.try_to_vec().unwrap();
        assert!(
            test_data.len() >= 8,
            "Test data should have at least 8 bytes for discriminator"
        );
        let result = try_unpack_account(&test_data);
        match result {
            Ok(_) => {}
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for account {}",
                    stringify!(Strategy)
                );
            }
        }
        let test_account = Vault::default();
        let test_data = test_account.try_to_vec().unwrap();
        assert!(
            test_data.len() >= 8,
            "Test data should have at least 8 bytes for discriminator"
        );
        let result = try_unpack_account(&test_data);
        match result {
            Ok(_) => {}
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown account discriminator"),
                    "Should recognize discriminator for account {}",
                    stringify!(Vault)
                );
            }
        }
    }
    #[test]
    fn test_invalid_discriminator() {
        let invalid_data = vec![255u8; 40];
        let result = try_unpack_account(&invalid_data);
        assert!(result.is_err(), "Should fail with invalid discriminator");
    }
    #[test]
    fn test_insufficient_data() {
        let short_data = vec![1u8; 4];
        let result = try_unpack_account(&short_data);
        assert!(result.is_err(), "Should fail with insufficient data");
    }
}
