//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const GLOBAL_CONFIG_ACCOUNT_DISCM: [u8; 8] = [149, 8, 156, 202, 160, 252, 176, 217];
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GlobalConfig {
    pub discriminator: [u8; 8],
    ///The admin pubkey
    pub admin: Pubkey,
    ///The lp fee in basis points (0.01%)
    pub lp_fee_basis_points: u64,
    ///The protocol fee in basis points (0.01%)
    pub protocol_fee_basis_points: u64,
    ///Flags to disable certain functionality
    ///bit 0 - Disable create pool
    ///bit 1 - Disable deposit
    ///bit 2 - Disable withdraw
    ///bit 3 - Disable buy
    ///bit 4 - Disable sell
    pub disable_flags: u8,
    ///Addresses of the protocol fee recipients
    pub protocol_fee_recipients: [Pubkey; 8],
    ///The coin creator fee in basis points (0.01%)
    pub coin_creator_fee_basis_points: u64,
}
impl Default for GlobalConfig {
    fn default() -> Self {
        Self {
            discriminator: GLOBAL_CONFIG_ACCOUNT_DISCM,
            admin: Default::default(),
            lp_fee_basis_points: Default::default(),
            protocol_fee_basis_points: Default::default(),
            disable_flags: Default::default(),
            protocol_fee_recipients: core::array::from_fn(|_| Default::default()),
            coin_creator_fee_basis_points: Default::default(),
        }
    }
}
impl GlobalConfig {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() < 8 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Account data too short for discriminator",
            ));
        }
        if &data[0..8] != GLOBAL_CONFIG_ACCOUNT_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Discriminator mismatch. Expected: {:?}, got: {:?}",
                    GLOBAL_CONFIG_ACCOUNT_DISCM,
                    &data[0..8]
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
