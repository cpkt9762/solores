//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
///Sets Pool::coin_creator from Metaplex metadata creator or BondingCurve::creator
pub const SET_COIN_CREATOR_IX_ACCOUNTS_LEN: usize = 5;
///Accounts struct for the set_coin_creator instruction
#[derive(Copy, Clone, Debug)]
pub struct SetCoinCreatorAccounts<'me, 'info> {
    pub pool: &'me AccountInfo<'info>,
    pub metadata: &'me AccountInfo<'info>,
    pub bonding_curve: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the set_coin_creator instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SetCoinCreatorKeys {
    pub pool: Pubkey,
    pub metadata: Pubkey,
    pub bonding_curve: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<SetCoinCreatorAccounts<'_, '_>> for SetCoinCreatorKeys {
    fn from(accounts: SetCoinCreatorAccounts) -> Self {
        Self {
            pool: *accounts.pool.key,
            metadata: *accounts.metadata.key,
            bonding_curve: *accounts.bonding_curve.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<SetCoinCreatorKeys> for [AccountMeta; SET_COIN_CREATOR_IX_ACCOUNTS_LEN] {
    fn from(keys: SetCoinCreatorKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.metadata,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.bonding_curve,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; SET_COIN_CREATOR_IX_ACCOUNTS_LEN]> for SetCoinCreatorKeys {
    fn from(pubkeys: [Pubkey; SET_COIN_CREATOR_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool: pubkeys[0],
            metadata: pubkeys[1],
            bonding_curve: pubkeys[2],
            event_authority: pubkeys[3],
            program: pubkeys[4],
        }
    }
}
impl From<&[String]> for SetCoinCreatorKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            pool: pubkeys[0].parse().unwrap(),
            metadata: pubkeys[1].parse().unwrap(),
            bonding_curve: pubkeys[2].parse().unwrap(),
            event_authority: pubkeys[3].parse().unwrap(),
            program: pubkeys[4].parse().unwrap(),
        }
    }
}
impl<'info> From<SetCoinCreatorAccounts<'_, 'info>>
    for [AccountInfo<'info>; SET_COIN_CREATOR_IX_ACCOUNTS_LEN]
{
    fn from(accounts: SetCoinCreatorAccounts<'_, 'info>) -> Self {
        [
            accounts.pool.clone(),
            accounts.metadata.clone(),
            accounts.bonding_curve.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SET_COIN_CREATOR_IX_ACCOUNTS_LEN]>
    for SetCoinCreatorAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; SET_COIN_CREATOR_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool: &arr[0],
            metadata: &arr[1],
            bonding_curve: &arr[2],
            event_authority: &arr[3],
            program: &arr[4],
        }
    }
}
pub const SET_COIN_CREATOR_IX_DISCM: [u8; 8] = [210, 149, 128, 45, 188, 58, 78, 175];
#[derive(Clone, Debug, PartialEq)]
pub struct SetCoinCreatorIxData;
impl SetCoinCreatorIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != SET_COIN_CREATOR_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    SET_COIN_CREATOR_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&SET_COIN_CREATOR_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn set_coin_creator_ix_with_program_id(
    program_id: Pubkey,
    keys: SetCoinCreatorKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SET_COIN_CREATOR_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: SetCoinCreatorIxData.try_to_vec()?,
    })
}
pub fn set_coin_creator_ix(keys: SetCoinCreatorKeys) -> std::io::Result<Instruction> {
    set_coin_creator_ix_with_program_id(crate::ID, keys)
}
pub fn set_coin_creator_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SetCoinCreatorAccounts<'_, '_>,
) -> ProgramResult {
    let keys: SetCoinCreatorKeys = accounts.into();
    let ix = set_coin_creator_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn set_coin_creator_invoke(accounts: SetCoinCreatorAccounts<'_, '_>) -> ProgramResult {
    set_coin_creator_invoke_with_program_id(crate::ID, accounts)
}
pub fn set_coin_creator_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SetCoinCreatorAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SetCoinCreatorKeys = accounts.into();
    let ix = set_coin_creator_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn set_coin_creator_invoke_signed(
    accounts: SetCoinCreatorAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    set_coin_creator_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn set_coin_creator_verify_account_keys(
    accounts: SetCoinCreatorAccounts<'_, '_>,
    keys: SetCoinCreatorKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.pool.key, keys.pool),
        (*accounts.metadata.key, keys.metadata),
        (*accounts.bonding_curve.key, keys.bonding_curve),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///METADATA_SEED_0 seed for metadata PDA: "metadata"
pub const METADATA_SEED_0: &[u8] = &[109u8, 101u8, 116u8, 97u8, 100u8, 97u8, 116u8, 97u8];
///METADATA_SEED_1 seed for metadata PDA
pub const METADATA_SEED_1: &[u8] = &[
    11u8, 112u8, 101u8, 177u8, 227u8, 209u8, 124u8, 69u8, 56u8, 157u8, 82u8, 127u8, 107u8, 4u8,
    195u8, 205u8, 88u8, 184u8, 108u8, 115u8, 26u8, 160u8, 253u8, 181u8, 73u8, 182u8, 209u8, 188u8,
    3u8, 248u8, 41u8, 70u8,
];
///BONDING_CURVE_SEED_0 seed for bonding_curve PDA: "bonding-curve"
pub const BONDING_CURVE_SEED_0: &[u8] = &[
    98u8, 111u8, 110u8, 100u8, 105u8, 110u8, 103u8, 45u8, 99u8, 117u8, 114u8, 118u8, 101u8,
];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl SetCoinCreatorKeys {
    ///Derive the metadata PDA
    pub fn derive_metadata_pda(program_id: &Pubkey, pool_base_mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[METADATA_SEED_0, METADATA_SEED_1, pool_base_mint.as_ref()],
            program_id,
        )
    }
    ///Derive the bonding_curve PDA
    pub fn derive_bonding_curve_pda(program_id: &Pubkey, pool_base_mint: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[BONDING_CURVE_SEED_0, pool_base_mint.as_ref()], program_id)
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
