//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const DISABLE_IX_ACCOUNTS_LEN: usize = 4;
///Accounts struct for the disable instruction
#[derive(Copy, Clone, Debug)]
pub struct DisableAccounts<'me, 'info> {
    ///Relations: global_config
    pub admin: &'me AccountInfo<'info>,
    pub global_config: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the disable instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct DisableKeys {
    ///Relations: global_config
    pub admin: Pubkey,
    pub global_config: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<DisableAccounts<'_, '_>> for DisableKeys {
    fn from(accounts: DisableAccounts) -> Self {
        Self {
            admin: *accounts.admin.key,
            global_config: *accounts.global_config.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<DisableKeys> for [AccountMeta; DISABLE_IX_ACCOUNTS_LEN] {
    fn from(keys: DisableKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.admin,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; DISABLE_IX_ACCOUNTS_LEN]> for DisableKeys {
    fn from(pubkeys: [Pubkey; DISABLE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            admin: pubkeys[0],
            global_config: pubkeys[1],
            event_authority: pubkeys[2],
            program: pubkeys[3],
        }
    }
}
impl From<&[String]> for DisableKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            admin: pubkeys[0].parse().unwrap(),
            global_config: pubkeys[1].parse().unwrap(),
            event_authority: pubkeys[2].parse().unwrap(),
            program: pubkeys[3].parse().unwrap(),
        }
    }
}
impl<'info> From<DisableAccounts<'_, 'info>> for [AccountInfo<'info>; DISABLE_IX_ACCOUNTS_LEN] {
    fn from(accounts: DisableAccounts<'_, 'info>) -> Self {
        [
            accounts.admin.clone(),
            accounts.global_config.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; DISABLE_IX_ACCOUNTS_LEN]>
    for DisableAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; DISABLE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            admin: &arr[0],
            global_config: &arr[1],
            event_authority: &arr[2],
            program: &arr[3],
        }
    }
}
pub const DISABLE_IX_DISCM: [u8; 8] = [185, 173, 187, 90, 216, 15, 238, 233];
///Arguments for the disable instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DisableIxArgs {
    pub discriminator: [u8; 8],
    pub disable_create_pool: bool,
    pub disable_deposit: bool,
    pub disable_withdraw: bool,
    pub disable_buy: bool,
    pub disable_sell: bool,
}
impl Default for DisableIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [185u8, 173u8, 187u8, 90u8, 216u8, 15u8, 238u8, 233u8],
            disable_create_pool: Default::default(),
            disable_deposit: Default::default(),
            disable_withdraw: Default::default(),
            disable_buy: Default::default(),
            disable_sell: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct DisableIxData(pub DisableIxArgs);
impl From<DisableIxArgs> for DisableIxData {
    fn from(args: DisableIxArgs) -> Self {
        Self(args)
    }
}
impl DisableIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != DISABLE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    DISABLE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(DisableIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&DISABLE_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn disable_ix_with_program_id(
    program_id: Pubkey,
    keys: DisableKeys,
    args: DisableIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; DISABLE_IX_ACCOUNTS_LEN] = keys.into();
    let data: DisableIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn disable_ix(keys: DisableKeys, args: DisableIxArgs) -> std::io::Result<Instruction> {
    disable_ix_with_program_id(crate::ID, keys, args)
}
pub fn disable_invoke_with_program_id(
    program_id: Pubkey,
    accounts: DisableAccounts<'_, '_>,
    args: DisableIxArgs,
) -> ProgramResult {
    let keys: DisableKeys = accounts.into();
    let ix = disable_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn disable_invoke(accounts: DisableAccounts<'_, '_>, args: DisableIxArgs) -> ProgramResult {
    disable_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn disable_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: DisableAccounts<'_, '_>,
    args: DisableIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: DisableKeys = accounts.into();
    let ix = disable_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn disable_invoke_signed(
    accounts: DisableAccounts<'_, '_>,
    args: DisableIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    disable_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn disable_verify_account_keys(
    accounts: DisableAccounts<'_, '_>,
    keys: DisableKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.admin.key, keys.admin),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl DisableKeys {
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
impl DisableIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<DisableIxArgs> for PumpAmmProgramIx {
    fn from(args: DisableIxArgs) -> Self {
        Self::Disable(args)
    }
}
