//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
use std::io::Read;
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod buy;
pub use buy::*;
pub mod collect_coin_creator_fee;
pub use collect_coin_creator_fee::*;
pub mod create_config;
pub use create_config::*;
pub mod create_pool;
pub use create_pool::*;
pub mod deposit;
pub use deposit::*;
pub mod disable;
pub use disable::*;
pub mod extend_account;
pub use extend_account::*;
pub mod sell;
pub use sell::*;
pub mod set_coin_creator;
pub use set_coin_creator::*;
pub mod update_admin;
pub use update_admin::*;
pub mod update_fee_config;
pub use update_fee_config::*;
pub mod withdraw;
pub use withdraw::*;
#[derive(Clone, Debug, PartialEq)]
pub enum PumpAmmProgramIx {
    Buy(BuyIxArgs),
    CollectCoinCreatorFee,
    CreateConfig(CreateConfigIxArgs),
    CreatePool(CreatePoolIxArgs),
    Deposit(DepositIxArgs),
    Disable(DisableIxArgs),
    ExtendAccount,
    Sell(SellIxArgs),
    SetCoinCreator,
    UpdateAdmin,
    UpdateFeeConfig(UpdateFeeConfigIxArgs),
    Withdraw(WithdrawIxArgs),
}
impl PumpAmmProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        match maybe_discm {
            BUY_IX_DISCM => Ok(Self::Buy(BuyIxArgs::deserialize(&mut reader)?)),
            COLLECT_COIN_CREATOR_FEE_IX_DISCM => Ok(Self::CollectCoinCreatorFee),
            CREATE_CONFIG_IX_DISCM => Ok(Self::CreateConfig(CreateConfigIxArgs::deserialize(
                &mut reader,
            )?)),
            CREATE_POOL_IX_DISCM => Ok(Self::CreatePool(CreatePoolIxArgs::deserialize(
                &mut reader,
            )?)),
            DEPOSIT_IX_DISCM => Ok(Self::Deposit(DepositIxArgs::deserialize(&mut reader)?)),
            DISABLE_IX_DISCM => Ok(Self::Disable(DisableIxArgs::deserialize(&mut reader)?)),
            EXTEND_ACCOUNT_IX_DISCM => Ok(Self::ExtendAccount),
            SELL_IX_DISCM => Ok(Self::Sell(SellIxArgs::deserialize(&mut reader)?)),
            SET_COIN_CREATOR_IX_DISCM => Ok(Self::SetCoinCreator),
            UPDATE_ADMIN_IX_DISCM => Ok(Self::UpdateAdmin),
            UPDATE_FEE_CONFIG_IX_DISCM => Ok(Self::UpdateFeeConfig(
                UpdateFeeConfigIxArgs::deserialize(&mut reader)?,
            )),
            WITHDRAW_IX_DISCM => Ok(Self::Withdraw(WithdrawIxArgs::deserialize(&mut reader)?)),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {:?} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::Buy(args) => {
                writer.write_all(&BUY_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CollectCoinCreatorFee => writer.write_all(&COLLECT_COIN_CREATOR_FEE_IX_DISCM),
            Self::CreateConfig(args) => {
                writer.write_all(&CREATE_CONFIG_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::CreatePool(args) => {
                writer.write_all(&CREATE_POOL_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::Deposit(args) => {
                writer.write_all(&DEPOSIT_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::Disable(args) => {
                writer.write_all(&DISABLE_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::ExtendAccount => writer.write_all(&EXTEND_ACCOUNT_IX_DISCM),
            Self::Sell(args) => {
                writer.write_all(&SELL_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::SetCoinCreator => writer.write_all(&SET_COIN_CREATOR_IX_DISCM),
            Self::UpdateAdmin => writer.write_all(&UPDATE_ADMIN_IX_DISCM),
            Self::UpdateFeeConfig(args) => {
                writer.write_all(&UPDATE_FEE_CONFIG_IX_DISCM)?;
                args.serialize(&mut writer)
            }
            Self::Withdraw(args) => {
                writer.write_all(&WITHDRAW_IX_DISCM)?;
                args.serialize(&mut writer)
            }
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
