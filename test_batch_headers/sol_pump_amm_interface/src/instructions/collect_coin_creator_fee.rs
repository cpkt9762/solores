//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN: usize = 8;
///Accounts struct for the collect_coin_creator_fee instruction
#[derive(Copy, Clone, Debug)]
pub struct CollectCoinCreatorFeeAccounts<'me, 'info> {
    pub quote_mint: &'me AccountInfo<'info>,
    pub quote_token_program: &'me AccountInfo<'info>,
    pub coin_creator: &'me AccountInfo<'info>,
    pub coin_creator_vault_authority: &'me AccountInfo<'info>,
    pub coin_creator_vault_ata: &'me AccountInfo<'info>,
    pub coin_creator_token_account: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the collect_coin_creator_fee instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CollectCoinCreatorFeeKeys {
    pub quote_mint: Pubkey,
    pub quote_token_program: Pubkey,
    pub coin_creator: Pubkey,
    pub coin_creator_vault_authority: Pubkey,
    pub coin_creator_vault_ata: Pubkey,
    pub coin_creator_token_account: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<CollectCoinCreatorFeeAccounts<'_, '_>> for CollectCoinCreatorFeeKeys {
    fn from(accounts: CollectCoinCreatorFeeAccounts) -> Self {
        Self {
            quote_mint: *accounts.quote_mint.key,
            quote_token_program: *accounts.quote_token_program.key,
            coin_creator: *accounts.coin_creator.key,
            coin_creator_vault_authority: *accounts.coin_creator_vault_authority.key,
            coin_creator_vault_ata: *accounts.coin_creator_vault_ata.key,
            coin_creator_token_account: *accounts.coin_creator_token_account.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<CollectCoinCreatorFeeKeys> for [AccountMeta; COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN] {
    fn from(keys: CollectCoinCreatorFeeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.coin_creator,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.coin_creator_vault_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.coin_creator_vault_ata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.coin_creator_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN]> for CollectCoinCreatorFeeKeys {
    fn from(pubkeys: [Pubkey; COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            quote_mint: pubkeys[0],
            quote_token_program: pubkeys[1],
            coin_creator: pubkeys[2],
            coin_creator_vault_authority: pubkeys[3],
            coin_creator_vault_ata: pubkeys[4],
            coin_creator_token_account: pubkeys[5],
            event_authority: pubkeys[6],
            program: pubkeys[7],
        }
    }
}
impl From<&[String]> for CollectCoinCreatorFeeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            quote_mint: pubkeys[0].parse().unwrap(),
            quote_token_program: pubkeys[1].parse().unwrap(),
            coin_creator: pubkeys[2].parse().unwrap(),
            coin_creator_vault_authority: pubkeys[3].parse().unwrap(),
            coin_creator_vault_ata: pubkeys[4].parse().unwrap(),
            coin_creator_token_account: pubkeys[5].parse().unwrap(),
            event_authority: pubkeys[6].parse().unwrap(),
            program: pubkeys[7].parse().unwrap(),
        }
    }
}
impl<'info> From<CollectCoinCreatorFeeAccounts<'_, 'info>>
    for [AccountInfo<'info>; COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CollectCoinCreatorFeeAccounts<'_, 'info>) -> Self {
        [
            accounts.quote_mint.clone(),
            accounts.quote_token_program.clone(),
            accounts.coin_creator.clone(),
            accounts.coin_creator_vault_authority.clone(),
            accounts.coin_creator_vault_ata.clone(),
            accounts.coin_creator_token_account.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN]>
    for CollectCoinCreatorFeeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            quote_mint: &arr[0],
            quote_token_program: &arr[1],
            coin_creator: &arr[2],
            coin_creator_vault_authority: &arr[3],
            coin_creator_vault_ata: &arr[4],
            coin_creator_token_account: &arr[5],
            event_authority: &arr[6],
            program: &arr[7],
        }
    }
}
pub const COLLECT_COIN_CREATOR_FEE_IX_DISCM: [u8; 8] = [160, 57, 89, 42, 181, 139, 43, 66];
#[derive(Clone, Debug, PartialEq)]
pub struct CollectCoinCreatorFeeIxData;
impl CollectCoinCreatorFeeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != COLLECT_COIN_CREATOR_FEE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    COLLECT_COIN_CREATOR_FEE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&COLLECT_COIN_CREATOR_FEE_IX_DISCM)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn collect_coin_creator_fee_ix_with_program_id(
    program_id: Pubkey,
    keys: CollectCoinCreatorFeeKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; COLLECT_COIN_CREATOR_FEE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: CollectCoinCreatorFeeIxData.try_to_vec()?,
    })
}
pub fn collect_coin_creator_fee_ix(
    keys: CollectCoinCreatorFeeKeys,
) -> std::io::Result<Instruction> {
    collect_coin_creator_fee_ix_with_program_id(crate::ID, keys)
}
pub fn collect_coin_creator_fee_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CollectCoinCreatorFeeAccounts<'_, '_>,
) -> ProgramResult {
    let keys: CollectCoinCreatorFeeKeys = accounts.into();
    let ix = collect_coin_creator_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn collect_coin_creator_fee_invoke(
    accounts: CollectCoinCreatorFeeAccounts<'_, '_>,
) -> ProgramResult {
    collect_coin_creator_fee_invoke_with_program_id(crate::ID, accounts)
}
pub fn collect_coin_creator_fee_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CollectCoinCreatorFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CollectCoinCreatorFeeKeys = accounts.into();
    let ix = collect_coin_creator_fee_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn collect_coin_creator_fee_invoke_signed(
    accounts: CollectCoinCreatorFeeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    collect_coin_creator_fee_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn collect_coin_creator_fee_verify_account_keys(
    accounts: CollectCoinCreatorFeeAccounts<'_, '_>,
    keys: CollectCoinCreatorFeeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.quote_token_program.key, keys.quote_token_program),
        (*accounts.coin_creator.key, keys.coin_creator),
        (
            *accounts.coin_creator_vault_authority.key,
            keys.coin_creator_vault_authority,
        ),
        (
            *accounts.coin_creator_vault_ata.key,
            keys.coin_creator_vault_ata,
        ),
        (
            *accounts.coin_creator_token_account.key,
            keys.coin_creator_token_account,
        ),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///COIN_CREATOR_VAULT_AUTHORITY_SEED_0 seed for coin_creator_vault_authority PDA: "creator_vault"
pub const COIN_CREATOR_VAULT_AUTHORITY_SEED_0: &[u8] = &[
    99u8, 114u8, 101u8, 97u8, 116u8, 111u8, 114u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl CollectCoinCreatorFeeKeys {
    ///Derive the coin_creator_vault_authority PDA
    pub fn derive_coin_creator_vault_authority_pda(
        program_id: &Pubkey,
        coin_creator: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[COIN_CREATOR_VAULT_AUTHORITY_SEED_0, coin_creator.as_ref()],
            program_id,
        )
    }
    ///Derive the coin_creator_vault_ata PDA
    pub fn derive_coin_creator_vault_ata_pda(
        program_id: &Pubkey,
        coin_creator_vault_authority: &Pubkey,
        quote_token_program: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                coin_creator_vault_authority.as_ref(),
                quote_token_program.as_ref(),
                quote_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
