//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const BUY_IX_ACCOUNTS_LEN: usize = 19;
///Accounts struct for the buy instruction
#[derive(Copy, Clone, Debug)]
pub struct BuyAccounts<'me, 'info> {
    pub pool: &'me AccountInfo<'info>,
    pub user: &'me AccountInfo<'info>,
    pub global_config: &'me AccountInfo<'info>,
    ///Relations: pool
    pub base_mint: &'me AccountInfo<'info>,
    ///Relations: pool
    pub quote_mint: &'me AccountInfo<'info>,
    pub user_base_token_account: &'me AccountInfo<'info>,
    pub user_quote_token_account: &'me AccountInfo<'info>,
    ///Relations: pool
    pub pool_base_token_account: &'me AccountInfo<'info>,
    ///Relations: pool
    pub pool_quote_token_account: &'me AccountInfo<'info>,
    pub protocol_fee_recipient: &'me AccountInfo<'info>,
    pub protocol_fee_recipient_token_account: &'me AccountInfo<'info>,
    pub base_token_program: &'me AccountInfo<'info>,
    pub quote_token_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
    pub coin_creator_vault_ata: &'me AccountInfo<'info>,
    pub coin_creator_vault_authority: &'me AccountInfo<'info>,
}
///Public keys struct for the buy instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct BuyKeys {
    pub pool: Pubkey,
    pub user: Pubkey,
    pub global_config: Pubkey,
    ///Relations: pool
    pub base_mint: Pubkey,
    ///Relations: pool
    pub quote_mint: Pubkey,
    pub user_base_token_account: Pubkey,
    pub user_quote_token_account: Pubkey,
    ///Relations: pool
    pub pool_base_token_account: Pubkey,
    ///Relations: pool
    pub pool_quote_token_account: Pubkey,
    pub protocol_fee_recipient: Pubkey,
    pub protocol_fee_recipient_token_account: Pubkey,
    pub base_token_program: Pubkey,
    pub quote_token_program: Pubkey,
    pub system_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
    pub coin_creator_vault_ata: Pubkey,
    pub coin_creator_vault_authority: Pubkey,
}
impl From<BuyAccounts<'_, '_>> for BuyKeys {
    fn from(accounts: BuyAccounts) -> Self {
        Self {
            pool: *accounts.pool.key,
            user: *accounts.user.key,
            global_config: *accounts.global_config.key,
            base_mint: *accounts.base_mint.key,
            quote_mint: *accounts.quote_mint.key,
            user_base_token_account: *accounts.user_base_token_account.key,
            user_quote_token_account: *accounts.user_quote_token_account.key,
            pool_base_token_account: *accounts.pool_base_token_account.key,
            pool_quote_token_account: *accounts.pool_quote_token_account.key,
            protocol_fee_recipient: *accounts.protocol_fee_recipient.key,
            protocol_fee_recipient_token_account: *accounts
                .protocol_fee_recipient_token_account
                .key,
            base_token_program: *accounts.base_token_program.key,
            quote_token_program: *accounts.quote_token_program.key,
            system_program: *accounts.system_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
            coin_creator_vault_ata: *accounts.coin_creator_vault_ata.key,
            coin_creator_vault_authority: *accounts.coin_creator_vault_authority.key,
        }
    }
}
impl From<BuyKeys> for [AccountMeta; BUY_IX_ACCOUNTS_LEN] {
    fn from(keys: BuyKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.user,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.user_base_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_quote_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_base_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_quote_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.protocol_fee_recipient,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.protocol_fee_recipient_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.coin_creator_vault_ata,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.coin_creator_vault_authority,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; BUY_IX_ACCOUNTS_LEN]> for BuyKeys {
    fn from(pubkeys: [Pubkey; BUY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool: pubkeys[0],
            user: pubkeys[1],
            global_config: pubkeys[2],
            base_mint: pubkeys[3],
            quote_mint: pubkeys[4],
            user_base_token_account: pubkeys[5],
            user_quote_token_account: pubkeys[6],
            pool_base_token_account: pubkeys[7],
            pool_quote_token_account: pubkeys[8],
            protocol_fee_recipient: pubkeys[9],
            protocol_fee_recipient_token_account: pubkeys[10],
            base_token_program: pubkeys[11],
            quote_token_program: pubkeys[12],
            system_program: pubkeys[13],
            associated_token_program: pubkeys[14],
            event_authority: pubkeys[15],
            program: pubkeys[16],
            coin_creator_vault_ata: pubkeys[17],
            coin_creator_vault_authority: pubkeys[18],
        }
    }
}
impl From<&[String]> for BuyKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            pool: pubkeys[0].parse().unwrap(),
            user: pubkeys[1].parse().unwrap(),
            global_config: pubkeys[2].parse().unwrap(),
            base_mint: pubkeys[3].parse().unwrap(),
            quote_mint: pubkeys[4].parse().unwrap(),
            user_base_token_account: pubkeys[5].parse().unwrap(),
            user_quote_token_account: pubkeys[6].parse().unwrap(),
            pool_base_token_account: pubkeys[7].parse().unwrap(),
            pool_quote_token_account: pubkeys[8].parse().unwrap(),
            protocol_fee_recipient: pubkeys[9].parse().unwrap(),
            protocol_fee_recipient_token_account: pubkeys[10].parse().unwrap(),
            base_token_program: pubkeys[11].parse().unwrap(),
            quote_token_program: pubkeys[12].parse().unwrap(),
            system_program: pubkeys[13].parse().unwrap(),
            associated_token_program: pubkeys[14].parse().unwrap(),
            event_authority: pubkeys[15].parse().unwrap(),
            program: pubkeys[16].parse().unwrap(),
            coin_creator_vault_ata: pubkeys[17].parse().unwrap(),
            coin_creator_vault_authority: pubkeys[18].parse().unwrap(),
        }
    }
}
impl<'info> From<BuyAccounts<'_, 'info>> for [AccountInfo<'info>; BUY_IX_ACCOUNTS_LEN] {
    fn from(accounts: BuyAccounts<'_, 'info>) -> Self {
        [
            accounts.pool.clone(),
            accounts.user.clone(),
            accounts.global_config.clone(),
            accounts.base_mint.clone(),
            accounts.quote_mint.clone(),
            accounts.user_base_token_account.clone(),
            accounts.user_quote_token_account.clone(),
            accounts.pool_base_token_account.clone(),
            accounts.pool_quote_token_account.clone(),
            accounts.protocol_fee_recipient.clone(),
            accounts.protocol_fee_recipient_token_account.clone(),
            accounts.base_token_program.clone(),
            accounts.quote_token_program.clone(),
            accounts.system_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
            accounts.coin_creator_vault_ata.clone(),
            accounts.coin_creator_vault_authority.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; BUY_IX_ACCOUNTS_LEN]> for BuyAccounts<'me, 'info> {
    fn from(arr: &'me [AccountInfo<'info>; BUY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool: &arr[0],
            user: &arr[1],
            global_config: &arr[2],
            base_mint: &arr[3],
            quote_mint: &arr[4],
            user_base_token_account: &arr[5],
            user_quote_token_account: &arr[6],
            pool_base_token_account: &arr[7],
            pool_quote_token_account: &arr[8],
            protocol_fee_recipient: &arr[9],
            protocol_fee_recipient_token_account: &arr[10],
            base_token_program: &arr[11],
            quote_token_program: &arr[12],
            system_program: &arr[13],
            associated_token_program: &arr[14],
            event_authority: &arr[15],
            program: &arr[16],
            coin_creator_vault_ata: &arr[17],
            coin_creator_vault_authority: &arr[18],
        }
    }
}
pub const BUY_IX_DISCM: [u8; 8] = [102, 6, 61, 18, 1, 218, 235, 234];
///Arguments for the buy instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyIxArgs {
    pub discriminator: [u8; 8],
    pub base_amount_out: u64,
    pub max_quote_amount_in: u64,
}
impl Default for BuyIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [102u8, 6u8, 61u8, 18u8, 1u8, 218u8, 235u8, 234u8],
            base_amount_out: Default::default(),
            max_quote_amount_in: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct BuyIxData(pub BuyIxArgs);
impl From<BuyIxArgs> for BuyIxData {
    fn from(args: BuyIxArgs) -> Self {
        Self(args)
    }
}
impl BuyIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != BUY_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    BUY_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(BuyIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&BUY_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn buy_ix_with_program_id(
    program_id: Pubkey,
    keys: BuyKeys,
    args: BuyIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; BUY_IX_ACCOUNTS_LEN] = keys.into();
    let data: BuyIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn buy_ix(keys: BuyKeys, args: BuyIxArgs) -> std::io::Result<Instruction> {
    buy_ix_with_program_id(crate::ID, keys, args)
}
pub fn buy_invoke_with_program_id(
    program_id: Pubkey,
    accounts: BuyAccounts<'_, '_>,
    args: BuyIxArgs,
) -> ProgramResult {
    let keys: BuyKeys = accounts.into();
    let ix = buy_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn buy_invoke(accounts: BuyAccounts<'_, '_>, args: BuyIxArgs) -> ProgramResult {
    buy_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn buy_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: BuyAccounts<'_, '_>,
    args: BuyIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: BuyKeys = accounts.into();
    let ix = buy_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn buy_invoke_signed(
    accounts: BuyAccounts<'_, '_>,
    args: BuyIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    buy_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn buy_verify_account_keys(
    accounts: BuyAccounts<'_, '_>,
    keys: BuyKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.pool.key, keys.pool),
        (*accounts.user.key, keys.user),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.quote_mint.key, keys.quote_mint),
        (
            *accounts.user_base_token_account.key,
            keys.user_base_token_account,
        ),
        (
            *accounts.user_quote_token_account.key,
            keys.user_quote_token_account,
        ),
        (
            *accounts.pool_base_token_account.key,
            keys.pool_base_token_account,
        ),
        (
            *accounts.pool_quote_token_account.key,
            keys.pool_quote_token_account,
        ),
        (
            *accounts.protocol_fee_recipient.key,
            keys.protocol_fee_recipient,
        ),
        (
            *accounts.protocol_fee_recipient_token_account.key,
            keys.protocol_fee_recipient_token_account,
        ),
        (*accounts.base_token_program.key, keys.base_token_program),
        (*accounts.quote_token_program.key, keys.quote_token_program),
        (*accounts.system_program.key, keys.system_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
        (
            *accounts.coin_creator_vault_ata.key,
            keys.coin_creator_vault_ata,
        ),
        (
            *accounts.coin_creator_vault_authority.key,
            keys.coin_creator_vault_authority,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
///COIN_CREATOR_VAULT_AUTHORITY_SEED_0 seed for coin_creator_vault_authority PDA: "creator_vault"
pub const COIN_CREATOR_VAULT_AUTHORITY_SEED_0: &[u8] = &[
    99u8, 114u8, 101u8, 97u8, 116u8, 111u8, 114u8, 95u8, 118u8, 97u8, 117u8, 108u8, 116u8,
];
impl BuyKeys {
    ///Derive the protocol_fee_recipient_token_account PDA
    pub fn derive_protocol_fee_recipient_token_account_pda(
        program_id: &Pubkey,
        protocol_fee_recipient: &Pubkey,
        quote_token_program: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                protocol_fee_recipient.as_ref(),
                quote_token_program.as_ref(),
                quote_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
    ///Derive the coin_creator_vault_ata PDA
    pub fn derive_coin_creator_vault_ata_pda(
        program_id: &Pubkey,
        coin_creator_vault_authority: &Pubkey,
        quote_token_program: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                coin_creator_vault_authority.as_ref(),
                quote_token_program.as_ref(),
                quote_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the coin_creator_vault_authority PDA
    pub fn derive_coin_creator_vault_authority_pda(
        program_id: &Pubkey,
        pool_coin_creator: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                COIN_CREATOR_VAULT_AUTHORITY_SEED_0,
                pool_coin_creator.as_ref(),
            ],
            program_id,
        )
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
impl BuyIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<BuyIxArgs> for PumpAmmProgramIx {
    fn from(args: BuyIxArgs) -> Self {
        Self::Buy(args)
    }
}
