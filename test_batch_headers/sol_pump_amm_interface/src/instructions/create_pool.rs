//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CREATE_POOL_IX_ACCOUNTS_LEN: usize = 18;
///Accounts struct for the create_pool instruction
#[derive(Copy, Clone, Debug)]
pub struct CreatePoolAccounts<'me, 'info> {
    pub pool: &'me AccountInfo<'info>,
    pub global_config: &'me AccountInfo<'info>,
    pub creator: &'me AccountInfo<'info>,
    pub base_mint: &'me AccountInfo<'info>,
    pub quote_mint: &'me AccountInfo<'info>,
    pub lp_mint: &'me AccountInfo<'info>,
    pub user_base_token_account: &'me AccountInfo<'info>,
    pub user_quote_token_account: &'me AccountInfo<'info>,
    pub user_pool_token_account: &'me AccountInfo<'info>,
    pub pool_base_token_account: &'me AccountInfo<'info>,
    pub pool_quote_token_account: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub token_2022_program: &'me AccountInfo<'info>,
    pub base_token_program: &'me AccountInfo<'info>,
    pub quote_token_program: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
    pub event_authority: &'me AccountInfo<'info>,
    pub program: &'me AccountInfo<'info>,
}
///Public keys struct for the create_pool instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CreatePoolKeys {
    pub pool: Pubkey,
    pub global_config: Pubkey,
    pub creator: Pubkey,
    pub base_mint: Pubkey,
    pub quote_mint: Pubkey,
    pub lp_mint: Pubkey,
    pub user_base_token_account: Pubkey,
    pub user_quote_token_account: Pubkey,
    pub user_pool_token_account: Pubkey,
    pub pool_base_token_account: Pubkey,
    pub pool_quote_token_account: Pubkey,
    pub system_program: Pubkey,
    pub token_2022_program: Pubkey,
    pub base_token_program: Pubkey,
    pub quote_token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub event_authority: Pubkey,
    pub program: Pubkey,
}
impl From<CreatePoolAccounts<'_, '_>> for CreatePoolKeys {
    fn from(accounts: CreatePoolAccounts) -> Self {
        Self {
            pool: *accounts.pool.key,
            global_config: *accounts.global_config.key,
            creator: *accounts.creator.key,
            base_mint: *accounts.base_mint.key,
            quote_mint: *accounts.quote_mint.key,
            lp_mint: *accounts.lp_mint.key,
            user_base_token_account: *accounts.user_base_token_account.key,
            user_quote_token_account: *accounts.user_quote_token_account.key,
            user_pool_token_account: *accounts.user_pool_token_account.key,
            pool_base_token_account: *accounts.pool_base_token_account.key,
            pool_quote_token_account: *accounts.pool_quote_token_account.key,
            system_program: *accounts.system_program.key,
            token_2022_program: *accounts.token_2022_program.key,
            base_token_program: *accounts.base_token_program.key,
            quote_token_program: *accounts.quote_token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            event_authority: *accounts.event_authority.key,
            program: *accounts.program.key,
        }
    }
}
impl From<CreatePoolKeys> for [AccountMeta; CREATE_POOL_IX_ACCOUNTS_LEN] {
    fn from(keys: CreatePoolKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.pool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.global_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.creator,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.base_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.lp_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_base_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_quote_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.user_pool_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_base_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_quote_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_2022_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.base_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.quote_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.event_authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CREATE_POOL_IX_ACCOUNTS_LEN]> for CreatePoolKeys {
    fn from(pubkeys: [Pubkey; CREATE_POOL_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool: pubkeys[0],
            global_config: pubkeys[1],
            creator: pubkeys[2],
            base_mint: pubkeys[3],
            quote_mint: pubkeys[4],
            lp_mint: pubkeys[5],
            user_base_token_account: pubkeys[6],
            user_quote_token_account: pubkeys[7],
            user_pool_token_account: pubkeys[8],
            pool_base_token_account: pubkeys[9],
            pool_quote_token_account: pubkeys[10],
            system_program: pubkeys[11],
            token_2022_program: pubkeys[12],
            base_token_program: pubkeys[13],
            quote_token_program: pubkeys[14],
            associated_token_program: pubkeys[15],
            event_authority: pubkeys[16],
            program: pubkeys[17],
        }
    }
}
impl From<&[String]> for CreatePoolKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            pool: pubkeys[0].parse().unwrap(),
            global_config: pubkeys[1].parse().unwrap(),
            creator: pubkeys[2].parse().unwrap(),
            base_mint: pubkeys[3].parse().unwrap(),
            quote_mint: pubkeys[4].parse().unwrap(),
            lp_mint: pubkeys[5].parse().unwrap(),
            user_base_token_account: pubkeys[6].parse().unwrap(),
            user_quote_token_account: pubkeys[7].parse().unwrap(),
            user_pool_token_account: pubkeys[8].parse().unwrap(),
            pool_base_token_account: pubkeys[9].parse().unwrap(),
            pool_quote_token_account: pubkeys[10].parse().unwrap(),
            system_program: pubkeys[11].parse().unwrap(),
            token_2022_program: pubkeys[12].parse().unwrap(),
            base_token_program: pubkeys[13].parse().unwrap(),
            quote_token_program: pubkeys[14].parse().unwrap(),
            associated_token_program: pubkeys[15].parse().unwrap(),
            event_authority: pubkeys[16].parse().unwrap(),
            program: pubkeys[17].parse().unwrap(),
        }
    }
}
impl<'info> From<CreatePoolAccounts<'_, 'info>>
    for [AccountInfo<'info>; CREATE_POOL_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CreatePoolAccounts<'_, 'info>) -> Self {
        [
            accounts.pool.clone(),
            accounts.global_config.clone(),
            accounts.creator.clone(),
            accounts.base_mint.clone(),
            accounts.quote_mint.clone(),
            accounts.lp_mint.clone(),
            accounts.user_base_token_account.clone(),
            accounts.user_quote_token_account.clone(),
            accounts.user_pool_token_account.clone(),
            accounts.pool_base_token_account.clone(),
            accounts.pool_quote_token_account.clone(),
            accounts.system_program.clone(),
            accounts.token_2022_program.clone(),
            accounts.base_token_program.clone(),
            accounts.quote_token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.event_authority.clone(),
            accounts.program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CREATE_POOL_IX_ACCOUNTS_LEN]>
    for CreatePoolAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CREATE_POOL_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            pool: &arr[0],
            global_config: &arr[1],
            creator: &arr[2],
            base_mint: &arr[3],
            quote_mint: &arr[4],
            lp_mint: &arr[5],
            user_base_token_account: &arr[6],
            user_quote_token_account: &arr[7],
            user_pool_token_account: &arr[8],
            pool_base_token_account: &arr[9],
            pool_quote_token_account: &arr[10],
            system_program: &arr[11],
            token_2022_program: &arr[12],
            base_token_program: &arr[13],
            quote_token_program: &arr[14],
            associated_token_program: &arr[15],
            event_authority: &arr[16],
            program: &arr[17],
        }
    }
}
pub const CREATE_POOL_IX_DISCM: [u8; 8] = [233, 146, 209, 142, 207, 104, 64, 188];
///Arguments for the create_pool instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePoolIxArgs {
    pub discriminator: [u8; 8],
    pub index: u16,
    pub base_amount_in: u64,
    pub quote_amount_in: u64,
    pub coin_creator: Pubkey,
}
impl Default for CreatePoolIxArgs {
    fn default() -> Self {
        Self {
            discriminator: [233u8, 146u8, 209u8, 142u8, 207u8, 104u8, 64u8, 188u8],
            index: Default::default(),
            base_amount_in: Default::default(),
            quote_amount_in: Default::default(),
            coin_creator: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CreatePoolIxData(pub CreatePoolIxArgs);
impl From<CreatePoolIxArgs> for CreatePoolIxData {
    fn from(args: CreatePoolIxArgs) -> Self {
        Self(args)
    }
}
impl CreatePoolIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        let mut reader = buf;
        let mut maybe_discm = [0u8; 8];
        reader.read_exact(&mut maybe_discm)?;
        if maybe_discm != CREATE_POOL_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {:?}. Received: {:?}",
                    CREATE_POOL_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self(CreatePoolIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&CREATE_POOL_IX_DISCM)?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn create_pool_ix_with_program_id(
    program_id: Pubkey,
    keys: CreatePoolKeys,
    args: CreatePoolIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CREATE_POOL_IX_ACCOUNTS_LEN] = keys.into();
    let data: CreatePoolIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn create_pool_ix(
    keys: CreatePoolKeys,
    args: CreatePoolIxArgs,
) -> std::io::Result<Instruction> {
    create_pool_ix_with_program_id(crate::ID, keys, args)
}
pub fn create_pool_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CreatePoolAccounts<'_, '_>,
    args: CreatePoolIxArgs,
) -> ProgramResult {
    let keys: CreatePoolKeys = accounts.into();
    let ix = create_pool_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn create_pool_invoke(
    accounts: CreatePoolAccounts<'_, '_>,
    args: CreatePoolIxArgs,
) -> ProgramResult {
    create_pool_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn create_pool_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CreatePoolAccounts<'_, '_>,
    args: CreatePoolIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CreatePoolKeys = accounts.into();
    let ix = create_pool_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn create_pool_invoke_signed(
    accounts: CreatePoolAccounts<'_, '_>,
    args: CreatePoolIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    create_pool_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn create_pool_verify_account_keys(
    accounts: CreatePoolAccounts<'_, '_>,
    keys: CreatePoolKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.pool.key, keys.pool),
        (*accounts.global_config.key, keys.global_config),
        (*accounts.creator.key, keys.creator),
        (*accounts.base_mint.key, keys.base_mint),
        (*accounts.quote_mint.key, keys.quote_mint),
        (*accounts.lp_mint.key, keys.lp_mint),
        (
            *accounts.user_base_token_account.key,
            keys.user_base_token_account,
        ),
        (
            *accounts.user_quote_token_account.key,
            keys.user_quote_token_account,
        ),
        (
            *accounts.user_pool_token_account.key,
            keys.user_pool_token_account,
        ),
        (
            *accounts.pool_base_token_account.key,
            keys.pool_base_token_account,
        ),
        (
            *accounts.pool_quote_token_account.key,
            keys.pool_quote_token_account,
        ),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.token_2022_program.key, keys.token_2022_program),
        (*accounts.base_token_program.key, keys.base_token_program),
        (*accounts.quote_token_program.key, keys.quote_token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.event_authority.key, keys.event_authority),
        (*accounts.program.key, keys.program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
///POOL_SEED_0 seed for pool PDA: "pool"
pub const POOL_SEED_0: &[u8] = &[112u8, 111u8, 111u8, 108u8];
///LP_MINT_SEED_0 seed for lp_mint PDA: "pool_lp_mint"
pub const LP_MINT_SEED_0: &[u8] = &[
    112u8, 111u8, 111u8, 108u8, 95u8, 108u8, 112u8, 95u8, 109u8, 105u8, 110u8, 116u8,
];
///EVENT_AUTHORITY_SEED seed for event_authority PDA: "__event_authority"
pub const EVENT_AUTHORITY_SEED: &[u8] = &[
    95u8, 95u8, 101u8, 118u8, 101u8, 110u8, 116u8, 95u8, 97u8, 117u8, 116u8, 104u8, 111u8, 114u8,
    105u8, 116u8, 121u8,
];
impl CreatePoolKeys {
    ///Derive the pool PDA
    pub fn derive_pool_pda(
        program_id: &Pubkey,
        index: &[u8],
        creator: &Pubkey,
        base_mint: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                POOL_SEED_0,
                index,
                creator.as_ref(),
                base_mint.as_ref(),
                quote_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the lp_mint PDA
    pub fn derive_lp_mint_pda(program_id: &Pubkey, pool: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[LP_MINT_SEED_0, pool.as_ref()], program_id)
    }
    ///Derive the user_pool_token_account PDA
    pub fn derive_user_pool_token_account_pda(
        program_id: &Pubkey,
        creator: &Pubkey,
        token_2022_program: &Pubkey,
        lp_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                creator.as_ref(),
                token_2022_program.as_ref(),
                lp_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the pool_base_token_account PDA
    pub fn derive_pool_base_token_account_pda(
        program_id: &Pubkey,
        pool: &Pubkey,
        base_token_program: &Pubkey,
        base_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                pool.as_ref(),
                base_token_program.as_ref(),
                base_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the pool_quote_token_account PDA
    pub fn derive_pool_quote_token_account_pda(
        program_id: &Pubkey,
        pool: &Pubkey,
        quote_token_program: &Pubkey,
        quote_mint: &Pubkey,
    ) -> (Pubkey, u8) {
        Pubkey::find_program_address(
            &[
                pool.as_ref(),
                quote_token_program.as_ref(),
                quote_mint.as_ref(),
            ],
            program_id,
        )
    }
    ///Derive the event_authority PDA
    pub fn derive_event_authority_pda(program_id: &Pubkey) -> (Pubkey, u8) {
        Pubkey::find_program_address(&[EVENT_AUTHORITY_SEED], program_id)
    }
}
///system_program program address
pub const SYSTEM_PROGRAM_ADDRESS: &str = "11111111111111111111111111111111";
///token_2022_program program address
pub const TOKEN_2022_PROGRAM_ADDRESS: &str = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb";
///associated_token_program program address
pub const ASSOCIATED_TOKEN_PROGRAM_ADDRESS: &str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
impl CreatePoolIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CreatePoolIxArgs> for PumpAmmProgramIx {
    fn from(args: CreatePoolIxArgs) -> Self {
        Self::CreatePool(args)
    }
}
