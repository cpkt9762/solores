//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use solana_program::program_error::ProgramError;
use thiserror::Error;
///Custom errors for the lifinity program
#[derive(Clone, Copy, Debug, Eq, Error, num_derive::FromPrimitive, PartialEq)]
pub enum LifinityError {
    ///6000 - Swap account already in use
    #[error("Swap account already in use")]
    AlreadyInUse = 6000,
    ///6001 - Invalid program address generated from bump seed and key
    #[error("Invalid program address generated from bump seed and key")]
    InvalidProgramAddress = 6001,
    ///6002 - Input account owner is not the program address
    #[error("Input account owner is not the program address")]
    InvalidOwner = 6002,
    ///6003 - Output pool account owner cannot be the program address
    #[error("Output pool account owner cannot be the program address")]
    InvalidOutputOwner = 6003,
    ///6004 - Deserialized account is not an SPL Token mint
    #[error("Deserialized account is not an SPL Token mint")]
    ExpectedMint = 6004,
    ///6005 - Deserialized account is not an SPL Token account
    #[error("Deserialized account is not an SPL Token account")]
    ExpectedAccount = 6005,
    ///6006 - Input token account empty
    #[error("Input token account empty")]
    EmptySupply = 6006,
    ///6007 - Pool token mint has a non-zero supply
    #[error("Pool token mint has a non-zero supply")]
    InvalidSupply = 6007,
    ///6008 - Token account has a delegate
    #[error("Token account has a delegate")]
    InvalidDelegate = 6008,
    ///6009 - InvalidInput
    #[error("InvalidInput")]
    InvalidInput = 6009,
    ///6010 - Address of the provided swap token account is incorrect
    #[error("Address of the provided swap token account is incorrect")]
    IncorrectSwapAccount = 6010,
    ///6011 - Address of the provided pool token mint is incorrect
    #[error("Address of the provided pool token mint is incorrect")]
    IncorrectPoolMint = 6011,
    ///6012 - InvalidOutput
    #[error("InvalidOutput")]
    InvalidOutput = 6012,
    ///6013 - General calculation failure due to overflow or underflow
    #[error("General calculation failure due to overflow or underflow")]
    CalculationFailure = 6013,
    ///6014 - Invalid instruction
    #[error("Invalid instruction")]
    InvalidInstruction = 6014,
    ///6015 - Swap input token accounts have the same mint
    #[error("Swap input token accounts have the same mint")]
    RepeatedMint = 6015,
    ///6016 - Swap instruction exceeds desired slippage limit
    #[error("Swap instruction exceeds desired slippage limit")]
    ExceededSlippage = 6016,
    ///6017 - Token account has a close authority
    #[error("Token account has a close authority")]
    InvalidCloseAuthority = 6017,
    ///6018 - Pool token mint has a freeze authority
    #[error("Pool token mint has a freeze authority")]
    InvalidFreezeAuthority = 6018,
    ///6019 - Pool fee token account incorrect
    #[error("Pool fee token account incorrect")]
    IncorrectFeeAccount = 6019,
    ///6020 - Given pool token amount results in zero trading tokens
    #[error("Given pool token amount results in zero trading tokens")]
    ZeroTradingTokens = 6020,
    ///6021 - Fee calculation failed due to overflow, underflow, or unexpected 0
    #[error("Fee calculation failed due to overflow, underflow, or unexpected 0")]
    FeeCalculationFailure = 6021,
    ///6022 - Conversion to u64 failed with an overflow or underflow
    #[error("Conversion to u64 failed with an overflow or underflow")]
    ConversionFailure = 6022,
    ///6023 - The provided fee does not match the program owner's constraints
    #[error("The provided fee does not match the program owner's constraints")]
    InvalidFee = 6023,
    ///6024 - The provided token program does not match the token program expected by the swap
    #[error("The provided token program does not match the token program expected by the swap")]
    IncorrectTokenProgramId = 6024,
    ///6025 - Address of the provided oracle account is incorrect
    #[error("Address of the provided oracle account is incorrect")]
    IncorrectOracleAccount = 6025,
    ///6026 - Address of the provided config account is incorrect
    #[error("Address of the provided config account is incorrect")]
    IncorrectConfigAccount = 6026,
    ///6027 - The provided curve type is not supported by the program owner
    #[error("The provided curve type is not supported by the program owner")]
    UnsupportedCurveType = 6027,
    ///6028 - The provided curve parameters are invalid
    #[error("The provided curve parameters are invalid")]
    InvalidCurve = 6028,
    ///6029 - The operation cannot be performed on the given curve
    #[error("The operation cannot be performed on the given curve")]
    UnsupportedCurveOperation = 6029,
    ///6030 - Pyth oracle status is not 'trading'
    #[error("Pyth oracle status is not 'trading'")]
    InvalidPythStatus = 6030,
    ///6031 - Could not retrieve updated price feed from the Pyth oracle
    #[error("Could not retrieve updated price feed from the Pyth oracle")]
    InvalidPythPrice = 6031,
    ///6032 - Address of the provided signer account is incorrect
    #[error("Address of the provided signer account is incorrect")]
    IncorrectSigner = 6032,
    ///6033 - Swap amount exceeds pool balance
    #[error("Swap amount exceeds pool balance")]
    ExceedPoolBalance = 6033,
    ///6034 - Program is frozen
    #[error("Program is frozen")]
    ProgramIsFrozen = 6034,
    ///6035 - Oracle confidence is too high
    #[error("Oracle confidence is too high")]
    OracleConfidence = 6035,
    ///6036 - Over Pool Cap Amount
    #[error("Over Pool Cap Amount")]
    OverCapAmount = 6036,
    ///6037 - Invalid update wallet address
    #[error("Invalid update wallet address")]
    InvalidUpdateAccount = 6037,
    ///6038 - Invalid update param
    #[error("Invalid update param")]
    InvalidUpdateParam = 6038,
    ///6039 - Invalid inner swap account
    #[error("Invalid inner swap account")]
    InvalidInnerSwapAccount = 6039,
    ///6040 - Exception err
    #[error("Exception err")]
    ExceptionErr = 6040,
}
impl From<LifinityError> for ProgramError {
    fn from(e: LifinityError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
