//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::instructions::*;
pub const SWAP_IX_DISCM: u8 = 0u8;
pub const DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM: u8 = 1u8;
pub const WITHDRAW_ALL_TOKEN_TYPES_IX_DISCM: u8 = 2u8;
/// Program instruction types
#[derive(Clone, Debug, PartialEq)]
pub enum LifinityInstruction {
    Swap(SwapIxArgs),
    DepositAllTokenTypes(DepositAllTokenTypesIxArgs),
    WithdrawAllTokenTypes(WithdrawAllTokenTypesIxArgs),
}
/// Parse instruction data based on 1-byte discriminator (non-Anchor contracts)
pub fn parse_instruction(data: &[u8]) -> Result<LifinityInstruction, std::io::Error> {
    if data.is_empty() {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Instruction data is empty",
        ));
    }
    let discriminator = data[0];
    let mut ix_data = &data[1..];
    match discriminator {
        0u8 => {
            let args = SwapIxArgs::deserialize(&mut ix_data)?;
            Ok(LifinityInstruction::Swap(args))
        }
        1u8 => {
            let args = DepositAllTokenTypesIxArgs::deserialize(&mut ix_data)?;
            Ok(LifinityInstruction::DepositAllTokenTypes(args))
        }
        2u8 => {
            let args = WithdrawAllTokenTypesIxArgs::deserialize(&mut ix_data)?;
            Ok(LifinityInstruction::WithdrawAllTokenTypes(args))
        }
        _ => Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            format!("Unknown instruction discriminator: {}", discriminator),
        )),
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_swap_consistency() {
        let expected_first_arg = 1000u64;
        let test_args = SwapIxArgs {
            amount_in: expected_first_arg,
            ..Default::default()
        };
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&SWAP_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(LifinityInstruction::Swap(args)) => {
                assert_eq!(
                    args.amount_in, expected_first_arg,
                    "First argument value should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Swap)
                );
            }
        }
    }
    #[test]
    fn test_deposit_all_token_types_consistency() {
        let expected_first_arg = 1000u64;
        let test_args = DepositAllTokenTypesIxArgs {
            pool_token_amount: expected_first_arg,
            ..Default::default()
        };
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(LifinityInstruction::DepositAllTokenTypes(args)) => {
                assert_eq!(
                    args.pool_token_amount, expected_first_arg,
                    "First argument value should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(DepositAllTokenTypes)
                );
            }
        }
    }
    #[test]
    fn test_withdraw_all_token_types_consistency() {
        let expected_first_arg = 1000u64;
        let test_args = WithdrawAllTokenTypesIxArgs {
            pool_token_amount: expected_first_arg,
            ..Default::default()
        };
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&WITHDRAW_ALL_TOKEN_TYPES_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(LifinityInstruction::WithdrawAllTokenTypes(args)) => {
                assert_eq!(
                    args.pool_token_amount, expected_first_arg,
                    "First argument value should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(WithdrawAllTokenTypes)
                );
            }
        }
    }
    #[test]
    fn test_discriminator_recognition() {
        let test_args = SwapIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(SwapIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &SWAP_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                LifinityInstruction::Swap(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, SWAP_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => panic!("Parsed instruction should be {}", stringify!(Swap)),
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(Swap),
                    e
                );
            }
        }
        let test_args = DepositAllTokenTypesIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(DepositAllTokenTypesIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                LifinityInstruction::DepositAllTokenTypes(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => {
                    panic!(
                        "Parsed instruction should be {}",
                        stringify!(DepositAllTokenTypes)
                    )
                }
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(DepositAllTokenTypes),
                    e
                );
            }
        }
        let test_args = WithdrawAllTokenTypesIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(WithdrawAllTokenTypesIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &WITHDRAW_ALL_TOKEN_TYPES_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                LifinityInstruction::WithdrawAllTokenTypes(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, WITHDRAW_ALL_TOKEN_TYPES_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => {
                    panic!(
                        "Parsed instruction should be {}",
                        stringify!(WithdrawAllTokenTypes)
                    )
                }
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(WithdrawAllTokenTypes),
                    e
                );
            }
        }
    }
    #[test]
    fn test_invalid_discriminator() {
        let invalid_data = vec![255u8; 40];
        let result = parse_instruction(&invalid_data);
        assert!(result.is_err(), "Should fail with invalid discriminator");
    }
    #[test]
    fn test_insufficient_data() {
        let short_data = vec![1u8; 4];
        let result = parse_instruction(&short_data);
        assert!(result.is_err(), "Should fail with insufficient data");
    }
}
