//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN: usize = 10;
///Accounts struct for the depositAllTokenTypes instruction
#[derive(Copy, Clone, Debug)]
pub struct DepositAllTokenTypesAccounts<'me, 'info> {
    pub amm: &'me AccountInfo<'info>,
    pub authority: &'me AccountInfo<'info>,
    pub user_transfer_authority_info: &'me AccountInfo<'info>,
    pub source_a_info: &'me AccountInfo<'info>,
    pub source_b_info: &'me AccountInfo<'info>,
    pub token_a: &'me AccountInfo<'info>,
    pub token_b: &'me AccountInfo<'info>,
    pub pool_mint: &'me AccountInfo<'info>,
    pub destination: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the depositAllTokenTypes instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct DepositAllTokenTypesKeys {
    pub amm: Pubkey,
    pub authority: Pubkey,
    pub user_transfer_authority_info: Pubkey,
    pub source_a_info: Pubkey,
    pub source_b_info: Pubkey,
    pub token_a: Pubkey,
    pub token_b: Pubkey,
    pub pool_mint: Pubkey,
    pub destination: Pubkey,
    pub token_program: Pubkey,
}
impl From<DepositAllTokenTypesAccounts<'_, '_>> for DepositAllTokenTypesKeys {
    fn from(accounts: DepositAllTokenTypesAccounts) -> Self {
        Self {
            amm: *accounts.amm.key,
            authority: *accounts.authority.key,
            user_transfer_authority_info: *accounts.user_transfer_authority_info.key,
            source_a_info: *accounts.source_a_info.key,
            source_b_info: *accounts.source_b_info.key,
            token_a: *accounts.token_a.key,
            token_b: *accounts.token_b.key,
            pool_mint: *accounts.pool_mint.key,
            destination: *accounts.destination.key,
            token_program: *accounts.token_program.key,
        }
    }
}
impl From<DepositAllTokenTypesKeys> for [AccountMeta; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN] {
    fn from(keys: DepositAllTokenTypesKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.amm,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.authority,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.user_transfer_authority_info,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.source_a_info,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.source_b_info,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_a,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_b,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.pool_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.destination,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN]> for DepositAllTokenTypesKeys {
    fn from(pubkeys: [Pubkey; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            amm: pubkeys[0],
            authority: pubkeys[1],
            user_transfer_authority_info: pubkeys[2],
            source_a_info: pubkeys[3],
            source_b_info: pubkeys[4],
            token_a: pubkeys[5],
            token_b: pubkeys[6],
            pool_mint: pubkeys[7],
            destination: pubkeys[8],
            token_program: pubkeys[9],
        }
    }
}
impl From<&[String]> for DepositAllTokenTypesKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            amm: pubkeys[0].parse().unwrap(),
            authority: pubkeys[1].parse().unwrap(),
            user_transfer_authority_info: pubkeys[2].parse().unwrap(),
            source_a_info: pubkeys[3].parse().unwrap(),
            source_b_info: pubkeys[4].parse().unwrap(),
            token_a: pubkeys[5].parse().unwrap(),
            token_b: pubkeys[6].parse().unwrap(),
            pool_mint: pubkeys[7].parse().unwrap(),
            destination: pubkeys[8].parse().unwrap(),
            token_program: pubkeys[9].parse().unwrap(),
        }
    }
}
impl<'info> From<DepositAllTokenTypesAccounts<'_, 'info>>
    for [AccountInfo<'info>; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN]
{
    fn from(accounts: DepositAllTokenTypesAccounts<'_, 'info>) -> Self {
        [
            accounts.amm.clone(),
            accounts.authority.clone(),
            accounts.user_transfer_authority_info.clone(),
            accounts.source_a_info.clone(),
            accounts.source_b_info.clone(),
            accounts.token_a.clone(),
            accounts.token_b.clone(),
            accounts.pool_mint.clone(),
            accounts.destination.clone(),
            accounts.token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN]>
    for DepositAllTokenTypesAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            amm: &arr[0],
            authority: &arr[1],
            user_transfer_authority_info: &arr[2],
            source_a_info: &arr[3],
            source_b_info: &arr[4],
            token_a: &arr[5],
            token_b: &arr[6],
            pool_mint: &arr[7],
            destination: &arr[8],
            token_program: &arr[9],
        }
    }
}
pub const DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM: u8 = 1u8;
///Arguments for the depositAllTokenTypes instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositAllTokenTypesIxArgs {
    pub discriminator: u8,
    pub pool_token_amount: u64,
    pub maximum_token_a_amount: u64,
    pub maximum_token_b_amount: u64,
}
impl Default for DepositAllTokenTypesIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 1u8,
            pool_token_amount: Default::default(),
            maximum_token_a_amount: Default::default(),
            maximum_token_b_amount: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct DepositAllTokenTypesIxData(pub DepositAllTokenTypesIxArgs);
impl From<DepositAllTokenTypesIxArgs> for DepositAllTokenTypesIxData {
    fn from(args: DepositAllTokenTypesIxArgs) -> Self {
        Self(args)
    }
}
impl DepositAllTokenTypesIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(DepositAllTokenTypesIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[DEPOSIT_ALL_TOKEN_TYPES_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn deposit_all_token_types_ix_with_program_id(
    program_id: Pubkey,
    keys: DepositAllTokenTypesKeys,
    args: DepositAllTokenTypesIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; DEPOSIT_ALL_TOKEN_TYPES_IX_ACCOUNTS_LEN] = keys.into();
    let data: DepositAllTokenTypesIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn deposit_all_token_types_ix(
    keys: DepositAllTokenTypesKeys,
    args: DepositAllTokenTypesIxArgs,
) -> std::io::Result<Instruction> {
    deposit_all_token_types_ix_with_program_id(crate::ID, keys, args)
}
pub fn deposit_all_token_types_invoke_with_program_id(
    program_id: Pubkey,
    accounts: DepositAllTokenTypesAccounts<'_, '_>,
    args: DepositAllTokenTypesIxArgs,
) -> ProgramResult {
    let keys: DepositAllTokenTypesKeys = accounts.into();
    let ix = deposit_all_token_types_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn deposit_all_token_types_invoke(
    accounts: DepositAllTokenTypesAccounts<'_, '_>,
    args: DepositAllTokenTypesIxArgs,
) -> ProgramResult {
    deposit_all_token_types_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn deposit_all_token_types_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: DepositAllTokenTypesAccounts<'_, '_>,
    args: DepositAllTokenTypesIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: DepositAllTokenTypesKeys = accounts.into();
    let ix = deposit_all_token_types_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn deposit_all_token_types_invoke_signed(
    accounts: DepositAllTokenTypesAccounts<'_, '_>,
    args: DepositAllTokenTypesIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    deposit_all_token_types_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn deposit_all_token_types_verify_account_keys(
    accounts: DepositAllTokenTypesAccounts<'_, '_>,
    keys: DepositAllTokenTypesKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.amm.key, keys.amm),
        (*accounts.authority.key, keys.authority),
        (
            *accounts.user_transfer_authority_info.key,
            keys.user_transfer_authority_info,
        ),
        (*accounts.source_a_info.key, keys.source_a_info),
        (*accounts.source_b_info.key, keys.source_b_info),
        (*accounts.token_a.key, keys.token_a),
        (*accounts.token_b.key, keys.token_b),
        (*accounts.pool_mint.key, keys.pool_mint),
        (*accounts.destination.key, keys.destination),
        (*accounts.token_program.key, keys.token_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl DepositAllTokenTypesIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<DepositAllTokenTypesIxArgs> for LifinityProgramIx {
    fn from(args: DepositAllTokenTypesIxArgs) -> Self {
        Self::DepositAllTokenTypes(args)
    }
}
