//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use solana_program::program_error::ProgramError;
use thiserror::Error;
///Custom errors for the whirlpool program
#[derive(Clone, Copy, Debug, Eq, Error, num_derive::FromPrimitive, PartialEq)]
pub enum WhirlpoolError {
    ///6000 - Enum value could not be converted
    #[error("Enum value could not be converted")]
    InvalidEnum = 6000,
    ///6001 - Invalid start tick index provided.
    #[error("Invalid start tick index provided.")]
    InvalidStartTick = 6001,
    ///6002 - Tick-array already exists in this whirlpool
    #[error("Tick-array already exists in this whirlpool")]
    TickArrayExistInPool = 6002,
    ///6003 - Attempt to search for a tick-array failed
    #[error("Attempt to search for a tick-array failed")]
    TickArrayIndexOutofBounds = 6003,
    ///6004 - Tick-spacing is not supported
    #[error("Tick-spacing is not supported")]
    InvalidTickSpacing = 6004,
    ///6005 - Position is not empty It cannot be closed
    #[error("Position is not empty It cannot be closed")]
    ClosePositionNotEmpty = 6005,
    ///6006 - Unable to divide by zero
    #[error("Unable to divide by zero")]
    DivideByZero = 6006,
    ///6007 - Unable to cast number into BigInt
    #[error("Unable to cast number into BigInt")]
    NumberCastError = 6007,
    ///6008 - Unable to down cast number
    #[error("Unable to down cast number")]
    NumberDownCastError = 6008,
    ///6009 - Tick not found within tick array
    #[error("Tick not found within tick array")]
    TickNotFound = 6009,
    ///6010 - Provided tick index is either out of bounds or uninitializable
    #[error("Provided tick index is either out of bounds or uninitializable")]
    InvalidTickIndex = 6010,
    ///6011 - Provided sqrt price out of bounds
    #[error("Provided sqrt price out of bounds")]
    SqrtPriceOutOfBounds = 6011,
    ///6012 - Liquidity amount must be greater than zero
    #[error("Liquidity amount must be greater than zero")]
    LiquidityZero = 6012,
    ///6013 - Liquidity amount must be less than i64::MAX
    #[error("Liquidity amount must be less than i64::MAX")]
    LiquidityTooHigh = 6013,
    ///6014 - Liquidity overflow
    #[error("Liquidity overflow")]
    LiquidityOverflow = 6014,
    ///6015 - Liquidity underflow
    #[error("Liquidity underflow")]
    LiquidityUnderflow = 6015,
    ///6016 - Tick liquidity net underflowed or overflowed
    #[error("Tick liquidity net underflowed or overflowed")]
    LiquidityNetError = 6016,
    ///6017 - Exceeded token max
    #[error("Exceeded token max")]
    TokenMaxExceeded = 6017,
    ///6018 - Did not meet token min
    #[error("Did not meet token min")]
    TokenMinSubceeded = 6018,
    ///6019 - Position token account has a missing or invalid delegate
    #[error("Position token account has a missing or invalid delegate")]
    MissingOrInvalidDelegate = 6019,
    ///6020 - Position token amount must be 1
    #[error("Position token amount must be 1")]
    InvalidPositionTokenAmount = 6020,
    ///6021 - Timestamp should be convertible from i64 to u64
    #[error("Timestamp should be convertible from i64 to u64")]
    InvalidTimestampConversion = 6021,
    ///6022 - Timestamp should be greater than the last updated timestamp
    #[error("Timestamp should be greater than the last updated timestamp")]
    InvalidTimestamp = 6022,
    ///6023 - Invalid tick array sequence provided for instruction.
    #[error("Invalid tick array sequence provided for instruction.")]
    InvalidTickArraySequence = 6023,
    ///6024 - Token Mint in wrong order
    #[error("Token Mint in wrong order")]
    InvalidTokenMintOrder = 6024,
    ///6025 - Reward not initialized
    #[error("Reward not initialized")]
    RewardNotInitialized = 6025,
    ///6026 - Invalid reward index
    #[error("Invalid reward index")]
    InvalidRewardIndex = 6026,
    ///6027 - Reward vault requires amount to support emissions for at least one day
    #[error("Reward vault requires amount to support emissions for at least one day")]
    RewardVaultAmountInsufficient = 6027,
    ///6028 - Exceeded max fee rate
    #[error("Exceeded max fee rate")]
    FeeRateMaxExceeded = 6028,
    ///6029 - Exceeded max protocol fee rate
    #[error("Exceeded max protocol fee rate")]
    ProtocolFeeRateMaxExceeded = 6029,
    ///6030 - Multiplication with shift right overflow
    #[error("Multiplication with shift right overflow")]
    MultiplicationShiftRightOverflow = 6030,
    ///6031 - Muldiv overflow
    #[error("Muldiv overflow")]
    MulDivOverflow = 6031,
    ///6032 - Invalid div_u256 input
    #[error("Invalid div_u256 input")]
    MulDivInvalidInput = 6032,
    ///6033 - Multiplication overflow
    #[error("Multiplication overflow")]
    MultiplicationOverflow = 6033,
    ///6034 - Provided SqrtPriceLimit not in the same direction as the swap.
    #[error("Provided SqrtPriceLimit not in the same direction as the swap.")]
    InvalidSqrtPriceLimitDirection = 6034,
    ///6035 - There are no tradable amount to swap.
    #[error("There are no tradable amount to swap.")]
    ZeroTradableAmount = 6035,
    ///6036 - Amount out below minimum threshold
    #[error("Amount out below minimum threshold")]
    AmountOutBelowMinimum = 6036,
    ///6037 - Amount in above maximum threshold
    #[error("Amount in above maximum threshold")]
    AmountInAboveMaximum = 6037,
    ///6038 - Invalid index for tick array sequence
    #[error("Invalid index for tick array sequence")]
    TickArraySequenceInvalidIndex = 6038,
    ///6039 - Amount calculated overflows
    #[error("Amount calculated overflows")]
    AmountCalcOverflow = 6039,
    ///6040 - Amount remaining overflows
    #[error("Amount remaining overflows")]
    AmountRemainingOverflow = 6040,
    ///6041 - Invalid intermediary mint
    #[error("Invalid intermediary mint")]
    InvalidIntermediaryMint = 6041,
    ///6042 - Duplicate two hop pool
    #[error("Duplicate two hop pool")]
    DuplicateTwoHopPool = 6042,
    ///6043 - Bundle index is out of bounds
    #[error("Bundle index is out of bounds")]
    InvalidBundleIndex = 6043,
    ///6044 - Position has already been opened
    #[error("Position has already been opened")]
    BundledPositionAlreadyOpened = 6044,
    ///6045 - Position has already been closed
    #[error("Position has already been closed")]
    BundledPositionAlreadyClosed = 6045,
    ///6046 - Unable to delete PositionBundle with open positions
    #[error("Unable to delete PositionBundle with open positions")]
    PositionBundleNotDeletable = 6046,
    ///6047 - Token mint has unsupported attributes
    #[error("Token mint has unsupported attributes")]
    UnsupportedTokenMint = 6047,
    ///6048 - Invalid remaining accounts
    #[error("Invalid remaining accounts")]
    RemainingAccountsInvalidSlice = 6048,
    ///6049 - Insufficient remaining accounts
    #[error("Insufficient remaining accounts")]
    RemainingAccountsInsufficient = 6049,
    ///6050 - Unable to call transfer hook without extra accounts
    #[error("Unable to call transfer hook without extra accounts")]
    NoExtraAccountsForTransferHook = 6050,
    ///6051 - Output and input amount mismatch
    #[error("Output and input amount mismatch")]
    IntermediateTokenAmountMismatch = 6051,
    ///6052 - Transfer fee calculation failed
    #[error("Transfer fee calculation failed")]
    TransferFeeCalculationError = 6052,
    ///6053 - Same accounts type is provided more than once
    #[error("Same accounts type is provided more than once")]
    RemainingAccountsDuplicatedAccountsType = 6053,
    ///6054 - Too many supplemental tick arrays provided
    #[error("Too many supplemental tick arrays provided")]
    TooManySupplementalTickArrays = 6054,
    ///6055 - TickArray account for different whirlpool provided
    #[error("TickArray account for different whirlpool provided")]
    DifferentWhirlpoolTickArrayAccount = 6055,
}
impl From<WhirlpoolError> for ProgramError {
    fn from(e: WhirlpoolError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
