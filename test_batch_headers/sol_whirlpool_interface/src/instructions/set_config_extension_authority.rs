//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN: usize = 4;
///Accounts struct for the setConfigExtensionAuthority instruction
#[derive(Copy, Clone, Debug)]
pub struct SetConfigExtensionAuthorityAccounts<'me, 'info> {
    pub whirlpools_config: &'me AccountInfo<'info>,
    pub whirlpools_config_extension: &'me AccountInfo<'info>,
    pub config_extension_authority: &'me AccountInfo<'info>,
    pub new_config_extension_authority: &'me AccountInfo<'info>,
}
///Public keys struct for the setConfigExtensionAuthority instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct SetConfigExtensionAuthorityKeys {
    pub whirlpools_config: Pubkey,
    pub whirlpools_config_extension: Pubkey,
    pub config_extension_authority: Pubkey,
    pub new_config_extension_authority: Pubkey,
}
impl From<SetConfigExtensionAuthorityAccounts<'_, '_>> for SetConfigExtensionAuthorityKeys {
    fn from(accounts: SetConfigExtensionAuthorityAccounts) -> Self {
        Self {
            whirlpools_config: *accounts.whirlpools_config.key,
            whirlpools_config_extension: *accounts.whirlpools_config_extension.key,
            config_extension_authority: *accounts.config_extension_authority.key,
            new_config_extension_authority: *accounts.new_config_extension_authority.key,
        }
    }
}
impl From<SetConfigExtensionAuthorityKeys>
    for [AccountMeta; SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN]
{
    fn from(keys: SetConfigExtensionAuthorityKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.whirlpools_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.whirlpools_config_extension,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config_extension_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.new_config_extension_authority,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN]>
    for SetConfigExtensionAuthorityKeys
{
    fn from(pubkeys: [Pubkey; SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            whirlpools_config: pubkeys[0],
            whirlpools_config_extension: pubkeys[1],
            config_extension_authority: pubkeys[2],
            new_config_extension_authority: pubkeys[3],
        }
    }
}
impl From<&[String]> for SetConfigExtensionAuthorityKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            whirlpools_config: pubkeys[0].parse().unwrap(),
            whirlpools_config_extension: pubkeys[1].parse().unwrap(),
            config_extension_authority: pubkeys[2].parse().unwrap(),
            new_config_extension_authority: pubkeys[3].parse().unwrap(),
        }
    }
}
impl<'info> From<SetConfigExtensionAuthorityAccounts<'_, 'info>>
    for [AccountInfo<'info>; SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN]
{
    fn from(accounts: SetConfigExtensionAuthorityAccounts<'_, 'info>) -> Self {
        [
            accounts.whirlpools_config.clone(),
            accounts.whirlpools_config_extension.clone(),
            accounts.config_extension_authority.clone(),
            accounts.new_config_extension_authority.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN]>
    for SetConfigExtensionAuthorityAccounts<'me, 'info>
{
    fn from(
        arr: &'me [AccountInfo<'info>; SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN],
    ) -> Self {
        Self {
            whirlpools_config: &arr[0],
            whirlpools_config_extension: &arr[1],
            config_extension_authority: &arr[2],
            new_config_extension_authority: &arr[3],
        }
    }
}
pub const SET_CONFIG_EXTENSION_AUTHORITY_IX_DISCM: u8 = 42u8;
#[derive(Clone, Debug, PartialEq)]
pub struct SetConfigExtensionAuthorityIxData;
impl SetConfigExtensionAuthorityIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != SET_CONFIG_EXTENSION_AUTHORITY_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    SET_CONFIG_EXTENSION_AUTHORITY_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[SET_CONFIG_EXTENSION_AUTHORITY_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn set_config_extension_authority_ix_with_program_id(
    program_id: Pubkey,
    keys: SetConfigExtensionAuthorityKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; SET_CONFIG_EXTENSION_AUTHORITY_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: SetConfigExtensionAuthorityIxData.try_to_vec()?,
    })
}
pub fn set_config_extension_authority_ix(
    keys: SetConfigExtensionAuthorityKeys,
) -> std::io::Result<Instruction> {
    set_config_extension_authority_ix_with_program_id(crate::ID, keys)
}
pub fn set_config_extension_authority_invoke_with_program_id(
    program_id: Pubkey,
    accounts: SetConfigExtensionAuthorityAccounts<'_, '_>,
) -> ProgramResult {
    let keys: SetConfigExtensionAuthorityKeys = accounts.into();
    let ix = set_config_extension_authority_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn set_config_extension_authority_invoke(
    accounts: SetConfigExtensionAuthorityAccounts<'_, '_>,
) -> ProgramResult {
    set_config_extension_authority_invoke_with_program_id(crate::ID, accounts)
}
pub fn set_config_extension_authority_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: SetConfigExtensionAuthorityAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: SetConfigExtensionAuthorityKeys = accounts.into();
    let ix = set_config_extension_authority_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn set_config_extension_authority_invoke_signed(
    accounts: SetConfigExtensionAuthorityAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    set_config_extension_authority_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn set_config_extension_authority_verify_account_keys(
    accounts: SetConfigExtensionAuthorityAccounts<'_, '_>,
    keys: SetConfigExtensionAuthorityKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.whirlpools_config.key, keys.whirlpools_config),
        (
            *accounts.whirlpools_config_extension.key,
            keys.whirlpools_config_extension,
        ),
        (
            *accounts.config_extension_authority.key,
            keys.config_extension_authority,
        ),
        (
            *accounts.new_config_extension_authority.key,
            keys.new_config_extension_authority,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
