//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN: usize = 9;
///Accounts struct for the initializeRewardV2 instruction
#[derive(Copy, Clone, Debug)]
pub struct InitializeRewardV2Accounts<'me, 'info> {
    pub reward_authority: &'me AccountInfo<'info>,
    pub funder: &'me AccountInfo<'info>,
    pub whirlpool: &'me AccountInfo<'info>,
    pub reward_mint: &'me AccountInfo<'info>,
    pub reward_token_badge: &'me AccountInfo<'info>,
    pub reward_vault: &'me AccountInfo<'info>,
    pub reward_token_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub rent: &'me AccountInfo<'info>,
}
///Public keys struct for the initializeRewardV2 instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitializeRewardV2Keys {
    pub reward_authority: Pubkey,
    pub funder: Pubkey,
    pub whirlpool: Pubkey,
    pub reward_mint: Pubkey,
    pub reward_token_badge: Pubkey,
    pub reward_vault: Pubkey,
    pub reward_token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
}
impl From<InitializeRewardV2Accounts<'_, '_>> for InitializeRewardV2Keys {
    fn from(accounts: InitializeRewardV2Accounts) -> Self {
        Self {
            reward_authority: *accounts.reward_authority.key,
            funder: *accounts.funder.key,
            whirlpool: *accounts.whirlpool.key,
            reward_mint: *accounts.reward_mint.key,
            reward_token_badge: *accounts.reward_token_badge.key,
            reward_vault: *accounts.reward_vault.key,
            reward_token_program: *accounts.reward_token_program.key,
            system_program: *accounts.system_program.key,
            rent: *accounts.rent.key,
        }
    }
}
impl From<InitializeRewardV2Keys> for [AccountMeta; INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN] {
    fn from(keys: InitializeRewardV2Keys) -> Self {
        [
            AccountMeta {
                pubkey: keys.reward_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.funder,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.whirlpool,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.reward_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.reward_token_badge,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.reward_vault,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.reward_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN]> for InitializeRewardV2Keys {
    fn from(pubkeys: [Pubkey; INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            reward_authority: pubkeys[0],
            funder: pubkeys[1],
            whirlpool: pubkeys[2],
            reward_mint: pubkeys[3],
            reward_token_badge: pubkeys[4],
            reward_vault: pubkeys[5],
            reward_token_program: pubkeys[6],
            system_program: pubkeys[7],
            rent: pubkeys[8],
        }
    }
}
impl From<&[String]> for InitializeRewardV2Keys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            reward_authority: pubkeys[0].parse().unwrap(),
            funder: pubkeys[1].parse().unwrap(),
            whirlpool: pubkeys[2].parse().unwrap(),
            reward_mint: pubkeys[3].parse().unwrap(),
            reward_token_badge: pubkeys[4].parse().unwrap(),
            reward_vault: pubkeys[5].parse().unwrap(),
            reward_token_program: pubkeys[6].parse().unwrap(),
            system_program: pubkeys[7].parse().unwrap(),
            rent: pubkeys[8].parse().unwrap(),
        }
    }
}
impl<'info> From<InitializeRewardV2Accounts<'_, 'info>>
    for [AccountInfo<'info>; INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN]
{
    fn from(accounts: InitializeRewardV2Accounts<'_, 'info>) -> Self {
        [
            accounts.reward_authority.clone(),
            accounts.funder.clone(),
            accounts.whirlpool.clone(),
            accounts.reward_mint.clone(),
            accounts.reward_token_badge.clone(),
            accounts.reward_vault.clone(),
            accounts.reward_token_program.clone(),
            accounts.system_program.clone(),
            accounts.rent.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN]>
    for InitializeRewardV2Accounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            reward_authority: &arr[0],
            funder: &arr[1],
            whirlpool: &arr[2],
            reward_mint: &arr[3],
            reward_token_badge: &arr[4],
            reward_vault: &arr[5],
            reward_token_program: &arr[6],
            system_program: &arr[7],
            rent: &arr[8],
        }
    }
}
pub const INITIALIZE_REWARD_V2_IX_DISCM: u8 = 37u8;
///Arguments for the initializeRewardV2 instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeRewardV2IxArgs {
    pub discriminator: u8,
    pub reward_index: u8,
}
impl Default for InitializeRewardV2IxArgs {
    fn default() -> Self {
        Self {
            discriminator: 37u8,
            reward_index: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct InitializeRewardV2IxData(pub InitializeRewardV2IxArgs);
impl From<InitializeRewardV2IxArgs> for InitializeRewardV2IxData {
    fn from(args: InitializeRewardV2IxArgs) -> Self {
        Self(args)
    }
}
impl InitializeRewardV2IxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != INITIALIZE_REWARD_V2_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    INITIALIZE_REWARD_V2_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(InitializeRewardV2IxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[INITIALIZE_REWARD_V2_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initialize_reward_v2_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializeRewardV2Keys,
    args: InitializeRewardV2IxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIALIZE_REWARD_V2_IX_ACCOUNTS_LEN] = keys.into();
    let data: InitializeRewardV2IxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn initialize_reward_v2_ix(
    keys: InitializeRewardV2Keys,
    args: InitializeRewardV2IxArgs,
) -> std::io::Result<Instruction> {
    initialize_reward_v2_ix_with_program_id(crate::ID, keys, args)
}
pub fn initialize_reward_v2_invoke_with_program_id(
    program_id: Pubkey,
    accounts: InitializeRewardV2Accounts<'_, '_>,
    args: InitializeRewardV2IxArgs,
) -> ProgramResult {
    let keys: InitializeRewardV2Keys = accounts.into();
    let ix = initialize_reward_v2_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn initialize_reward_v2_invoke(
    accounts: InitializeRewardV2Accounts<'_, '_>,
    args: InitializeRewardV2IxArgs,
) -> ProgramResult {
    initialize_reward_v2_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn initialize_reward_v2_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: InitializeRewardV2Accounts<'_, '_>,
    args: InitializeRewardV2IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: InitializeRewardV2Keys = accounts.into();
    let ix = initialize_reward_v2_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initialize_reward_v2_invoke_signed(
    accounts: InitializeRewardV2Accounts<'_, '_>,
    args: InitializeRewardV2IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initialize_reward_v2_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn initialize_reward_v2_verify_account_keys(
    accounts: InitializeRewardV2Accounts<'_, '_>,
    keys: InitializeRewardV2Keys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.reward_authority.key, keys.reward_authority),
        (*accounts.funder.key, keys.funder),
        (*accounts.whirlpool.key, keys.whirlpool),
        (*accounts.reward_mint.key, keys.reward_mint),
        (*accounts.reward_token_badge.key, keys.reward_token_badge),
        (*accounts.reward_vault.key, keys.reward_vault),
        (
            *accounts.reward_token_program.key,
            keys.reward_token_program,
        ),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent.key, keys.rent),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl InitializeRewardV2IxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<InitializeRewardV2IxArgs> for WhirlpoolProgramIx {
    fn from(args: InitializeRewardV2IxArgs) -> Self {
        Self::InitializeRewardV2(args)
    }
}
