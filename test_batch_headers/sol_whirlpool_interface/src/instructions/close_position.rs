//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CLOSE_POSITION_IX_ACCOUNTS_LEN: usize = 6;
///Accounts struct for the closePosition instruction
#[derive(Copy, Clone, Debug)]
pub struct ClosePositionAccounts<'me, 'info> {
    pub position_authority: &'me AccountInfo<'info>,
    pub receiver: &'me AccountInfo<'info>,
    pub position: &'me AccountInfo<'info>,
    pub position_mint: &'me AccountInfo<'info>,
    pub position_token_account: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the closePosition instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct ClosePositionKeys {
    pub position_authority: Pubkey,
    pub receiver: Pubkey,
    pub position: Pubkey,
    pub position_mint: Pubkey,
    pub position_token_account: Pubkey,
    pub token_program: Pubkey,
}
impl From<ClosePositionAccounts<'_, '_>> for ClosePositionKeys {
    fn from(accounts: ClosePositionAccounts) -> Self {
        Self {
            position_authority: *accounts.position_authority.key,
            receiver: *accounts.receiver.key,
            position: *accounts.position.key,
            position_mint: *accounts.position_mint.key,
            position_token_account: *accounts.position_token_account.key,
            token_program: *accounts.token_program.key,
        }
    }
}
impl From<ClosePositionKeys> for [AccountMeta; CLOSE_POSITION_IX_ACCOUNTS_LEN] {
    fn from(keys: ClosePositionKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.position_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.receiver,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; CLOSE_POSITION_IX_ACCOUNTS_LEN]> for ClosePositionKeys {
    fn from(pubkeys: [Pubkey; CLOSE_POSITION_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            position_authority: pubkeys[0],
            receiver: pubkeys[1],
            position: pubkeys[2],
            position_mint: pubkeys[3],
            position_token_account: pubkeys[4],
            token_program: pubkeys[5],
        }
    }
}
impl From<&[String]> for ClosePositionKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            position_authority: pubkeys[0].parse().unwrap(),
            receiver: pubkeys[1].parse().unwrap(),
            position: pubkeys[2].parse().unwrap(),
            position_mint: pubkeys[3].parse().unwrap(),
            position_token_account: pubkeys[4].parse().unwrap(),
            token_program: pubkeys[5].parse().unwrap(),
        }
    }
}
impl<'info> From<ClosePositionAccounts<'_, 'info>>
    for [AccountInfo<'info>; CLOSE_POSITION_IX_ACCOUNTS_LEN]
{
    fn from(accounts: ClosePositionAccounts<'_, 'info>) -> Self {
        [
            accounts.position_authority.clone(),
            accounts.receiver.clone(),
            accounts.position.clone(),
            accounts.position_mint.clone(),
            accounts.position_token_account.clone(),
            accounts.token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CLOSE_POSITION_IX_ACCOUNTS_LEN]>
    for ClosePositionAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CLOSE_POSITION_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            position_authority: &arr[0],
            receiver: &arr[1],
            position: &arr[2],
            position_mint: &arr[3],
            position_token_account: &arr[4],
            token_program: &arr[5],
        }
    }
}
pub const CLOSE_POSITION_IX_DISCM: u8 = 15u8;
#[derive(Clone, Debug, PartialEq)]
pub struct ClosePositionIxData;
impl ClosePositionIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != CLOSE_POSITION_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    CLOSE_POSITION_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[CLOSE_POSITION_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn close_position_ix_with_program_id(
    program_id: Pubkey,
    keys: ClosePositionKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CLOSE_POSITION_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: ClosePositionIxData.try_to_vec()?,
    })
}
pub fn close_position_ix(keys: ClosePositionKeys) -> std::io::Result<Instruction> {
    close_position_ix_with_program_id(crate::ID, keys)
}
pub fn close_position_invoke_with_program_id(
    program_id: Pubkey,
    accounts: ClosePositionAccounts<'_, '_>,
) -> ProgramResult {
    let keys: ClosePositionKeys = accounts.into();
    let ix = close_position_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn close_position_invoke(accounts: ClosePositionAccounts<'_, '_>) -> ProgramResult {
    close_position_invoke_with_program_id(crate::ID, accounts)
}
pub fn close_position_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: ClosePositionAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: ClosePositionKeys = accounts.into();
    let ix = close_position_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn close_position_invoke_signed(
    accounts: ClosePositionAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    close_position_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn close_position_verify_account_keys(
    accounts: ClosePositionAccounts<'_, '_>,
    keys: ClosePositionKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.position_authority.key, keys.position_authority),
        (*accounts.receiver.key, keys.receiver),
        (*accounts.position.key, keys.position),
        (*accounts.position_mint.key, keys.position_mint),
        (
            *accounts.position_token_account.key,
            keys.position_token_account,
        ),
        (*accounts.token_program.key, keys.token_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
