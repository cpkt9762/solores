//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN: usize = 6;
///Accounts struct for the deleteTokenBadge instruction
#[derive(Copy, Clone, Debug)]
pub struct DeleteTokenBadgeAccounts<'me, 'info> {
    pub whirlpools_config: &'me AccountInfo<'info>,
    pub whirlpools_config_extension: &'me AccountInfo<'info>,
    pub token_badge_authority: &'me AccountInfo<'info>,
    pub token_mint: &'me AccountInfo<'info>,
    pub token_badge: &'me AccountInfo<'info>,
    pub receiver: &'me AccountInfo<'info>,
}
///Public keys struct for the deleteTokenBadge instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct DeleteTokenBadgeKeys {
    pub whirlpools_config: Pubkey,
    pub whirlpools_config_extension: Pubkey,
    pub token_badge_authority: Pubkey,
    pub token_mint: Pubkey,
    pub token_badge: Pubkey,
    pub receiver: Pubkey,
}
impl From<DeleteTokenBadgeAccounts<'_, '_>> for DeleteTokenBadgeKeys {
    fn from(accounts: DeleteTokenBadgeAccounts) -> Self {
        Self {
            whirlpools_config: *accounts.whirlpools_config.key,
            whirlpools_config_extension: *accounts.whirlpools_config_extension.key,
            token_badge_authority: *accounts.token_badge_authority.key,
            token_mint: *accounts.token_mint.key,
            token_badge: *accounts.token_badge.key,
            receiver: *accounts.receiver.key,
        }
    }
}
impl From<DeleteTokenBadgeKeys> for [AccountMeta; DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN] {
    fn from(keys: DeleteTokenBadgeKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.whirlpools_config,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.whirlpools_config_extension,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_badge_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_badge,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.receiver,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN]> for DeleteTokenBadgeKeys {
    fn from(pubkeys: [Pubkey; DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            whirlpools_config: pubkeys[0],
            whirlpools_config_extension: pubkeys[1],
            token_badge_authority: pubkeys[2],
            token_mint: pubkeys[3],
            token_badge: pubkeys[4],
            receiver: pubkeys[5],
        }
    }
}
impl From<&[String]> for DeleteTokenBadgeKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            whirlpools_config: pubkeys[0].parse().unwrap(),
            whirlpools_config_extension: pubkeys[1].parse().unwrap(),
            token_badge_authority: pubkeys[2].parse().unwrap(),
            token_mint: pubkeys[3].parse().unwrap(),
            token_badge: pubkeys[4].parse().unwrap(),
            receiver: pubkeys[5].parse().unwrap(),
        }
    }
}
impl<'info> From<DeleteTokenBadgeAccounts<'_, 'info>>
    for [AccountInfo<'info>; DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: DeleteTokenBadgeAccounts<'_, 'info>) -> Self {
        [
            accounts.whirlpools_config.clone(),
            accounts.whirlpools_config_extension.clone(),
            accounts.token_badge_authority.clone(),
            accounts.token_mint.clone(),
            accounts.token_badge.clone(),
            accounts.receiver.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN]>
    for DeleteTokenBadgeAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            whirlpools_config: &arr[0],
            whirlpools_config_extension: &arr[1],
            token_badge_authority: &arr[2],
            token_mint: &arr[3],
            token_badge: &arr[4],
            receiver: &arr[5],
        }
    }
}
pub const DELETE_TOKEN_BADGE_IX_DISCM: u8 = 45u8;
#[derive(Clone, Debug, PartialEq)]
pub struct DeleteTokenBadgeIxData;
impl DeleteTokenBadgeIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != DELETE_TOKEN_BADGE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    DELETE_TOKEN_BADGE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[DELETE_TOKEN_BADGE_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn delete_token_badge_ix_with_program_id(
    program_id: Pubkey,
    keys: DeleteTokenBadgeKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; DELETE_TOKEN_BADGE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: DeleteTokenBadgeIxData.try_to_vec()?,
    })
}
pub fn delete_token_badge_ix(keys: DeleteTokenBadgeKeys) -> std::io::Result<Instruction> {
    delete_token_badge_ix_with_program_id(crate::ID, keys)
}
pub fn delete_token_badge_invoke_with_program_id(
    program_id: Pubkey,
    accounts: DeleteTokenBadgeAccounts<'_, '_>,
) -> ProgramResult {
    let keys: DeleteTokenBadgeKeys = accounts.into();
    let ix = delete_token_badge_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn delete_token_badge_invoke(accounts: DeleteTokenBadgeAccounts<'_, '_>) -> ProgramResult {
    delete_token_badge_invoke_with_program_id(crate::ID, accounts)
}
pub fn delete_token_badge_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: DeleteTokenBadgeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: DeleteTokenBadgeKeys = accounts.into();
    let ix = delete_token_badge_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn delete_token_badge_invoke_signed(
    accounts: DeleteTokenBadgeAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    delete_token_badge_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn delete_token_badge_verify_account_keys(
    accounts: DeleteTokenBadgeAccounts<'_, '_>,
    keys: DeleteTokenBadgeKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.whirlpools_config.key, keys.whirlpools_config),
        (
            *accounts.whirlpools_config_extension.key,
            keys.whirlpools_config_extension,
        ),
        (
            *accounts.token_badge_authority.key,
            keys.token_badge_authority,
        ),
        (*accounts.token_mint.key, keys.token_mint),
        (*accounts.token_badge.key, keys.token_badge),
        (*accounts.receiver.key, keys.receiver),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
