//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod initialize_config;
pub use initialize_config::*;
pub mod initialize_pool;
pub use initialize_pool::*;
pub mod initialize_tick_array;
pub use initialize_tick_array::*;
pub mod initialize_fee_tier;
pub use initialize_fee_tier::*;
pub mod initialize_reward;
pub use initialize_reward::*;
pub mod set_reward_emissions;
pub use set_reward_emissions::*;
pub mod open_position;
pub use open_position::*;
pub mod open_position_with_metadata;
pub use open_position_with_metadata::*;
pub mod increase_liquidity;
pub use increase_liquidity::*;
pub mod decrease_liquidity;
pub use decrease_liquidity::*;
pub mod update_fees_and_rewards;
pub use update_fees_and_rewards::*;
pub mod collect_fees;
pub use collect_fees::*;
pub mod collect_reward;
pub use collect_reward::*;
pub mod collect_protocol_fees;
pub use collect_protocol_fees::*;
pub mod swap;
pub use swap::*;
pub mod close_position;
pub use close_position::*;
pub mod set_default_fee_rate;
pub use set_default_fee_rate::*;
pub mod set_default_protocol_fee_rate;
pub use set_default_protocol_fee_rate::*;
pub mod set_fee_rate;
pub use set_fee_rate::*;
pub mod set_protocol_fee_rate;
pub use set_protocol_fee_rate::*;
pub mod set_fee_authority;
pub use set_fee_authority::*;
pub mod set_collect_protocol_fees_authority;
pub use set_collect_protocol_fees_authority::*;
pub mod set_reward_authority;
pub use set_reward_authority::*;
pub mod set_reward_authority_by_super_authority;
pub use set_reward_authority_by_super_authority::*;
pub mod set_reward_emissions_super_authority;
pub use set_reward_emissions_super_authority::*;
pub mod two_hop_swap;
pub use two_hop_swap::*;
pub mod initialize_position_bundle;
pub use initialize_position_bundle::*;
pub mod initialize_position_bundle_with_metadata;
pub use initialize_position_bundle_with_metadata::*;
pub mod delete_position_bundle;
pub use delete_position_bundle::*;
pub mod open_bundled_position;
pub use open_bundled_position::*;
pub mod close_bundled_position;
pub use close_bundled_position::*;
pub mod collect_fees_v2;
pub use collect_fees_v2::*;
pub mod collect_protocol_fees_v2;
pub use collect_protocol_fees_v2::*;
pub mod collect_reward_v2;
pub use collect_reward_v2::*;
pub mod decrease_liquidity_v2;
pub use decrease_liquidity_v2::*;
pub mod increase_liquidity_v2;
pub use increase_liquidity_v2::*;
pub mod initialize_pool_v2;
pub use initialize_pool_v2::*;
pub mod initialize_reward_v2;
pub use initialize_reward_v2::*;
pub mod set_reward_emissions_v2;
pub use set_reward_emissions_v2::*;
pub mod swap_v2;
pub use swap_v2::*;
pub mod two_hop_swap_v2;
pub use two_hop_swap_v2::*;
pub mod initialize_config_extension;
pub use initialize_config_extension::*;
pub mod set_config_extension_authority;
pub use set_config_extension_authority::*;
pub mod set_token_badge_authority;
pub use set_token_badge_authority::*;
pub mod initialize_token_badge;
pub use initialize_token_badge::*;
pub mod delete_token_badge;
pub use delete_token_badge::*;
#[derive(Clone, Debug, PartialEq)]
pub enum WhirlpoolProgramIx {
    InitializeConfig(InitializeConfigIxArgs),
    InitializePool(InitializePoolIxArgs),
    InitializeTickArray(InitializeTickArrayIxArgs),
    InitializeFeeTier(InitializeFeeTierIxArgs),
    InitializeReward(InitializeRewardIxArgs),
    SetRewardEmissions(SetRewardEmissionsIxArgs),
    OpenPosition(OpenPositionIxArgs),
    OpenPositionWithMetadata(OpenPositionWithMetadataIxArgs),
    IncreaseLiquidity(IncreaseLiquidityIxArgs),
    DecreaseLiquidity(DecreaseLiquidityIxArgs),
    UpdateFeesAndRewards,
    CollectFees,
    CollectReward(CollectRewardIxArgs),
    CollectProtocolFees,
    Swap(SwapIxArgs),
    ClosePosition,
    SetDefaultFeeRate(SetDefaultFeeRateIxArgs),
    SetDefaultProtocolFeeRate(SetDefaultProtocolFeeRateIxArgs),
    SetFeeRate(SetFeeRateIxArgs),
    SetProtocolFeeRate(SetProtocolFeeRateIxArgs),
    SetFeeAuthority,
    SetCollectProtocolFeesAuthority,
    SetRewardAuthority(SetRewardAuthorityIxArgs),
    SetRewardAuthorityBySuperAuthority(SetRewardAuthorityBySuperAuthorityIxArgs),
    SetRewardEmissionsSuperAuthority,
    TwoHopSwap(TwoHopSwapIxArgs),
    InitializePositionBundle,
    InitializePositionBundleWithMetadata,
    DeletePositionBundle,
    OpenBundledPosition(OpenBundledPositionIxArgs),
    CloseBundledPosition(CloseBundledPositionIxArgs),
    CollectFeesV2(CollectFeesV2IxArgs),
    CollectProtocolFeesV2(CollectProtocolFeesV2IxArgs),
    CollectRewardV2(CollectRewardV2IxArgs),
    DecreaseLiquidityV2(DecreaseLiquidityV2IxArgs),
    IncreaseLiquidityV2(IncreaseLiquidityV2IxArgs),
    InitializePoolV2(InitializePoolV2IxArgs),
    InitializeRewardV2(InitializeRewardV2IxArgs),
    SetRewardEmissionsV2(SetRewardEmissionsV2IxArgs),
    SwapV2(SwapV2IxArgs),
    TwoHopSwapV2(TwoHopSwapV2IxArgs),
    InitializeConfigExtension,
    SetConfigExtensionAuthority,
    SetTokenBadgeAuthority,
    InitializeTokenBadge,
    DeleteTokenBadge,
}
impl WhirlpoolProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        let mut reader = &buf[1..];
        match maybe_discm {
            INITIALIZE_CONFIG_IX_DISCM => Ok(Self::InitializeConfig(
                InitializeConfigIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_POOL_IX_DISCM => Ok(Self::InitializePool(
                InitializePoolIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_TICK_ARRAY_IX_DISCM => Ok(Self::InitializeTickArray(
                InitializeTickArrayIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_FEE_TIER_IX_DISCM => Ok(Self::InitializeFeeTier(
                InitializeFeeTierIxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_REWARD_IX_DISCM => Ok(Self::InitializeReward(
                InitializeRewardIxArgs::deserialize(&mut reader)?,
            )),
            SET_REWARD_EMISSIONS_IX_DISCM => Ok(Self::SetRewardEmissions(
                SetRewardEmissionsIxArgs::deserialize(&mut reader)?,
            )),
            OPEN_POSITION_IX_DISCM => Ok(Self::OpenPosition(OpenPositionIxArgs::deserialize(
                &mut reader,
            )?)),
            OPEN_POSITION_WITH_METADATA_IX_DISCM => Ok(Self::OpenPositionWithMetadata(
                OpenPositionWithMetadataIxArgs::deserialize(&mut reader)?,
            )),
            INCREASE_LIQUIDITY_IX_DISCM => Ok(Self::IncreaseLiquidity(
                IncreaseLiquidityIxArgs::deserialize(&mut reader)?,
            )),
            DECREASE_LIQUIDITY_IX_DISCM => Ok(Self::DecreaseLiquidity(
                DecreaseLiquidityIxArgs::deserialize(&mut reader)?,
            )),
            UPDATE_FEES_AND_REWARDS_IX_DISCM => Ok(Self::UpdateFeesAndRewards),
            COLLECT_FEES_IX_DISCM => Ok(Self::CollectFees),
            COLLECT_REWARD_IX_DISCM => Ok(Self::CollectReward(CollectRewardIxArgs::deserialize(
                &mut reader,
            )?)),
            COLLECT_PROTOCOL_FEES_IX_DISCM => Ok(Self::CollectProtocolFees),
            SWAP_IX_DISCM => Ok(Self::Swap(SwapIxArgs::deserialize(&mut reader)?)),
            CLOSE_POSITION_IX_DISCM => Ok(Self::ClosePosition),
            SET_DEFAULT_FEE_RATE_IX_DISCM => Ok(Self::SetDefaultFeeRate(
                SetDefaultFeeRateIxArgs::deserialize(&mut reader)?,
            )),
            SET_DEFAULT_PROTOCOL_FEE_RATE_IX_DISCM => Ok(Self::SetDefaultProtocolFeeRate(
                SetDefaultProtocolFeeRateIxArgs::deserialize(&mut reader)?,
            )),
            SET_FEE_RATE_IX_DISCM => Ok(Self::SetFeeRate(SetFeeRateIxArgs::deserialize(
                &mut reader,
            )?)),
            SET_PROTOCOL_FEE_RATE_IX_DISCM => Ok(Self::SetProtocolFeeRate(
                SetProtocolFeeRateIxArgs::deserialize(&mut reader)?,
            )),
            SET_FEE_AUTHORITY_IX_DISCM => Ok(Self::SetFeeAuthority),
            SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_DISCM => {
                Ok(Self::SetCollectProtocolFeesAuthority)
            }
            SET_REWARD_AUTHORITY_IX_DISCM => Ok(Self::SetRewardAuthority(
                SetRewardAuthorityIxArgs::deserialize(&mut reader)?,
            )),
            SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_DISCM => {
                Ok(Self::SetRewardAuthorityBySuperAuthority(
                    SetRewardAuthorityBySuperAuthorityIxArgs::deserialize(&mut reader)?,
                ))
            }
            SET_REWARD_EMISSIONS_SUPER_AUTHORITY_IX_DISCM => {
                Ok(Self::SetRewardEmissionsSuperAuthority)
            }
            TWO_HOP_SWAP_IX_DISCM => Ok(Self::TwoHopSwap(TwoHopSwapIxArgs::deserialize(
                &mut reader,
            )?)),
            INITIALIZE_POSITION_BUNDLE_IX_DISCM => Ok(Self::InitializePositionBundle),
            INITIALIZE_POSITION_BUNDLE_WITH_METADATA_IX_DISCM => {
                Ok(Self::InitializePositionBundleWithMetadata)
            }
            DELETE_POSITION_BUNDLE_IX_DISCM => Ok(Self::DeletePositionBundle),
            OPEN_BUNDLED_POSITION_IX_DISCM => Ok(Self::OpenBundledPosition(
                OpenBundledPositionIxArgs::deserialize(&mut reader)?,
            )),
            CLOSE_BUNDLED_POSITION_IX_DISCM => Ok(Self::CloseBundledPosition(
                CloseBundledPositionIxArgs::deserialize(&mut reader)?,
            )),
            COLLECT_FEES_V2_IX_DISCM => Ok(Self::CollectFeesV2(CollectFeesV2IxArgs::deserialize(
                &mut reader,
            )?)),
            COLLECT_PROTOCOL_FEES_V2_IX_DISCM => Ok(Self::CollectProtocolFeesV2(
                CollectProtocolFeesV2IxArgs::deserialize(&mut reader)?,
            )),
            COLLECT_REWARD_V2_IX_DISCM => Ok(Self::CollectRewardV2(
                CollectRewardV2IxArgs::deserialize(&mut reader)?,
            )),
            DECREASE_LIQUIDITY_V2_IX_DISCM => Ok(Self::DecreaseLiquidityV2(
                DecreaseLiquidityV2IxArgs::deserialize(&mut reader)?,
            )),
            INCREASE_LIQUIDITY_V2_IX_DISCM => Ok(Self::IncreaseLiquidityV2(
                IncreaseLiquidityV2IxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_POOL_V2_IX_DISCM => Ok(Self::InitializePoolV2(
                InitializePoolV2IxArgs::deserialize(&mut reader)?,
            )),
            INITIALIZE_REWARD_V2_IX_DISCM => Ok(Self::InitializeRewardV2(
                InitializeRewardV2IxArgs::deserialize(&mut reader)?,
            )),
            SET_REWARD_EMISSIONS_V2_IX_DISCM => Ok(Self::SetRewardEmissionsV2(
                SetRewardEmissionsV2IxArgs::deserialize(&mut reader)?,
            )),
            SWAP_V2_IX_DISCM => Ok(Self::SwapV2(SwapV2IxArgs::deserialize(&mut reader)?)),
            TWO_HOP_SWAP_V2_IX_DISCM => Ok(Self::TwoHopSwapV2(TwoHopSwapV2IxArgs::deserialize(
                &mut reader,
            )?)),
            INITIALIZE_CONFIG_EXTENSION_IX_DISCM => Ok(Self::InitializeConfigExtension),
            SET_CONFIG_EXTENSION_AUTHORITY_IX_DISCM => Ok(Self::SetConfigExtensionAuthority),
            SET_TOKEN_BADGE_AUTHORITY_IX_DISCM => Ok(Self::SetTokenBadgeAuthority),
            INITIALIZE_TOKEN_BADGE_IX_DISCM => Ok(Self::InitializeTokenBadge),
            DELETE_TOKEN_BADGE_IX_DISCM => Ok(Self::DeleteTokenBadge),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::InitializeConfig(args) => {
                writer.write_all(&[INITIALIZE_CONFIG_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePool(args) => {
                writer.write_all(&[INITIALIZE_POOL_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeTickArray(args) => {
                writer.write_all(&[INITIALIZE_TICK_ARRAY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeFeeTier(args) => {
                writer.write_all(&[INITIALIZE_FEE_TIER_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeReward(args) => {
                writer.write_all(&[INITIALIZE_REWARD_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetRewardEmissions(args) => {
                writer.write_all(&[SET_REWARD_EMISSIONS_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::OpenPosition(args) => {
                writer.write_all(&[OPEN_POSITION_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::OpenPositionWithMetadata(args) => {
                writer.write_all(&[OPEN_POSITION_WITH_METADATA_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::IncreaseLiquidity(args) => {
                writer.write_all(&[INCREASE_LIQUIDITY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::DecreaseLiquidity(args) => {
                writer.write_all(&[DECREASE_LIQUIDITY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::UpdateFeesAndRewards => writer.write_all(&[UPDATE_FEES_AND_REWARDS_IX_DISCM]),
            Self::CollectFees => writer.write_all(&[COLLECT_FEES_IX_DISCM]),
            Self::CollectReward(args) => {
                writer.write_all(&[COLLECT_REWARD_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CollectProtocolFees => writer.write_all(&[COLLECT_PROTOCOL_FEES_IX_DISCM]),
            Self::Swap(args) => {
                writer.write_all(&[SWAP_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::ClosePosition => writer.write_all(&[CLOSE_POSITION_IX_DISCM]),
            Self::SetDefaultFeeRate(args) => {
                writer.write_all(&[SET_DEFAULT_FEE_RATE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetDefaultProtocolFeeRate(args) => {
                writer.write_all(&[SET_DEFAULT_PROTOCOL_FEE_RATE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetFeeRate(args) => {
                writer.write_all(&[SET_FEE_RATE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetProtocolFeeRate(args) => {
                writer.write_all(&[SET_PROTOCOL_FEE_RATE_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetFeeAuthority => writer.write_all(&[SET_FEE_AUTHORITY_IX_DISCM]),
            Self::SetCollectProtocolFeesAuthority => {
                writer.write_all(&[SET_COLLECT_PROTOCOL_FEES_AUTHORITY_IX_DISCM])
            }
            Self::SetRewardAuthority(args) => {
                writer.write_all(&[SET_REWARD_AUTHORITY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetRewardAuthorityBySuperAuthority(args) => {
                writer.write_all(&[SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetRewardEmissionsSuperAuthority => {
                writer.write_all(&[SET_REWARD_EMISSIONS_SUPER_AUTHORITY_IX_DISCM])
            }
            Self::TwoHopSwap(args) => {
                writer.write_all(&[TWO_HOP_SWAP_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePositionBundle => {
                writer.write_all(&[INITIALIZE_POSITION_BUNDLE_IX_DISCM])
            }
            Self::InitializePositionBundleWithMetadata => {
                writer.write_all(&[INITIALIZE_POSITION_BUNDLE_WITH_METADATA_IX_DISCM])
            }
            Self::DeletePositionBundle => writer.write_all(&[DELETE_POSITION_BUNDLE_IX_DISCM]),
            Self::OpenBundledPosition(args) => {
                writer.write_all(&[OPEN_BUNDLED_POSITION_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CloseBundledPosition(args) => {
                writer.write_all(&[CLOSE_BUNDLED_POSITION_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CollectFeesV2(args) => {
                writer.write_all(&[COLLECT_FEES_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CollectProtocolFeesV2(args) => {
                writer.write_all(&[COLLECT_PROTOCOL_FEES_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::CollectRewardV2(args) => {
                writer.write_all(&[COLLECT_REWARD_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::DecreaseLiquidityV2(args) => {
                writer.write_all(&[DECREASE_LIQUIDITY_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::IncreaseLiquidityV2(args) => {
                writer.write_all(&[INCREASE_LIQUIDITY_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializePoolV2(args) => {
                writer.write_all(&[INITIALIZE_POOL_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeRewardV2(args) => {
                writer.write_all(&[INITIALIZE_REWARD_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SetRewardEmissionsV2(args) => {
                writer.write_all(&[SET_REWARD_EMISSIONS_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SwapV2(args) => {
                writer.write_all(&[SWAP_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::TwoHopSwapV2(args) => {
                writer.write_all(&[TWO_HOP_SWAP_V2_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::InitializeConfigExtension => {
                writer.write_all(&[INITIALIZE_CONFIG_EXTENSION_IX_DISCM])
            }
            Self::SetConfigExtensionAuthority => {
                writer.write_all(&[SET_CONFIG_EXTENSION_AUTHORITY_IX_DISCM])
            }
            Self::SetTokenBadgeAuthority => writer.write_all(&[SET_TOKEN_BADGE_AUTHORITY_IX_DISCM]),
            Self::InitializeTokenBadge => writer.write_all(&[INITIALIZE_TOKEN_BADGE_IX_DISCM]),
            Self::DeleteTokenBadge => writer.write_all(&[DELETE_TOKEN_BADGE_IX_DISCM]),
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
