//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN: usize = 9;
///Accounts struct for the initializePositionBundle instruction
#[derive(Copy, Clone, Debug)]
pub struct InitializePositionBundleAccounts<'me, 'info> {
    pub position_bundle: &'me AccountInfo<'info>,
    pub position_bundle_mint: &'me AccountInfo<'info>,
    pub position_bundle_token_account: &'me AccountInfo<'info>,
    pub position_bundle_owner: &'me AccountInfo<'info>,
    pub funder: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub rent: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the initializePositionBundle instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct InitializePositionBundleKeys {
    pub position_bundle: Pubkey,
    pub position_bundle_mint: Pubkey,
    pub position_bundle_token_account: Pubkey,
    pub position_bundle_owner: Pubkey,
    pub funder: Pubkey,
    pub token_program: Pubkey,
    pub system_program: Pubkey,
    pub rent: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<InitializePositionBundleAccounts<'_, '_>> for InitializePositionBundleKeys {
    fn from(accounts: InitializePositionBundleAccounts) -> Self {
        Self {
            position_bundle: *accounts.position_bundle.key,
            position_bundle_mint: *accounts.position_bundle_mint.key,
            position_bundle_token_account: *accounts.position_bundle_token_account.key,
            position_bundle_owner: *accounts.position_bundle_owner.key,
            funder: *accounts.funder.key,
            token_program: *accounts.token_program.key,
            system_program: *accounts.system_program.key,
            rent: *accounts.rent.key,
            associated_token_program: *accounts.associated_token_program.key,
        }
    }
}
impl From<InitializePositionBundleKeys>
    for [AccountMeta; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN]
{
    fn from(keys: InitializePositionBundleKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.position_bundle,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_bundle_mint,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_bundle_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_bundle_owner,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.funder,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.rent,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN]> for InitializePositionBundleKeys {
    fn from(pubkeys: [Pubkey; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            position_bundle: pubkeys[0],
            position_bundle_mint: pubkeys[1],
            position_bundle_token_account: pubkeys[2],
            position_bundle_owner: pubkeys[3],
            funder: pubkeys[4],
            token_program: pubkeys[5],
            system_program: pubkeys[6],
            rent: pubkeys[7],
            associated_token_program: pubkeys[8],
        }
    }
}
impl From<&[String]> for InitializePositionBundleKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            position_bundle: pubkeys[0].parse().unwrap(),
            position_bundle_mint: pubkeys[1].parse().unwrap(),
            position_bundle_token_account: pubkeys[2].parse().unwrap(),
            position_bundle_owner: pubkeys[3].parse().unwrap(),
            funder: pubkeys[4].parse().unwrap(),
            token_program: pubkeys[5].parse().unwrap(),
            system_program: pubkeys[6].parse().unwrap(),
            rent: pubkeys[7].parse().unwrap(),
            associated_token_program: pubkeys[8].parse().unwrap(),
        }
    }
}
impl<'info> From<InitializePositionBundleAccounts<'_, 'info>>
    for [AccountInfo<'info>; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN]
{
    fn from(accounts: InitializePositionBundleAccounts<'_, 'info>) -> Self {
        [
            accounts.position_bundle.clone(),
            accounts.position_bundle_mint.clone(),
            accounts.position_bundle_token_account.clone(),
            accounts.position_bundle_owner.clone(),
            accounts.funder.clone(),
            accounts.token_program.clone(),
            accounts.system_program.clone(),
            accounts.rent.clone(),
            accounts.associated_token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN]>
    for InitializePositionBundleAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            position_bundle: &arr[0],
            position_bundle_mint: &arr[1],
            position_bundle_token_account: &arr[2],
            position_bundle_owner: &arr[3],
            funder: &arr[4],
            token_program: &arr[5],
            system_program: &arr[6],
            rent: &arr[7],
            associated_token_program: &arr[8],
        }
    }
}
pub const INITIALIZE_POSITION_BUNDLE_IX_DISCM: u8 = 26u8;
#[derive(Clone, Debug, PartialEq)]
pub struct InitializePositionBundleIxData;
impl InitializePositionBundleIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != INITIALIZE_POSITION_BUNDLE_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    INITIALIZE_POSITION_BUNDLE_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[INITIALIZE_POSITION_BUNDLE_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn initialize_position_bundle_ix_with_program_id(
    program_id: Pubkey,
    keys: InitializePositionBundleKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; INITIALIZE_POSITION_BUNDLE_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: InitializePositionBundleIxData.try_to_vec()?,
    })
}
pub fn initialize_position_bundle_ix(
    keys: InitializePositionBundleKeys,
) -> std::io::Result<Instruction> {
    initialize_position_bundle_ix_with_program_id(crate::ID, keys)
}
pub fn initialize_position_bundle_invoke_with_program_id(
    program_id: Pubkey,
    accounts: InitializePositionBundleAccounts<'_, '_>,
) -> ProgramResult {
    let keys: InitializePositionBundleKeys = accounts.into();
    let ix = initialize_position_bundle_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn initialize_position_bundle_invoke(
    accounts: InitializePositionBundleAccounts<'_, '_>,
) -> ProgramResult {
    initialize_position_bundle_invoke_with_program_id(crate::ID, accounts)
}
pub fn initialize_position_bundle_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: InitializePositionBundleAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: InitializePositionBundleKeys = accounts.into();
    let ix = initialize_position_bundle_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn initialize_position_bundle_invoke_signed(
    accounts: InitializePositionBundleAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    initialize_position_bundle_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn initialize_position_bundle_verify_account_keys(
    accounts: InitializePositionBundleAccounts<'_, '_>,
    keys: InitializePositionBundleKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.position_bundle.key, keys.position_bundle),
        (
            *accounts.position_bundle_mint.key,
            keys.position_bundle_mint,
        ),
        (
            *accounts.position_bundle_token_account.key,
            keys.position_bundle_token_account,
        ),
        (
            *accounts.position_bundle_owner.key,
            keys.position_bundle_owner,
        ),
        (*accounts.funder.key, keys.funder),
        (*accounts.token_program.key, keys.token_program),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.rent.key, keys.rent),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
