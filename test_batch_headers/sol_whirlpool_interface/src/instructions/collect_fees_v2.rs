//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const COLLECT_FEES_V2_IX_ACCOUNTS_LEN: usize = 13;
///Accounts struct for the collectFeesV2 instruction
#[derive(Copy, Clone, Debug)]
pub struct CollectFeesV2Accounts<'me, 'info> {
    pub whirlpool: &'me AccountInfo<'info>,
    pub position_authority: &'me AccountInfo<'info>,
    pub position: &'me AccountInfo<'info>,
    pub position_token_account: &'me AccountInfo<'info>,
    pub token_mint_a: &'me AccountInfo<'info>,
    pub token_mint_b: &'me AccountInfo<'info>,
    pub token_owner_account_a: &'me AccountInfo<'info>,
    pub token_vault_a: &'me AccountInfo<'info>,
    pub token_owner_account_b: &'me AccountInfo<'info>,
    pub token_vault_b: &'me AccountInfo<'info>,
    pub token_program_a: &'me AccountInfo<'info>,
    pub token_program_b: &'me AccountInfo<'info>,
    pub memo_program: &'me AccountInfo<'info>,
}
///Public keys struct for the collectFeesV2 instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CollectFeesV2Keys {
    pub whirlpool: Pubkey,
    pub position_authority: Pubkey,
    pub position: Pubkey,
    pub position_token_account: Pubkey,
    pub token_mint_a: Pubkey,
    pub token_mint_b: Pubkey,
    pub token_owner_account_a: Pubkey,
    pub token_vault_a: Pubkey,
    pub token_owner_account_b: Pubkey,
    pub token_vault_b: Pubkey,
    pub token_program_a: Pubkey,
    pub token_program_b: Pubkey,
    pub memo_program: Pubkey,
}
impl From<CollectFeesV2Accounts<'_, '_>> for CollectFeesV2Keys {
    fn from(accounts: CollectFeesV2Accounts) -> Self {
        Self {
            whirlpool: *accounts.whirlpool.key,
            position_authority: *accounts.position_authority.key,
            position: *accounts.position.key,
            position_token_account: *accounts.position_token_account.key,
            token_mint_a: *accounts.token_mint_a.key,
            token_mint_b: *accounts.token_mint_b.key,
            token_owner_account_a: *accounts.token_owner_account_a.key,
            token_vault_a: *accounts.token_vault_a.key,
            token_owner_account_b: *accounts.token_owner_account_b.key,
            token_vault_b: *accounts.token_vault_b.key,
            token_program_a: *accounts.token_program_a.key,
            token_program_b: *accounts.token_program_b.key,
            memo_program: *accounts.memo_program.key,
        }
    }
}
impl From<CollectFeesV2Keys> for [AccountMeta; COLLECT_FEES_V2_IX_ACCOUNTS_LEN] {
    fn from(keys: CollectFeesV2Keys) -> Self {
        [
            AccountMeta {
                pubkey: keys.whirlpool,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.position_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_token_account,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_mint_a,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_mint_b,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_owner_account_a,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_vault_a,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_owner_account_b,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_vault_b,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_program_a,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program_b,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.memo_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; COLLECT_FEES_V2_IX_ACCOUNTS_LEN]> for CollectFeesV2Keys {
    fn from(pubkeys: [Pubkey; COLLECT_FEES_V2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            whirlpool: pubkeys[0],
            position_authority: pubkeys[1],
            position: pubkeys[2],
            position_token_account: pubkeys[3],
            token_mint_a: pubkeys[4],
            token_mint_b: pubkeys[5],
            token_owner_account_a: pubkeys[6],
            token_vault_a: pubkeys[7],
            token_owner_account_b: pubkeys[8],
            token_vault_b: pubkeys[9],
            token_program_a: pubkeys[10],
            token_program_b: pubkeys[11],
            memo_program: pubkeys[12],
        }
    }
}
impl From<&[String]> for CollectFeesV2Keys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            whirlpool: pubkeys[0].parse().unwrap(),
            position_authority: pubkeys[1].parse().unwrap(),
            position: pubkeys[2].parse().unwrap(),
            position_token_account: pubkeys[3].parse().unwrap(),
            token_mint_a: pubkeys[4].parse().unwrap(),
            token_mint_b: pubkeys[5].parse().unwrap(),
            token_owner_account_a: pubkeys[6].parse().unwrap(),
            token_vault_a: pubkeys[7].parse().unwrap(),
            token_owner_account_b: pubkeys[8].parse().unwrap(),
            token_vault_b: pubkeys[9].parse().unwrap(),
            token_program_a: pubkeys[10].parse().unwrap(),
            token_program_b: pubkeys[11].parse().unwrap(),
            memo_program: pubkeys[12].parse().unwrap(),
        }
    }
}
impl<'info> From<CollectFeesV2Accounts<'_, 'info>>
    for [AccountInfo<'info>; COLLECT_FEES_V2_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CollectFeesV2Accounts<'_, 'info>) -> Self {
        [
            accounts.whirlpool.clone(),
            accounts.position_authority.clone(),
            accounts.position.clone(),
            accounts.position_token_account.clone(),
            accounts.token_mint_a.clone(),
            accounts.token_mint_b.clone(),
            accounts.token_owner_account_a.clone(),
            accounts.token_vault_a.clone(),
            accounts.token_owner_account_b.clone(),
            accounts.token_vault_b.clone(),
            accounts.token_program_a.clone(),
            accounts.token_program_b.clone(),
            accounts.memo_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; COLLECT_FEES_V2_IX_ACCOUNTS_LEN]>
    for CollectFeesV2Accounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; COLLECT_FEES_V2_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            whirlpool: &arr[0],
            position_authority: &arr[1],
            position: &arr[2],
            position_token_account: &arr[3],
            token_mint_a: &arr[4],
            token_mint_b: &arr[5],
            token_owner_account_a: &arr[6],
            token_vault_a: &arr[7],
            token_owner_account_b: &arr[8],
            token_vault_b: &arr[9],
            token_program_a: &arr[10],
            token_program_b: &arr[11],
            memo_program: &arr[12],
        }
    }
}
pub const COLLECT_FEES_V2_IX_DISCM: u8 = 31u8;
///Arguments for the collectFeesV2 instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectFeesV2IxArgs {
    pub discriminator: u8,
    pub remaining_accounts_info: Option<RemainingAccountsInfo>,
}
impl Default for CollectFeesV2IxArgs {
    fn default() -> Self {
        Self {
            discriminator: 31u8,
            remaining_accounts_info: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CollectFeesV2IxData(pub CollectFeesV2IxArgs);
impl From<CollectFeesV2IxArgs> for CollectFeesV2IxData {
    fn from(args: CollectFeesV2IxArgs) -> Self {
        Self(args)
    }
}
impl CollectFeesV2IxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != COLLECT_FEES_V2_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    COLLECT_FEES_V2_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(CollectFeesV2IxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[COLLECT_FEES_V2_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn collect_fees_v2_ix_with_program_id(
    program_id: Pubkey,
    keys: CollectFeesV2Keys,
    args: CollectFeesV2IxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; COLLECT_FEES_V2_IX_ACCOUNTS_LEN] = keys.into();
    let data: CollectFeesV2IxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn collect_fees_v2_ix(
    keys: CollectFeesV2Keys,
    args: CollectFeesV2IxArgs,
) -> std::io::Result<Instruction> {
    collect_fees_v2_ix_with_program_id(crate::ID, keys, args)
}
pub fn collect_fees_v2_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CollectFeesV2Accounts<'_, '_>,
    args: CollectFeesV2IxArgs,
) -> ProgramResult {
    let keys: CollectFeesV2Keys = accounts.into();
    let ix = collect_fees_v2_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn collect_fees_v2_invoke(
    accounts: CollectFeesV2Accounts<'_, '_>,
    args: CollectFeesV2IxArgs,
) -> ProgramResult {
    collect_fees_v2_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn collect_fees_v2_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CollectFeesV2Accounts<'_, '_>,
    args: CollectFeesV2IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CollectFeesV2Keys = accounts.into();
    let ix = collect_fees_v2_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn collect_fees_v2_invoke_signed(
    accounts: CollectFeesV2Accounts<'_, '_>,
    args: CollectFeesV2IxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    collect_fees_v2_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn collect_fees_v2_verify_account_keys(
    accounts: CollectFeesV2Accounts<'_, '_>,
    keys: CollectFeesV2Keys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.whirlpool.key, keys.whirlpool),
        (*accounts.position_authority.key, keys.position_authority),
        (*accounts.position.key, keys.position),
        (
            *accounts.position_token_account.key,
            keys.position_token_account,
        ),
        (*accounts.token_mint_a.key, keys.token_mint_a),
        (*accounts.token_mint_b.key, keys.token_mint_b),
        (
            *accounts.token_owner_account_a.key,
            keys.token_owner_account_a,
        ),
        (*accounts.token_vault_a.key, keys.token_vault_a),
        (
            *accounts.token_owner_account_b.key,
            keys.token_owner_account_b,
        ),
        (*accounts.token_vault_b.key, keys.token_vault_b),
        (*accounts.token_program_a.key, keys.token_program_a),
        (*accounts.token_program_b.key, keys.token_program_b),
        (*accounts.memo_program.key, keys.memo_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl CollectFeesV2IxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CollectFeesV2IxArgs> for WhirlpoolProgramIx {
    fn from(args: CollectFeesV2IxArgs) -> Self {
        Self::CollectFeesV2(args)
    }
}
