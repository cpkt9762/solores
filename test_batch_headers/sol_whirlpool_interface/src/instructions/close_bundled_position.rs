//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN: usize = 5;
///Accounts struct for the closeBundledPosition instruction
#[derive(Copy, Clone, Debug)]
pub struct CloseBundledPositionAccounts<'me, 'info> {
    pub bundled_position: &'me AccountInfo<'info>,
    pub position_bundle: &'me AccountInfo<'info>,
    pub position_bundle_token_account: &'me AccountInfo<'info>,
    pub position_bundle_authority: &'me AccountInfo<'info>,
    pub receiver: &'me AccountInfo<'info>,
}
///Public keys struct for the closeBundledPosition instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct CloseBundledPositionKeys {
    pub bundled_position: Pubkey,
    pub position_bundle: Pubkey,
    pub position_bundle_token_account: Pubkey,
    pub position_bundle_authority: Pubkey,
    pub receiver: Pubkey,
}
impl From<CloseBundledPositionAccounts<'_, '_>> for CloseBundledPositionKeys {
    fn from(accounts: CloseBundledPositionAccounts) -> Self {
        Self {
            bundled_position: *accounts.bundled_position.key,
            position_bundle: *accounts.position_bundle.key,
            position_bundle_token_account: *accounts.position_bundle_token_account.key,
            position_bundle_authority: *accounts.position_bundle_authority.key,
            receiver: *accounts.receiver.key,
        }
    }
}
impl From<CloseBundledPositionKeys> for [AccountMeta; CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN] {
    fn from(keys: CloseBundledPositionKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.bundled_position,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_bundle,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.position_bundle_token_account,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.position_bundle_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.receiver,
                is_signer: false,
                is_writable: true,
            },
        ]
    }
}
impl From<[Pubkey; CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN]> for CloseBundledPositionKeys {
    fn from(pubkeys: [Pubkey; CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            bundled_position: pubkeys[0],
            position_bundle: pubkeys[1],
            position_bundle_token_account: pubkeys[2],
            position_bundle_authority: pubkeys[3],
            receiver: pubkeys[4],
        }
    }
}
impl From<&[String]> for CloseBundledPositionKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            bundled_position: pubkeys[0].parse().unwrap(),
            position_bundle: pubkeys[1].parse().unwrap(),
            position_bundle_token_account: pubkeys[2].parse().unwrap(),
            position_bundle_authority: pubkeys[3].parse().unwrap(),
            receiver: pubkeys[4].parse().unwrap(),
        }
    }
}
impl<'info> From<CloseBundledPositionAccounts<'_, 'info>>
    for [AccountInfo<'info>; CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN]
{
    fn from(accounts: CloseBundledPositionAccounts<'_, 'info>) -> Self {
        [
            accounts.bundled_position.clone(),
            accounts.position_bundle.clone(),
            accounts.position_bundle_token_account.clone(),
            accounts.position_bundle_authority.clone(),
            accounts.receiver.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN]>
    for CloseBundledPositionAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            bundled_position: &arr[0],
            position_bundle: &arr[1],
            position_bundle_token_account: &arr[2],
            position_bundle_authority: &arr[3],
            receiver: &arr[4],
        }
    }
}
pub const CLOSE_BUNDLED_POSITION_IX_DISCM: u8 = 30u8;
///Arguments for the closeBundledPosition instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseBundledPositionIxArgs {
    pub discriminator: u8,
    pub bundle_index: u16,
}
impl Default for CloseBundledPositionIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 30u8,
            bundle_index: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct CloseBundledPositionIxData(pub CloseBundledPositionIxArgs);
impl From<CloseBundledPositionIxArgs> for CloseBundledPositionIxData {
    fn from(args: CloseBundledPositionIxArgs) -> Self {
        Self(args)
    }
}
impl CloseBundledPositionIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != CLOSE_BUNDLED_POSITION_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    CLOSE_BUNDLED_POSITION_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(CloseBundledPositionIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[CLOSE_BUNDLED_POSITION_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn close_bundled_position_ix_with_program_id(
    program_id: Pubkey,
    keys: CloseBundledPositionKeys,
    args: CloseBundledPositionIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; CLOSE_BUNDLED_POSITION_IX_ACCOUNTS_LEN] = keys.into();
    let data: CloseBundledPositionIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn close_bundled_position_ix(
    keys: CloseBundledPositionKeys,
    args: CloseBundledPositionIxArgs,
) -> std::io::Result<Instruction> {
    close_bundled_position_ix_with_program_id(crate::ID, keys, args)
}
pub fn close_bundled_position_invoke_with_program_id(
    program_id: Pubkey,
    accounts: CloseBundledPositionAccounts<'_, '_>,
    args: CloseBundledPositionIxArgs,
) -> ProgramResult {
    let keys: CloseBundledPositionKeys = accounts.into();
    let ix = close_bundled_position_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn close_bundled_position_invoke(
    accounts: CloseBundledPositionAccounts<'_, '_>,
    args: CloseBundledPositionIxArgs,
) -> ProgramResult {
    close_bundled_position_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn close_bundled_position_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: CloseBundledPositionAccounts<'_, '_>,
    args: CloseBundledPositionIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: CloseBundledPositionKeys = accounts.into();
    let ix = close_bundled_position_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn close_bundled_position_invoke_signed(
    accounts: CloseBundledPositionAccounts<'_, '_>,
    args: CloseBundledPositionIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    close_bundled_position_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn close_bundled_position_verify_account_keys(
    accounts: CloseBundledPositionAccounts<'_, '_>,
    keys: CloseBundledPositionKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.bundled_position.key, keys.bundled_position),
        (*accounts.position_bundle.key, keys.position_bundle),
        (
            *accounts.position_bundle_token_account.key,
            keys.position_bundle_token_account,
        ),
        (
            *accounts.position_bundle_authority.key,
            keys.position_bundle_authority,
        ),
        (*accounts.receiver.key, keys.receiver),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl CloseBundledPositionIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<CloseBundledPositionIxArgs> for WhirlpoolProgramIx {
    fn from(args: CloseBundledPositionIxArgs) -> Self {
        Self::CloseBundledPosition(args)
    }
}
