//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const TWO_HOP_SWAP_IX_ACCOUNTS_LEN: usize = 20;
///Accounts struct for the twoHopSwap instruction
#[derive(Copy, Clone, Debug)]
pub struct TwoHopSwapAccounts<'me, 'info> {
    pub token_program: &'me AccountInfo<'info>,
    pub token_authority: &'me AccountInfo<'info>,
    pub whirlpool_one: &'me AccountInfo<'info>,
    pub whirlpool_two: &'me AccountInfo<'info>,
    pub token_owner_account_one_a: &'me AccountInfo<'info>,
    pub token_vault_one_a: &'me AccountInfo<'info>,
    pub token_owner_account_one_b: &'me AccountInfo<'info>,
    pub token_vault_one_b: &'me AccountInfo<'info>,
    pub token_owner_account_two_a: &'me AccountInfo<'info>,
    pub token_vault_two_a: &'me AccountInfo<'info>,
    pub token_owner_account_two_b: &'me AccountInfo<'info>,
    pub token_vault_two_b: &'me AccountInfo<'info>,
    pub tick_array_one0: &'me AccountInfo<'info>,
    pub tick_array_one1: &'me AccountInfo<'info>,
    pub tick_array_one2: &'me AccountInfo<'info>,
    pub tick_array_two0: &'me AccountInfo<'info>,
    pub tick_array_two1: &'me AccountInfo<'info>,
    pub tick_array_two2: &'me AccountInfo<'info>,
    pub oracle_one: &'me AccountInfo<'info>,
    pub oracle_two: &'me AccountInfo<'info>,
}
///Public keys struct for the twoHopSwap instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct TwoHopSwapKeys {
    pub token_program: Pubkey,
    pub token_authority: Pubkey,
    pub whirlpool_one: Pubkey,
    pub whirlpool_two: Pubkey,
    pub token_owner_account_one_a: Pubkey,
    pub token_vault_one_a: Pubkey,
    pub token_owner_account_one_b: Pubkey,
    pub token_vault_one_b: Pubkey,
    pub token_owner_account_two_a: Pubkey,
    pub token_vault_two_a: Pubkey,
    pub token_owner_account_two_b: Pubkey,
    pub token_vault_two_b: Pubkey,
    pub tick_array_one0: Pubkey,
    pub tick_array_one1: Pubkey,
    pub tick_array_one2: Pubkey,
    pub tick_array_two0: Pubkey,
    pub tick_array_two1: Pubkey,
    pub tick_array_two2: Pubkey,
    pub oracle_one: Pubkey,
    pub oracle_two: Pubkey,
}
impl From<TwoHopSwapAccounts<'_, '_>> for TwoHopSwapKeys {
    fn from(accounts: TwoHopSwapAccounts) -> Self {
        Self {
            token_program: *accounts.token_program.key,
            token_authority: *accounts.token_authority.key,
            whirlpool_one: *accounts.whirlpool_one.key,
            whirlpool_two: *accounts.whirlpool_two.key,
            token_owner_account_one_a: *accounts.token_owner_account_one_a.key,
            token_vault_one_a: *accounts.token_vault_one_a.key,
            token_owner_account_one_b: *accounts.token_owner_account_one_b.key,
            token_vault_one_b: *accounts.token_vault_one_b.key,
            token_owner_account_two_a: *accounts.token_owner_account_two_a.key,
            token_vault_two_a: *accounts.token_vault_two_a.key,
            token_owner_account_two_b: *accounts.token_owner_account_two_b.key,
            token_vault_two_b: *accounts.token_vault_two_b.key,
            tick_array_one0: *accounts.tick_array_one0.key,
            tick_array_one1: *accounts.tick_array_one1.key,
            tick_array_one2: *accounts.tick_array_one2.key,
            tick_array_two0: *accounts.tick_array_two0.key,
            tick_array_two1: *accounts.tick_array_two1.key,
            tick_array_two2: *accounts.tick_array_two2.key,
            oracle_one: *accounts.oracle_one.key,
            oracle_two: *accounts.oracle_two.key,
        }
    }
}
impl From<TwoHopSwapKeys> for [AccountMeta; TWO_HOP_SWAP_IX_ACCOUNTS_LEN] {
    fn from(keys: TwoHopSwapKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.whirlpool_one,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.whirlpool_two,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_owner_account_one_a,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_vault_one_a,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_owner_account_one_b,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_vault_one_b,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_owner_account_two_a,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_vault_two_a,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_owner_account_two_b,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.token_vault_two_b,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.tick_array_one0,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.tick_array_one1,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.tick_array_one2,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.tick_array_two0,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.tick_array_two1,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.tick_array_two2,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.oracle_one,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.oracle_two,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; TWO_HOP_SWAP_IX_ACCOUNTS_LEN]> for TwoHopSwapKeys {
    fn from(pubkeys: [Pubkey; TWO_HOP_SWAP_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: pubkeys[0],
            token_authority: pubkeys[1],
            whirlpool_one: pubkeys[2],
            whirlpool_two: pubkeys[3],
            token_owner_account_one_a: pubkeys[4],
            token_vault_one_a: pubkeys[5],
            token_owner_account_one_b: pubkeys[6],
            token_vault_one_b: pubkeys[7],
            token_owner_account_two_a: pubkeys[8],
            token_vault_two_a: pubkeys[9],
            token_owner_account_two_b: pubkeys[10],
            token_vault_two_b: pubkeys[11],
            tick_array_one0: pubkeys[12],
            tick_array_one1: pubkeys[13],
            tick_array_one2: pubkeys[14],
            tick_array_two0: pubkeys[15],
            tick_array_two1: pubkeys[16],
            tick_array_two2: pubkeys[17],
            oracle_one: pubkeys[18],
            oracle_two: pubkeys[19],
        }
    }
}
impl From<&[String]> for TwoHopSwapKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            token_program: pubkeys[0].parse().unwrap(),
            token_authority: pubkeys[1].parse().unwrap(),
            whirlpool_one: pubkeys[2].parse().unwrap(),
            whirlpool_two: pubkeys[3].parse().unwrap(),
            token_owner_account_one_a: pubkeys[4].parse().unwrap(),
            token_vault_one_a: pubkeys[5].parse().unwrap(),
            token_owner_account_one_b: pubkeys[6].parse().unwrap(),
            token_vault_one_b: pubkeys[7].parse().unwrap(),
            token_owner_account_two_a: pubkeys[8].parse().unwrap(),
            token_vault_two_a: pubkeys[9].parse().unwrap(),
            token_owner_account_two_b: pubkeys[10].parse().unwrap(),
            token_vault_two_b: pubkeys[11].parse().unwrap(),
            tick_array_one0: pubkeys[12].parse().unwrap(),
            tick_array_one1: pubkeys[13].parse().unwrap(),
            tick_array_one2: pubkeys[14].parse().unwrap(),
            tick_array_two0: pubkeys[15].parse().unwrap(),
            tick_array_two1: pubkeys[16].parse().unwrap(),
            tick_array_two2: pubkeys[17].parse().unwrap(),
            oracle_one: pubkeys[18].parse().unwrap(),
            oracle_two: pubkeys[19].parse().unwrap(),
        }
    }
}
impl<'info> From<TwoHopSwapAccounts<'_, 'info>>
    for [AccountInfo<'info>; TWO_HOP_SWAP_IX_ACCOUNTS_LEN]
{
    fn from(accounts: TwoHopSwapAccounts<'_, 'info>) -> Self {
        [
            accounts.token_program.clone(),
            accounts.token_authority.clone(),
            accounts.whirlpool_one.clone(),
            accounts.whirlpool_two.clone(),
            accounts.token_owner_account_one_a.clone(),
            accounts.token_vault_one_a.clone(),
            accounts.token_owner_account_one_b.clone(),
            accounts.token_vault_one_b.clone(),
            accounts.token_owner_account_two_a.clone(),
            accounts.token_vault_two_a.clone(),
            accounts.token_owner_account_two_b.clone(),
            accounts.token_vault_two_b.clone(),
            accounts.tick_array_one0.clone(),
            accounts.tick_array_one1.clone(),
            accounts.tick_array_one2.clone(),
            accounts.tick_array_two0.clone(),
            accounts.tick_array_two1.clone(),
            accounts.tick_array_two2.clone(),
            accounts.oracle_one.clone(),
            accounts.oracle_two.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; TWO_HOP_SWAP_IX_ACCOUNTS_LEN]>
    for TwoHopSwapAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; TWO_HOP_SWAP_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            token_program: &arr[0],
            token_authority: &arr[1],
            whirlpool_one: &arr[2],
            whirlpool_two: &arr[3],
            token_owner_account_one_a: &arr[4],
            token_vault_one_a: &arr[5],
            token_owner_account_one_b: &arr[6],
            token_vault_one_b: &arr[7],
            token_owner_account_two_a: &arr[8],
            token_vault_two_a: &arr[9],
            token_owner_account_two_b: &arr[10],
            token_vault_two_b: &arr[11],
            tick_array_one0: &arr[12],
            tick_array_one1: &arr[13],
            tick_array_one2: &arr[14],
            tick_array_two0: &arr[15],
            tick_array_two1: &arr[16],
            tick_array_two2: &arr[17],
            oracle_one: &arr[18],
            oracle_two: &arr[19],
        }
    }
}
pub const TWO_HOP_SWAP_IX_DISCM: u8 = 25u8;
///Arguments for the twoHopSwap instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TwoHopSwapIxArgs {
    pub discriminator: u8,
    pub amount: u64,
    pub other_amount_threshold: u64,
    pub amount_specified_is_input: bool,
    pub a_to_b_one: bool,
    pub a_to_b_two: bool,
    pub sqrt_price_limit_one: u128,
    pub sqrt_price_limit_two: u128,
}
impl Default for TwoHopSwapIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 25u8,
            amount: Default::default(),
            other_amount_threshold: Default::default(),
            amount_specified_is_input: Default::default(),
            a_to_b_one: Default::default(),
            a_to_b_two: Default::default(),
            sqrt_price_limit_one: Default::default(),
            sqrt_price_limit_two: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct TwoHopSwapIxData(pub TwoHopSwapIxArgs);
impl From<TwoHopSwapIxArgs> for TwoHopSwapIxData {
    fn from(args: TwoHopSwapIxArgs) -> Self {
        Self(args)
    }
}
impl TwoHopSwapIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != TWO_HOP_SWAP_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    TWO_HOP_SWAP_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(TwoHopSwapIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[TWO_HOP_SWAP_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn two_hop_swap_ix_with_program_id(
    program_id: Pubkey,
    keys: TwoHopSwapKeys,
    args: TwoHopSwapIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; TWO_HOP_SWAP_IX_ACCOUNTS_LEN] = keys.into();
    let data: TwoHopSwapIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn two_hop_swap_ix(
    keys: TwoHopSwapKeys,
    args: TwoHopSwapIxArgs,
) -> std::io::Result<Instruction> {
    two_hop_swap_ix_with_program_id(crate::ID, keys, args)
}
pub fn two_hop_swap_invoke_with_program_id(
    program_id: Pubkey,
    accounts: TwoHopSwapAccounts<'_, '_>,
    args: TwoHopSwapIxArgs,
) -> ProgramResult {
    let keys: TwoHopSwapKeys = accounts.into();
    let ix = two_hop_swap_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn two_hop_swap_invoke(
    accounts: TwoHopSwapAccounts<'_, '_>,
    args: TwoHopSwapIxArgs,
) -> ProgramResult {
    two_hop_swap_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn two_hop_swap_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: TwoHopSwapAccounts<'_, '_>,
    args: TwoHopSwapIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: TwoHopSwapKeys = accounts.into();
    let ix = two_hop_swap_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn two_hop_swap_invoke_signed(
    accounts: TwoHopSwapAccounts<'_, '_>,
    args: TwoHopSwapIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    two_hop_swap_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn two_hop_swap_verify_account_keys(
    accounts: TwoHopSwapAccounts<'_, '_>,
    keys: TwoHopSwapKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.token_program.key, keys.token_program),
        (*accounts.token_authority.key, keys.token_authority),
        (*accounts.whirlpool_one.key, keys.whirlpool_one),
        (*accounts.whirlpool_two.key, keys.whirlpool_two),
        (
            *accounts.token_owner_account_one_a.key,
            keys.token_owner_account_one_a,
        ),
        (*accounts.token_vault_one_a.key, keys.token_vault_one_a),
        (
            *accounts.token_owner_account_one_b.key,
            keys.token_owner_account_one_b,
        ),
        (*accounts.token_vault_one_b.key, keys.token_vault_one_b),
        (
            *accounts.token_owner_account_two_a.key,
            keys.token_owner_account_two_a,
        ),
        (*accounts.token_vault_two_a.key, keys.token_vault_two_a),
        (
            *accounts.token_owner_account_two_b.key,
            keys.token_owner_account_two_b,
        ),
        (*accounts.token_vault_two_b.key, keys.token_vault_two_b),
        (*accounts.tick_array_one0.key, keys.tick_array_one0),
        (*accounts.tick_array_one1.key, keys.tick_array_one1),
        (*accounts.tick_array_one2.key, keys.tick_array_one2),
        (*accounts.tick_array_two0.key, keys.tick_array_two0),
        (*accounts.tick_array_two1.key, keys.tick_array_two1),
        (*accounts.tick_array_two2.key, keys.tick_array_two2),
        (*accounts.oracle_one.key, keys.oracle_one),
        (*accounts.oracle_two.key, keys.oracle_two),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl TwoHopSwapIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<TwoHopSwapIxArgs> for WhirlpoolProgramIx {
    fn from(args: TwoHopSwapIxArgs) -> Self {
        Self::TwoHopSwap(args)
    }
}
