//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::instructions::*;
pub const TOKEN_MINT_IX_DISCM: u8 = 0u8;
pub const BUY_IX_DISCM: u8 = 1u8;
pub const SELL_IX_DISCM: u8 = 2u8;
pub const MIGRATE_FUNDS_IX_DISCM: u8 = 3u8;
pub const CONFIG_INIT_IX_DISCM: u8 = 4u8;
pub const CONFIG_UPDATE_IX_DISCM: u8 = 5u8;
/// Program instruction types
#[derive(Clone, Debug, PartialEq)]
pub enum MoonshotInstruction {
    TokenMint(TokenMintIxArgs),
    Buy(BuyIxArgs),
    Sell(SellIxArgs),
    MigrateFunds,
    ConfigInit(ConfigInitIxArgs),
    ConfigUpdate(ConfigUpdateIxArgs),
}
/// Parse instruction data based on 1-byte discriminator (non-Anchor contracts)
pub fn parse_instruction(data: &[u8]) -> Result<MoonshotInstruction, std::io::Error> {
    if data.is_empty() {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Instruction data is empty",
        ));
    }
    let discriminator = data[0];
    let mut ix_data = &data[1..];
    match discriminator {
        0u8 => {
            let args = TokenMintIxArgs::deserialize(&mut ix_data)?;
            Ok(MoonshotInstruction::TokenMint(args))
        }
        1u8 => {
            let args = BuyIxArgs::deserialize(&mut ix_data)?;
            Ok(MoonshotInstruction::Buy(args))
        }
        2u8 => {
            let args = SellIxArgs::deserialize(&mut ix_data)?;
            Ok(MoonshotInstruction::Sell(args))
        }
        3u8 => Ok(MoonshotInstruction::MigrateFunds),
        4u8 => {
            let args = ConfigInitIxArgs::deserialize(&mut ix_data)?;
            Ok(MoonshotInstruction::ConfigInit(args))
        }
        5u8 => {
            let args = ConfigUpdateIxArgs::deserialize(&mut ix_data)?;
            Ok(MoonshotInstruction::ConfigUpdate(args))
        }
        _ => Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            format!("Unknown instruction discriminator: {}", discriminator),
        )),
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_token_mint_consistency() {
        let test_args = TokenMintIxArgs::default();
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&TOKEN_MINT_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(MoonshotInstruction::TokenMint(_)) => {}
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(TokenMint)
                );
            }
        }
    }
    #[test]
    fn test_buy_consistency() {
        let test_args = BuyIxArgs::default();
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&BUY_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(MoonshotInstruction::Buy(_)) => {}
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Buy)
                );
            }
        }
    }
    #[test]
    fn test_sell_consistency() {
        let test_args = SellIxArgs::default();
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&SELL_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(MoonshotInstruction::Sell(_)) => {}
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Sell)
                );
            }
        }
    }
    #[test]
    fn test_migrate_funds_consistency() {
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&MIGRATE_FUNDS_IX_DISCM);
        let parsed = parse_instruction(&test_data).expect("Failed to parse instruction");
        match parsed {
            MoonshotInstruction::MigrateFunds => {}
            _ => panic!("Parsed instruction has wrong type"),
        }
    }
    #[test]
    fn test_config_init_consistency() {
        let test_args = ConfigInitIxArgs::default();
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&CONFIG_INIT_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(MoonshotInstruction::ConfigInit(_)) => {}
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(ConfigInit)
                );
            }
        }
    }
    #[test]
    fn test_config_update_consistency() {
        let test_args = ConfigUpdateIxArgs::default();
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&CONFIG_UPDATE_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(MoonshotInstruction::ConfigUpdate(_)) => {}
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(ConfigUpdate)
                );
            }
        }
    }
    #[test]
    fn test_discriminator_recognition() {
        let test_args = TokenMintIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(TokenMintIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &TOKEN_MINT_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                MoonshotInstruction::TokenMint(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, TOKEN_MINT_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => panic!("Parsed instruction should be {}", stringify!(TokenMint)),
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(TokenMint),
                    e
                );
            }
        }
        let test_args = BuyIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(BuyIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &BUY_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                MoonshotInstruction::Buy(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, BUY_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => panic!("Parsed instruction should be {}", stringify!(Buy)),
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(Buy),
                    e
                );
            }
        }
        let test_args = SellIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(SellIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &SELL_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                MoonshotInstruction::Sell(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, SELL_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => panic!("Parsed instruction should be {}", stringify!(Sell)),
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(Sell),
                    e
                );
            }
        }
        let test_data = MIGRATE_FUNDS_IX_DISCM.to_vec();
        assert_eq!(
            test_data.len(),
            8,
            "Test data should be exactly 8 bytes for discriminator-only instruction"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                MoonshotInstruction::MigrateFunds => {}
                _ => {
                    panic!("Parsed instruction should be {}", stringify!(MigrateFunds))
                }
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(MigrateFunds),
                    e
                );
            }
        }
        let test_args = ConfigInitIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(ConfigInitIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &CONFIG_INIT_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                MoonshotInstruction::ConfigInit(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, CONFIG_INIT_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => {
                    panic!("Parsed instruction should be {}", stringify!(ConfigInit))
                }
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(ConfigInit),
                    e
                );
            }
        }
        let test_args = ConfigUpdateIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(ConfigUpdateIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &CONFIG_UPDATE_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                MoonshotInstruction::ConfigUpdate(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, CONFIG_UPDATE_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => {
                    panic!("Parsed instruction should be {}", stringify!(ConfigUpdate))
                }
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(ConfigUpdate),
                    e
                );
            }
        }
    }
    #[test]
    fn test_invalid_discriminator() {
        let invalid_data = vec![255u8; 40];
        let result = parse_instruction(&invalid_data);
        assert!(result.is_err(), "Should fail with invalid discriminator");
    }
    #[test]
    fn test_insufficient_data() {
        let short_data = vec![1u8; 4];
        let result = parse_instruction(&short_data);
        assert!(result.is_err(), "Should fail with insufficient data");
    }
}
