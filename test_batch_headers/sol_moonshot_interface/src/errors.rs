//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use solana_program::program_error::ProgramError;
use thiserror::Error;
///Custom errors for the moonshot program
#[derive(Clone, Copy, Debug, Eq, Error, num_derive::FromPrimitive, PartialEq)]
pub enum MoonshotError {
    ///6000 - Insufficient SOL to pay for the transaction.
    #[error("Insufficient SOL to pay for the transaction.")]
    InsufficientBalance = 6000,
    ///6001 - The amount must be available in the curve .
    #[error("The amount must be available in the curve .")]
    InvalidAmount = 6001,
    ///6002 - The slippage must be under 100 percent.
    #[error("The slippage must be under 100 percent.")]
    InvalidSlippage = 6002,
    ///6003 - The cost amount is not in the allowed slippage interval.
    #[error("The cost amount is not in the allowed slippage interval.")]
    SlippageOverflow = 6003,
    ///6004 - Threshold limit exceeded.
    #[error("Threshold limit exceeded.")]
    ThresholdReached = 6004,
    ///6005 - Trade disabled, market cap threshold reached.
    #[error("Trade disabled, market cap threshold reached.")]
    InvalidTokenAccount = 6005,
    ///6006 - Invalid curve account.
    #[error("Invalid curve account.")]
    InvalidCurveAccount = 6006,
    ///6007 - Invalid fee account address.
    #[error("Invalid fee account address.")]
    InvalidFeeAccount = 6007,
    ///6008 - Curve limit exceeded.
    #[error("Curve limit exceeded.")]
    CurveLimit = 6008,
    ///6009 - Invalid curve type.
    #[error("Invalid curve type.")]
    InvalidCurveType = 6009,
    ///6010 - Invalid currency.
    #[error("Invalid currency.")]
    InvalidCurrency = 6010,
    ///6011 - Artithmetics error
    #[error("Artithmetics error")]
    Arithmetics = 6011,
    ///6012 - Market Cap threshold not hit, cannot migrate funds yet
    #[error("Market Cap threshold not hit, cannot migrate funds yet")]
    ThresholdNotHit = 6012,
    ///6013 - Invalid Authority provided.
    #[error("Invalid Authority provided.")]
    InvalidAuthority = 6013,
    ///6014 - Trade amount too low , resulting in 0 costs
    #[error("Trade amount too low , resulting in 0 costs")]
    TradeAmountTooLow = 6014,
    ///6015 - Config field needs to be present during initialization
    #[error("Config field needs to be present during initialization")]
    ConfigFieldMissing = 6015,
    ///6016 - Unsupported different currency types
    #[error("Unsupported different currency types")]
    DifferentCurrencies = 6016,
    ///6017 - Basis points too high
    #[error("Basis points too high")]
    BasisPointTooHigh = 6017,
    ///6018 - Fee share too High
    #[error("Fee share too High")]
    FeeShareTooHigh = 6018,
    ///6019 - Token decimals are not within the supported range
    #[error("Token decimals are not within the supported range")]
    TokenDecimalsOutOfRange = 6019,
    ///6020 - Token Name too long, max supported length is 32 bytes
    #[error("Token Name too long, max supported length is 32 bytes")]
    TokenNameTooLong = 6020,
    ///6021 - Token Symbol too long, max supported length is 10 bytes
    #[error("Token Symbol too long, max supported length is 10 bytes")]
    TokenSymbolTooLong = 6021,
    ///6022 - Token URI too long, max supported length is 200 bytes
    #[error("Token URI too long, max supported length is 200 bytes")]
    TokenUriTooLong = 6022,
    ///6023 - Minimum Decimal Places cannot be lower than Maximum Decimal Places
    #[error("Minimum Decimal Places cannot be lower than Maximum Decimal Places")]
    IncorrectDecimalPlacesBounds = 6023,
    ///6024 - Minimum Token Supply cannot be lower than Maximum Token Supply
    #[error("Minimum Token Supply cannot be lower than Maximum Token Supply")]
    IncorrectTokenSupplyBounds = 6024,
    ///6025 - Token Total Supply out of bounds
    #[error("Token Total Supply out of bounds")]
    TotalSupplyOutOfBounds = 6025,
    ///6026 - This setup will produce final collateral amount less than the migration fee
    #[error("This setup will produce final collateral amount less than the migration fee")]
    FinalCollateralTooLow = 6026,
    ///6027 - One of the Coefficients is equal to ZERO
    #[error("One of the Coefficients is equal to ZERO")]
    CoefficientZero = 6027,
    ///6028 - Market cap Threshold under the Hard lower bound limits
    #[error("Market cap Threshold under the Hard lower bound limits")]
    MarketCapThresholdTooLow = 6028,
    ///6029 - Default coef_b set out of hard limit bounds
    #[error("Default coef_b set out of hard limit bounds")]
    CoefBOutofBounds = 6029,
    ///6030 - For Constant Product the Market Cap threshold cannot be higher than 325 SOL
    #[error("For Constant Product the Market Cap threshold cannot be higher than 325 SOL")]
    IncorrectMarketCap = 6030,
    ///6031 - For Constant Product the Decimal places cannot be other than 9
    #[error("For Constant Product the Decimal places cannot be other than 9")]
    IncorrectDecimals = 6031,
    ///6032 - For Constant Product the Maximal Token Supply cannot be other than 1_000_000_000
    #[error("For Constant Product the Maximal Token Supply cannot be other than 1_000_000_000")]
    IncorrectMaxSupply = 6032,
    ///6033 - Market Cap Threshold set too high, will not be hit even if Curve Hard Limit reached
    #[error("Market Cap Threshold set too high, will not be hit even if Curve Hard Limit reached")]
    MarketCapTooHigh = 6033,
    ///6034 - This Migration Target is not supported!
    #[error("This Migration Target is not supported!")]
    InvalidMigrationTarget = 6034,
    ///6035 - General error
    #[error("General error")]
    General = 6035,
}
impl From<MoonshotError> for ProgramError {
    fn from(e: MoonshotError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
