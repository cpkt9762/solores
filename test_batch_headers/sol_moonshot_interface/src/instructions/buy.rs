//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const BUY_IX_ACCOUNTS_LEN: usize = 11;
///Accounts struct for the buy instruction
#[derive(Copy, Clone, Debug)]
pub struct BuyAccounts<'me, 'info> {
    pub sender: &'me AccountInfo<'info>,
    pub sender_token_account: &'me AccountInfo<'info>,
    pub curve_account: &'me AccountInfo<'info>,
    pub curve_token_account: &'me AccountInfo<'info>,
    pub dex_fee: &'me AccountInfo<'info>,
    pub helio_fee: &'me AccountInfo<'info>,
    pub mint: &'me AccountInfo<'info>,
    pub config_account: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
}
///Public keys struct for the buy instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct BuyKeys {
    pub sender: Pubkey,
    pub sender_token_account: Pubkey,
    pub curve_account: Pubkey,
    pub curve_token_account: Pubkey,
    pub dex_fee: Pubkey,
    pub helio_fee: Pubkey,
    pub mint: Pubkey,
    pub config_account: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
    pub system_program: Pubkey,
}
impl From<BuyAccounts<'_, '_>> for BuyKeys {
    fn from(accounts: BuyAccounts) -> Self {
        Self {
            sender: *accounts.sender.key,
            sender_token_account: *accounts.sender_token_account.key,
            curve_account: *accounts.curve_account.key,
            curve_token_account: *accounts.curve_token_account.key,
            dex_fee: *accounts.dex_fee.key,
            helio_fee: *accounts.helio_fee.key,
            mint: *accounts.mint.key,
            config_account: *accounts.config_account.key,
            token_program: *accounts.token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
            system_program: *accounts.system_program.key,
        }
    }
}
impl From<BuyKeys> for [AccountMeta; BUY_IX_ACCOUNTS_LEN] {
    fn from(keys: BuyKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.sender,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.sender_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.curve_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.curve_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.dex_fee,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.helio_fee,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.mint,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.config_account,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; BUY_IX_ACCOUNTS_LEN]> for BuyKeys {
    fn from(pubkeys: [Pubkey; BUY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            sender: pubkeys[0],
            sender_token_account: pubkeys[1],
            curve_account: pubkeys[2],
            curve_token_account: pubkeys[3],
            dex_fee: pubkeys[4],
            helio_fee: pubkeys[5],
            mint: pubkeys[6],
            config_account: pubkeys[7],
            token_program: pubkeys[8],
            associated_token_program: pubkeys[9],
            system_program: pubkeys[10],
        }
    }
}
impl From<&[String]> for BuyKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            sender: pubkeys[0].parse().unwrap(),
            sender_token_account: pubkeys[1].parse().unwrap(),
            curve_account: pubkeys[2].parse().unwrap(),
            curve_token_account: pubkeys[3].parse().unwrap(),
            dex_fee: pubkeys[4].parse().unwrap(),
            helio_fee: pubkeys[5].parse().unwrap(),
            mint: pubkeys[6].parse().unwrap(),
            config_account: pubkeys[7].parse().unwrap(),
            token_program: pubkeys[8].parse().unwrap(),
            associated_token_program: pubkeys[9].parse().unwrap(),
            system_program: pubkeys[10].parse().unwrap(),
        }
    }
}
impl<'info> From<BuyAccounts<'_, 'info>> for [AccountInfo<'info>; BUY_IX_ACCOUNTS_LEN] {
    fn from(accounts: BuyAccounts<'_, 'info>) -> Self {
        [
            accounts.sender.clone(),
            accounts.sender_token_account.clone(),
            accounts.curve_account.clone(),
            accounts.curve_token_account.clone(),
            accounts.dex_fee.clone(),
            accounts.helio_fee.clone(),
            accounts.mint.clone(),
            accounts.config_account.clone(),
            accounts.token_program.clone(),
            accounts.associated_token_program.clone(),
            accounts.system_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; BUY_IX_ACCOUNTS_LEN]> for BuyAccounts<'me, 'info> {
    fn from(arr: &'me [AccountInfo<'info>; BUY_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            sender: &arr[0],
            sender_token_account: &arr[1],
            curve_account: &arr[2],
            curve_token_account: &arr[3],
            dex_fee: &arr[4],
            helio_fee: &arr[5],
            mint: &arr[6],
            config_account: &arr[7],
            token_program: &arr[8],
            associated_token_program: &arr[9],
            system_program: &arr[10],
        }
    }
}
pub const BUY_IX_DISCM: u8 = 1u8;
///Arguments for the buy instruction
#[derive(BorshDeserialize, BorshSerialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyIxArgs {
    pub discriminator: u8,
    pub data: TradeParams,
}
impl Default for BuyIxArgs {
    fn default() -> Self {
        Self {
            discriminator: 1u8,
            data: Default::default(),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
pub struct BuyIxData(pub BuyIxArgs);
impl From<BuyIxArgs> for BuyIxData {
    fn from(args: BuyIxArgs) -> Self {
        Self(args)
    }
}
impl BuyIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != BUY_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    BUY_IX_DISCM, maybe_discm
                ),
            ));
        }
        let mut reader = &buf[1..];
        Ok(Self(BuyIxArgs::deserialize(&mut reader)?))
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[BUY_IX_DISCM])?;
        self.0.serialize(&mut writer)
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn buy_ix_with_program_id(
    program_id: Pubkey,
    keys: BuyKeys,
    args: BuyIxArgs,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; BUY_IX_ACCOUNTS_LEN] = keys.into();
    let data: BuyIxData = args.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: data.try_to_vec()?,
    })
}
pub fn buy_ix(keys: BuyKeys, args: BuyIxArgs) -> std::io::Result<Instruction> {
    buy_ix_with_program_id(crate::ID, keys, args)
}
pub fn buy_invoke_with_program_id(
    program_id: Pubkey,
    accounts: BuyAccounts<'_, '_>,
    args: BuyIxArgs,
) -> ProgramResult {
    let keys: BuyKeys = accounts.into();
    let ix = buy_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction(&ix, accounts)
}
pub fn buy_invoke(accounts: BuyAccounts<'_, '_>, args: BuyIxArgs) -> ProgramResult {
    buy_invoke_with_program_id(crate::ID, accounts, args)
}
pub fn buy_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: BuyAccounts<'_, '_>,
    args: BuyIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: BuyKeys = accounts.into();
    let ix = buy_ix_with_program_id(program_id, keys, args)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn buy_invoke_signed(
    accounts: BuyAccounts<'_, '_>,
    args: BuyIxArgs,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    buy_invoke_signed_with_program_id(crate::ID, accounts, args, seeds)
}
pub fn buy_verify_account_keys(
    accounts: BuyAccounts<'_, '_>,
    keys: BuyKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.sender.key, keys.sender),
        (
            *accounts.sender_token_account.key,
            keys.sender_token_account,
        ),
        (*accounts.curve_account.key, keys.curve_account),
        (*accounts.curve_token_account.key, keys.curve_token_account),
        (*accounts.dex_fee.key, keys.dex_fee),
        (*accounts.helio_fee.key, keys.helio_fee),
        (*accounts.mint.key, keys.mint),
        (*accounts.config_account.key, keys.config_account),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
        (*accounts.system_program.key, keys.system_program),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
impl BuyIxArgs {
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        BorshSerialize::serialize(self, &mut writer)
    }
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        BorshDeserialize::deserialize(&mut &buf[..])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
}
impl From<BuyIxArgs> for MoonshotProgramIx {
    fn from(args: BuyIxArgs) -> Self {
        Self::Buy(args)
    }
}
