//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
pub const MIGRATE_FUNDS_IX_ACCOUNTS_LEN: usize = 12;
///Accounts struct for the migrateFunds instruction
#[derive(Copy, Clone, Debug)]
pub struct MigrateFundsAccounts<'me, 'info> {
    ///BE Authority
    pub backend_authority: &'me AccountInfo<'info>,
    ///Migration Authority
    ///Owner and Payer over Token Accounts, needs to be mutable
    pub migration_authority: &'me AccountInfo<'info>,
    ///Curve Account
    ///The account is closed after this instruction
    pub curve_account: &'me AccountInfo<'info>,
    ///Curve Token Account
    ///The account is closed after this instruction
    pub curve_token_account: &'me AccountInfo<'info>,
    ///Authority token Account
    ///Init on demand
    pub migration_authority_token_account: &'me AccountInfo<'info>,
    ///InterfaceAccount: checks program ownership + deserialize into Mint
    pub mint: &'me AccountInfo<'info>,
    pub dex_fee_account: &'me AccountInfo<'info>,
    pub helio_fee_account: &'me AccountInfo<'info>,
    pub config_account: &'me AccountInfo<'info>,
    pub system_program: &'me AccountInfo<'info>,
    pub token_program: &'me AccountInfo<'info>,
    pub associated_token_program: &'me AccountInfo<'info>,
}
///Public keys struct for the migrateFunds instruction
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct MigrateFundsKeys {
    ///BE Authority
    pub backend_authority: Pubkey,
    ///Migration Authority
    ///Owner and Payer over Token Accounts, needs to be mutable
    pub migration_authority: Pubkey,
    ///Curve Account
    ///The account is closed after this instruction
    pub curve_account: Pubkey,
    ///Curve Token Account
    ///The account is closed after this instruction
    pub curve_token_account: Pubkey,
    ///Authority token Account
    ///Init on demand
    pub migration_authority_token_account: Pubkey,
    ///InterfaceAccount: checks program ownership + deserialize into Mint
    pub mint: Pubkey,
    pub dex_fee_account: Pubkey,
    pub helio_fee_account: Pubkey,
    pub config_account: Pubkey,
    pub system_program: Pubkey,
    pub token_program: Pubkey,
    pub associated_token_program: Pubkey,
}
impl From<MigrateFundsAccounts<'_, '_>> for MigrateFundsKeys {
    fn from(accounts: MigrateFundsAccounts) -> Self {
        Self {
            backend_authority: *accounts.backend_authority.key,
            migration_authority: *accounts.migration_authority.key,
            curve_account: *accounts.curve_account.key,
            curve_token_account: *accounts.curve_token_account.key,
            migration_authority_token_account: *accounts.migration_authority_token_account.key,
            mint: *accounts.mint.key,
            dex_fee_account: *accounts.dex_fee_account.key,
            helio_fee_account: *accounts.helio_fee_account.key,
            config_account: *accounts.config_account.key,
            system_program: *accounts.system_program.key,
            token_program: *accounts.token_program.key,
            associated_token_program: *accounts.associated_token_program.key,
        }
    }
}
impl From<MigrateFundsKeys> for [AccountMeta; MIGRATE_FUNDS_IX_ACCOUNTS_LEN] {
    fn from(keys: MigrateFundsKeys) -> Self {
        [
            AccountMeta {
                pubkey: keys.backend_authority,
                is_signer: true,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.migration_authority,
                is_signer: true,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.curve_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.curve_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.migration_authority_token_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.mint,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.dex_fee_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.helio_fee_account,
                is_signer: false,
                is_writable: true,
            },
            AccountMeta {
                pubkey: keys.config_account,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.system_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.token_program,
                is_signer: false,
                is_writable: false,
            },
            AccountMeta {
                pubkey: keys.associated_token_program,
                is_signer: false,
                is_writable: false,
            },
        ]
    }
}
impl From<[Pubkey; MIGRATE_FUNDS_IX_ACCOUNTS_LEN]> for MigrateFundsKeys {
    fn from(pubkeys: [Pubkey; MIGRATE_FUNDS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            backend_authority: pubkeys[0],
            migration_authority: pubkeys[1],
            curve_account: pubkeys[2],
            curve_token_account: pubkeys[3],
            migration_authority_token_account: pubkeys[4],
            mint: pubkeys[5],
            dex_fee_account: pubkeys[6],
            helio_fee_account: pubkeys[7],
            config_account: pubkeys[8],
            system_program: pubkeys[9],
            token_program: pubkeys[10],
            associated_token_program: pubkeys[11],
        }
    }
}
impl From<&[String]> for MigrateFundsKeys {
    fn from(pubkeys: &[String]) -> Self {
        Self {
            backend_authority: pubkeys[0].parse().unwrap(),
            migration_authority: pubkeys[1].parse().unwrap(),
            curve_account: pubkeys[2].parse().unwrap(),
            curve_token_account: pubkeys[3].parse().unwrap(),
            migration_authority_token_account: pubkeys[4].parse().unwrap(),
            mint: pubkeys[5].parse().unwrap(),
            dex_fee_account: pubkeys[6].parse().unwrap(),
            helio_fee_account: pubkeys[7].parse().unwrap(),
            config_account: pubkeys[8].parse().unwrap(),
            system_program: pubkeys[9].parse().unwrap(),
            token_program: pubkeys[10].parse().unwrap(),
            associated_token_program: pubkeys[11].parse().unwrap(),
        }
    }
}
impl<'info> From<MigrateFundsAccounts<'_, 'info>>
    for [AccountInfo<'info>; MIGRATE_FUNDS_IX_ACCOUNTS_LEN]
{
    fn from(accounts: MigrateFundsAccounts<'_, 'info>) -> Self {
        [
            accounts.backend_authority.clone(),
            accounts.migration_authority.clone(),
            accounts.curve_account.clone(),
            accounts.curve_token_account.clone(),
            accounts.migration_authority_token_account.clone(),
            accounts.mint.clone(),
            accounts.dex_fee_account.clone(),
            accounts.helio_fee_account.clone(),
            accounts.config_account.clone(),
            accounts.system_program.clone(),
            accounts.token_program.clone(),
            accounts.associated_token_program.clone(),
        ]
    }
}
impl<'me, 'info> From<&'me [AccountInfo<'info>; MIGRATE_FUNDS_IX_ACCOUNTS_LEN]>
    for MigrateFundsAccounts<'me, 'info>
{
    fn from(arr: &'me [AccountInfo<'info>; MIGRATE_FUNDS_IX_ACCOUNTS_LEN]) -> Self {
        Self {
            backend_authority: &arr[0],
            migration_authority: &arr[1],
            curve_account: &arr[2],
            curve_token_account: &arr[3],
            migration_authority_token_account: &arr[4],
            mint: &arr[5],
            dex_fee_account: &arr[6],
            helio_fee_account: &arr[7],
            config_account: &arr[8],
            system_program: &arr[9],
            token_program: &arr[10],
            associated_token_program: &arr[11],
        }
    }
}
pub const MIGRATE_FUNDS_IX_DISCM: u8 = 3u8;
#[derive(Clone, Debug, PartialEq)]
pub struct MigrateFundsIxData;
impl MigrateFundsIxData {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        if maybe_discm != MIGRATE_FUNDS_IX_DISCM {
            return Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "discm does not match. Expected: {}. Received: {}",
                    MIGRATE_FUNDS_IX_DISCM, maybe_discm
                ),
            ));
        }
        Ok(Self)
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        writer.write_all(&[MIGRATE_FUNDS_IX_DISCM])
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
pub fn migrate_funds_ix_with_program_id(
    program_id: Pubkey,
    keys: MigrateFundsKeys,
) -> std::io::Result<Instruction> {
    let metas: [AccountMeta; MIGRATE_FUNDS_IX_ACCOUNTS_LEN] = keys.into();
    Ok(Instruction {
        program_id,
        accounts: Vec::from(metas),
        data: MigrateFundsIxData.try_to_vec()?,
    })
}
pub fn migrate_funds_ix(keys: MigrateFundsKeys) -> std::io::Result<Instruction> {
    migrate_funds_ix_with_program_id(crate::ID, keys)
}
pub fn migrate_funds_invoke_with_program_id(
    program_id: Pubkey,
    accounts: MigrateFundsAccounts<'_, '_>,
) -> ProgramResult {
    let keys: MigrateFundsKeys = accounts.into();
    let ix = migrate_funds_ix_with_program_id(program_id, keys)?;
    invoke_instruction(&ix, accounts)
}
pub fn migrate_funds_invoke(accounts: MigrateFundsAccounts<'_, '_>) -> ProgramResult {
    migrate_funds_invoke_with_program_id(crate::ID, accounts)
}
pub fn migrate_funds_invoke_signed_with_program_id(
    program_id: Pubkey,
    accounts: MigrateFundsAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let keys: MigrateFundsKeys = accounts.into();
    let ix = migrate_funds_ix_with_program_id(program_id, keys)?;
    invoke_instruction_signed(&ix, accounts, seeds)
}
pub fn migrate_funds_invoke_signed(
    accounts: MigrateFundsAccounts<'_, '_>,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    migrate_funds_invoke_signed_with_program_id(crate::ID, accounts, seeds)
}
pub fn migrate_funds_verify_account_keys(
    accounts: MigrateFundsAccounts<'_, '_>,
    keys: MigrateFundsKeys,
) -> Result<(), (Pubkey, Pubkey)> {
    for (actual, expected) in [
        (*accounts.backend_authority.key, keys.backend_authority),
        (*accounts.migration_authority.key, keys.migration_authority),
        (*accounts.curve_account.key, keys.curve_account),
        (*accounts.curve_token_account.key, keys.curve_token_account),
        (
            *accounts.migration_authority_token_account.key,
            keys.migration_authority_token_account,
        ),
        (*accounts.mint.key, keys.mint),
        (*accounts.dex_fee_account.key, keys.dex_fee_account),
        (*accounts.helio_fee_account.key, keys.helio_fee_account),
        (*accounts.config_account.key, keys.config_account),
        (*accounts.system_program.key, keys.system_program),
        (*accounts.token_program.key, keys.token_program),
        (
            *accounts.associated_token_program.key,
            keys.associated_token_program,
        ),
    ] {
        if actual != expected {
            return Err((actual, expected));
        }
    }
    Ok(())
}
