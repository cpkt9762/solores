//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo,
    entrypoint::ProgramResult,
    instruction::{AccountMeta, Instruction},
    program::{invoke, invoke_signed},
    pubkey::Pubkey,
};
fn invoke_instruction<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke(ix, &account_info)
}
fn invoke_instruction_signed<'info, A: Into<[AccountInfo<'info>; N]>, const N: usize>(
    ix: &Instruction,
    accounts: A,
    seeds: &[&[&[u8]]],
) -> ProgramResult {
    let account_info: [AccountInfo<'info>; N] = accounts.into();
    invoke_signed(ix, &account_info, seeds)
}
pub mod create_feed;
pub use create_feed::*;
pub mod submit_feed;
pub use submit_feed::*;
pub mod query;
pub use query::*;
#[derive(Clone, Debug, PartialEq)]
pub enum SarosProgramIx {
    CreateFeed(CreateFeedIxArgs),
    SubmitFeed(SubmitFeedIxArgs),
    Query(QueryIxArgs),
}
impl SarosProgramIx {
    pub fn deserialize(buf: &[u8]) -> std::io::Result<Self> {
        if buf.is_empty() {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Instruction data is empty",
            ));
        }
        let maybe_discm = buf[0];
        let mut reader = &buf[1..];
        match maybe_discm {
            CREATE_FEED_IX_DISCM => Ok(Self::CreateFeed(CreateFeedIxArgs::deserialize(
                &mut reader,
            )?)),
            SUBMIT_FEED_IX_DISCM => Ok(Self::SubmitFeed(SubmitFeedIxArgs::deserialize(
                &mut reader,
            )?)),
            QUERY_IX_DISCM => Ok(Self::Query(QueryIxArgs::deserialize(&mut reader)?)),
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("discm {} not found", maybe_discm),
            )),
        }
    }
    pub fn serialize<W: std::io::Write>(&self, mut writer: W) -> std::io::Result<()> {
        match self {
            Self::CreateFeed(args) => {
                writer.write_all(&[CREATE_FEED_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::SubmitFeed(args) => {
                writer.write_all(&[SUBMIT_FEED_IX_DISCM])?;
                args.serialize(&mut writer)
            }
            Self::Query(args) => {
                writer.write_all(&[QUERY_IX_DISCM])?;
                args.serialize(&mut writer)
            }
        }
    }
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        let mut data = Vec::new();
        self.serialize(&mut data)?;
        Ok(data)
    }
}
