//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use super::*;
#[derive(Clone, Debug, BorshDeserialize, BorshSerialize, PartialEq, Eq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Transmissions {
    pub version: u8,
    pub state: u8,
    pub owner: Pubkey,
    pub proposed_owner: Pubkey,
    pub writer: Pubkey,
    pub description: [u8; 32],
    pub decimals: u8,
    pub flagging_threshold: u32,
    pub latest_round_id: u32,
    pub granularity: u8,
    pub live_length: u32,
    pub live_cursor: u32,
    pub historical_cursor: u32,
}
impl Default for Transmissions {
    fn default() -> Self {
        Self {
            version: Default::default(),
            state: Default::default(),
            owner: Pubkey::default(),
            proposed_owner: Pubkey::default(),
            writer: Pubkey::default(),
            description: [Default::default(); 32],
            decimals: Default::default(),
            flagging_threshold: Default::default(),
            latest_round_id: Default::default(),
            granularity: Default::default(),
            live_length: Default::default(),
            live_cursor: Default::default(),
            historical_cursor: Default::default(),
        }
    }
}
impl Transmissions {
    pub const LEN: usize = std::mem::size_of::<Self>();
    pub fn try_to_vec(&self) -> std::io::Result<Vec<u8>> {
        borsh::to_vec(self)
    }
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        if data.len() != Self::LEN {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                format!(
                    "Invalid data length. Expected: {}, got: {}",
                    Self::LEN,
                    data.len()
                ),
            ));
        }
        borsh::from_slice(data)
    }
}
