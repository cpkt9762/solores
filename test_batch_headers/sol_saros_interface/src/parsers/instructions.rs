//! This file was automatically generated by Solores
//! Solana IDL to Rust interface generator
//!
//! GitHub: https://github.com/cpkt9762/solores
//!
//! Generated on: 2025-08-06
//!
//! DO NOT EDIT - This file is auto-generated
//! Changes will be lost when regenerating from IDL

use crate::instructions::*;
pub const CREATE_FEED_IX_DISCM: u8 = 0u8;
pub const SUBMIT_FEED_IX_DISCM: u8 = 1u8;
pub const QUERY_IX_DISCM: u8 = 2u8;
/// Program instruction types
#[derive(Clone, Debug, PartialEq)]
pub enum SarosInstruction {
    CreateFeed(CreateFeedIxArgs),
    SubmitFeed(SubmitFeedIxArgs),
    Query(QueryIxArgs),
}
/// Parse instruction data based on 1-byte discriminator (non-Anchor contracts)
pub fn parse_instruction(data: &[u8]) -> Result<SarosInstruction, std::io::Error> {
    if data.is_empty() {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Instruction data is empty",
        ));
    }
    let discriminator = data[0];
    let mut ix_data = &data[1..];
    match discriminator {
        0u8 => {
            let args = CreateFeedIxArgs::deserialize(&mut ix_data)?;
            Ok(SarosInstruction::CreateFeed(args))
        }
        1u8 => {
            let args = SubmitFeedIxArgs::deserialize(&mut ix_data)?;
            Ok(SarosInstruction::SubmitFeed(args))
        }
        2u8 => {
            let args = QueryIxArgs::deserialize(&mut ix_data)?;
            Ok(SarosInstruction::Query(args))
        }
        _ => Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            format!("Unknown instruction discriminator: {}", discriminator),
        )),
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_create_feed_consistency() {
        let test_args = CreateFeedIxArgs::default();
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&CREATE_FEED_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(SarosInstruction::CreateFeed(_)) => {}
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(CreateFeed)
                );
            }
        }
    }
    #[test]
    fn test_submit_feed_consistency() {
        let expected_first_arg = 1000i64;
        let test_args = SubmitFeedIxArgs {
            timestamp: expected_first_arg,
            ..Default::default()
        };
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&SUBMIT_FEED_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(SarosInstruction::SubmitFeed(args)) => {
                assert_eq!(
                    args.timestamp, expected_first_arg,
                    "First argument value should match expected value"
                );
            }
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(SubmitFeed)
                );
            }
        }
    }
    #[test]
    fn test_query_consistency() {
        let test_args = QueryIxArgs::default();
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&QUERY_IX_DISCM);
        test_data.extend_from_slice(&test_args.try_to_vec().unwrap());
        match parse_instruction(&test_data) {
            Ok(SarosInstruction::Query(_)) => {}
            Ok(_) => panic!("Discriminator matched wrong instruction type"),
            Err(e) => {
                let error_msg = e.to_string();
                assert!(
                    !error_msg.contains("Unknown instruction discriminator"),
                    "Should recognize discriminator for {}",
                    stringify!(Query)
                );
            }
        }
    }
    #[test]
    fn test_discriminator_recognition() {
        let test_args = CreateFeedIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(CreateFeedIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &CREATE_FEED_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                SarosInstruction::CreateFeed(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, CREATE_FEED_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => {
                    panic!("Parsed instruction should be {}", stringify!(CreateFeed))
                }
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(CreateFeed),
                    e
                );
            }
        }
        let test_args = SubmitFeedIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(SubmitFeedIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &SUBMIT_FEED_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                SarosInstruction::SubmitFeed(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, SUBMIT_FEED_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => {
                    panic!("Parsed instruction should be {}", stringify!(SubmitFeed))
                }
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(SubmitFeed),
                    e
                );
            }
        }
        let test_args = QueryIxArgs::default();
        let test_data = test_args.try_to_vec().unwrap();
        let expected_size = std::mem::size_of::<[u8; 8]>();
        assert!(
            test_data.len() >= expected_size,
            "Test data length should be at least {} bytes for {}",
            expected_size,
            stringify!(QueryIxArgs)
        );
        assert_eq!(
            &test_data[0..8],
            &QUERY_IX_DISCM,
            "Discriminator should match expected value"
        );
        let result = parse_instruction(&test_data);
        match result {
            Ok(instruction) => match instruction {
                SarosInstruction::Query(parsed_args) => {
                    assert_eq!(
                        parsed_args.discriminator, QUERY_IX_DISCM,
                        "Parsed discriminator should match expected"
                    );
                }
                _ => panic!("Parsed instruction should be {}", stringify!(Query)),
            },
            Err(e) => {
                panic!(
                    "Should successfully parse instruction {}: {}",
                    stringify!(Query),
                    e
                );
            }
        }
    }
    #[test]
    fn test_invalid_discriminator() {
        let invalid_data = vec![255u8; 40];
        let result = parse_instruction(&invalid_data);
        assert!(result.is_err(), "Should fail with invalid discriminator");
    }
    #[test]
    fn test_insufficient_data() {
        let short_data = vec![1u8; 4];
        let result = parse_instruction(&short_data);
        assert!(result.is_err(), "Should fail with insufficient data");
    }
}
